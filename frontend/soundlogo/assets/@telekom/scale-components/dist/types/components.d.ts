/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { MenuItem } from "./components/telekom/app-interfaces";
import { CollapsibleEventDetail } from "./components/collapsible/collapsible";
import { DataGridEditEventDetail, DataGridSortedEventDetail } from "./components/data-grid/data-grid";
import { DuetDatePickerChangeEvent, DuetDatePickerDirection, DuetDatePickerFocusEvent } from "@duetds/date-picker/dist/types/components/duet-date-picker/duet-date-picker";
import { DuetLocalizedText } from "@duetds/date-picker/dist/types/components/duet-date-picker/date-localization";
import { InputChangeEventDetail } from "./components/input/input";
import { BeforeCloseEventDetail } from "./components/modal/modal";
import { BeforeCloseEventDetail as BeforeCloseEventDetail1 } from "./components/notification/notification";
import { PaginationEventDirection } from "./components/pagination/pagination";
export namespace Components {
    interface AppLogo {
        "claim": boolean;
        "claimLang": string;
        "color": string;
        "focusable": boolean;
        "href"?: string;
        "logoTitle"?: string;
    }
    interface AppMegaMenu {
        "active": boolean;
        "activeRouteId": string;
        "hide": () => void;
        "isActive": boolean;
        "navigation"?: MenuItem[];
    }
    interface AppNavigationMainMobile {
        "activeRouteId": string;
        "hide": () => void;
        "navigation": MenuItem[];
    }
    interface AppNavigationSectorMobile {
        "activeSectorId"?: string;
        "hide": () => void;
        "navigation": MenuItem[];
    }
    interface AppNavigationUserMenu {
        "hide": () => void;
        "navigation": any;
        "styles": string;
    }
    interface ScaleAccordion {
        /**
          * If `true`, only one scale-collapsible within the accordion can be open at a time
         */
        "dependent": boolean;
        /**
          * If `true`, scale-collapsibles within the accordion will all be open initially, unless this is dependant
         */
        "expanded": boolean;
        /**
          * Heading level for scale-collapsible descendants
         */
        "headingLevel": number | null;
        "iconLocation"?: 'left' | 'right';
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleAlert {
        /**
          * (optional) Alert title
         */
        "headline": string;
        /**
          * (optional) Alert icon
         */
        "icon"?: string;
        /**
          * Alert method: open()
         */
        "open": () => Promise<void>;
        /**
          * (optional) Alert opened
         */
        "opened": boolean;
        /**
          * (optional) Alert size
         */
        "size"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Alert timeout
         */
        "timeout"?: boolean | number;
        /**
          * (optional) Alert variant
         */
        "variant"?: string;
    }
    interface ScaleAppFooter {
        "copyright"?: string;
        "footerNavigation"?: any;
        "logoAriaDescribedBy"?: string;
        "logoClick"?: any;
        "logoHref"?: string;
        "logoTitle"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        "variant"?: string;
    }
    interface ScaleAppHeader {
        "activeRouteId": string;
        "activeSectorId"?: string;
        "addonNavigation"?: any;
        "claimLang": string;
        "iconNavigation"?: any;
        "isMegaMenuVisible"?: boolean;
        "isMobileMenuVisible"?: boolean;
        "logoAriaDescribedBy"?: string;
        "logoClick"?: any;
        "logoHideTitle"?: boolean;
        "logoHref"?: string;
        "logoTitle"?: string;
        "mainNavigation"?: any;
        "megaMenuVisible"?: boolean;
        "mobileMenuVisible"?: boolean;
        "portalName"?: string;
        "sectorNavigation"?: any;
        "sticky"?: boolean;
        "userMenuAriaLabel"?: string;
        "userNavigation"?: any;
    }
    interface ScaleAppShell {
        "activeRouteId"?: string;
        "activeSectorId"?: string;
        "addonNavigation"?: any;
        "claimLang"?: string;
        "iconNavigation"?: any;
        "logoAriaDescribedBy"?: string;
        "logoClick"?: any;
        "logoHideTitle"?: boolean;
        "logoHref"?: string;
        "logoTitle"?: string;
        "mainNavigation"?: any;
        "portalName"?: string;
        "sectorNavigation"?: any;
        "sticky"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        "userMenuAriaLabel"?: string;
        "userNavigation"?: any;
    }
    interface ScaleBadge {
        /**
          * a11y text for getting meaningful value.
         */
        "ariaLabelTranslation": string;
        "count": number;
        "label": string;
        "labelVisuallyHidden": boolean;
    }
    interface ScaleBreadcrumb {
        "separator"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleButton {
        /**
          * (optional) If `true`, the button is disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Name of a file to be downloaded
         */
        "download"?: string;
        /**
          * (optional) When present, an <a> tag will be used
         */
        "href"?: string;
        /**
          * (optional) Set to `true` when the button contains only an icon
         */
        "iconOnly"?: boolean;
        /**
          * (optional) Icon position related to the label
         */
        "iconPosition": 'before' | 'after';
        /**
          * (optional) Button aria-label
         */
        "innerAriaLabel"?: string;
        /**
          * (optional) Set `tabindex` in the inner button or link element
         */
        "innerTabindex"?: number;
        /**
          * (optional) The name of the button, submitted as a pair with the button's `value` as part of the form data
         */
        "name"?: string;
        "setFocus": () => Promise<void>;
        /**
          * (optional) The size of the button
         */
        "size"?: 'small' | 'large';
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) The target attribute for the <a> tag
         */
        "target"?: string;
        /**
          * (optional) Button type
         */
        "type"?: 'reset' | 'submit' | 'button';
        /**
          * (optional) Defines the value associated with the button's `name`
         */
        "value"?: string;
        /**
          * (optional) Button variant
         */
        "variant"?: string;
    }
    interface ScaleCallout {
        /**
          * (optional) CSS `bottom` value for absolute position
         */
        "bottom"?: string;
        /**
          * (optional) CSS `left` value for absolute position
         */
        "left"?: string;
        /**
          * (optional) CSS `right` value for absolute position
         */
        "right"?: string;
        /**
          * (optional) Degree of rotation
         */
        "rotation"?: number;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) CSS `top` value for absolute position
         */
        "top"?: string;
        /**
          * (optional) Color variant of the callout
         */
        "variant"?: 'primary' | 'blue' | 'white' | 'black' | string;
    }
    interface ScaleCard {
        /**
          * (optional) Label of the card
         */
        "label"?: string;
        /**
          * (optional) Link card rel
         */
        "rel"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Link card target
         */
        "target"?: string;
        /**
          * (optional) Link card
         */
        "to"?: string;
    }
    interface ScaleCarousel {
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) carousel display direction
         */
        "vertical"?: boolean;
    }
    interface ScaleChartStackCard {
        /**
          * Chart Data
         */
        "data": string | Array<Record<'type' | 'value' | 'percentage', string>>;
        /**
          * Chart Title
         */
        "heading": string;
    }
    interface ScaleCheckbox {
        /**
          * (optional) Input label output
         */
        "ariaLabelCheckbox"?: string;
        /**
          * (optional) Active switch
         */
        "checked"?: boolean;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Hides the specified label visually
         */
        "hideLabel"?: boolean;
        /**
          * (optional) indeterminate
         */
        "indeterminate"?: boolean;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input status
         */
        "invalid"?: boolean;
        /**
          * (optional) Input label
         */
        "label": string;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * (optional) Input required
         */
        "required"?: boolean;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Input value
         */
        "value"?: string;
    }
    interface ScaleCheckboxGroup {
        /**
          * @deprecated - ariaLabelCheckboxGroup should replace ariaLabel
         */
        "ariaLabelCheckboxGroup"?: string;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input status
         */
        "invalid"?: boolean;
        /**
          * (optional) Input label
         */
        "label": string;
        /**
          * (optional) Input name
         */
        "name"?: string;
        "selectText"?: string;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        "unselectText"?: string;
        /**
          * (optional) Input value
         */
        "value"?: string;
    }
    interface ScaleChip {
        /**
          * @deprecated (optional) chip aria-checked - should be derived from selected state attribute
         */
        "ariaCheckedState"?: boolean;
        /**
          * (optional) chip aria-role
         */
        "ariaRoleTitle"?: | 'switch'
    | 'radio'
    | 'option'
    | 'menuitemreadio'
    | 'menuitemcheckbox'
    | 'checkbox';
        /**
          * (optional) chip disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Dismiss label
         */
        "dismissText"?: string;
        /**
          * (optional) chip label
         */
        "label"?: string;
        /**
          * (optional)
         */
        "selected"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional)
         */
        "type"?: 'dynamic' | 'persistent';
        /**
          * (optional)
         */
        "variant"?: 'standard' | 'outline';
    }
    interface ScaleCollapsible {
        /**
          * Set to `true` to expand
         */
        "expanded": boolean;
        /**
          * Default aria-level for heading
         */
        "headingLevel": number;
        "iconLocation"?: 'left' | 'right';
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleDataGrid {
        /**
          * Input fields config array
         */
        "fields": any;
        /**
          * (optional) Freeze header row from scrolling
         */
        "freezeHeader"?: boolean;
        /**
          * (optional) Heading string
         */
        "heading"?: string;
        /**
          * (optional) Set static table height, by default will auto-resize
         */
        "height"?: string;
        /**
          * (optional) Set to true to remove border
         */
        "hideBorder"?: boolean;
        /**
          * (optional) Set to true to hide header row
         */
        "hideHeader"?: boolean;
        /**
          * (optional) Set to true to remove info footer block including pagination and selection status
         */
        "hideInfo"?: boolean;
        /**
          * (optional) Set to true to hide settings menu
         */
        "hideMenu"?: boolean;
        /**
          * (optional) set localization for sort, toggle and select/deselect table Default is English.
         */
        "localization"?: {
    sortBy: string;
    toggle: string;
    select: string;
  };
        /**
          * (optional) Set to true to add numbers column
         */
        "numbered"?: boolean;
        /**
          * (optional) Set number of rows to display per pagination page
         */
        "pageSize"?: number;
        /**
          * Input data array
         */
        "rows": any;
        /**
          * (optional) Set to true to add selection column
         */
        "selectable"?: boolean;
        /**
          * Read-only selection array - populated with raw data from selected rows
         */
        "selection": string[];
        /**
          * (optional) Shade every second row darker
         */
        "shadeAlternate"?: boolean;
        /**
          * (optional) Title for sortable columns
         */
        "sortableColumnTitle"?: string;
        /**
          * (optional) Injected css styles
         */
        "styles": any;
        /**
          * (optional) Set to false to hide table, used for nested tables to re-render upon toggle
         */
        "visible"?: boolean;
    }
    interface ScaleDatePicker {
        /**
          * Date adapter, for custom parsing/formatting. Must be object with a `parse` function which accepts a `string` and returns a `Date`, and a `format` function which accepts a `Date` and returns a `string`. Default is IS0-8601 parsing and formatting.
         */
        "dateAdapter"?: any;
        /**
          * Forces the opening direction of the calendar modal to be always left or right. This setting can be useful when the input is smaller than the opening date picker would be as by default the picker always opens towards right.
         */
        "direction": DuetDatePickerDirection;
        /**
          * Makes the date picker input component disabled. This prevents users from being able to interact with the input, and conveys its inactive state to assistive technologies.
         */
        "disabled": boolean;
        /**
          * Which day is considered first day of the week? `0` for Sunday, `1` for Monday, etc. Default is Monday.
         */
        "firstDayOfWeek"?: any;
        /**
          * (optional) Helper text
         */
        "helperText"?: string;
        /**
          * Hide the calendar modal. Set `moveFocusToButton` to false to prevent focus returning to the date picker's button. Default is true.
         */
        "hide": (moveFocusToButton?: boolean) => Promise<void>;
        /**
          * Adds a unique identifier for the date picker input. Use this instead of html `id` attribute.
         */
        "identifier": string;
        /**
          * Defines a specific role attribute for the date picker input.
         */
        "innerRole": string;
        /**
          * (optional) invalid status
         */
        "invalid"?: boolean;
        /**
          * (optional) Label
         */
        "label": string;
        /**
          * Button labels, day names, month names, etc, used for localization. Default is English.
         */
        "localization"?: DuetLocalizedText & {
    today: string;
  };
        /**
          * Maximum date allowed to be picked. Must be in IS0-8601 format: YYYY-MM-DD. This setting can be used alone or together with the min property.
         */
        "max": string;
        /**
          * Minimum date allowed to be picked. Must be in IS0-8601 format: YYYY-MM-DD. This setting can be used alone or together with the max property.
         */
        "min": string;
        /**
          * Name of the date picker input.
         */
        "name": string;
        /**
          * (optional) Input place holder
         */
        "placeholder"?: string;
        /**
          * @deprecated in v3 in favor of localization.calendarHeading
         */
        "popupTitle": string;
        /**
          * Should the input be marked as required?
         */
        "required": boolean;
        /**
          * Sets focus on the date picker's input. Use this method instead of the global `focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * Show the calendar modal, moving focus to the calendar inside.
         */
        "show": () => Promise<void>;
        /**
          * @deprecated
         */
        "size"?: string;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * Date value. Must be in IS0-8601 format: YYYY-MM-DD.
         */
        "value": string;
        "variant"?: 'informational' | 'warning' | 'danger' | 'success';
    }
    interface ScaleDivider {
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Divider vertical
         */
        "vertical"?: boolean;
    }
    interface ScaleDropdown {
        /**
          * (optional) Makes type `select` behave as a controlled component in React
         */
        "controlled"?: boolean;
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) to avoid displaying the label
         */
        "hideLabelVisually"?: boolean;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input status
         */
        "invalid"?: boolean;
        /**
          * (optional) Input label
         */
        "label": string;
        /**
          * (optional) select multiple options
         */
        "multiple"?: boolean;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * (optional) Input required
         */
        "required"?: boolean;
        /**
          * @deprecated
         */
        "size"?: string;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) input background transparent
         */
        "transparent"?: boolean;
        /**
          * (optional) Input value
         */
        "value"?: string | number | null;
        /**
          * (optional) Variant
         */
        "variant"?: 'informational' | 'warning' | 'danger' | 'success';
        /**
          * (optional) the number of visible options in a select drop-down list
         */
        "visibleSize"?: number;
    }
    interface ScaleDropdownSelect {
        /**
          * (optional) Screen reader text appended to the selected element
         */
        "ariaLabelSelected"?: string;
        "comboboxId"?: string;
        "disabled"?: boolean;
        /**
          * @see {
          * @url https://floating-ui.com/docs/computePosition#strategy}
         */
        "floatingStrategy": 'absolute' | 'fixed';
        /**
          * (optional) Text displayed in high contrast mode only to indicate disabled state
         */
        "hcmLabelDisabled"?: string;
        "helperText"?: string;
        /**
          * (optional) to hide the label
         */
        "hideLabelVisually"?: boolean;
        "invalid"?: boolean;
        "label": string;
        "name"?: string;
        "readonly"?: boolean;
        "transparent"?: boolean;
        "value": any;
        "variant"?: 'informational' | 'warning' | 'danger' | 'success';
    }
    interface ScaleDropdownSelectItem {
        "disabled"?: boolean;
        "focused"?: boolean;
        "selected"?: boolean;
        "value"?: any;
    }
    interface ScaleGrid {
        /**
          * (optional) Set amount of columns in container
         */
        "columns"?: string;
        /**
          * (optioanl) Set gutter between rows
         */
        "gutterX"?: string;
        /**
          * (optional) Set gutter between columns
         */
        "gutterY"?: string;
        /**
          * (optioanl) Set max-width to contaier
         */
        "maxWidth"?: string;
        /**
          * (optioanl) Set padding to container
         */
        "spacing"?: string;
    }
    interface ScaleGridItem {
        /**
          * (optional) Set starting column
         */
        "offset"?: string;
        /**
          * (optional) Set size of column
         */
        "size"?: string;
    }
    interface ScaleHelperText {
        /**
          * (optional) Helper text
         */
        "helperText"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "variant"?: | 'neutral'
    | 'informational'
    | 'warning'
    | 'danger'
    | 'success';
    }
    interface ScaleIcon {
        /**
          * (optional) When using the icon as standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) If `true` the svg element will get aria-hidden="true"
         */
        "decorative"?: boolean;
        /**
          * The SVG `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * A name that will be used to reference an SVG object defined elsewhere, via `<use xlink:href="">`. `icon-` will be prepended to the name, so if you pass `circle`, it will look for for the `icon-circle` id e.g. `<use xlink:href="#icon-circle">`. If there is no element in the document with the id by the name provided, this component will render empty.
         */
        "name"?: string;
        /**
          * A path shape to be used in the `d` attribute of a path element.
         */
        "path"?: string;
        /**
          * Will be used for both `width` and `height`, all icons are square. Keep in mind the `viewBox` attribute is set to "0 0 24 24".
         */
        "size"?: number;
        /**
          * The SVG `stroke` attribute
         */
        "stroke"?: string;
    }
    interface ScaleIconActionAdd {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionAddCard {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionArrange {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionArrowDown {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionArrowLeft {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionArrowRight {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionArrowUp {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionAutoLogin {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionBackspace {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionBackward {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionChangelog {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionCheckmark {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionCircleAdd {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionCircleClose {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionClose {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionCompare {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionCopyPaste {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionCutPaste {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionDisabledMicrophone {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionDownload {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionDownloadFromCloud {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionDragAndDrop {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionEdit {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionExport {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionFastForward {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionFastForwardNb {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionFavorite {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionFilter {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionFilter2 {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionForward {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionFullScreen {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionHidePassword {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionImport {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionInstall {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionLaunch {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionLightDarkMode {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionLink {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionLogout {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionLoop {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionMenu {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionMicrophone {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionMinimizeScreen {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionMinus {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionMinusCircle {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionMore {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionMove {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionMute {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionNotification {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionPause {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionPauseNb {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionPin {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionPlay {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionPlayNb {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionPopUpWindow {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionPower {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionPreviousNb {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionPrint {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionPublish {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionRandom {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionRecordNb {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionRefresh {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionRemove {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionReply {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionReplyAll {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionReplyForward {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionRestart {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionSearch {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionSend {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionShare {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionShoppingCart {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionShowPassword {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionSort {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionSoundOn {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionStar {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionStreamOn {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionSuccess {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionThumbsDown {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionThumbsUp {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionTilesAdd {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionUpload {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionUploadToCloud {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionVolumeDown {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionVolumeUp {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionZoomIn {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionZoomOut {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconAlertAntivirusProtection {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconAlertCompliance {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconAlertCyberSecurity {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconAlertError {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconAlertHelp {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconAlertHighPriorityEmail {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconAlertImprintDataprivacy {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconAlertInformation {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconAlertLegal {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconAlertNetworkDisrupted {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconAlertPasswordBreaking {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconAlertSecurity {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconAlertTrafficDisruption {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconAlertUnknown {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconAlertWarning {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationAvailable {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationBlog {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationCallIncoming {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationCallOutgoing {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationChat {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationChatBadge {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationEmail {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationEndCall {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationFeedback {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationFlightMode {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationHappyPerson {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationInbox {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationLandingMobileContactClient {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationLoyaltyEarned {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationLoyaltyLost {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationMailOpened {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationMessage {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationMessageIncoming {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationMessageOutgoing {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationMmsIncoming {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationMmsOutgoing {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationMobilePhoneNumber {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationNetworkSignal {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationNewEmail {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationOutbox {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationPhoneNumber {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationRecipient {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationSaveEmailsToDrafts {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationSms {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationSpam {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationVoiceMessage {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContent2faGoogleAuth {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentAchievement {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentAndroid {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentApple {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentApplications {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentAvailableKeychain {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentBank {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentBiometric {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentBirthday {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentBookmark {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentCalendar {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentClipboard {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentClock {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentCloudSecurity {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentCodeScanner {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentColorSelection {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentCountry {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentCreditCard {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentDataVisualisation {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentDelivery {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentDigitalBanking {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentDigitalMedia {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentDiscount {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentESim {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentEu {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentFaceMask {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentFeatures {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentFlexibleTariffs {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentFolder {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentFood {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentGenderDiverse {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentGenderFemale {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentGenderMale {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentHalfRating {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentHeart {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentHeight {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentHistory {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentHourGlass {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentIban {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentId {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentInStock {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentInternational {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentInternationalSms {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentInterview {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentKey {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentLanguage {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentLock {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentLoyalty {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentMediaFolder {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentMoneyAt {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentMusic {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentNews {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentOutOfStock {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentPersonWalking {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentPrepaidActivate {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentPriceTag {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentRatings {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentRoute {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentRss {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentShop {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentSignal {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentSimCard {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentSmile {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentSortIndicatorDown {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentSortIndicatorMiniDown {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentSortIndicatorUp {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentSortIndicatorUpMini {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentStatusInactive {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentStatusRecurring {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentStopwatch {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentSupportChat {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentSustainable {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentTariffs {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentThreats {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentTodoList {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentTransport {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentUnlock {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentVoucher {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentWaiting {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentWallet {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceAddDevice {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceCamera {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceChangeCamera {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceComputer {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceDeviceController {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceDeviceEthernet {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceDeviceMesh {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceDevicePhone {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceDeviceRouter {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceDeviceTv {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceDeviceWatch {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceDongle {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceFax {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceFixedLineServices {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceGameController {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceMediaReceiver {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceMobileData {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceMobileDevicesCombination {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceMobileEquipment {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceMobilePhoneInsurance {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceMobileServices {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceNoCamera {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDevicePhoneWithMobilePlan {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDevicePhoneWithoutMobilePlan {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDevicePhotoCamera {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceRemoteController {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceReplacementMobilephone {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceScreenRotate {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceServer {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceSmartSpeaker {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceTablet {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceTvAndMobile {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceTwitchingClosedState {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceTwitchingOpenState {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomeHome {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomeInternetAtHome {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomeIot {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomeLightBulb {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomeNetworkSecure {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomeNoWifi {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomePowerSocket {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomePreferredWifi {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomeReducedWifi {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomeSlowWifi {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomeSmarthome {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomeUnableToConnectToRouter {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomeWifi {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomeWifiConnected {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomeWifiConnectionError {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomeWifiManualLogin {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomeWifiNoWiredInternet {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationCircleTopUp {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationCollapseDown {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationCollapseUp {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationDoubleLeft {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationDoubleRight {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationExternalLink {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationInternalLink {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationLeft {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationLeftCondensed {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationLocation {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationMap {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationMyLocation {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationRight {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationRightCondensed {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationStart {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationTopUp {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconProcessOrderStatus {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconProcessProcessing {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconProcessSepaTransaction {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconServiceDevicesService {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconServiceMaintanance {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconServiceManual {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconServiceOneTimePassword {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconServiceServices {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconServiceSettings {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconServiceSupport {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconServiceVpn {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconTProduct2faTelekomApp {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconTProductMagentaCloud {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconTProductMagentaTv {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconTProductMagentaone {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconTProductMeasureInternetSpeed {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconTProductSeamlessConnectivity {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconTProductTelekom1t1 {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconTProductTelekomPlan {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconTProductTelekomShopB {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconTProductUsage {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconTProductVoice {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileAdmin {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileAnalytics {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileAttachment {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileAudioFile {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileBilling {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileBoy {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileBussinesUsers {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileCommunities {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileContacts {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileContactsFromCloud {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileContracts {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileDraftFile {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileFamilies {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileFamily {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileFile {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileFileCollection {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileGirl {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileHandshake {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileHtmlFile {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileIdCard {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileImageFile {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileLogout {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileMan {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFilePdfFile {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileSwitchUsers {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileUser {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileVideos {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileWoman {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherCloudy {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherCloudyRain {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherCloudySleet {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherCloudySnow {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherCloudyThunderRain {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherCloudyThunderSnow {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherHeavySleet {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherHeavySnow {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherMoonClear {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherMoonCloudyA {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherMoonCloudyB {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherMoonRain {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherMoonSleet {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherMoonSnow {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherMoonThunderRain {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherMoonThunderSnow {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherOvercast {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherRain {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherSunny {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherThunderRain {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherThunderSnow {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleInput {
        /**
          * (optional) Active switch
         */
        "checked"?: boolean;
        /**
          * (optional) textarea column
         */
        "cols"?: number;
        /**
          * (optional) Makes type `select` behave as a controlled component in React
         */
        "controlled"?: boolean;
        /**
          * (optional) Input counter
         */
        "counter"?: boolean;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Input checkbox checked icon
         */
        "icon"?: string;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input status
         */
        "invalid"?: boolean;
        /**
          * (optional) Input label
         */
        "label": string;
        /**
          * (optional) Input max length
         */
        "maxLength"?: number;
        /**
          * (optional) Input min length
         */
        "minLength"?: number;
        /**
          * (optional) select multiple options
         */
        "multiple"?: boolean;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * (optional) Input placeHolder
         */
        "placeholder"?: string;
        /**
          * (optional) Input required
         */
        "required"?: boolean;
        /**
          * (optional) textarea resize
         */
        "resize"?: 'unset' | 'none' | 'vertical' | 'horizontal';
        /**
          * (optional) textarea row
         */
        "rows"?: number;
        /**
          * (optional) Input size
         */
        "size"?: string;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) input background transparent
         */
        "transparent"?: boolean;
        /**
          * (optional) Input type
         */
        "type"?: | 'email'
    | 'hidden'
    | 'number'
    | 'password'
    | 'tel'
    | 'text'
    | 'checkbox'
    | 'radio'
    | 'select'
    | 'textarea'
    | 'url';
        /**
          * (optional) Input value
         */
        "value"?: string | number | null;
        /**
          * (optional) Input label variant
         */
        "variant"?: 'animated' | 'static';
        /**
          * (optional) the number of visible options in a select drop-down list
         */
        "visibleSize"?: number;
    }
    interface ScaleLink {
        /**
          * (optional) Disabled link
         */
        "disabled"?: boolean;
        /**
          * (optional) Download declaration
         */
        "download"?: string;
        /**
          * (optional) Link href
         */
        "href": string;
        /**
          * (optional)
         */
        "hreflang"?: string;
        /**
          * (optional) Chnage icon/content slot order
         */
        "iconPosition"?: 'before' | 'after';
        /**
          * (optional) Set `tabindex` in the inner button or link element
         */
        "innerTabindex"?: number;
        /**
          * (optional) Remove the initial line from the text (can also be achieved via `--line-thickness-initial: 0`) Remove the line for every state with `--line-thickness: 0`
         */
        "omitUnderline"?: boolean;
        /**
          * (optional)
         */
        "ping"?: string;
        /**
          * (optional)
         */
        "referrerpolicy"?: ReferrerPolicy;
        /**
          * (optional)
         */
        "rel"?: string;
        "setFocus": () => Promise<void>;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional)
         */
        "target"?: '_self' | '_blank' | '_parent' | '_top';
        /**
          * (optional)
         */
        "type"?: string;
    }
    interface ScaleList {
        /**
          * (optional) Make the list ordered (ol)
         */
        "ordered"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleListItem {
        /**
          * Index number, useful only for styling the `ordered` type
         */
        "index"?: number;
        /**
          * If `false`, no marker or left padding will be visible
         */
        "marker": boolean;
        /**
          * Whether this is a child of an ordered scale-list, gets set automatically by its parent
         */
        "ordered"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleLoadingSpinner {
        "accessibilityTitle": string;
        "alignment": 'horizontal' | 'vertical';
        "size": 'small' | 'large';
        "text": string;
        "variant": 'white' | 'primary';
    }
    interface ScaleLogo {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        "focusable": boolean;
        /**
          * (optional) Set a link
         */
        "href"?: string;
        /**
          * @deprecated ; (optional) Language of the logo text/ claimOff showes just the T Logo
         */
        "language"?: | 'de'
    | 'en'
    | 'cz'
    | 'hr'
    | 'hu'
    | 'me'
    | 'mk_lat'
    | 'mk_kyr'
    | 'ro'
    | 'sk'
    | string;
        /**
          * FIXME is this actually working? probably not because of shadow DOM?
         */
        "logoAriaDescribedBy"?: string;
        /**
          * FIXME this is also probably not working properly, see below (it needs a string value)
         */
        "logoAriaHidden"?: boolean;
        /**
          * (optional) Hide all logo related titles
         */
        "logoHideTitle"?: boolean;
        /**
          * (optional) set logo specific title
         */
        "logoTitle"?: string;
        "scrollIntoViewOnFocus": boolean;
        /**
          * (optional) The height in pixels
         */
        "size"?: number;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Set transparent background
         */
        "transparent": boolean;
        /**
          * (optional) Variant/color of the logo text and logo
         */
        "variant": 'magenta' | 'white';
    }
    interface ScaleLogoSvg {
        /**
          * @deprecated (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        "focusable": boolean;
        "innerRole"?: 'link' | 'img';
        /**
          * (optional) Hide all logo related titles
         */
        "logoHideTitle"?: boolean;
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "logoTitle"?: string;
    }
    interface ScaleMenuFlyout {
        /**
          * (optional) Determines whether the flyout should close when a menu item is selected
         */
        "closeOnSelect": boolean;
        /**
          * (optional) Set preference for where the menu appears, space permitting
         */
        "direction": | 'bottom-right'
    | 'bottom-left'
    | 'top-right'
    | 'top-left'
    | 'right'
    | 'left';
        /**
          * (optional) Injected styles
         */
        "styles"?: string;
        /**
          * (optional) Determines whether the flyout trigger should get the aria-haspopup attribute
         */
        "triggerHasPopup": boolean;
    }
    interface ScaleMenuFlyoutDivider {
        /**
          * (optional) Injected styles
         */
        "styles"?: string;
    }
    interface ScaleMenuFlyoutItem {
        /**
          * (optional) Mark as active
         */
        "active"?: boolean;
        /**
          * (optional) Set to true to display arrow icon suffix
         */
        "cascade"?: boolean;
        /**
          * (optional) Whether the item should behave as a checkbox
         */
        "checkable"?: 'checkbox' | 'radio' | null;
        /**
          * (optional) Set to true to display check prefix, false to display empty prefix
         */
        "checked"?: boolean;
        /**
          * (optional) Disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Injected styles
         */
        "styles"?: string;
        "triggerEvent": (event: KeyboardEvent | MouseEvent, closeOnSelect?: boolean) => Promise<void>;
        /**
          * (optional) value
         */
        "value"?: string;
    }
    interface ScaleMenuFlyoutList {
        "active": boolean;
        /**
          * (optional) set to true when using in telekom-brand-header
         */
        "brandHeaderDropdown": boolean;
        "close": (silent?: boolean) => Promise<void>;
        /**
          * (optional) Determines whether the flyout should close when a menu item is selected
         */
        "closeOnSelect": boolean;
        /**
          * (optional) Set preference for where the menu appears, space permitting
         */
        "direction": | 'bottom-right'
    | 'bottom-left'
    | 'top-right'
    | 'top-left'
    | 'right'
    | 'left';
        "open": () => Promise<void>;
        "opened": boolean;
        /**
          * (optional) set to true to prevent flipping orientation when off the screen vertically
         */
        "preventFlipVertical": boolean;
        "setFocus": () => Promise<void>;
        /**
          * (optional) Injected styles
         */
        "styles"?: string;
        "trigger": () => HTMLElement;
    }
    interface ScaleModal {
        /**
          * (optional) Alignment of action buttons
         */
        "alignActions"?: 'right' | 'left';
        /**
          * (optional) allow to inject css style {overflow: hidden} to body when modal is open
         */
        "allowInjectingStyleToBody": boolean;
        /**
          * (optional) Label for close button
         */
        "closeButtonLabel"?: string;
        /**
          * (optional) title for close button
         */
        "closeButtonTitle"?: string;
        /**
          * (optional) Transition duration
         */
        "duration"?: number;
        /**
          * Modal heading
         */
        "heading": string;
        /**
          * (optional) hide close button
         */
        "omitCloseButton"?: boolean;
        /**
          * (optional) If `true`, the Modal is open.
         */
        "opened"?: boolean;
        /**
          * (optional) Modal size
         */
        "size"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleNavIcon {
        "active": boolean;
        "badge": boolean;
        "badgeLabel": number;
        "clickLink": any;
        /**
          * (optional) href value
         */
        "href"?: string;
        "icon": string;
        /**
          * (optional) if this item is active
         */
        "isActive": boolean;
        "isMobileMenuOpen"?: boolean;
        "mobileMenuOpen"?: boolean;
        "refMobileMenuToggle"?: any;
        "refMobileUserMenuToggle"?: any;
        "refUserMenuToggle"?: any;
    }
    interface ScaleNavMain {
        /**
          * (optional) if this item is active
         */
        "active": boolean;
        "clickLink": any;
        /**
          * (optional) href value
         */
        "href"?: string;
        /**
          * (optional) inner element id
         */
        "innerId"?: string;
        "isActive": boolean;
        "isMegaMenuVisible"?: boolean;
        /**
          * (optional) if this mega-menu is visible
         */
        "megaMenuVisible"?: boolean;
        /**
          * (optional) name value
         */
        "name": string;
        "popup": boolean;
        /**
          * (optional) target value
         */
        "target"?: string;
    }
    interface ScaleNavSegment {
        "active": boolean;
        /**
          * (optional) href value
         */
        "href"?: string;
        /**
          * (optional) if this item is active
         */
        "isActive": boolean;
    }
    interface ScaleNotification {
        /**
          * (optional) string prepended to the heading
         */
        "ariaHeading"?: string;
        /**
          * (optional) Label for close button
         */
        "closeButtonLabel"?: string;
        /**
          * (optional) `title` for close button
         */
        "closeButtonTitle"?: string;
        /**
          * (optional) Time in milliseconds until it closes by itself
         */
        "delay"?: number;
        /**
          * (optional) Show the close button
         */
        "dismissible"?: boolean;
        /**
          * Heading
         */
        "heading": string;
        /**
          * Default aria-level for heading
         */
        "headingLevel": number;
        /**
          * @deprecated - ariaRole should replace innerAriaLive
         */
        "innerAriaLive"?: string;
        /**
          * (optional) string prepended to the heading
         */
        "innerRole"?: 'alert' | 'status';
        /**
          * (optional) Visible
         */
        "opened"?: boolean;
        /**
          * (optional) Injected styles
         */
        "styles"?: string;
        /**
          * (optional) Type
         */
        "type"?: 'inline' | 'banner' | 'toast';
        /**
          * (optional) Variant
         */
        "variant"?: 'danger' | 'warning' | 'success' | 'informational';
    }
    interface ScaleNotificationBadge {
        /**
          * (optional) Handle click on the badge and surroundet slot elements
         */
        "clickHandler": any;
        /**
          * (optional) Text that is displayed in the badge
         */
        "label": number;
        /**
          * (optional) Maximal number of characters displayed in the badge
         */
        "maxCharacters": number;
        /**
          * (optional) Setting/Slotcontent in which the badge is used
         */
        "type": 'icon' | 'text' | 'nav-icon';
    }
    interface ScaleNotificationBanner {
        "autoHide"?: boolean;
        "autoHideDuration"?: number;
        /**
          * (optional) Label for close button
         */
        "closeButtonLabel"?: string;
        /**
          * (optional) Title for close button
         */
        "closeButtonTitle"?: string;
        "dismissible"?: boolean;
        "href": string;
        "open": () => Promise<void>;
        "opened": boolean;
        "variant"?: 'informational' | 'success' | 'warning' | 'error';
    }
    interface ScaleNotificationMessage {
        "autoHide"?: boolean;
        "autoHideDuration"?: number;
        /**
          * (optional) Label for close button
         */
        "closeButtonLabel"?: string;
        /**
          * (optional) Title for close button
         */
        "closeButtonTitle"?: string;
        "dismissible"?: boolean;
        "open": () => Promise<void>;
        "opened": boolean;
        "variant"?: 'informational' | 'success' | 'warning' | 'error';
    }
    interface ScaleNotificationToast {
        /**
          * (optional) Alignment choose for top and bottom
         */
        "alignment"?: | 'bottom-right'
    | 'bottom-left'
    | 'top-right'
    | 'top-left';
        /**
          * (optional) Animated toast
         */
        "animated"?: boolean;
        /**
          * (optional) Toast auto hide
         */
        "autoHide"?: boolean;
        /**
          * (optional) Toast auto hide duration
         */
        "autoHideDuration"?: number;
        /**
          * (optional) Label for close button
         */
        "closeButtonLabel"?: string;
        /**
          * (optional) Title for close button
         */
        "closeButtonTitle"?: string;
        /**
          * (optional) Toast fade duration
         */
        "fadeDuration"?: number;
        "href": string;
        /**
          * Toast method: open()
         */
        "open": () => Promise<void>;
        /**
          * (optional) Toast opened
         */
        "opened"?: boolean;
        /**
          * (optional) Toast position right
         */
        "positionHorizontal"?: number;
        /**
          * (optional) Toast position at the top
         */
        "positionVertical"?: number;
        /**
          * (do not use) it is a helper prop for storybook
         */
        "story"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Toast variant
         */
        "variant"?: 'error' | 'warning' | 'success' | 'informational';
    }
    interface ScalePagination {
        /**
          * (optional) translation to 'Go to first page'
         */
        "ariaLabelFirstPage": string;
        /**
          * (optional) translation to 'Go to last page'
         */
        "ariaLabelLastPage": string;
        /**
          * (optional) translation to 'Go to next page'
         */
        "ariaLabelNextPage": string;
        /**
          * (optional) translation to 'Go to previous page'
         */
        "ariaLabelPreviousPage": string;
        /**
          * (optional) Set to true to hide top and bottom borders
         */
        "hideBorder"?: boolean;
        /**
          * (optional) Deprecated; hideBorder should replace hideBorders
         */
        "hideBorders"?: boolean;
        /**
          * (optional) Set number of rows/elements to show per page
         */
        "pageSize"?: number;
        /**
          * @deprecated - size should replace small
         */
        "size": 'small' | 'large';
        /**
          * @deprecated - size should replace small
         */
        "small": boolean;
        /**
          * (optional) Index of first element to display
         */
        "startElement"?: number;
        /**
          * (optional) Injected styles
         */
        "styles"?: string;
        /**
          * (optional) Total number of rows/elements used to calculate page displays
         */
        "totalElements"?: number;
    }
    interface ScaleProgressBar {
        /**
          * (optional) Progress bar busy switch
         */
        "busy"?: boolean;
        /**
          * @deprecated - (optional) Progress bar customColor
         */
        "customColor"?: string;
        /**
          * (optional) Progress bar disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Progress bar error
         */
        "hasError"?: boolean;
        /**
          * (optional) Progress bar icon indicator
         */
        "icon"?: string;
        /**
          * (optional) Progress bar label
         */
        "label"?: string;
        /**
          * (optional) disables aria-live
         */
        "mute"?: boolean;
        /**
          * (required) Progress bar percentage
         */
        "percentage": number;
        /**
          * (optional) Progress bar percentage to start the animation from (default: 0)
         */
        "percentageStart": number;
        /**
          * (optional) Progress bar id
         */
        "progressBarId"?: string;
        /**
          * (optional) Progress bar percentage text
         */
        "showStatus"?: boolean;
        /**
          * (optional) Progress bar status description text
         */
        "statusDescription"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleRadioButton {
        /**
          * (optional) Input checked
         */
        "checked"?: boolean;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input status
         */
        "invalid"?: boolean;
        /**
          * (optional) Input label
         */
        "label": string;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Input value
         */
        "value"?: string | number | null;
    }
    interface ScaleRadioButtonGroup {
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Input status
         */
        "invalid"?: boolean;
        /**
          * (optional) Input label
         */
        "label": string;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
    }
    interface ScaleRatingStars {
        /**
          * a11y text for getting meaningful value. `$rating` and `$max` (deprecated `$maxRating`) are template variables and will be replaces by their corresponding properties.
         */
        "ariaLabelTranslation": string;
        /**
          * disables input
         */
        "disabled": boolean;
        /**
          * (optional) info text
         */
        "hideLabel": boolean;
        /**
          * (optional) info text
         */
        "infoText"?: string;
        /**
          * (optional) rating label
         */
        "label": string;
        /**
          * The upper limit of the rating
         */
        "max": number;
        /**
          * @deprecated ; max should be used instead of maxRating
         */
        "maxRating": number;
        /**
          * @deprecated ; The lower limit of the rating
         */
        "minRating": number;
        /**
          * Represents the current value of the rating
         */
        "rating": number;
        /**
          * makes the rating non-interactive (but still accessible)
         */
        "readonly": boolean;
        /**
          * size of the stars
         */
        "size": 'small' | 'large';
        /**
          * @deprecated ; size should be used instead of starSize
         */
        "starSize": 'small' | 'large';
    }
    interface ScaleSegment {
        "adjacentSiblings"?: | 'left'
    | 'right'
    | 'leftright';
        /**
          * a11y text for getting meaningful value. `$buttonNumber` and `$selected` are template variables and will be replaces by their corresponding properties.
         */
        "ariaDescriptionTranslation": string;
        /**
          * (optional) aria-label attribute needed for icon-only segments
         */
        "ariaLabelSegment": string;
        /**
          * (optional) translation of 'deselected
         */
        "ariaLangDeselected"?: string;
        /**
          * (optional) translation of 'selected
         */
        "ariaLangSelected"?: string;
        /**
          * (optional) If `true`, the segment is disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) position within group
         */
        "hasIcon"?: boolean;
        /**
          * (optional) position within group
         */
        "iconOnly"?: boolean;
        /**
          * (optional) position within group
         */
        "position"?: number;
        /**
          * (optional) segment's id
         */
        "segmentId"?: string;
        /**
          * (optional) If `true`, the segment is selected
         */
        "selected"?: boolean;
        /**
          * (optional) the index of the currently selected segment in the segmented-button
         */
        "selectedIndex"?: string;
        "setFocus": () => Promise<void>;
        /**
          * (optional) The size of the segment
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) position within group
         */
        "textOnly"?: boolean;
        /**
          * (optional) Segment width set to ensure that all segments have the same width
         */
        "width"?: string;
    }
    interface ScaleSegmentedButton {
        /**
          * (optional) aria-label attribute needed for icon-only buttons
         */
        "ariaLabelTranslation": string;
        /**
          * (optional) If `true`, the button is disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) If `true`, expand to container width
         */
        "fullWidth"?: boolean;
        /**
          * (optional) If `true`, show error message
         */
        "helperText"?: string;
        /**
          * (optional) If `true`, show error message
         */
        "invalid"?: boolean;
        /**
          * (optional) Button label
         */
        "label"?: string;
        "longestButtonWidth": string;
        /**
          * (optional) Allow more than one button to be selected
         */
        "multiSelect": boolean;
        /**
          * (optional) the index of the selected segment
         */
        "selectedIndex"?: number;
        /**
          * (optional) The size of the button
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleSidebarNav {
        /**
          * From mdn: A brief description of the purpose of the navigation, omitting the term "navigation", as the screen reader will read both the role and the contents of the label.
         */
        "ariaLabelSidebarNav"?: string;
        /**
          * Set to `true` to make the sidebar toggleable (useful for small screens)
         */
        "collapsible"?: boolean;
        /**
          * Label for toggle button
         */
        "collapsibleLabel"?: string;
        /**
          * Automatically set `collapsible` based on this media query
         */
        "collapsibleMediaQuery"?: string;
        /**
          * (optional) Extra styles
         */
        "styles"?: string;
    }
    interface ScaleSidebarNavCollapsible {
        /**
          * Label and icon get the active color
         */
        "active"?: boolean;
        /**
          * Bold label and icon
         */
        "bold": boolean;
        /**
          * Used normally for third level items
         */
        "condensed": boolean;
        /**
          * Set this to `true` to expand
         */
        "expanded": boolean;
        /**
          * The URL where the link should point to
         */
        "href": string;
        /**
          * The text for the button
         */
        "label": string;
        /**
          * Nesting level within the <scale-sidebar-nav> parent, gets set automatically
         */
        "nestingLevel": number;
        /**
          * (optional) Extra styles
         */
        "styles"?: string;
        /**
          * The parent wrapper
         */
        "tag"?: string;
    }
    interface ScaleSidebarNavItem {
        /**
          * Text gets the active color
         */
        "active": boolean;
        /**
          * Bold text
         */
        "bold": boolean;
        /**
          * Used normally for third level items, remove the bottom border
         */
        "condensed": boolean;
        /**
          * Mark the child link as "current" with `aria-current=page`. Provide the text hint if needed, default is: "Zurzeit aktiv"
         */
        "current": string | null | boolean;
        /**
          * Nesting level within the <scale-sidebar-nav> parent, gets set automatically
         */
        "nestingLevel": number;
        /**
          * (optional) Extra styles
         */
        "styles"?: string;
    }
    interface ScaleSlider {
        /**
          * @deprecated (optional) slider custom color
         */
        "customColor"?: string;
        /**
          * (optional) number of decimal places
         */
        "decimals"?: 0 | 1 | 2;
        /**
          * (optional) disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) helper text
         */
        "helperText"?: string;
        /**
          * (optional) Aria label for range slider
         */
        "innerAriaValueText": string;
        /**
          * (optional) slider label
         */
        "label"?: string;
        /**
          * (optional) the maximal value of the slider
         */
        "max"?: number;
        /**
          * t(optional) he minimal value of the slider
         */
        "min"?: number;
        /**
          * (optional) the name of the slider
         */
        "name"?: string;
        /**
          * (optional) adapt styles for a specific platform. Ideally done via a global `data-platform` attribute (e.g. data-platform="ios" on `body`) but browser support is not yet sufficient.
          * @see 
          * @url (https://caniuse.com/mdn-css_selectors_host-context)
         */
        "platform"?: 'ios' | 'android';
        /**
          * (optional) multi-thumb
         */
        "range"?: boolean;
        /**
          * (optional) show a mark for each step
         */
        "showStepMarks"?: boolean;
        /**
          * (optional) slider display value
         */
        "showValue"?: boolean;
        /**
          * (optional) Slider id
         */
        "sliderId"?: string;
        /**
          * (optional) the step size to increase or decrease when dragging slider
         */
        "step"?: number;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * @deprecated (optional) larger thumb
         */
        "thumbLarge"?: boolean;
        /**
          * @deprecated (optional) smaller track
         */
        "trackSmall"?: boolean;
        /**
          * (optional) slider value unit
         */
        "unit"?: string;
        /**
          * (optional) unit position
         */
        "unitPosition"?: 'before' | 'after';
        /**
          * (optional) the value of the slider
         */
        "value"?: number;
        /**
          * (optional) when `range` is true, the "from" value
         */
        "valueFrom"?: number;
        /**
          * (optional) when `range` is true, the "to" value
         */
        "valueTo"?: number;
    }
    interface ScaleSsrSlotFix {
    }
    interface ScaleSwitch {
        /**
          * (optional) Active switch
         */
        "checked"?: boolean;
        /**
          * (optional) Disabled switch
         */
        "disabled"?: boolean;
        /**
          * (optional) Input id
         */
        "inputId"?: string;
        /**
          * (optional) switch label
         */
        "label"?: string;
        /**
          * (optional) Input name
         */
        "name"?: string;
        "size"?: 'small' | 'large';
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleTabHeader {
        /**
          * True for a disabled Tabnavigation
         */
        "disabled"?: boolean;
        /**
          * (optional) Whether the tab is selected
         */
        "selected"?: boolean;
        /**
          * (optional) size
         */
        "size"?: 'small' | 'large';
        /**
          * @deprecated - size should replace small
         */
        "small"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleTabNav {
        /**
          * (optional) size
         */
        "size": 'small' | 'large';
        /**
          * @deprecated - size should replace small
         */
        "small"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleTabPanel {
        /**
          * @deprecated - no more size difference
         */
        "size": 'small' | 'large';
        /**
          * @deprecated - no more size difference
         */
        "small"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) adds tab-index="0" to the panel, set to false to exclude the tab-panel from the tab sequence, e.g. if the first element in the panel is a focusable button
         */
        "tabbablePanel"?: boolean;
    }
    interface ScaleTable {
        /**
          * (optional) Display sort arrows on/off
         */
        "showSort"?: boolean;
        /**
          * @deprecated - css overwrite should replace size
         */
        "size"?: string;
        /**
          * (optional) Striped Table
         */
        "striped"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleTag {
        /**
          * (optional) Tag color
         */
        "color"?: | 'cyan'
    | 'yellow'
    | 'green'
    | 'orange'
    | 'red'
    | 'violet'
    | 'brown'
    | 'olive'
    | 'teal'
    | 'black'
    | 'dismissable'
    | 'standard';
        /**
          * (optional) Tag disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Dismiss label
         */
        "dismissText"?: string;
        /**
          * (optional) Tag dismissable
         */
        "dismissable"?: boolean;
        /**
          * (optional) Tag href
         */
        "href"?: string;
        /**
          * (optional) Tag size
         */
        "size"?: 'small';
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Tag target
         */
        "target"?: string;
        /**
          * (optional) Tag type
         */
        "type"?: 'standard' | 'strong';
    }
    interface ScaleTelekomAppShell {
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleTelekomFooter {
        "type": 'standard' | 'minimal';
    }
    interface ScaleTelekomFooterContent {
        /**
          * (optional) set logo specific title
         */
        "logoHideTitle"?: boolean;
        /**
          * (optional) Logo link
         */
        "logoHref"?: string;
        /**
          * (optional) set logo specific title
         */
        "logoTitle"?: string;
    }
    interface ScaleTelekomFooterDataBackCompat {
        "copyright"?: string;
        "footerNavigation"?: any;
        "type": 'standard' | 'minimal';
    }
    interface ScaleTelekomFooterExtendedNavigation {
    }
    interface ScaleTelekomFooterExtendedNavigationColumn {
        /**
          * Set to `true` to expand
         */
        "expanded": boolean;
        "heading": string;
        "headingLevel"?: string;
    }
    interface ScaleTelekomHeader {
        "appName"?: string;
        "appNameClick"?: any;
        "appNameLink"?: string;
        "langSwitcherAriaLabel"?: string;
        "logoHideTitle"?: boolean;
        "logoHref"?: string;
        "logoTitle"?: string;
        "mainNavAriaLabel"?: string;
        "metaNavAriaLabel"?: string;
        "metaNavExternalAriaLabel"?: string;
        "type"?: string;
    }
    interface ScaleTelekomHeaderDataBackCompat {
        "activeRouteId": string;
        "addonNavigation": any;
        "appName"?: string;
        "appNameClick"?: any;
        "appNameLink"?: string;
        "iconNavigation": any;
        "logoHideTitle"?: boolean;
        "logoHref"?: string;
        "logoTitle"?: string;
        "mainNavigation": any;
        "sectorNavigation": any;
        "userNavigation": any;
    }
    interface ScaleTelekomMegaMenu {
    }
    interface ScaleTelekomMegaMenuColumn {
        "headingLevel": number;
    }
    interface ScaleTelekomMobileFlyoutCanvas {
        "appName"?: string;
        "appNameClick"?: any;
        "appNameLink"?: string;
        "closeButtonLabel"?: string;
        "closeButtonTitle"?: string | null;
    }
    interface ScaleTelekomMobileMenu {
        "appName"?: string;
        "appNameClick"?: any;
        "appNameLink"?: string;
        "backButtonTitle": string;
    }
    interface ScaleTelekomMobileMenuItem {
        "active"?: boolean;
        "currentLevel"?: string;
        "level"?: string;
        "open"?: boolean;
    }
    interface ScaleTelekomNavFlyout {
        /**
          * Open the flyout menu
         */
        "expanded"?: boolean;
        "hide": () => Promise<void>;
        /**
          * (optinal) Whether the flyout should open on hover (needs better name!)
         */
        "hover"?: boolean;
        "show": () => Promise<void>;
        /**
          * (optional) Selector to query the trigger element in case it's not the previous sibling
         */
        "triggerSelector"?: string;
        /**
          * (optional) Variant ("mobile" gives it a fixed height of `100vh`)
         */
        "variant"?: null | 'mobile';
    }
    interface ScaleTelekomNavItem {
        "active"?: boolean;
        "hideOnDesktop"?: boolean;
        "hideOnMobile"?: boolean;
        "role": string | null;
        "variant"?: | 'meta-nav-external'
    | 'meta-nav'
    | 'lang-switcher'
    | 'main-nav'
    | 'functions';
    }
    interface ScaleTelekomNavList {
        "alignment": 'left' | 'center' | 'right';
        "role": string | null;
        "variant": | 'meta-nav-external'
    | 'meta-nav'
    | 'lang-switcher'
    | 'main-nav'
    | 'functions';
    }
    interface ScaleTelekomProfileMenu {
        "accessibilityLabel"?: string;
        "appName": string;
        "closeMenuAccessibilityLabel": string;
        "hideLoginSettings": boolean;
        "label": string;
        "loggedIn": boolean;
        "loginHelpLabel": string;
        "loginHelpUrl"?: string;
        "loginLabel": string;
        "loginSettingsLabel"?: string;
        "loginSettingsUrl"?: string;
        "loginUrl"?: string;
        "logoutHandler"?: string;
        "logoutLabel": string;
        "logoutUrl"?: string;
        "registerHeadline": string;
        "registerLabel": string;
        "registerUrl"?: string;
        "serviceDescription": string;
        "serviceLinks": any;
        "serviceName": string;
        "userInfo": any;
    }
    interface ScaleTextField {
        /**
          * (optional) id or space separated list of ids of elements that provide or link to additional related information.
         */
        "ariaDetailedId"?: string;
        /**
          * (optional) Input counter
         */
        "counter"?: boolean;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional)) Makes type `input` behave as a controlled component in React
         */
        "experimentalControlled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) to avoid displaying the label
         */
        "hideLabelVisually"?: boolean;
        /**
          * (optional) custom value for autocomplete HTML attribute
         */
        "inputAutocomplete"?: string;
        /**
          * (optional) the input should automatically get focus when the page loads.
         */
        "inputAutofocus"?: boolean;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input mode
         */
        "inputModeType"?: | 'none'
    | 'text'
    | 'decimal'
    | 'numeric'
    | 'tel'
    | 'search'
    | 'email'
    | 'url';
        /**
          * (optional) Input status
         */
        "invalid"?: boolean;
        /**
          * Input label
         */
        "label": string;
        /**
          * (optional) input list
         */
        "list"?: string;
        /**
          * (optional) define the numeric maximum value of input types such as month, date, time
         */
        "max"?: number;
        /**
          * (optional) Input text string max length
         */
        "maxLength"?: number;
        /**
          * (optional) defines the numeric minimum value of input types such as month, date, time
         */
        "min"?: number;
        /**
          * (optional) Input text string min length
         */
        "minLength"?: number;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * (optional) Input placeHolder
         */
        "placeholder"?: string;
        /**
          * (optional) Input readonly
         */
        "readonly"?: boolean;
        /**
          * (optional) Input required
         */
        "required"?: boolean;
        /**
          * @deprecated - css overwrite should replace size
         */
        "size"?: string;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
        /**
          * (optional) the step attribute specifies the interval between legal numbers in an <input type="number"> element.
         */
        "step"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) input background transparent
         */
        "transparent"?: boolean;
        /**
          * (optional) Input type
         */
        "type"?: | 'email'
    | 'hidden'
    | 'number'
    | 'password'
    | 'tel'
    | 'text'
    | 'date'
    | 'month' // example yyyy-mm
    | 'week' // example yyyy-W##
    | 'time' // example hh:mm
    | 'datetime-local' // example yyyy-mm-ddThh:mm
    | 'url';
        /**
          * (optional) Input value
         */
        "value"?: string | number | null;
        /**
          * (optional) Variant
         */
        "variant"?: 'informational' | 'warning' | 'danger' | 'success';
    }
    interface ScaleTextarea {
        /**
          * (optional) textarea column
         */
        "cols"?: number;
        /**
          * (optional) Input counter
         */
        "counter"?: boolean;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) the input should automatically get focus when the page loads.
         */
        "inputAutofocus"?: boolean;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input status
         */
        "invalid"?: boolean;
        /**
          * (optional) Input label
         */
        "label": string;
        /**
          * (optional) Input max length
         */
        "maxLength"?: number;
        /**
          * (optional) Input min length
         */
        "minLength"?: number;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * (optional) Input placeHolder
         */
        "placeholder"?: string;
        /**
          * (optional) Input readonly
         */
        "readonly"?: boolean;
        /**
          * (optional) Input required
         */
        "required"?: boolean;
        /**
          * (optional) textarea resize
         */
        "resize"?: 'unset' | 'none' | 'vertical' | 'horizontal';
        /**
          * (optional) textarea row
         */
        "rows"?: number;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) input background transparent
         */
        "transparent"?: boolean;
        /**
          * (optional) Input value
         */
        "value"?: string | number | null;
        /**
          * (optional) Variant
         */
        "variant"?: 'informational' | 'warning' | 'danger' | 'success';
    }
    interface ScaleToast {
        /**
          * (optional) Animated toast
         */
        "animated"?: boolean;
        /**
          * (optional) Toast autohide time
         */
        "autoHide"?: boolean | number;
        /**
          * (optional) Toast fade duration
         */
        "fadeDuration"?: number;
        /**
          * Toast method: open()
         */
        "open": () => Promise<void>;
        /**
          * (optional) Toast opened
         */
        "opened"?: boolean;
        /**
          * (optional) Toast position right
         */
        "positionRight"?: number;
        /**
          * (optional) Toast position at the top
         */
        "positionTop"?: number;
        /**
          * (optional) Toast size
         */
        "size"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Toast time
         */
        "time"?: number;
        /**
          * (optional) Toast variant
         */
        "variant"?: string;
    }
    interface ScaleToggleButton {
        /**
          * a11y text for getting meaningful value. `$buttonNumber` and `$selected` are template variables and will be replaces by their corresponding properties.
         */
        "ariaDescriptionTranslation": string;
        /**
          * (optional) aria-label attribute needed for icon-only buttons
         */
        "ariaLabelToggleButton": string;
        /**
          * (optional) translation of 'deselected
         */
        "ariaLangDeselected"?: string;
        /**
          * (optional) translation of 'selected
         */
        "ariaLangSelected"?: string;
        /**
          * (optional) Button background
         */
        "background"?: 'grey' | 'white';
        /**
          * @deprecated - variant should replace colorScheme
         */
        "colorScheme"?: 'monochrome' | 'color';
        /**
          * (optional) If `true`, the button is disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) set the border-radius left, right or both
         */
        "hideBorder": false;
        /**
          * (optional) Button type
         */
        "iconOnly"?: boolean;
        /**
          * (optional) Icon position related to the label
         */
        "iconPosition": 'before' | 'after';
        /**
          * (optional) position within group
         */
        "position"?: number;
        /**
          * (optional) set the border-radius left, right or both
         */
        "radius": 'left' | 'right' | 'both' | 'neither' | null;
        /**
          * (optional) If `true`, the button is selected
         */
        "selected"?: boolean;
        "setFocus": () => Promise<void>;
        /**
          * (optional) The size of the button
         */
        "size"?: 'large' | 'regular' | 'small' | 'xs';
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) toggle button's id
         */
        "toggleButtonId"?: string;
        /**
          * (optional) background variant of a selected toggle-button
         */
        "variant"?: 'monochrome' | 'color';
    }
    interface ScaleToggleGroup {
        /**
          * (optional) aria-label attribute needed for icon-only buttons
         */
        "ariaLabelTranslation": string;
        /**
          * (optional) Button Group background
         */
        "background"?: 'grey' | 'white';
        /**
          * @deprecated - variant should replace colorScheme
         */
        "colorScheme"?: 'monochrome' | 'color';
        /**
          * (optional) If `true`, the button is disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) 100% width
         */
        "fullWidth"?: boolean;
        /**
          * (optional) If `true`, the group has a border
         */
        "hideBorder"?: boolean;
        /**
          * (optional) more than one button selected possible
         */
        "singleSelect": boolean;
        /**
          * (optional) The size of the button
         */
        "size"?: 'large' | 'regular' | 'small' | 'xs';
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) background variant of a selected toggle-button
         */
        "variant"?: 'monochrome' | 'color';
    }
    interface ScaleTooltip {
        /**
          * (optional) How much of the arrow element is "hidden"
         */
        "arrowOffset"?: number;
        /**
          * (optional) Padding between the arrow and the edges of the tooltip
         */
        "arrowPadding"?: number;
        /**
          * (optional) The content of the Tooltip, supporting text only
         */
        "content"?: string;
        /**
          * (optional) Disable the tooltip
         */
        "disabled"?: boolean;
        /**
          * (optional) Tooltip distance from the target element (related to `placement`)
         */
        "distance"?: number;
        /**
          * (optional) Switching the flip option of the tooltip on and off
         */
        "flip"?: boolean;
        "hideTooltip": () => Promise<void>;
        /**
          * (optional) Set the tooltip to opened by default (will still be closed on closing events)
         */
        "opened"?: boolean;
        /**
          * (optional) Position of the Tooltip around the trigger element
         */
        "placement"?: | 'top'
    | 'top-start'
    | 'top-end'
    | 'right'
    | 'right-start'
    | 'right-end'
    | 'bottom'
    | 'bottom-start'
    | 'bottom-end'
    | 'left'
    | 'left-start'
    | 'left-end';
        "showTooltip": () => Promise<void>;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Set custom trigger event (hover, focus, click)
         */
        "trigger"?: string;
    }
}
export interface AppNavigationMainMobileCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppNavigationMainMobileElement;
}
export interface AppNavigationUserMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppNavigationUserMenuElement;
}
export interface ScaleCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScaleCheckboxElement;
}
export interface ScaleChipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScaleChipElement;
}
export interface ScaleCollapsibleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScaleCollapsibleElement;
}
export interface ScaleDataGridCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScaleDataGridElement;
}
export interface ScaleDatePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScaleDatePickerElement;
}
export interface ScaleDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScaleDropdownElement;
}
export interface ScaleDropdownSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScaleDropdownSelectElement;
}
export interface ScaleInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScaleInputElement;
}
export interface ScaleMenuFlyoutItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScaleMenuFlyoutItemElement;
}
export interface ScaleMenuFlyoutListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScaleMenuFlyoutListElement;
}
export interface ScaleModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScaleModalElement;
}
export interface ScaleNotificationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScaleNotificationElement;
}
export interface ScaleNotificationBannerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScaleNotificationBannerElement;
}
export interface ScaleNotificationMessageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScaleNotificationMessageElement;
}
export interface ScaleNotificationToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScaleNotificationToastElement;
}
export interface ScalePaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScalePaginationElement;
}
export interface ScaleRadioButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScaleRadioButtonElement;
}
export interface ScaleRatingStarsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScaleRatingStarsElement;
}
export interface ScaleSegmentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScaleSegmentElement;
}
export interface ScaleSegmentedButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScaleSegmentedButtonElement;
}
export interface ScaleSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScaleSliderElement;
}
export interface ScaleSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScaleSwitchElement;
}
export interface ScaleTabHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScaleTabHeaderElement;
}
export interface ScaleTagCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScaleTagElement;
}
export interface ScaleTelekomMobileFlyoutCanvasCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScaleTelekomMobileFlyoutCanvasElement;
}
export interface ScaleTelekomMobileMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScaleTelekomMobileMenuElement;
}
export interface ScaleTelekomMobileMenuItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScaleTelekomMobileMenuItemElement;
}
export interface ScaleTelekomNavFlyoutCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScaleTelekomNavFlyoutElement;
}
export interface ScaleTextFieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScaleTextFieldElement;
}
export interface ScaleTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScaleTextareaElement;
}
export interface ScaleToggleButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScaleToggleButtonElement;
}
export interface ScaleToggleGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScaleToggleGroupElement;
}
export interface ScaleTooltipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScaleTooltipElement;
}
declare global {
    interface HTMLAppLogoElement extends Components.AppLogo, HTMLStencilElement {
    }
    var HTMLAppLogoElement: {
        prototype: HTMLAppLogoElement;
        new (): HTMLAppLogoElement;
    };
    interface HTMLAppMegaMenuElement extends Components.AppMegaMenu, HTMLStencilElement {
    }
    var HTMLAppMegaMenuElement: {
        prototype: HTMLAppMegaMenuElement;
        new (): HTMLAppMegaMenuElement;
    };
    interface HTMLAppNavigationMainMobileElement extends Components.AppNavigationMainMobile, HTMLStencilElement {
    }
    var HTMLAppNavigationMainMobileElement: {
        prototype: HTMLAppNavigationMainMobileElement;
        new (): HTMLAppNavigationMainMobileElement;
    };
    interface HTMLAppNavigationSectorMobileElement extends Components.AppNavigationSectorMobile, HTMLStencilElement {
    }
    var HTMLAppNavigationSectorMobileElement: {
        prototype: HTMLAppNavigationSectorMobileElement;
        new (): HTMLAppNavigationSectorMobileElement;
    };
    interface HTMLAppNavigationUserMenuElement extends Components.AppNavigationUserMenu, HTMLStencilElement {
    }
    var HTMLAppNavigationUserMenuElement: {
        prototype: HTMLAppNavigationUserMenuElement;
        new (): HTMLAppNavigationUserMenuElement;
    };
    interface HTMLScaleAccordionElement extends Components.ScaleAccordion, HTMLStencilElement {
    }
    var HTMLScaleAccordionElement: {
        prototype: HTMLScaleAccordionElement;
        new (): HTMLScaleAccordionElement;
    };
    interface HTMLScaleAlertElement extends Components.ScaleAlert, HTMLStencilElement {
    }
    var HTMLScaleAlertElement: {
        prototype: HTMLScaleAlertElement;
        new (): HTMLScaleAlertElement;
    };
    interface HTMLScaleAppFooterElement extends Components.ScaleAppFooter, HTMLStencilElement {
    }
    var HTMLScaleAppFooterElement: {
        prototype: HTMLScaleAppFooterElement;
        new (): HTMLScaleAppFooterElement;
    };
    interface HTMLScaleAppHeaderElement extends Components.ScaleAppHeader, HTMLStencilElement {
    }
    var HTMLScaleAppHeaderElement: {
        prototype: HTMLScaleAppHeaderElement;
        new (): HTMLScaleAppHeaderElement;
    };
    interface HTMLScaleAppShellElement extends Components.ScaleAppShell, HTMLStencilElement {
    }
    var HTMLScaleAppShellElement: {
        prototype: HTMLScaleAppShellElement;
        new (): HTMLScaleAppShellElement;
    };
    interface HTMLScaleBadgeElement extends Components.ScaleBadge, HTMLStencilElement {
    }
    var HTMLScaleBadgeElement: {
        prototype: HTMLScaleBadgeElement;
        new (): HTMLScaleBadgeElement;
    };
    interface HTMLScaleBreadcrumbElement extends Components.ScaleBreadcrumb, HTMLStencilElement {
    }
    var HTMLScaleBreadcrumbElement: {
        prototype: HTMLScaleBreadcrumbElement;
        new (): HTMLScaleBreadcrumbElement;
    };
    interface HTMLScaleButtonElement extends Components.ScaleButton, HTMLStencilElement {
    }
    var HTMLScaleButtonElement: {
        prototype: HTMLScaleButtonElement;
        new (): HTMLScaleButtonElement;
    };
    interface HTMLScaleCalloutElement extends Components.ScaleCallout, HTMLStencilElement {
    }
    var HTMLScaleCalloutElement: {
        prototype: HTMLScaleCalloutElement;
        new (): HTMLScaleCalloutElement;
    };
    interface HTMLScaleCardElement extends Components.ScaleCard, HTMLStencilElement {
    }
    var HTMLScaleCardElement: {
        prototype: HTMLScaleCardElement;
        new (): HTMLScaleCardElement;
    };
    interface HTMLScaleCarouselElement extends Components.ScaleCarousel, HTMLStencilElement {
    }
    var HTMLScaleCarouselElement: {
        prototype: HTMLScaleCarouselElement;
        new (): HTMLScaleCarouselElement;
    };
    interface HTMLScaleChartStackCardElement extends Components.ScaleChartStackCard, HTMLStencilElement {
    }
    var HTMLScaleChartStackCardElement: {
        prototype: HTMLScaleChartStackCardElement;
        new (): HTMLScaleChartStackCardElement;
    };
    interface HTMLScaleCheckboxElement extends Components.ScaleCheckbox, HTMLStencilElement {
    }
    var HTMLScaleCheckboxElement: {
        prototype: HTMLScaleCheckboxElement;
        new (): HTMLScaleCheckboxElement;
    };
    interface HTMLScaleCheckboxGroupElement extends Components.ScaleCheckboxGroup, HTMLStencilElement {
    }
    var HTMLScaleCheckboxGroupElement: {
        prototype: HTMLScaleCheckboxGroupElement;
        new (): HTMLScaleCheckboxGroupElement;
    };
    interface HTMLScaleChipElement extends Components.ScaleChip, HTMLStencilElement {
    }
    var HTMLScaleChipElement: {
        prototype: HTMLScaleChipElement;
        new (): HTMLScaleChipElement;
    };
    interface HTMLScaleCollapsibleElement extends Components.ScaleCollapsible, HTMLStencilElement {
    }
    var HTMLScaleCollapsibleElement: {
        prototype: HTMLScaleCollapsibleElement;
        new (): HTMLScaleCollapsibleElement;
    };
    interface HTMLScaleDataGridElement extends Components.ScaleDataGrid, HTMLStencilElement {
    }
    var HTMLScaleDataGridElement: {
        prototype: HTMLScaleDataGridElement;
        new (): HTMLScaleDataGridElement;
    };
    interface HTMLScaleDatePickerElement extends Components.ScaleDatePicker, HTMLStencilElement {
    }
    var HTMLScaleDatePickerElement: {
        prototype: HTMLScaleDatePickerElement;
        new (): HTMLScaleDatePickerElement;
    };
    interface HTMLScaleDividerElement extends Components.ScaleDivider, HTMLStencilElement {
    }
    var HTMLScaleDividerElement: {
        prototype: HTMLScaleDividerElement;
        new (): HTMLScaleDividerElement;
    };
    interface HTMLScaleDropdownElement extends Components.ScaleDropdown, HTMLStencilElement {
    }
    var HTMLScaleDropdownElement: {
        prototype: HTMLScaleDropdownElement;
        new (): HTMLScaleDropdownElement;
    };
    interface HTMLScaleDropdownSelectElement extends Components.ScaleDropdownSelect, HTMLStencilElement {
    }
    var HTMLScaleDropdownSelectElement: {
        prototype: HTMLScaleDropdownSelectElement;
        new (): HTMLScaleDropdownSelectElement;
    };
    interface HTMLScaleDropdownSelectItemElement extends Components.ScaleDropdownSelectItem, HTMLStencilElement {
    }
    var HTMLScaleDropdownSelectItemElement: {
        prototype: HTMLScaleDropdownSelectItemElement;
        new (): HTMLScaleDropdownSelectItemElement;
    };
    interface HTMLScaleGridElement extends Components.ScaleGrid, HTMLStencilElement {
    }
    var HTMLScaleGridElement: {
        prototype: HTMLScaleGridElement;
        new (): HTMLScaleGridElement;
    };
    interface HTMLScaleGridItemElement extends Components.ScaleGridItem, HTMLStencilElement {
    }
    var HTMLScaleGridItemElement: {
        prototype: HTMLScaleGridItemElement;
        new (): HTMLScaleGridItemElement;
    };
    interface HTMLScaleHelperTextElement extends Components.ScaleHelperText, HTMLStencilElement {
    }
    var HTMLScaleHelperTextElement: {
        prototype: HTMLScaleHelperTextElement;
        new (): HTMLScaleHelperTextElement;
    };
    interface HTMLScaleIconElement extends Components.ScaleIcon, HTMLStencilElement {
    }
    var HTMLScaleIconElement: {
        prototype: HTMLScaleIconElement;
        new (): HTMLScaleIconElement;
    };
    interface HTMLScaleIconActionAddElement extends Components.ScaleIconActionAdd, HTMLStencilElement {
    }
    var HTMLScaleIconActionAddElement: {
        prototype: HTMLScaleIconActionAddElement;
        new (): HTMLScaleIconActionAddElement;
    };
    interface HTMLScaleIconActionAddCardElement extends Components.ScaleIconActionAddCard, HTMLStencilElement {
    }
    var HTMLScaleIconActionAddCardElement: {
        prototype: HTMLScaleIconActionAddCardElement;
        new (): HTMLScaleIconActionAddCardElement;
    };
    interface HTMLScaleIconActionArrangeElement extends Components.ScaleIconActionArrange, HTMLStencilElement {
    }
    var HTMLScaleIconActionArrangeElement: {
        prototype: HTMLScaleIconActionArrangeElement;
        new (): HTMLScaleIconActionArrangeElement;
    };
    interface HTMLScaleIconActionArrowDownElement extends Components.ScaleIconActionArrowDown, HTMLStencilElement {
    }
    var HTMLScaleIconActionArrowDownElement: {
        prototype: HTMLScaleIconActionArrowDownElement;
        new (): HTMLScaleIconActionArrowDownElement;
    };
    interface HTMLScaleIconActionArrowLeftElement extends Components.ScaleIconActionArrowLeft, HTMLStencilElement {
    }
    var HTMLScaleIconActionArrowLeftElement: {
        prototype: HTMLScaleIconActionArrowLeftElement;
        new (): HTMLScaleIconActionArrowLeftElement;
    };
    interface HTMLScaleIconActionArrowRightElement extends Components.ScaleIconActionArrowRight, HTMLStencilElement {
    }
    var HTMLScaleIconActionArrowRightElement: {
        prototype: HTMLScaleIconActionArrowRightElement;
        new (): HTMLScaleIconActionArrowRightElement;
    };
    interface HTMLScaleIconActionArrowUpElement extends Components.ScaleIconActionArrowUp, HTMLStencilElement {
    }
    var HTMLScaleIconActionArrowUpElement: {
        prototype: HTMLScaleIconActionArrowUpElement;
        new (): HTMLScaleIconActionArrowUpElement;
    };
    interface HTMLScaleIconActionAutoLoginElement extends Components.ScaleIconActionAutoLogin, HTMLStencilElement {
    }
    var HTMLScaleIconActionAutoLoginElement: {
        prototype: HTMLScaleIconActionAutoLoginElement;
        new (): HTMLScaleIconActionAutoLoginElement;
    };
    interface HTMLScaleIconActionBackspaceElement extends Components.ScaleIconActionBackspace, HTMLStencilElement {
    }
    var HTMLScaleIconActionBackspaceElement: {
        prototype: HTMLScaleIconActionBackspaceElement;
        new (): HTMLScaleIconActionBackspaceElement;
    };
    interface HTMLScaleIconActionBackwardElement extends Components.ScaleIconActionBackward, HTMLStencilElement {
    }
    var HTMLScaleIconActionBackwardElement: {
        prototype: HTMLScaleIconActionBackwardElement;
        new (): HTMLScaleIconActionBackwardElement;
    };
    interface HTMLScaleIconActionChangelogElement extends Components.ScaleIconActionChangelog, HTMLStencilElement {
    }
    var HTMLScaleIconActionChangelogElement: {
        prototype: HTMLScaleIconActionChangelogElement;
        new (): HTMLScaleIconActionChangelogElement;
    };
    interface HTMLScaleIconActionCheckmarkElement extends Components.ScaleIconActionCheckmark, HTMLStencilElement {
    }
    var HTMLScaleIconActionCheckmarkElement: {
        prototype: HTMLScaleIconActionCheckmarkElement;
        new (): HTMLScaleIconActionCheckmarkElement;
    };
    interface HTMLScaleIconActionCircleAddElement extends Components.ScaleIconActionCircleAdd, HTMLStencilElement {
    }
    var HTMLScaleIconActionCircleAddElement: {
        prototype: HTMLScaleIconActionCircleAddElement;
        new (): HTMLScaleIconActionCircleAddElement;
    };
    interface HTMLScaleIconActionCircleCloseElement extends Components.ScaleIconActionCircleClose, HTMLStencilElement {
    }
    var HTMLScaleIconActionCircleCloseElement: {
        prototype: HTMLScaleIconActionCircleCloseElement;
        new (): HTMLScaleIconActionCircleCloseElement;
    };
    interface HTMLScaleIconActionCloseElement extends Components.ScaleIconActionClose, HTMLStencilElement {
    }
    var HTMLScaleIconActionCloseElement: {
        prototype: HTMLScaleIconActionCloseElement;
        new (): HTMLScaleIconActionCloseElement;
    };
    interface HTMLScaleIconActionCompareElement extends Components.ScaleIconActionCompare, HTMLStencilElement {
    }
    var HTMLScaleIconActionCompareElement: {
        prototype: HTMLScaleIconActionCompareElement;
        new (): HTMLScaleIconActionCompareElement;
    };
    interface HTMLScaleIconActionCopyPasteElement extends Components.ScaleIconActionCopyPaste, HTMLStencilElement {
    }
    var HTMLScaleIconActionCopyPasteElement: {
        prototype: HTMLScaleIconActionCopyPasteElement;
        new (): HTMLScaleIconActionCopyPasteElement;
    };
    interface HTMLScaleIconActionCutPasteElement extends Components.ScaleIconActionCutPaste, HTMLStencilElement {
    }
    var HTMLScaleIconActionCutPasteElement: {
        prototype: HTMLScaleIconActionCutPasteElement;
        new (): HTMLScaleIconActionCutPasteElement;
    };
    interface HTMLScaleIconActionDisabledMicrophoneElement extends Components.ScaleIconActionDisabledMicrophone, HTMLStencilElement {
    }
    var HTMLScaleIconActionDisabledMicrophoneElement: {
        prototype: HTMLScaleIconActionDisabledMicrophoneElement;
        new (): HTMLScaleIconActionDisabledMicrophoneElement;
    };
    interface HTMLScaleIconActionDownloadElement extends Components.ScaleIconActionDownload, HTMLStencilElement {
    }
    var HTMLScaleIconActionDownloadElement: {
        prototype: HTMLScaleIconActionDownloadElement;
        new (): HTMLScaleIconActionDownloadElement;
    };
    interface HTMLScaleIconActionDownloadFromCloudElement extends Components.ScaleIconActionDownloadFromCloud, HTMLStencilElement {
    }
    var HTMLScaleIconActionDownloadFromCloudElement: {
        prototype: HTMLScaleIconActionDownloadFromCloudElement;
        new (): HTMLScaleIconActionDownloadFromCloudElement;
    };
    interface HTMLScaleIconActionDragAndDropElement extends Components.ScaleIconActionDragAndDrop, HTMLStencilElement {
    }
    var HTMLScaleIconActionDragAndDropElement: {
        prototype: HTMLScaleIconActionDragAndDropElement;
        new (): HTMLScaleIconActionDragAndDropElement;
    };
    interface HTMLScaleIconActionEditElement extends Components.ScaleIconActionEdit, HTMLStencilElement {
    }
    var HTMLScaleIconActionEditElement: {
        prototype: HTMLScaleIconActionEditElement;
        new (): HTMLScaleIconActionEditElement;
    };
    interface HTMLScaleIconActionExportElement extends Components.ScaleIconActionExport, HTMLStencilElement {
    }
    var HTMLScaleIconActionExportElement: {
        prototype: HTMLScaleIconActionExportElement;
        new (): HTMLScaleIconActionExportElement;
    };
    interface HTMLScaleIconActionFastForwardElement extends Components.ScaleIconActionFastForward, HTMLStencilElement {
    }
    var HTMLScaleIconActionFastForwardElement: {
        prototype: HTMLScaleIconActionFastForwardElement;
        new (): HTMLScaleIconActionFastForwardElement;
    };
    interface HTMLScaleIconActionFastForwardNbElement extends Components.ScaleIconActionFastForwardNb, HTMLStencilElement {
    }
    var HTMLScaleIconActionFastForwardNbElement: {
        prototype: HTMLScaleIconActionFastForwardNbElement;
        new (): HTMLScaleIconActionFastForwardNbElement;
    };
    interface HTMLScaleIconActionFavoriteElement extends Components.ScaleIconActionFavorite, HTMLStencilElement {
    }
    var HTMLScaleIconActionFavoriteElement: {
        prototype: HTMLScaleIconActionFavoriteElement;
        new (): HTMLScaleIconActionFavoriteElement;
    };
    interface HTMLScaleIconActionFilterElement extends Components.ScaleIconActionFilter, HTMLStencilElement {
    }
    var HTMLScaleIconActionFilterElement: {
        prototype: HTMLScaleIconActionFilterElement;
        new (): HTMLScaleIconActionFilterElement;
    };
    interface HTMLScaleIconActionFilter2Element extends Components.ScaleIconActionFilter2, HTMLStencilElement {
    }
    var HTMLScaleIconActionFilter2Element: {
        prototype: HTMLScaleIconActionFilter2Element;
        new (): HTMLScaleIconActionFilter2Element;
    };
    interface HTMLScaleIconActionForwardElement extends Components.ScaleIconActionForward, HTMLStencilElement {
    }
    var HTMLScaleIconActionForwardElement: {
        prototype: HTMLScaleIconActionForwardElement;
        new (): HTMLScaleIconActionForwardElement;
    };
    interface HTMLScaleIconActionFullScreenElement extends Components.ScaleIconActionFullScreen, HTMLStencilElement {
    }
    var HTMLScaleIconActionFullScreenElement: {
        prototype: HTMLScaleIconActionFullScreenElement;
        new (): HTMLScaleIconActionFullScreenElement;
    };
    interface HTMLScaleIconActionHidePasswordElement extends Components.ScaleIconActionHidePassword, HTMLStencilElement {
    }
    var HTMLScaleIconActionHidePasswordElement: {
        prototype: HTMLScaleIconActionHidePasswordElement;
        new (): HTMLScaleIconActionHidePasswordElement;
    };
    interface HTMLScaleIconActionImportElement extends Components.ScaleIconActionImport, HTMLStencilElement {
    }
    var HTMLScaleIconActionImportElement: {
        prototype: HTMLScaleIconActionImportElement;
        new (): HTMLScaleIconActionImportElement;
    };
    interface HTMLScaleIconActionInstallElement extends Components.ScaleIconActionInstall, HTMLStencilElement {
    }
    var HTMLScaleIconActionInstallElement: {
        prototype: HTMLScaleIconActionInstallElement;
        new (): HTMLScaleIconActionInstallElement;
    };
    interface HTMLScaleIconActionLaunchElement extends Components.ScaleIconActionLaunch, HTMLStencilElement {
    }
    var HTMLScaleIconActionLaunchElement: {
        prototype: HTMLScaleIconActionLaunchElement;
        new (): HTMLScaleIconActionLaunchElement;
    };
    interface HTMLScaleIconActionLightDarkModeElement extends Components.ScaleIconActionLightDarkMode, HTMLStencilElement {
    }
    var HTMLScaleIconActionLightDarkModeElement: {
        prototype: HTMLScaleIconActionLightDarkModeElement;
        new (): HTMLScaleIconActionLightDarkModeElement;
    };
    interface HTMLScaleIconActionLinkElement extends Components.ScaleIconActionLink, HTMLStencilElement {
    }
    var HTMLScaleIconActionLinkElement: {
        prototype: HTMLScaleIconActionLinkElement;
        new (): HTMLScaleIconActionLinkElement;
    };
    interface HTMLScaleIconActionLogoutElement extends Components.ScaleIconActionLogout, HTMLStencilElement {
    }
    var HTMLScaleIconActionLogoutElement: {
        prototype: HTMLScaleIconActionLogoutElement;
        new (): HTMLScaleIconActionLogoutElement;
    };
    interface HTMLScaleIconActionLoopElement extends Components.ScaleIconActionLoop, HTMLStencilElement {
    }
    var HTMLScaleIconActionLoopElement: {
        prototype: HTMLScaleIconActionLoopElement;
        new (): HTMLScaleIconActionLoopElement;
    };
    interface HTMLScaleIconActionMenuElement extends Components.ScaleIconActionMenu, HTMLStencilElement {
    }
    var HTMLScaleIconActionMenuElement: {
        prototype: HTMLScaleIconActionMenuElement;
        new (): HTMLScaleIconActionMenuElement;
    };
    interface HTMLScaleIconActionMicrophoneElement extends Components.ScaleIconActionMicrophone, HTMLStencilElement {
    }
    var HTMLScaleIconActionMicrophoneElement: {
        prototype: HTMLScaleIconActionMicrophoneElement;
        new (): HTMLScaleIconActionMicrophoneElement;
    };
    interface HTMLScaleIconActionMinimizeScreenElement extends Components.ScaleIconActionMinimizeScreen, HTMLStencilElement {
    }
    var HTMLScaleIconActionMinimizeScreenElement: {
        prototype: HTMLScaleIconActionMinimizeScreenElement;
        new (): HTMLScaleIconActionMinimizeScreenElement;
    };
    interface HTMLScaleIconActionMinusElement extends Components.ScaleIconActionMinus, HTMLStencilElement {
    }
    var HTMLScaleIconActionMinusElement: {
        prototype: HTMLScaleIconActionMinusElement;
        new (): HTMLScaleIconActionMinusElement;
    };
    interface HTMLScaleIconActionMinusCircleElement extends Components.ScaleIconActionMinusCircle, HTMLStencilElement {
    }
    var HTMLScaleIconActionMinusCircleElement: {
        prototype: HTMLScaleIconActionMinusCircleElement;
        new (): HTMLScaleIconActionMinusCircleElement;
    };
    interface HTMLScaleIconActionMoreElement extends Components.ScaleIconActionMore, HTMLStencilElement {
    }
    var HTMLScaleIconActionMoreElement: {
        prototype: HTMLScaleIconActionMoreElement;
        new (): HTMLScaleIconActionMoreElement;
    };
    interface HTMLScaleIconActionMoveElement extends Components.ScaleIconActionMove, HTMLStencilElement {
    }
    var HTMLScaleIconActionMoveElement: {
        prototype: HTMLScaleIconActionMoveElement;
        new (): HTMLScaleIconActionMoveElement;
    };
    interface HTMLScaleIconActionMuteElement extends Components.ScaleIconActionMute, HTMLStencilElement {
    }
    var HTMLScaleIconActionMuteElement: {
        prototype: HTMLScaleIconActionMuteElement;
        new (): HTMLScaleIconActionMuteElement;
    };
    interface HTMLScaleIconActionNotificationElement extends Components.ScaleIconActionNotification, HTMLStencilElement {
    }
    var HTMLScaleIconActionNotificationElement: {
        prototype: HTMLScaleIconActionNotificationElement;
        new (): HTMLScaleIconActionNotificationElement;
    };
    interface HTMLScaleIconActionPauseElement extends Components.ScaleIconActionPause, HTMLStencilElement {
    }
    var HTMLScaleIconActionPauseElement: {
        prototype: HTMLScaleIconActionPauseElement;
        new (): HTMLScaleIconActionPauseElement;
    };
    interface HTMLScaleIconActionPauseNbElement extends Components.ScaleIconActionPauseNb, HTMLStencilElement {
    }
    var HTMLScaleIconActionPauseNbElement: {
        prototype: HTMLScaleIconActionPauseNbElement;
        new (): HTMLScaleIconActionPauseNbElement;
    };
    interface HTMLScaleIconActionPinElement extends Components.ScaleIconActionPin, HTMLStencilElement {
    }
    var HTMLScaleIconActionPinElement: {
        prototype: HTMLScaleIconActionPinElement;
        new (): HTMLScaleIconActionPinElement;
    };
    interface HTMLScaleIconActionPlayElement extends Components.ScaleIconActionPlay, HTMLStencilElement {
    }
    var HTMLScaleIconActionPlayElement: {
        prototype: HTMLScaleIconActionPlayElement;
        new (): HTMLScaleIconActionPlayElement;
    };
    interface HTMLScaleIconActionPlayNbElement extends Components.ScaleIconActionPlayNb, HTMLStencilElement {
    }
    var HTMLScaleIconActionPlayNbElement: {
        prototype: HTMLScaleIconActionPlayNbElement;
        new (): HTMLScaleIconActionPlayNbElement;
    };
    interface HTMLScaleIconActionPopUpWindowElement extends Components.ScaleIconActionPopUpWindow, HTMLStencilElement {
    }
    var HTMLScaleIconActionPopUpWindowElement: {
        prototype: HTMLScaleIconActionPopUpWindowElement;
        new (): HTMLScaleIconActionPopUpWindowElement;
    };
    interface HTMLScaleIconActionPowerElement extends Components.ScaleIconActionPower, HTMLStencilElement {
    }
    var HTMLScaleIconActionPowerElement: {
        prototype: HTMLScaleIconActionPowerElement;
        new (): HTMLScaleIconActionPowerElement;
    };
    interface HTMLScaleIconActionPreviousNbElement extends Components.ScaleIconActionPreviousNb, HTMLStencilElement {
    }
    var HTMLScaleIconActionPreviousNbElement: {
        prototype: HTMLScaleIconActionPreviousNbElement;
        new (): HTMLScaleIconActionPreviousNbElement;
    };
    interface HTMLScaleIconActionPrintElement extends Components.ScaleIconActionPrint, HTMLStencilElement {
    }
    var HTMLScaleIconActionPrintElement: {
        prototype: HTMLScaleIconActionPrintElement;
        new (): HTMLScaleIconActionPrintElement;
    };
    interface HTMLScaleIconActionPublishElement extends Components.ScaleIconActionPublish, HTMLStencilElement {
    }
    var HTMLScaleIconActionPublishElement: {
        prototype: HTMLScaleIconActionPublishElement;
        new (): HTMLScaleIconActionPublishElement;
    };
    interface HTMLScaleIconActionRandomElement extends Components.ScaleIconActionRandom, HTMLStencilElement {
    }
    var HTMLScaleIconActionRandomElement: {
        prototype: HTMLScaleIconActionRandomElement;
        new (): HTMLScaleIconActionRandomElement;
    };
    interface HTMLScaleIconActionRecordNbElement extends Components.ScaleIconActionRecordNb, HTMLStencilElement {
    }
    var HTMLScaleIconActionRecordNbElement: {
        prototype: HTMLScaleIconActionRecordNbElement;
        new (): HTMLScaleIconActionRecordNbElement;
    };
    interface HTMLScaleIconActionRefreshElement extends Components.ScaleIconActionRefresh, HTMLStencilElement {
    }
    var HTMLScaleIconActionRefreshElement: {
        prototype: HTMLScaleIconActionRefreshElement;
        new (): HTMLScaleIconActionRefreshElement;
    };
    interface HTMLScaleIconActionRemoveElement extends Components.ScaleIconActionRemove, HTMLStencilElement {
    }
    var HTMLScaleIconActionRemoveElement: {
        prototype: HTMLScaleIconActionRemoveElement;
        new (): HTMLScaleIconActionRemoveElement;
    };
    interface HTMLScaleIconActionReplyElement extends Components.ScaleIconActionReply, HTMLStencilElement {
    }
    var HTMLScaleIconActionReplyElement: {
        prototype: HTMLScaleIconActionReplyElement;
        new (): HTMLScaleIconActionReplyElement;
    };
    interface HTMLScaleIconActionReplyAllElement extends Components.ScaleIconActionReplyAll, HTMLStencilElement {
    }
    var HTMLScaleIconActionReplyAllElement: {
        prototype: HTMLScaleIconActionReplyAllElement;
        new (): HTMLScaleIconActionReplyAllElement;
    };
    interface HTMLScaleIconActionReplyForwardElement extends Components.ScaleIconActionReplyForward, HTMLStencilElement {
    }
    var HTMLScaleIconActionReplyForwardElement: {
        prototype: HTMLScaleIconActionReplyForwardElement;
        new (): HTMLScaleIconActionReplyForwardElement;
    };
    interface HTMLScaleIconActionRestartElement extends Components.ScaleIconActionRestart, HTMLStencilElement {
    }
    var HTMLScaleIconActionRestartElement: {
        prototype: HTMLScaleIconActionRestartElement;
        new (): HTMLScaleIconActionRestartElement;
    };
    interface HTMLScaleIconActionSearchElement extends Components.ScaleIconActionSearch, HTMLStencilElement {
    }
    var HTMLScaleIconActionSearchElement: {
        prototype: HTMLScaleIconActionSearchElement;
        new (): HTMLScaleIconActionSearchElement;
    };
    interface HTMLScaleIconActionSendElement extends Components.ScaleIconActionSend, HTMLStencilElement {
    }
    var HTMLScaleIconActionSendElement: {
        prototype: HTMLScaleIconActionSendElement;
        new (): HTMLScaleIconActionSendElement;
    };
    interface HTMLScaleIconActionShareElement extends Components.ScaleIconActionShare, HTMLStencilElement {
    }
    var HTMLScaleIconActionShareElement: {
        prototype: HTMLScaleIconActionShareElement;
        new (): HTMLScaleIconActionShareElement;
    };
    interface HTMLScaleIconActionShoppingCartElement extends Components.ScaleIconActionShoppingCart, HTMLStencilElement {
    }
    var HTMLScaleIconActionShoppingCartElement: {
        prototype: HTMLScaleIconActionShoppingCartElement;
        new (): HTMLScaleIconActionShoppingCartElement;
    };
    interface HTMLScaleIconActionShowPasswordElement extends Components.ScaleIconActionShowPassword, HTMLStencilElement {
    }
    var HTMLScaleIconActionShowPasswordElement: {
        prototype: HTMLScaleIconActionShowPasswordElement;
        new (): HTMLScaleIconActionShowPasswordElement;
    };
    interface HTMLScaleIconActionSortElement extends Components.ScaleIconActionSort, HTMLStencilElement {
    }
    var HTMLScaleIconActionSortElement: {
        prototype: HTMLScaleIconActionSortElement;
        new (): HTMLScaleIconActionSortElement;
    };
    interface HTMLScaleIconActionSoundOnElement extends Components.ScaleIconActionSoundOn, HTMLStencilElement {
    }
    var HTMLScaleIconActionSoundOnElement: {
        prototype: HTMLScaleIconActionSoundOnElement;
        new (): HTMLScaleIconActionSoundOnElement;
    };
    interface HTMLScaleIconActionStarElement extends Components.ScaleIconActionStar, HTMLStencilElement {
    }
    var HTMLScaleIconActionStarElement: {
        prototype: HTMLScaleIconActionStarElement;
        new (): HTMLScaleIconActionStarElement;
    };
    interface HTMLScaleIconActionStreamOnElement extends Components.ScaleIconActionStreamOn, HTMLStencilElement {
    }
    var HTMLScaleIconActionStreamOnElement: {
        prototype: HTMLScaleIconActionStreamOnElement;
        new (): HTMLScaleIconActionStreamOnElement;
    };
    interface HTMLScaleIconActionSuccessElement extends Components.ScaleIconActionSuccess, HTMLStencilElement {
    }
    var HTMLScaleIconActionSuccessElement: {
        prototype: HTMLScaleIconActionSuccessElement;
        new (): HTMLScaleIconActionSuccessElement;
    };
    interface HTMLScaleIconActionThumbsDownElement extends Components.ScaleIconActionThumbsDown, HTMLStencilElement {
    }
    var HTMLScaleIconActionThumbsDownElement: {
        prototype: HTMLScaleIconActionThumbsDownElement;
        new (): HTMLScaleIconActionThumbsDownElement;
    };
    interface HTMLScaleIconActionThumbsUpElement extends Components.ScaleIconActionThumbsUp, HTMLStencilElement {
    }
    var HTMLScaleIconActionThumbsUpElement: {
        prototype: HTMLScaleIconActionThumbsUpElement;
        new (): HTMLScaleIconActionThumbsUpElement;
    };
    interface HTMLScaleIconActionTilesAddElement extends Components.ScaleIconActionTilesAdd, HTMLStencilElement {
    }
    var HTMLScaleIconActionTilesAddElement: {
        prototype: HTMLScaleIconActionTilesAddElement;
        new (): HTMLScaleIconActionTilesAddElement;
    };
    interface HTMLScaleIconActionUploadElement extends Components.ScaleIconActionUpload, HTMLStencilElement {
    }
    var HTMLScaleIconActionUploadElement: {
        prototype: HTMLScaleIconActionUploadElement;
        new (): HTMLScaleIconActionUploadElement;
    };
    interface HTMLScaleIconActionUploadToCloudElement extends Components.ScaleIconActionUploadToCloud, HTMLStencilElement {
    }
    var HTMLScaleIconActionUploadToCloudElement: {
        prototype: HTMLScaleIconActionUploadToCloudElement;
        new (): HTMLScaleIconActionUploadToCloudElement;
    };
    interface HTMLScaleIconActionVolumeDownElement extends Components.ScaleIconActionVolumeDown, HTMLStencilElement {
    }
    var HTMLScaleIconActionVolumeDownElement: {
        prototype: HTMLScaleIconActionVolumeDownElement;
        new (): HTMLScaleIconActionVolumeDownElement;
    };
    interface HTMLScaleIconActionVolumeUpElement extends Components.ScaleIconActionVolumeUp, HTMLStencilElement {
    }
    var HTMLScaleIconActionVolumeUpElement: {
        prototype: HTMLScaleIconActionVolumeUpElement;
        new (): HTMLScaleIconActionVolumeUpElement;
    };
    interface HTMLScaleIconActionZoomInElement extends Components.ScaleIconActionZoomIn, HTMLStencilElement {
    }
    var HTMLScaleIconActionZoomInElement: {
        prototype: HTMLScaleIconActionZoomInElement;
        new (): HTMLScaleIconActionZoomInElement;
    };
    interface HTMLScaleIconActionZoomOutElement extends Components.ScaleIconActionZoomOut, HTMLStencilElement {
    }
    var HTMLScaleIconActionZoomOutElement: {
        prototype: HTMLScaleIconActionZoomOutElement;
        new (): HTMLScaleIconActionZoomOutElement;
    };
    interface HTMLScaleIconAlertAntivirusProtectionElement extends Components.ScaleIconAlertAntivirusProtection, HTMLStencilElement {
    }
    var HTMLScaleIconAlertAntivirusProtectionElement: {
        prototype: HTMLScaleIconAlertAntivirusProtectionElement;
        new (): HTMLScaleIconAlertAntivirusProtectionElement;
    };
    interface HTMLScaleIconAlertComplianceElement extends Components.ScaleIconAlertCompliance, HTMLStencilElement {
    }
    var HTMLScaleIconAlertComplianceElement: {
        prototype: HTMLScaleIconAlertComplianceElement;
        new (): HTMLScaleIconAlertComplianceElement;
    };
    interface HTMLScaleIconAlertCyberSecurityElement extends Components.ScaleIconAlertCyberSecurity, HTMLStencilElement {
    }
    var HTMLScaleIconAlertCyberSecurityElement: {
        prototype: HTMLScaleIconAlertCyberSecurityElement;
        new (): HTMLScaleIconAlertCyberSecurityElement;
    };
    interface HTMLScaleIconAlertErrorElement extends Components.ScaleIconAlertError, HTMLStencilElement {
    }
    var HTMLScaleIconAlertErrorElement: {
        prototype: HTMLScaleIconAlertErrorElement;
        new (): HTMLScaleIconAlertErrorElement;
    };
    interface HTMLScaleIconAlertHelpElement extends Components.ScaleIconAlertHelp, HTMLStencilElement {
    }
    var HTMLScaleIconAlertHelpElement: {
        prototype: HTMLScaleIconAlertHelpElement;
        new (): HTMLScaleIconAlertHelpElement;
    };
    interface HTMLScaleIconAlertHighPriorityEmailElement extends Components.ScaleIconAlertHighPriorityEmail, HTMLStencilElement {
    }
    var HTMLScaleIconAlertHighPriorityEmailElement: {
        prototype: HTMLScaleIconAlertHighPriorityEmailElement;
        new (): HTMLScaleIconAlertHighPriorityEmailElement;
    };
    interface HTMLScaleIconAlertImprintDataprivacyElement extends Components.ScaleIconAlertImprintDataprivacy, HTMLStencilElement {
    }
    var HTMLScaleIconAlertImprintDataprivacyElement: {
        prototype: HTMLScaleIconAlertImprintDataprivacyElement;
        new (): HTMLScaleIconAlertImprintDataprivacyElement;
    };
    interface HTMLScaleIconAlertInformationElement extends Components.ScaleIconAlertInformation, HTMLStencilElement {
    }
    var HTMLScaleIconAlertInformationElement: {
        prototype: HTMLScaleIconAlertInformationElement;
        new (): HTMLScaleIconAlertInformationElement;
    };
    interface HTMLScaleIconAlertLegalElement extends Components.ScaleIconAlertLegal, HTMLStencilElement {
    }
    var HTMLScaleIconAlertLegalElement: {
        prototype: HTMLScaleIconAlertLegalElement;
        new (): HTMLScaleIconAlertLegalElement;
    };
    interface HTMLScaleIconAlertNetworkDisruptedElement extends Components.ScaleIconAlertNetworkDisrupted, HTMLStencilElement {
    }
    var HTMLScaleIconAlertNetworkDisruptedElement: {
        prototype: HTMLScaleIconAlertNetworkDisruptedElement;
        new (): HTMLScaleIconAlertNetworkDisruptedElement;
    };
    interface HTMLScaleIconAlertPasswordBreakingElement extends Components.ScaleIconAlertPasswordBreaking, HTMLStencilElement {
    }
    var HTMLScaleIconAlertPasswordBreakingElement: {
        prototype: HTMLScaleIconAlertPasswordBreakingElement;
        new (): HTMLScaleIconAlertPasswordBreakingElement;
    };
    interface HTMLScaleIconAlertSecurityElement extends Components.ScaleIconAlertSecurity, HTMLStencilElement {
    }
    var HTMLScaleIconAlertSecurityElement: {
        prototype: HTMLScaleIconAlertSecurityElement;
        new (): HTMLScaleIconAlertSecurityElement;
    };
    interface HTMLScaleIconAlertTrafficDisruptionElement extends Components.ScaleIconAlertTrafficDisruption, HTMLStencilElement {
    }
    var HTMLScaleIconAlertTrafficDisruptionElement: {
        prototype: HTMLScaleIconAlertTrafficDisruptionElement;
        new (): HTMLScaleIconAlertTrafficDisruptionElement;
    };
    interface HTMLScaleIconAlertUnknownElement extends Components.ScaleIconAlertUnknown, HTMLStencilElement {
    }
    var HTMLScaleIconAlertUnknownElement: {
        prototype: HTMLScaleIconAlertUnknownElement;
        new (): HTMLScaleIconAlertUnknownElement;
    };
    interface HTMLScaleIconAlertWarningElement extends Components.ScaleIconAlertWarning, HTMLStencilElement {
    }
    var HTMLScaleIconAlertWarningElement: {
        prototype: HTMLScaleIconAlertWarningElement;
        new (): HTMLScaleIconAlertWarningElement;
    };
    interface HTMLScaleIconCommunicationAvailableElement extends Components.ScaleIconCommunicationAvailable, HTMLStencilElement {
    }
    var HTMLScaleIconCommunicationAvailableElement: {
        prototype: HTMLScaleIconCommunicationAvailableElement;
        new (): HTMLScaleIconCommunicationAvailableElement;
    };
    interface HTMLScaleIconCommunicationBlogElement extends Components.ScaleIconCommunicationBlog, HTMLStencilElement {
    }
    var HTMLScaleIconCommunicationBlogElement: {
        prototype: HTMLScaleIconCommunicationBlogElement;
        new (): HTMLScaleIconCommunicationBlogElement;
    };
    interface HTMLScaleIconCommunicationCallIncomingElement extends Components.ScaleIconCommunicationCallIncoming, HTMLStencilElement {
    }
    var HTMLScaleIconCommunicationCallIncomingElement: {
        prototype: HTMLScaleIconCommunicationCallIncomingElement;
        new (): HTMLScaleIconCommunicationCallIncomingElement;
    };
    interface HTMLScaleIconCommunicationCallOutgoingElement extends Components.ScaleIconCommunicationCallOutgoing, HTMLStencilElement {
    }
    var HTMLScaleIconCommunicationCallOutgoingElement: {
        prototype: HTMLScaleIconCommunicationCallOutgoingElement;
        new (): HTMLScaleIconCommunicationCallOutgoingElement;
    };
    interface HTMLScaleIconCommunicationChatElement extends Components.ScaleIconCommunicationChat, HTMLStencilElement {
    }
    var HTMLScaleIconCommunicationChatElement: {
        prototype: HTMLScaleIconCommunicationChatElement;
        new (): HTMLScaleIconCommunicationChatElement;
    };
    interface HTMLScaleIconCommunicationChatBadgeElement extends Components.ScaleIconCommunicationChatBadge, HTMLStencilElement {
    }
    var HTMLScaleIconCommunicationChatBadgeElement: {
        prototype: HTMLScaleIconCommunicationChatBadgeElement;
        new (): HTMLScaleIconCommunicationChatBadgeElement;
    };
    interface HTMLScaleIconCommunicationEmailElement extends Components.ScaleIconCommunicationEmail, HTMLStencilElement {
    }
    var HTMLScaleIconCommunicationEmailElement: {
        prototype: HTMLScaleIconCommunicationEmailElement;
        new (): HTMLScaleIconCommunicationEmailElement;
    };
    interface HTMLScaleIconCommunicationEndCallElement extends Components.ScaleIconCommunicationEndCall, HTMLStencilElement {
    }
    var HTMLScaleIconCommunicationEndCallElement: {
        prototype: HTMLScaleIconCommunicationEndCallElement;
        new (): HTMLScaleIconCommunicationEndCallElement;
    };
    interface HTMLScaleIconCommunicationFeedbackElement extends Components.ScaleIconCommunicationFeedback, HTMLStencilElement {
    }
    var HTMLScaleIconCommunicationFeedbackElement: {
        prototype: HTMLScaleIconCommunicationFeedbackElement;
        new (): HTMLScaleIconCommunicationFeedbackElement;
    };
    interface HTMLScaleIconCommunicationFlightModeElement extends Components.ScaleIconCommunicationFlightMode, HTMLStencilElement {
    }
    var HTMLScaleIconCommunicationFlightModeElement: {
        prototype: HTMLScaleIconCommunicationFlightModeElement;
        new (): HTMLScaleIconCommunicationFlightModeElement;
    };
    interface HTMLScaleIconCommunicationHappyPersonElement extends Components.ScaleIconCommunicationHappyPerson, HTMLStencilElement {
    }
    var HTMLScaleIconCommunicationHappyPersonElement: {
        prototype: HTMLScaleIconCommunicationHappyPersonElement;
        new (): HTMLScaleIconCommunicationHappyPersonElement;
    };
    interface HTMLScaleIconCommunicationInboxElement extends Components.ScaleIconCommunicationInbox, HTMLStencilElement {
    }
    var HTMLScaleIconCommunicationInboxElement: {
        prototype: HTMLScaleIconCommunicationInboxElement;
        new (): HTMLScaleIconCommunicationInboxElement;
    };
    interface HTMLScaleIconCommunicationLandingMobileContactClientElement extends Components.ScaleIconCommunicationLandingMobileContactClient, HTMLStencilElement {
    }
    var HTMLScaleIconCommunicationLandingMobileContactClientElement: {
        prototype: HTMLScaleIconCommunicationLandingMobileContactClientElement;
        new (): HTMLScaleIconCommunicationLandingMobileContactClientElement;
    };
    interface HTMLScaleIconCommunicationLoyaltyEarnedElement extends Components.ScaleIconCommunicationLoyaltyEarned, HTMLStencilElement {
    }
    var HTMLScaleIconCommunicationLoyaltyEarnedElement: {
        prototype: HTMLScaleIconCommunicationLoyaltyEarnedElement;
        new (): HTMLScaleIconCommunicationLoyaltyEarnedElement;
    };
    interface HTMLScaleIconCommunicationLoyaltyLostElement extends Components.ScaleIconCommunicationLoyaltyLost, HTMLStencilElement {
    }
    var HTMLScaleIconCommunicationLoyaltyLostElement: {
        prototype: HTMLScaleIconCommunicationLoyaltyLostElement;
        new (): HTMLScaleIconCommunicationLoyaltyLostElement;
    };
    interface HTMLScaleIconCommunicationMailOpenedElement extends Components.ScaleIconCommunicationMailOpened, HTMLStencilElement {
    }
    var HTMLScaleIconCommunicationMailOpenedElement: {
        prototype: HTMLScaleIconCommunicationMailOpenedElement;
        new (): HTMLScaleIconCommunicationMailOpenedElement;
    };
    interface HTMLScaleIconCommunicationMessageElement extends Components.ScaleIconCommunicationMessage, HTMLStencilElement {
    }
    var HTMLScaleIconCommunicationMessageElement: {
        prototype: HTMLScaleIconCommunicationMessageElement;
        new (): HTMLScaleIconCommunicationMessageElement;
    };
    interface HTMLScaleIconCommunicationMessageIncomingElement extends Components.ScaleIconCommunicationMessageIncoming, HTMLStencilElement {
    }
    var HTMLScaleIconCommunicationMessageIncomingElement: {
        prototype: HTMLScaleIconCommunicationMessageIncomingElement;
        new (): HTMLScaleIconCommunicationMessageIncomingElement;
    };
    interface HTMLScaleIconCommunicationMessageOutgoingElement extends Components.ScaleIconCommunicationMessageOutgoing, HTMLStencilElement {
    }
    var HTMLScaleIconCommunicationMessageOutgoingElement: {
        prototype: HTMLScaleIconCommunicationMessageOutgoingElement;
        new (): HTMLScaleIconCommunicationMessageOutgoingElement;
    };
    interface HTMLScaleIconCommunicationMmsIncomingElement extends Components.ScaleIconCommunicationMmsIncoming, HTMLStencilElement {
    }
    var HTMLScaleIconCommunicationMmsIncomingElement: {
        prototype: HTMLScaleIconCommunicationMmsIncomingElement;
        new (): HTMLScaleIconCommunicationMmsIncomingElement;
    };
    interface HTMLScaleIconCommunicationMmsOutgoingElement extends Components.ScaleIconCommunicationMmsOutgoing, HTMLStencilElement {
    }
    var HTMLScaleIconCommunicationMmsOutgoingElement: {
        prototype: HTMLScaleIconCommunicationMmsOutgoingElement;
        new (): HTMLScaleIconCommunicationMmsOutgoingElement;
    };
    interface HTMLScaleIconCommunicationMobilePhoneNumberElement extends Components.ScaleIconCommunicationMobilePhoneNumber, HTMLStencilElement {
    }
    var HTMLScaleIconCommunicationMobilePhoneNumberElement: {
        prototype: HTMLScaleIconCommunicationMobilePhoneNumberElement;
        new (): HTMLScaleIconCommunicationMobilePhoneNumberElement;
    };
    interface HTMLScaleIconCommunicationNetworkSignalElement extends Components.ScaleIconCommunicationNetworkSignal, HTMLStencilElement {
    }
    var HTMLScaleIconCommunicationNetworkSignalElement: {
        prototype: HTMLScaleIconCommunicationNetworkSignalElement;
        new (): HTMLScaleIconCommunicationNetworkSignalElement;
    };
    interface HTMLScaleIconCommunicationNewEmailElement extends Components.ScaleIconCommunicationNewEmail, HTMLStencilElement {
    }
    var HTMLScaleIconCommunicationNewEmailElement: {
        prototype: HTMLScaleIconCommunicationNewEmailElement;
        new (): HTMLScaleIconCommunicationNewEmailElement;
    };
    interface HTMLScaleIconCommunicationOutboxElement extends Components.ScaleIconCommunicationOutbox, HTMLStencilElement {
    }
    var HTMLScaleIconCommunicationOutboxElement: {
        prototype: HTMLScaleIconCommunicationOutboxElement;
        new (): HTMLScaleIconCommunicationOutboxElement;
    };
    interface HTMLScaleIconCommunicationPhoneNumberElement extends Components.ScaleIconCommunicationPhoneNumber, HTMLStencilElement {
    }
    var HTMLScaleIconCommunicationPhoneNumberElement: {
        prototype: HTMLScaleIconCommunicationPhoneNumberElement;
        new (): HTMLScaleIconCommunicationPhoneNumberElement;
    };
    interface HTMLScaleIconCommunicationRecipientElement extends Components.ScaleIconCommunicationRecipient, HTMLStencilElement {
    }
    var HTMLScaleIconCommunicationRecipientElement: {
        prototype: HTMLScaleIconCommunicationRecipientElement;
        new (): HTMLScaleIconCommunicationRecipientElement;
    };
    interface HTMLScaleIconCommunicationSaveEmailsToDraftsElement extends Components.ScaleIconCommunicationSaveEmailsToDrafts, HTMLStencilElement {
    }
    var HTMLScaleIconCommunicationSaveEmailsToDraftsElement: {
        prototype: HTMLScaleIconCommunicationSaveEmailsToDraftsElement;
        new (): HTMLScaleIconCommunicationSaveEmailsToDraftsElement;
    };
    interface HTMLScaleIconCommunicationSmsElement extends Components.ScaleIconCommunicationSms, HTMLStencilElement {
    }
    var HTMLScaleIconCommunicationSmsElement: {
        prototype: HTMLScaleIconCommunicationSmsElement;
        new (): HTMLScaleIconCommunicationSmsElement;
    };
    interface HTMLScaleIconCommunicationSpamElement extends Components.ScaleIconCommunicationSpam, HTMLStencilElement {
    }
    var HTMLScaleIconCommunicationSpamElement: {
        prototype: HTMLScaleIconCommunicationSpamElement;
        new (): HTMLScaleIconCommunicationSpamElement;
    };
    interface HTMLScaleIconCommunicationVoiceMessageElement extends Components.ScaleIconCommunicationVoiceMessage, HTMLStencilElement {
    }
    var HTMLScaleIconCommunicationVoiceMessageElement: {
        prototype: HTMLScaleIconCommunicationVoiceMessageElement;
        new (): HTMLScaleIconCommunicationVoiceMessageElement;
    };
    interface HTMLScaleIconContent2faGoogleAuthElement extends Components.ScaleIconContent2faGoogleAuth, HTMLStencilElement {
    }
    var HTMLScaleIconContent2faGoogleAuthElement: {
        prototype: HTMLScaleIconContent2faGoogleAuthElement;
        new (): HTMLScaleIconContent2faGoogleAuthElement;
    };
    interface HTMLScaleIconContentAchievementElement extends Components.ScaleIconContentAchievement, HTMLStencilElement {
    }
    var HTMLScaleIconContentAchievementElement: {
        prototype: HTMLScaleIconContentAchievementElement;
        new (): HTMLScaleIconContentAchievementElement;
    };
    interface HTMLScaleIconContentAndroidElement extends Components.ScaleIconContentAndroid, HTMLStencilElement {
    }
    var HTMLScaleIconContentAndroidElement: {
        prototype: HTMLScaleIconContentAndroidElement;
        new (): HTMLScaleIconContentAndroidElement;
    };
    interface HTMLScaleIconContentAppleElement extends Components.ScaleIconContentApple, HTMLStencilElement {
    }
    var HTMLScaleIconContentAppleElement: {
        prototype: HTMLScaleIconContentAppleElement;
        new (): HTMLScaleIconContentAppleElement;
    };
    interface HTMLScaleIconContentApplicationsElement extends Components.ScaleIconContentApplications, HTMLStencilElement {
    }
    var HTMLScaleIconContentApplicationsElement: {
        prototype: HTMLScaleIconContentApplicationsElement;
        new (): HTMLScaleIconContentApplicationsElement;
    };
    interface HTMLScaleIconContentAvailableKeychainElement extends Components.ScaleIconContentAvailableKeychain, HTMLStencilElement {
    }
    var HTMLScaleIconContentAvailableKeychainElement: {
        prototype: HTMLScaleIconContentAvailableKeychainElement;
        new (): HTMLScaleIconContentAvailableKeychainElement;
    };
    interface HTMLScaleIconContentBankElement extends Components.ScaleIconContentBank, HTMLStencilElement {
    }
    var HTMLScaleIconContentBankElement: {
        prototype: HTMLScaleIconContentBankElement;
        new (): HTMLScaleIconContentBankElement;
    };
    interface HTMLScaleIconContentBiometricElement extends Components.ScaleIconContentBiometric, HTMLStencilElement {
    }
    var HTMLScaleIconContentBiometricElement: {
        prototype: HTMLScaleIconContentBiometricElement;
        new (): HTMLScaleIconContentBiometricElement;
    };
    interface HTMLScaleIconContentBirthdayElement extends Components.ScaleIconContentBirthday, HTMLStencilElement {
    }
    var HTMLScaleIconContentBirthdayElement: {
        prototype: HTMLScaleIconContentBirthdayElement;
        new (): HTMLScaleIconContentBirthdayElement;
    };
    interface HTMLScaleIconContentBookmarkElement extends Components.ScaleIconContentBookmark, HTMLStencilElement {
    }
    var HTMLScaleIconContentBookmarkElement: {
        prototype: HTMLScaleIconContentBookmarkElement;
        new (): HTMLScaleIconContentBookmarkElement;
    };
    interface HTMLScaleIconContentCalendarElement extends Components.ScaleIconContentCalendar, HTMLStencilElement {
    }
    var HTMLScaleIconContentCalendarElement: {
        prototype: HTMLScaleIconContentCalendarElement;
        new (): HTMLScaleIconContentCalendarElement;
    };
    interface HTMLScaleIconContentClipboardElement extends Components.ScaleIconContentClipboard, HTMLStencilElement {
    }
    var HTMLScaleIconContentClipboardElement: {
        prototype: HTMLScaleIconContentClipboardElement;
        new (): HTMLScaleIconContentClipboardElement;
    };
    interface HTMLScaleIconContentClockElement extends Components.ScaleIconContentClock, HTMLStencilElement {
    }
    var HTMLScaleIconContentClockElement: {
        prototype: HTMLScaleIconContentClockElement;
        new (): HTMLScaleIconContentClockElement;
    };
    interface HTMLScaleIconContentCloudSecurityElement extends Components.ScaleIconContentCloudSecurity, HTMLStencilElement {
    }
    var HTMLScaleIconContentCloudSecurityElement: {
        prototype: HTMLScaleIconContentCloudSecurityElement;
        new (): HTMLScaleIconContentCloudSecurityElement;
    };
    interface HTMLScaleIconContentCodeScannerElement extends Components.ScaleIconContentCodeScanner, HTMLStencilElement {
    }
    var HTMLScaleIconContentCodeScannerElement: {
        prototype: HTMLScaleIconContentCodeScannerElement;
        new (): HTMLScaleIconContentCodeScannerElement;
    };
    interface HTMLScaleIconContentColorSelectionElement extends Components.ScaleIconContentColorSelection, HTMLStencilElement {
    }
    var HTMLScaleIconContentColorSelectionElement: {
        prototype: HTMLScaleIconContentColorSelectionElement;
        new (): HTMLScaleIconContentColorSelectionElement;
    };
    interface HTMLScaleIconContentCountryElement extends Components.ScaleIconContentCountry, HTMLStencilElement {
    }
    var HTMLScaleIconContentCountryElement: {
        prototype: HTMLScaleIconContentCountryElement;
        new (): HTMLScaleIconContentCountryElement;
    };
    interface HTMLScaleIconContentCreditCardElement extends Components.ScaleIconContentCreditCard, HTMLStencilElement {
    }
    var HTMLScaleIconContentCreditCardElement: {
        prototype: HTMLScaleIconContentCreditCardElement;
        new (): HTMLScaleIconContentCreditCardElement;
    };
    interface HTMLScaleIconContentDataVisualisationElement extends Components.ScaleIconContentDataVisualisation, HTMLStencilElement {
    }
    var HTMLScaleIconContentDataVisualisationElement: {
        prototype: HTMLScaleIconContentDataVisualisationElement;
        new (): HTMLScaleIconContentDataVisualisationElement;
    };
    interface HTMLScaleIconContentDeliveryElement extends Components.ScaleIconContentDelivery, HTMLStencilElement {
    }
    var HTMLScaleIconContentDeliveryElement: {
        prototype: HTMLScaleIconContentDeliveryElement;
        new (): HTMLScaleIconContentDeliveryElement;
    };
    interface HTMLScaleIconContentDigitalBankingElement extends Components.ScaleIconContentDigitalBanking, HTMLStencilElement {
    }
    var HTMLScaleIconContentDigitalBankingElement: {
        prototype: HTMLScaleIconContentDigitalBankingElement;
        new (): HTMLScaleIconContentDigitalBankingElement;
    };
    interface HTMLScaleIconContentDigitalMediaElement extends Components.ScaleIconContentDigitalMedia, HTMLStencilElement {
    }
    var HTMLScaleIconContentDigitalMediaElement: {
        prototype: HTMLScaleIconContentDigitalMediaElement;
        new (): HTMLScaleIconContentDigitalMediaElement;
    };
    interface HTMLScaleIconContentDiscountElement extends Components.ScaleIconContentDiscount, HTMLStencilElement {
    }
    var HTMLScaleIconContentDiscountElement: {
        prototype: HTMLScaleIconContentDiscountElement;
        new (): HTMLScaleIconContentDiscountElement;
    };
    interface HTMLScaleIconContentESimElement extends Components.ScaleIconContentESim, HTMLStencilElement {
    }
    var HTMLScaleIconContentESimElement: {
        prototype: HTMLScaleIconContentESimElement;
        new (): HTMLScaleIconContentESimElement;
    };
    interface HTMLScaleIconContentEuElement extends Components.ScaleIconContentEu, HTMLStencilElement {
    }
    var HTMLScaleIconContentEuElement: {
        prototype: HTMLScaleIconContentEuElement;
        new (): HTMLScaleIconContentEuElement;
    };
    interface HTMLScaleIconContentFaceMaskElement extends Components.ScaleIconContentFaceMask, HTMLStencilElement {
    }
    var HTMLScaleIconContentFaceMaskElement: {
        prototype: HTMLScaleIconContentFaceMaskElement;
        new (): HTMLScaleIconContentFaceMaskElement;
    };
    interface HTMLScaleIconContentFeaturesElement extends Components.ScaleIconContentFeatures, HTMLStencilElement {
    }
    var HTMLScaleIconContentFeaturesElement: {
        prototype: HTMLScaleIconContentFeaturesElement;
        new (): HTMLScaleIconContentFeaturesElement;
    };
    interface HTMLScaleIconContentFlexibleTariffsElement extends Components.ScaleIconContentFlexibleTariffs, HTMLStencilElement {
    }
    var HTMLScaleIconContentFlexibleTariffsElement: {
        prototype: HTMLScaleIconContentFlexibleTariffsElement;
        new (): HTMLScaleIconContentFlexibleTariffsElement;
    };
    interface HTMLScaleIconContentFolderElement extends Components.ScaleIconContentFolder, HTMLStencilElement {
    }
    var HTMLScaleIconContentFolderElement: {
        prototype: HTMLScaleIconContentFolderElement;
        new (): HTMLScaleIconContentFolderElement;
    };
    interface HTMLScaleIconContentFoodElement extends Components.ScaleIconContentFood, HTMLStencilElement {
    }
    var HTMLScaleIconContentFoodElement: {
        prototype: HTMLScaleIconContentFoodElement;
        new (): HTMLScaleIconContentFoodElement;
    };
    interface HTMLScaleIconContentGenderDiverseElement extends Components.ScaleIconContentGenderDiverse, HTMLStencilElement {
    }
    var HTMLScaleIconContentGenderDiverseElement: {
        prototype: HTMLScaleIconContentGenderDiverseElement;
        new (): HTMLScaleIconContentGenderDiverseElement;
    };
    interface HTMLScaleIconContentGenderFemaleElement extends Components.ScaleIconContentGenderFemale, HTMLStencilElement {
    }
    var HTMLScaleIconContentGenderFemaleElement: {
        prototype: HTMLScaleIconContentGenderFemaleElement;
        new (): HTMLScaleIconContentGenderFemaleElement;
    };
    interface HTMLScaleIconContentGenderMaleElement extends Components.ScaleIconContentGenderMale, HTMLStencilElement {
    }
    var HTMLScaleIconContentGenderMaleElement: {
        prototype: HTMLScaleIconContentGenderMaleElement;
        new (): HTMLScaleIconContentGenderMaleElement;
    };
    interface HTMLScaleIconContentHalfRatingElement extends Components.ScaleIconContentHalfRating, HTMLStencilElement {
    }
    var HTMLScaleIconContentHalfRatingElement: {
        prototype: HTMLScaleIconContentHalfRatingElement;
        new (): HTMLScaleIconContentHalfRatingElement;
    };
    interface HTMLScaleIconContentHeartElement extends Components.ScaleIconContentHeart, HTMLStencilElement {
    }
    var HTMLScaleIconContentHeartElement: {
        prototype: HTMLScaleIconContentHeartElement;
        new (): HTMLScaleIconContentHeartElement;
    };
    interface HTMLScaleIconContentHeightElement extends Components.ScaleIconContentHeight, HTMLStencilElement {
    }
    var HTMLScaleIconContentHeightElement: {
        prototype: HTMLScaleIconContentHeightElement;
        new (): HTMLScaleIconContentHeightElement;
    };
    interface HTMLScaleIconContentHistoryElement extends Components.ScaleIconContentHistory, HTMLStencilElement {
    }
    var HTMLScaleIconContentHistoryElement: {
        prototype: HTMLScaleIconContentHistoryElement;
        new (): HTMLScaleIconContentHistoryElement;
    };
    interface HTMLScaleIconContentHourGlassElement extends Components.ScaleIconContentHourGlass, HTMLStencilElement {
    }
    var HTMLScaleIconContentHourGlassElement: {
        prototype: HTMLScaleIconContentHourGlassElement;
        new (): HTMLScaleIconContentHourGlassElement;
    };
    interface HTMLScaleIconContentIbanElement extends Components.ScaleIconContentIban, HTMLStencilElement {
    }
    var HTMLScaleIconContentIbanElement: {
        prototype: HTMLScaleIconContentIbanElement;
        new (): HTMLScaleIconContentIbanElement;
    };
    interface HTMLScaleIconContentIdElement extends Components.ScaleIconContentId, HTMLStencilElement {
    }
    var HTMLScaleIconContentIdElement: {
        prototype: HTMLScaleIconContentIdElement;
        new (): HTMLScaleIconContentIdElement;
    };
    interface HTMLScaleIconContentInStockElement extends Components.ScaleIconContentInStock, HTMLStencilElement {
    }
    var HTMLScaleIconContentInStockElement: {
        prototype: HTMLScaleIconContentInStockElement;
        new (): HTMLScaleIconContentInStockElement;
    };
    interface HTMLScaleIconContentInternationalElement extends Components.ScaleIconContentInternational, HTMLStencilElement {
    }
    var HTMLScaleIconContentInternationalElement: {
        prototype: HTMLScaleIconContentInternationalElement;
        new (): HTMLScaleIconContentInternationalElement;
    };
    interface HTMLScaleIconContentInternationalSmsElement extends Components.ScaleIconContentInternationalSms, HTMLStencilElement {
    }
    var HTMLScaleIconContentInternationalSmsElement: {
        prototype: HTMLScaleIconContentInternationalSmsElement;
        new (): HTMLScaleIconContentInternationalSmsElement;
    };
    interface HTMLScaleIconContentInterviewElement extends Components.ScaleIconContentInterview, HTMLStencilElement {
    }
    var HTMLScaleIconContentInterviewElement: {
        prototype: HTMLScaleIconContentInterviewElement;
        new (): HTMLScaleIconContentInterviewElement;
    };
    interface HTMLScaleIconContentKeyElement extends Components.ScaleIconContentKey, HTMLStencilElement {
    }
    var HTMLScaleIconContentKeyElement: {
        prototype: HTMLScaleIconContentKeyElement;
        new (): HTMLScaleIconContentKeyElement;
    };
    interface HTMLScaleIconContentLanguageElement extends Components.ScaleIconContentLanguage, HTMLStencilElement {
    }
    var HTMLScaleIconContentLanguageElement: {
        prototype: HTMLScaleIconContentLanguageElement;
        new (): HTMLScaleIconContentLanguageElement;
    };
    interface HTMLScaleIconContentLockElement extends Components.ScaleIconContentLock, HTMLStencilElement {
    }
    var HTMLScaleIconContentLockElement: {
        prototype: HTMLScaleIconContentLockElement;
        new (): HTMLScaleIconContentLockElement;
    };
    interface HTMLScaleIconContentLoyaltyElement extends Components.ScaleIconContentLoyalty, HTMLStencilElement {
    }
    var HTMLScaleIconContentLoyaltyElement: {
        prototype: HTMLScaleIconContentLoyaltyElement;
        new (): HTMLScaleIconContentLoyaltyElement;
    };
    interface HTMLScaleIconContentMediaFolderElement extends Components.ScaleIconContentMediaFolder, HTMLStencilElement {
    }
    var HTMLScaleIconContentMediaFolderElement: {
        prototype: HTMLScaleIconContentMediaFolderElement;
        new (): HTMLScaleIconContentMediaFolderElement;
    };
    interface HTMLScaleIconContentMoneyAtElement extends Components.ScaleIconContentMoneyAt, HTMLStencilElement {
    }
    var HTMLScaleIconContentMoneyAtElement: {
        prototype: HTMLScaleIconContentMoneyAtElement;
        new (): HTMLScaleIconContentMoneyAtElement;
    };
    interface HTMLScaleIconContentMusicElement extends Components.ScaleIconContentMusic, HTMLStencilElement {
    }
    var HTMLScaleIconContentMusicElement: {
        prototype: HTMLScaleIconContentMusicElement;
        new (): HTMLScaleIconContentMusicElement;
    };
    interface HTMLScaleIconContentNewsElement extends Components.ScaleIconContentNews, HTMLStencilElement {
    }
    var HTMLScaleIconContentNewsElement: {
        prototype: HTMLScaleIconContentNewsElement;
        new (): HTMLScaleIconContentNewsElement;
    };
    interface HTMLScaleIconContentOutOfStockElement extends Components.ScaleIconContentOutOfStock, HTMLStencilElement {
    }
    var HTMLScaleIconContentOutOfStockElement: {
        prototype: HTMLScaleIconContentOutOfStockElement;
        new (): HTMLScaleIconContentOutOfStockElement;
    };
    interface HTMLScaleIconContentPersonWalkingElement extends Components.ScaleIconContentPersonWalking, HTMLStencilElement {
    }
    var HTMLScaleIconContentPersonWalkingElement: {
        prototype: HTMLScaleIconContentPersonWalkingElement;
        new (): HTMLScaleIconContentPersonWalkingElement;
    };
    interface HTMLScaleIconContentPrepaidActivateElement extends Components.ScaleIconContentPrepaidActivate, HTMLStencilElement {
    }
    var HTMLScaleIconContentPrepaidActivateElement: {
        prototype: HTMLScaleIconContentPrepaidActivateElement;
        new (): HTMLScaleIconContentPrepaidActivateElement;
    };
    interface HTMLScaleIconContentPriceTagElement extends Components.ScaleIconContentPriceTag, HTMLStencilElement {
    }
    var HTMLScaleIconContentPriceTagElement: {
        prototype: HTMLScaleIconContentPriceTagElement;
        new (): HTMLScaleIconContentPriceTagElement;
    };
    interface HTMLScaleIconContentRatingsElement extends Components.ScaleIconContentRatings, HTMLStencilElement {
    }
    var HTMLScaleIconContentRatingsElement: {
        prototype: HTMLScaleIconContentRatingsElement;
        new (): HTMLScaleIconContentRatingsElement;
    };
    interface HTMLScaleIconContentRouteElement extends Components.ScaleIconContentRoute, HTMLStencilElement {
    }
    var HTMLScaleIconContentRouteElement: {
        prototype: HTMLScaleIconContentRouteElement;
        new (): HTMLScaleIconContentRouteElement;
    };
    interface HTMLScaleIconContentRssElement extends Components.ScaleIconContentRss, HTMLStencilElement {
    }
    var HTMLScaleIconContentRssElement: {
        prototype: HTMLScaleIconContentRssElement;
        new (): HTMLScaleIconContentRssElement;
    };
    interface HTMLScaleIconContentShopElement extends Components.ScaleIconContentShop, HTMLStencilElement {
    }
    var HTMLScaleIconContentShopElement: {
        prototype: HTMLScaleIconContentShopElement;
        new (): HTMLScaleIconContentShopElement;
    };
    interface HTMLScaleIconContentSignalElement extends Components.ScaleIconContentSignal, HTMLStencilElement {
    }
    var HTMLScaleIconContentSignalElement: {
        prototype: HTMLScaleIconContentSignalElement;
        new (): HTMLScaleIconContentSignalElement;
    };
    interface HTMLScaleIconContentSimCardElement extends Components.ScaleIconContentSimCard, HTMLStencilElement {
    }
    var HTMLScaleIconContentSimCardElement: {
        prototype: HTMLScaleIconContentSimCardElement;
        new (): HTMLScaleIconContentSimCardElement;
    };
    interface HTMLScaleIconContentSmileElement extends Components.ScaleIconContentSmile, HTMLStencilElement {
    }
    var HTMLScaleIconContentSmileElement: {
        prototype: HTMLScaleIconContentSmileElement;
        new (): HTMLScaleIconContentSmileElement;
    };
    interface HTMLScaleIconContentSortIndicatorDownElement extends Components.ScaleIconContentSortIndicatorDown, HTMLStencilElement {
    }
    var HTMLScaleIconContentSortIndicatorDownElement: {
        prototype: HTMLScaleIconContentSortIndicatorDownElement;
        new (): HTMLScaleIconContentSortIndicatorDownElement;
    };
    interface HTMLScaleIconContentSortIndicatorMiniDownElement extends Components.ScaleIconContentSortIndicatorMiniDown, HTMLStencilElement {
    }
    var HTMLScaleIconContentSortIndicatorMiniDownElement: {
        prototype: HTMLScaleIconContentSortIndicatorMiniDownElement;
        new (): HTMLScaleIconContentSortIndicatorMiniDownElement;
    };
    interface HTMLScaleIconContentSortIndicatorUpElement extends Components.ScaleIconContentSortIndicatorUp, HTMLStencilElement {
    }
    var HTMLScaleIconContentSortIndicatorUpElement: {
        prototype: HTMLScaleIconContentSortIndicatorUpElement;
        new (): HTMLScaleIconContentSortIndicatorUpElement;
    };
    interface HTMLScaleIconContentSortIndicatorUpMiniElement extends Components.ScaleIconContentSortIndicatorUpMini, HTMLStencilElement {
    }
    var HTMLScaleIconContentSortIndicatorUpMiniElement: {
        prototype: HTMLScaleIconContentSortIndicatorUpMiniElement;
        new (): HTMLScaleIconContentSortIndicatorUpMiniElement;
    };
    interface HTMLScaleIconContentStatusInactiveElement extends Components.ScaleIconContentStatusInactive, HTMLStencilElement {
    }
    var HTMLScaleIconContentStatusInactiveElement: {
        prototype: HTMLScaleIconContentStatusInactiveElement;
        new (): HTMLScaleIconContentStatusInactiveElement;
    };
    interface HTMLScaleIconContentStatusRecurringElement extends Components.ScaleIconContentStatusRecurring, HTMLStencilElement {
    }
    var HTMLScaleIconContentStatusRecurringElement: {
        prototype: HTMLScaleIconContentStatusRecurringElement;
        new (): HTMLScaleIconContentStatusRecurringElement;
    };
    interface HTMLScaleIconContentStopwatchElement extends Components.ScaleIconContentStopwatch, HTMLStencilElement {
    }
    var HTMLScaleIconContentStopwatchElement: {
        prototype: HTMLScaleIconContentStopwatchElement;
        new (): HTMLScaleIconContentStopwatchElement;
    };
    interface HTMLScaleIconContentSupportChatElement extends Components.ScaleIconContentSupportChat, HTMLStencilElement {
    }
    var HTMLScaleIconContentSupportChatElement: {
        prototype: HTMLScaleIconContentSupportChatElement;
        new (): HTMLScaleIconContentSupportChatElement;
    };
    interface HTMLScaleIconContentSustainableElement extends Components.ScaleIconContentSustainable, HTMLStencilElement {
    }
    var HTMLScaleIconContentSustainableElement: {
        prototype: HTMLScaleIconContentSustainableElement;
        new (): HTMLScaleIconContentSustainableElement;
    };
    interface HTMLScaleIconContentTariffsElement extends Components.ScaleIconContentTariffs, HTMLStencilElement {
    }
    var HTMLScaleIconContentTariffsElement: {
        prototype: HTMLScaleIconContentTariffsElement;
        new (): HTMLScaleIconContentTariffsElement;
    };
    interface HTMLScaleIconContentThreatsElement extends Components.ScaleIconContentThreats, HTMLStencilElement {
    }
    var HTMLScaleIconContentThreatsElement: {
        prototype: HTMLScaleIconContentThreatsElement;
        new (): HTMLScaleIconContentThreatsElement;
    };
    interface HTMLScaleIconContentTodoListElement extends Components.ScaleIconContentTodoList, HTMLStencilElement {
    }
    var HTMLScaleIconContentTodoListElement: {
        prototype: HTMLScaleIconContentTodoListElement;
        new (): HTMLScaleIconContentTodoListElement;
    };
    interface HTMLScaleIconContentTransportElement extends Components.ScaleIconContentTransport, HTMLStencilElement {
    }
    var HTMLScaleIconContentTransportElement: {
        prototype: HTMLScaleIconContentTransportElement;
        new (): HTMLScaleIconContentTransportElement;
    };
    interface HTMLScaleIconContentUnlockElement extends Components.ScaleIconContentUnlock, HTMLStencilElement {
    }
    var HTMLScaleIconContentUnlockElement: {
        prototype: HTMLScaleIconContentUnlockElement;
        new (): HTMLScaleIconContentUnlockElement;
    };
    interface HTMLScaleIconContentVoucherElement extends Components.ScaleIconContentVoucher, HTMLStencilElement {
    }
    var HTMLScaleIconContentVoucherElement: {
        prototype: HTMLScaleIconContentVoucherElement;
        new (): HTMLScaleIconContentVoucherElement;
    };
    interface HTMLScaleIconContentWaitingElement extends Components.ScaleIconContentWaiting, HTMLStencilElement {
    }
    var HTMLScaleIconContentWaitingElement: {
        prototype: HTMLScaleIconContentWaitingElement;
        new (): HTMLScaleIconContentWaitingElement;
    };
    interface HTMLScaleIconContentWalletElement extends Components.ScaleIconContentWallet, HTMLStencilElement {
    }
    var HTMLScaleIconContentWalletElement: {
        prototype: HTMLScaleIconContentWalletElement;
        new (): HTMLScaleIconContentWalletElement;
    };
    interface HTMLScaleIconDeviceAddDeviceElement extends Components.ScaleIconDeviceAddDevice, HTMLStencilElement {
    }
    var HTMLScaleIconDeviceAddDeviceElement: {
        prototype: HTMLScaleIconDeviceAddDeviceElement;
        new (): HTMLScaleIconDeviceAddDeviceElement;
    };
    interface HTMLScaleIconDeviceCameraElement extends Components.ScaleIconDeviceCamera, HTMLStencilElement {
    }
    var HTMLScaleIconDeviceCameraElement: {
        prototype: HTMLScaleIconDeviceCameraElement;
        new (): HTMLScaleIconDeviceCameraElement;
    };
    interface HTMLScaleIconDeviceChangeCameraElement extends Components.ScaleIconDeviceChangeCamera, HTMLStencilElement {
    }
    var HTMLScaleIconDeviceChangeCameraElement: {
        prototype: HTMLScaleIconDeviceChangeCameraElement;
        new (): HTMLScaleIconDeviceChangeCameraElement;
    };
    interface HTMLScaleIconDeviceComputerElement extends Components.ScaleIconDeviceComputer, HTMLStencilElement {
    }
    var HTMLScaleIconDeviceComputerElement: {
        prototype: HTMLScaleIconDeviceComputerElement;
        new (): HTMLScaleIconDeviceComputerElement;
    };
    interface HTMLScaleIconDeviceDeviceControllerElement extends Components.ScaleIconDeviceDeviceController, HTMLStencilElement {
    }
    var HTMLScaleIconDeviceDeviceControllerElement: {
        prototype: HTMLScaleIconDeviceDeviceControllerElement;
        new (): HTMLScaleIconDeviceDeviceControllerElement;
    };
    interface HTMLScaleIconDeviceDeviceEthernetElement extends Components.ScaleIconDeviceDeviceEthernet, HTMLStencilElement {
    }
    var HTMLScaleIconDeviceDeviceEthernetElement: {
        prototype: HTMLScaleIconDeviceDeviceEthernetElement;
        new (): HTMLScaleIconDeviceDeviceEthernetElement;
    };
    interface HTMLScaleIconDeviceDeviceMeshElement extends Components.ScaleIconDeviceDeviceMesh, HTMLStencilElement {
    }
    var HTMLScaleIconDeviceDeviceMeshElement: {
        prototype: HTMLScaleIconDeviceDeviceMeshElement;
        new (): HTMLScaleIconDeviceDeviceMeshElement;
    };
    interface HTMLScaleIconDeviceDevicePhoneElement extends Components.ScaleIconDeviceDevicePhone, HTMLStencilElement {
    }
    var HTMLScaleIconDeviceDevicePhoneElement: {
        prototype: HTMLScaleIconDeviceDevicePhoneElement;
        new (): HTMLScaleIconDeviceDevicePhoneElement;
    };
    interface HTMLScaleIconDeviceDeviceRouterElement extends Components.ScaleIconDeviceDeviceRouter, HTMLStencilElement {
    }
    var HTMLScaleIconDeviceDeviceRouterElement: {
        prototype: HTMLScaleIconDeviceDeviceRouterElement;
        new (): HTMLScaleIconDeviceDeviceRouterElement;
    };
    interface HTMLScaleIconDeviceDeviceTvElement extends Components.ScaleIconDeviceDeviceTv, HTMLStencilElement {
    }
    var HTMLScaleIconDeviceDeviceTvElement: {
        prototype: HTMLScaleIconDeviceDeviceTvElement;
        new (): HTMLScaleIconDeviceDeviceTvElement;
    };
    interface HTMLScaleIconDeviceDeviceWatchElement extends Components.ScaleIconDeviceDeviceWatch, HTMLStencilElement {
    }
    var HTMLScaleIconDeviceDeviceWatchElement: {
        prototype: HTMLScaleIconDeviceDeviceWatchElement;
        new (): HTMLScaleIconDeviceDeviceWatchElement;
    };
    interface HTMLScaleIconDeviceDongleElement extends Components.ScaleIconDeviceDongle, HTMLStencilElement {
    }
    var HTMLScaleIconDeviceDongleElement: {
        prototype: HTMLScaleIconDeviceDongleElement;
        new (): HTMLScaleIconDeviceDongleElement;
    };
    interface HTMLScaleIconDeviceFaxElement extends Components.ScaleIconDeviceFax, HTMLStencilElement {
    }
    var HTMLScaleIconDeviceFaxElement: {
        prototype: HTMLScaleIconDeviceFaxElement;
        new (): HTMLScaleIconDeviceFaxElement;
    };
    interface HTMLScaleIconDeviceFixedLineServicesElement extends Components.ScaleIconDeviceFixedLineServices, HTMLStencilElement {
    }
    var HTMLScaleIconDeviceFixedLineServicesElement: {
        prototype: HTMLScaleIconDeviceFixedLineServicesElement;
        new (): HTMLScaleIconDeviceFixedLineServicesElement;
    };
    interface HTMLScaleIconDeviceGameControllerElement extends Components.ScaleIconDeviceGameController, HTMLStencilElement {
    }
    var HTMLScaleIconDeviceGameControllerElement: {
        prototype: HTMLScaleIconDeviceGameControllerElement;
        new (): HTMLScaleIconDeviceGameControllerElement;
    };
    interface HTMLScaleIconDeviceMediaReceiverElement extends Components.ScaleIconDeviceMediaReceiver, HTMLStencilElement {
    }
    var HTMLScaleIconDeviceMediaReceiverElement: {
        prototype: HTMLScaleIconDeviceMediaReceiverElement;
        new (): HTMLScaleIconDeviceMediaReceiverElement;
    };
    interface HTMLScaleIconDeviceMobileDataElement extends Components.ScaleIconDeviceMobileData, HTMLStencilElement {
    }
    var HTMLScaleIconDeviceMobileDataElement: {
        prototype: HTMLScaleIconDeviceMobileDataElement;
        new (): HTMLScaleIconDeviceMobileDataElement;
    };
    interface HTMLScaleIconDeviceMobileDevicesCombinationElement extends Components.ScaleIconDeviceMobileDevicesCombination, HTMLStencilElement {
    }
    var HTMLScaleIconDeviceMobileDevicesCombinationElement: {
        prototype: HTMLScaleIconDeviceMobileDevicesCombinationElement;
        new (): HTMLScaleIconDeviceMobileDevicesCombinationElement;
    };
    interface HTMLScaleIconDeviceMobileEquipmentElement extends Components.ScaleIconDeviceMobileEquipment, HTMLStencilElement {
    }
    var HTMLScaleIconDeviceMobileEquipmentElement: {
        prototype: HTMLScaleIconDeviceMobileEquipmentElement;
        new (): HTMLScaleIconDeviceMobileEquipmentElement;
    };
    interface HTMLScaleIconDeviceMobilePhoneInsuranceElement extends Components.ScaleIconDeviceMobilePhoneInsurance, HTMLStencilElement {
    }
    var HTMLScaleIconDeviceMobilePhoneInsuranceElement: {
        prototype: HTMLScaleIconDeviceMobilePhoneInsuranceElement;
        new (): HTMLScaleIconDeviceMobilePhoneInsuranceElement;
    };
    interface HTMLScaleIconDeviceMobileServicesElement extends Components.ScaleIconDeviceMobileServices, HTMLStencilElement {
    }
    var HTMLScaleIconDeviceMobileServicesElement: {
        prototype: HTMLScaleIconDeviceMobileServicesElement;
        new (): HTMLScaleIconDeviceMobileServicesElement;
    };
    interface HTMLScaleIconDeviceNoCameraElement extends Components.ScaleIconDeviceNoCamera, HTMLStencilElement {
    }
    var HTMLScaleIconDeviceNoCameraElement: {
        prototype: HTMLScaleIconDeviceNoCameraElement;
        new (): HTMLScaleIconDeviceNoCameraElement;
    };
    interface HTMLScaleIconDevicePhoneWithMobilePlanElement extends Components.ScaleIconDevicePhoneWithMobilePlan, HTMLStencilElement {
    }
    var HTMLScaleIconDevicePhoneWithMobilePlanElement: {
        prototype: HTMLScaleIconDevicePhoneWithMobilePlanElement;
        new (): HTMLScaleIconDevicePhoneWithMobilePlanElement;
    };
    interface HTMLScaleIconDevicePhoneWithoutMobilePlanElement extends Components.ScaleIconDevicePhoneWithoutMobilePlan, HTMLStencilElement {
    }
    var HTMLScaleIconDevicePhoneWithoutMobilePlanElement: {
        prototype: HTMLScaleIconDevicePhoneWithoutMobilePlanElement;
        new (): HTMLScaleIconDevicePhoneWithoutMobilePlanElement;
    };
    interface HTMLScaleIconDevicePhotoCameraElement extends Components.ScaleIconDevicePhotoCamera, HTMLStencilElement {
    }
    var HTMLScaleIconDevicePhotoCameraElement: {
        prototype: HTMLScaleIconDevicePhotoCameraElement;
        new (): HTMLScaleIconDevicePhotoCameraElement;
    };
    interface HTMLScaleIconDeviceRemoteControllerElement extends Components.ScaleIconDeviceRemoteController, HTMLStencilElement {
    }
    var HTMLScaleIconDeviceRemoteControllerElement: {
        prototype: HTMLScaleIconDeviceRemoteControllerElement;
        new (): HTMLScaleIconDeviceRemoteControllerElement;
    };
    interface HTMLScaleIconDeviceReplacementMobilephoneElement extends Components.ScaleIconDeviceReplacementMobilephone, HTMLStencilElement {
    }
    var HTMLScaleIconDeviceReplacementMobilephoneElement: {
        prototype: HTMLScaleIconDeviceReplacementMobilephoneElement;
        new (): HTMLScaleIconDeviceReplacementMobilephoneElement;
    };
    interface HTMLScaleIconDeviceScreenRotateElement extends Components.ScaleIconDeviceScreenRotate, HTMLStencilElement {
    }
    var HTMLScaleIconDeviceScreenRotateElement: {
        prototype: HTMLScaleIconDeviceScreenRotateElement;
        new (): HTMLScaleIconDeviceScreenRotateElement;
    };
    interface HTMLScaleIconDeviceServerElement extends Components.ScaleIconDeviceServer, HTMLStencilElement {
    }
    var HTMLScaleIconDeviceServerElement: {
        prototype: HTMLScaleIconDeviceServerElement;
        new (): HTMLScaleIconDeviceServerElement;
    };
    interface HTMLScaleIconDeviceSmartSpeakerElement extends Components.ScaleIconDeviceSmartSpeaker, HTMLStencilElement {
    }
    var HTMLScaleIconDeviceSmartSpeakerElement: {
        prototype: HTMLScaleIconDeviceSmartSpeakerElement;
        new (): HTMLScaleIconDeviceSmartSpeakerElement;
    };
    interface HTMLScaleIconDeviceTabletElement extends Components.ScaleIconDeviceTablet, HTMLStencilElement {
    }
    var HTMLScaleIconDeviceTabletElement: {
        prototype: HTMLScaleIconDeviceTabletElement;
        new (): HTMLScaleIconDeviceTabletElement;
    };
    interface HTMLScaleIconDeviceTvAndMobileElement extends Components.ScaleIconDeviceTvAndMobile, HTMLStencilElement {
    }
    var HTMLScaleIconDeviceTvAndMobileElement: {
        prototype: HTMLScaleIconDeviceTvAndMobileElement;
        new (): HTMLScaleIconDeviceTvAndMobileElement;
    };
    interface HTMLScaleIconDeviceTwitchingClosedStateElement extends Components.ScaleIconDeviceTwitchingClosedState, HTMLStencilElement {
    }
    var HTMLScaleIconDeviceTwitchingClosedStateElement: {
        prototype: HTMLScaleIconDeviceTwitchingClosedStateElement;
        new (): HTMLScaleIconDeviceTwitchingClosedStateElement;
    };
    interface HTMLScaleIconDeviceTwitchingOpenStateElement extends Components.ScaleIconDeviceTwitchingOpenState, HTMLStencilElement {
    }
    var HTMLScaleIconDeviceTwitchingOpenStateElement: {
        prototype: HTMLScaleIconDeviceTwitchingOpenStateElement;
        new (): HTMLScaleIconDeviceTwitchingOpenStateElement;
    };
    interface HTMLScaleIconHomeHomeElement extends Components.ScaleIconHomeHome, HTMLStencilElement {
    }
    var HTMLScaleIconHomeHomeElement: {
        prototype: HTMLScaleIconHomeHomeElement;
        new (): HTMLScaleIconHomeHomeElement;
    };
    interface HTMLScaleIconHomeInternetAtHomeElement extends Components.ScaleIconHomeInternetAtHome, HTMLStencilElement {
    }
    var HTMLScaleIconHomeInternetAtHomeElement: {
        prototype: HTMLScaleIconHomeInternetAtHomeElement;
        new (): HTMLScaleIconHomeInternetAtHomeElement;
    };
    interface HTMLScaleIconHomeIotElement extends Components.ScaleIconHomeIot, HTMLStencilElement {
    }
    var HTMLScaleIconHomeIotElement: {
        prototype: HTMLScaleIconHomeIotElement;
        new (): HTMLScaleIconHomeIotElement;
    };
    interface HTMLScaleIconHomeLightBulbElement extends Components.ScaleIconHomeLightBulb, HTMLStencilElement {
    }
    var HTMLScaleIconHomeLightBulbElement: {
        prototype: HTMLScaleIconHomeLightBulbElement;
        new (): HTMLScaleIconHomeLightBulbElement;
    };
    interface HTMLScaleIconHomeNetworkSecureElement extends Components.ScaleIconHomeNetworkSecure, HTMLStencilElement {
    }
    var HTMLScaleIconHomeNetworkSecureElement: {
        prototype: HTMLScaleIconHomeNetworkSecureElement;
        new (): HTMLScaleIconHomeNetworkSecureElement;
    };
    interface HTMLScaleIconHomeNoWifiElement extends Components.ScaleIconHomeNoWifi, HTMLStencilElement {
    }
    var HTMLScaleIconHomeNoWifiElement: {
        prototype: HTMLScaleIconHomeNoWifiElement;
        new (): HTMLScaleIconHomeNoWifiElement;
    };
    interface HTMLScaleIconHomePowerSocketElement extends Components.ScaleIconHomePowerSocket, HTMLStencilElement {
    }
    var HTMLScaleIconHomePowerSocketElement: {
        prototype: HTMLScaleIconHomePowerSocketElement;
        new (): HTMLScaleIconHomePowerSocketElement;
    };
    interface HTMLScaleIconHomePreferredWifiElement extends Components.ScaleIconHomePreferredWifi, HTMLStencilElement {
    }
    var HTMLScaleIconHomePreferredWifiElement: {
        prototype: HTMLScaleIconHomePreferredWifiElement;
        new (): HTMLScaleIconHomePreferredWifiElement;
    };
    interface HTMLScaleIconHomeReducedWifiElement extends Components.ScaleIconHomeReducedWifi, HTMLStencilElement {
    }
    var HTMLScaleIconHomeReducedWifiElement: {
        prototype: HTMLScaleIconHomeReducedWifiElement;
        new (): HTMLScaleIconHomeReducedWifiElement;
    };
    interface HTMLScaleIconHomeSlowWifiElement extends Components.ScaleIconHomeSlowWifi, HTMLStencilElement {
    }
    var HTMLScaleIconHomeSlowWifiElement: {
        prototype: HTMLScaleIconHomeSlowWifiElement;
        new (): HTMLScaleIconHomeSlowWifiElement;
    };
    interface HTMLScaleIconHomeSmarthomeElement extends Components.ScaleIconHomeSmarthome, HTMLStencilElement {
    }
    var HTMLScaleIconHomeSmarthomeElement: {
        prototype: HTMLScaleIconHomeSmarthomeElement;
        new (): HTMLScaleIconHomeSmarthomeElement;
    };
    interface HTMLScaleIconHomeUnableToConnectToRouterElement extends Components.ScaleIconHomeUnableToConnectToRouter, HTMLStencilElement {
    }
    var HTMLScaleIconHomeUnableToConnectToRouterElement: {
        prototype: HTMLScaleIconHomeUnableToConnectToRouterElement;
        new (): HTMLScaleIconHomeUnableToConnectToRouterElement;
    };
    interface HTMLScaleIconHomeWifiElement extends Components.ScaleIconHomeWifi, HTMLStencilElement {
    }
    var HTMLScaleIconHomeWifiElement: {
        prototype: HTMLScaleIconHomeWifiElement;
        new (): HTMLScaleIconHomeWifiElement;
    };
    interface HTMLScaleIconHomeWifiConnectedElement extends Components.ScaleIconHomeWifiConnected, HTMLStencilElement {
    }
    var HTMLScaleIconHomeWifiConnectedElement: {
        prototype: HTMLScaleIconHomeWifiConnectedElement;
        new (): HTMLScaleIconHomeWifiConnectedElement;
    };
    interface HTMLScaleIconHomeWifiConnectionErrorElement extends Components.ScaleIconHomeWifiConnectionError, HTMLStencilElement {
    }
    var HTMLScaleIconHomeWifiConnectionErrorElement: {
        prototype: HTMLScaleIconHomeWifiConnectionErrorElement;
        new (): HTMLScaleIconHomeWifiConnectionErrorElement;
    };
    interface HTMLScaleIconHomeWifiManualLoginElement extends Components.ScaleIconHomeWifiManualLogin, HTMLStencilElement {
    }
    var HTMLScaleIconHomeWifiManualLoginElement: {
        prototype: HTMLScaleIconHomeWifiManualLoginElement;
        new (): HTMLScaleIconHomeWifiManualLoginElement;
    };
    interface HTMLScaleIconHomeWifiNoWiredInternetElement extends Components.ScaleIconHomeWifiNoWiredInternet, HTMLStencilElement {
    }
    var HTMLScaleIconHomeWifiNoWiredInternetElement: {
        prototype: HTMLScaleIconHomeWifiNoWiredInternetElement;
        new (): HTMLScaleIconHomeWifiNoWiredInternetElement;
    };
    interface HTMLScaleIconNavigationCircleTopUpElement extends Components.ScaleIconNavigationCircleTopUp, HTMLStencilElement {
    }
    var HTMLScaleIconNavigationCircleTopUpElement: {
        prototype: HTMLScaleIconNavigationCircleTopUpElement;
        new (): HTMLScaleIconNavigationCircleTopUpElement;
    };
    interface HTMLScaleIconNavigationCollapseDownElement extends Components.ScaleIconNavigationCollapseDown, HTMLStencilElement {
    }
    var HTMLScaleIconNavigationCollapseDownElement: {
        prototype: HTMLScaleIconNavigationCollapseDownElement;
        new (): HTMLScaleIconNavigationCollapseDownElement;
    };
    interface HTMLScaleIconNavigationCollapseUpElement extends Components.ScaleIconNavigationCollapseUp, HTMLStencilElement {
    }
    var HTMLScaleIconNavigationCollapseUpElement: {
        prototype: HTMLScaleIconNavigationCollapseUpElement;
        new (): HTMLScaleIconNavigationCollapseUpElement;
    };
    interface HTMLScaleIconNavigationDoubleLeftElement extends Components.ScaleIconNavigationDoubleLeft, HTMLStencilElement {
    }
    var HTMLScaleIconNavigationDoubleLeftElement: {
        prototype: HTMLScaleIconNavigationDoubleLeftElement;
        new (): HTMLScaleIconNavigationDoubleLeftElement;
    };
    interface HTMLScaleIconNavigationDoubleRightElement extends Components.ScaleIconNavigationDoubleRight, HTMLStencilElement {
    }
    var HTMLScaleIconNavigationDoubleRightElement: {
        prototype: HTMLScaleIconNavigationDoubleRightElement;
        new (): HTMLScaleIconNavigationDoubleRightElement;
    };
    interface HTMLScaleIconNavigationExternalLinkElement extends Components.ScaleIconNavigationExternalLink, HTMLStencilElement {
    }
    var HTMLScaleIconNavigationExternalLinkElement: {
        prototype: HTMLScaleIconNavigationExternalLinkElement;
        new (): HTMLScaleIconNavigationExternalLinkElement;
    };
    interface HTMLScaleIconNavigationInternalLinkElement extends Components.ScaleIconNavigationInternalLink, HTMLStencilElement {
    }
    var HTMLScaleIconNavigationInternalLinkElement: {
        prototype: HTMLScaleIconNavigationInternalLinkElement;
        new (): HTMLScaleIconNavigationInternalLinkElement;
    };
    interface HTMLScaleIconNavigationLeftElement extends Components.ScaleIconNavigationLeft, HTMLStencilElement {
    }
    var HTMLScaleIconNavigationLeftElement: {
        prototype: HTMLScaleIconNavigationLeftElement;
        new (): HTMLScaleIconNavigationLeftElement;
    };
    interface HTMLScaleIconNavigationLeftCondensedElement extends Components.ScaleIconNavigationLeftCondensed, HTMLStencilElement {
    }
    var HTMLScaleIconNavigationLeftCondensedElement: {
        prototype: HTMLScaleIconNavigationLeftCondensedElement;
        new (): HTMLScaleIconNavigationLeftCondensedElement;
    };
    interface HTMLScaleIconNavigationLocationElement extends Components.ScaleIconNavigationLocation, HTMLStencilElement {
    }
    var HTMLScaleIconNavigationLocationElement: {
        prototype: HTMLScaleIconNavigationLocationElement;
        new (): HTMLScaleIconNavigationLocationElement;
    };
    interface HTMLScaleIconNavigationMapElement extends Components.ScaleIconNavigationMap, HTMLStencilElement {
    }
    var HTMLScaleIconNavigationMapElement: {
        prototype: HTMLScaleIconNavigationMapElement;
        new (): HTMLScaleIconNavigationMapElement;
    };
    interface HTMLScaleIconNavigationMyLocationElement extends Components.ScaleIconNavigationMyLocation, HTMLStencilElement {
    }
    var HTMLScaleIconNavigationMyLocationElement: {
        prototype: HTMLScaleIconNavigationMyLocationElement;
        new (): HTMLScaleIconNavigationMyLocationElement;
    };
    interface HTMLScaleIconNavigationRightElement extends Components.ScaleIconNavigationRight, HTMLStencilElement {
    }
    var HTMLScaleIconNavigationRightElement: {
        prototype: HTMLScaleIconNavigationRightElement;
        new (): HTMLScaleIconNavigationRightElement;
    };
    interface HTMLScaleIconNavigationRightCondensedElement extends Components.ScaleIconNavigationRightCondensed, HTMLStencilElement {
    }
    var HTMLScaleIconNavigationRightCondensedElement: {
        prototype: HTMLScaleIconNavigationRightCondensedElement;
        new (): HTMLScaleIconNavigationRightCondensedElement;
    };
    interface HTMLScaleIconNavigationStartElement extends Components.ScaleIconNavigationStart, HTMLStencilElement {
    }
    var HTMLScaleIconNavigationStartElement: {
        prototype: HTMLScaleIconNavigationStartElement;
        new (): HTMLScaleIconNavigationStartElement;
    };
    interface HTMLScaleIconNavigationTopUpElement extends Components.ScaleIconNavigationTopUp, HTMLStencilElement {
    }
    var HTMLScaleIconNavigationTopUpElement: {
        prototype: HTMLScaleIconNavigationTopUpElement;
        new (): HTMLScaleIconNavigationTopUpElement;
    };
    interface HTMLScaleIconProcessOrderStatusElement extends Components.ScaleIconProcessOrderStatus, HTMLStencilElement {
    }
    var HTMLScaleIconProcessOrderStatusElement: {
        prototype: HTMLScaleIconProcessOrderStatusElement;
        new (): HTMLScaleIconProcessOrderStatusElement;
    };
    interface HTMLScaleIconProcessProcessingElement extends Components.ScaleIconProcessProcessing, HTMLStencilElement {
    }
    var HTMLScaleIconProcessProcessingElement: {
        prototype: HTMLScaleIconProcessProcessingElement;
        new (): HTMLScaleIconProcessProcessingElement;
    };
    interface HTMLScaleIconProcessSepaTransactionElement extends Components.ScaleIconProcessSepaTransaction, HTMLStencilElement {
    }
    var HTMLScaleIconProcessSepaTransactionElement: {
        prototype: HTMLScaleIconProcessSepaTransactionElement;
        new (): HTMLScaleIconProcessSepaTransactionElement;
    };
    interface HTMLScaleIconServiceDevicesServiceElement extends Components.ScaleIconServiceDevicesService, HTMLStencilElement {
    }
    var HTMLScaleIconServiceDevicesServiceElement: {
        prototype: HTMLScaleIconServiceDevicesServiceElement;
        new (): HTMLScaleIconServiceDevicesServiceElement;
    };
    interface HTMLScaleIconServiceMaintananceElement extends Components.ScaleIconServiceMaintanance, HTMLStencilElement {
    }
    var HTMLScaleIconServiceMaintananceElement: {
        prototype: HTMLScaleIconServiceMaintananceElement;
        new (): HTMLScaleIconServiceMaintananceElement;
    };
    interface HTMLScaleIconServiceManualElement extends Components.ScaleIconServiceManual, HTMLStencilElement {
    }
    var HTMLScaleIconServiceManualElement: {
        prototype: HTMLScaleIconServiceManualElement;
        new (): HTMLScaleIconServiceManualElement;
    };
    interface HTMLScaleIconServiceOneTimePasswordElement extends Components.ScaleIconServiceOneTimePassword, HTMLStencilElement {
    }
    var HTMLScaleIconServiceOneTimePasswordElement: {
        prototype: HTMLScaleIconServiceOneTimePasswordElement;
        new (): HTMLScaleIconServiceOneTimePasswordElement;
    };
    interface HTMLScaleIconServiceServicesElement extends Components.ScaleIconServiceServices, HTMLStencilElement {
    }
    var HTMLScaleIconServiceServicesElement: {
        prototype: HTMLScaleIconServiceServicesElement;
        new (): HTMLScaleIconServiceServicesElement;
    };
    interface HTMLScaleIconServiceSettingsElement extends Components.ScaleIconServiceSettings, HTMLStencilElement {
    }
    var HTMLScaleIconServiceSettingsElement: {
        prototype: HTMLScaleIconServiceSettingsElement;
        new (): HTMLScaleIconServiceSettingsElement;
    };
    interface HTMLScaleIconServiceSupportElement extends Components.ScaleIconServiceSupport, HTMLStencilElement {
    }
    var HTMLScaleIconServiceSupportElement: {
        prototype: HTMLScaleIconServiceSupportElement;
        new (): HTMLScaleIconServiceSupportElement;
    };
    interface HTMLScaleIconServiceVpnElement extends Components.ScaleIconServiceVpn, HTMLStencilElement {
    }
    var HTMLScaleIconServiceVpnElement: {
        prototype: HTMLScaleIconServiceVpnElement;
        new (): HTMLScaleIconServiceVpnElement;
    };
    interface HTMLScaleIconTProduct2faTelekomAppElement extends Components.ScaleIconTProduct2faTelekomApp, HTMLStencilElement {
    }
    var HTMLScaleIconTProduct2faTelekomAppElement: {
        prototype: HTMLScaleIconTProduct2faTelekomAppElement;
        new (): HTMLScaleIconTProduct2faTelekomAppElement;
    };
    interface HTMLScaleIconTProductMagentaCloudElement extends Components.ScaleIconTProductMagentaCloud, HTMLStencilElement {
    }
    var HTMLScaleIconTProductMagentaCloudElement: {
        prototype: HTMLScaleIconTProductMagentaCloudElement;
        new (): HTMLScaleIconTProductMagentaCloudElement;
    };
    interface HTMLScaleIconTProductMagentaTvElement extends Components.ScaleIconTProductMagentaTv, HTMLStencilElement {
    }
    var HTMLScaleIconTProductMagentaTvElement: {
        prototype: HTMLScaleIconTProductMagentaTvElement;
        new (): HTMLScaleIconTProductMagentaTvElement;
    };
    interface HTMLScaleIconTProductMagentaoneElement extends Components.ScaleIconTProductMagentaone, HTMLStencilElement {
    }
    var HTMLScaleIconTProductMagentaoneElement: {
        prototype: HTMLScaleIconTProductMagentaoneElement;
        new (): HTMLScaleIconTProductMagentaoneElement;
    };
    interface HTMLScaleIconTProductMeasureInternetSpeedElement extends Components.ScaleIconTProductMeasureInternetSpeed, HTMLStencilElement {
    }
    var HTMLScaleIconTProductMeasureInternetSpeedElement: {
        prototype: HTMLScaleIconTProductMeasureInternetSpeedElement;
        new (): HTMLScaleIconTProductMeasureInternetSpeedElement;
    };
    interface HTMLScaleIconTProductSeamlessConnectivityElement extends Components.ScaleIconTProductSeamlessConnectivity, HTMLStencilElement {
    }
    var HTMLScaleIconTProductSeamlessConnectivityElement: {
        prototype: HTMLScaleIconTProductSeamlessConnectivityElement;
        new (): HTMLScaleIconTProductSeamlessConnectivityElement;
    };
    interface HTMLScaleIconTProductTelekom1t1Element extends Components.ScaleIconTProductTelekom1t1, HTMLStencilElement {
    }
    var HTMLScaleIconTProductTelekom1t1Element: {
        prototype: HTMLScaleIconTProductTelekom1t1Element;
        new (): HTMLScaleIconTProductTelekom1t1Element;
    };
    interface HTMLScaleIconTProductTelekomPlanElement extends Components.ScaleIconTProductTelekomPlan, HTMLStencilElement {
    }
    var HTMLScaleIconTProductTelekomPlanElement: {
        prototype: HTMLScaleIconTProductTelekomPlanElement;
        new (): HTMLScaleIconTProductTelekomPlanElement;
    };
    interface HTMLScaleIconTProductTelekomShopBElement extends Components.ScaleIconTProductTelekomShopB, HTMLStencilElement {
    }
    var HTMLScaleIconTProductTelekomShopBElement: {
        prototype: HTMLScaleIconTProductTelekomShopBElement;
        new (): HTMLScaleIconTProductTelekomShopBElement;
    };
    interface HTMLScaleIconTProductUsageElement extends Components.ScaleIconTProductUsage, HTMLStencilElement {
    }
    var HTMLScaleIconTProductUsageElement: {
        prototype: HTMLScaleIconTProductUsageElement;
        new (): HTMLScaleIconTProductUsageElement;
    };
    interface HTMLScaleIconTProductVoiceElement extends Components.ScaleIconTProductVoice, HTMLStencilElement {
    }
    var HTMLScaleIconTProductVoiceElement: {
        prototype: HTMLScaleIconTProductVoiceElement;
        new (): HTMLScaleIconTProductVoiceElement;
    };
    interface HTMLScaleIconUserFileAdminElement extends Components.ScaleIconUserFileAdmin, HTMLStencilElement {
    }
    var HTMLScaleIconUserFileAdminElement: {
        prototype: HTMLScaleIconUserFileAdminElement;
        new (): HTMLScaleIconUserFileAdminElement;
    };
    interface HTMLScaleIconUserFileAnalyticsElement extends Components.ScaleIconUserFileAnalytics, HTMLStencilElement {
    }
    var HTMLScaleIconUserFileAnalyticsElement: {
        prototype: HTMLScaleIconUserFileAnalyticsElement;
        new (): HTMLScaleIconUserFileAnalyticsElement;
    };
    interface HTMLScaleIconUserFileAttachmentElement extends Components.ScaleIconUserFileAttachment, HTMLStencilElement {
    }
    var HTMLScaleIconUserFileAttachmentElement: {
        prototype: HTMLScaleIconUserFileAttachmentElement;
        new (): HTMLScaleIconUserFileAttachmentElement;
    };
    interface HTMLScaleIconUserFileAudioFileElement extends Components.ScaleIconUserFileAudioFile, HTMLStencilElement {
    }
    var HTMLScaleIconUserFileAudioFileElement: {
        prototype: HTMLScaleIconUserFileAudioFileElement;
        new (): HTMLScaleIconUserFileAudioFileElement;
    };
    interface HTMLScaleIconUserFileBillingElement extends Components.ScaleIconUserFileBilling, HTMLStencilElement {
    }
    var HTMLScaleIconUserFileBillingElement: {
        prototype: HTMLScaleIconUserFileBillingElement;
        new (): HTMLScaleIconUserFileBillingElement;
    };
    interface HTMLScaleIconUserFileBoyElement extends Components.ScaleIconUserFileBoy, HTMLStencilElement {
    }
    var HTMLScaleIconUserFileBoyElement: {
        prototype: HTMLScaleIconUserFileBoyElement;
        new (): HTMLScaleIconUserFileBoyElement;
    };
    interface HTMLScaleIconUserFileBussinesUsersElement extends Components.ScaleIconUserFileBussinesUsers, HTMLStencilElement {
    }
    var HTMLScaleIconUserFileBussinesUsersElement: {
        prototype: HTMLScaleIconUserFileBussinesUsersElement;
        new (): HTMLScaleIconUserFileBussinesUsersElement;
    };
    interface HTMLScaleIconUserFileCommunitiesElement extends Components.ScaleIconUserFileCommunities, HTMLStencilElement {
    }
    var HTMLScaleIconUserFileCommunitiesElement: {
        prototype: HTMLScaleIconUserFileCommunitiesElement;
        new (): HTMLScaleIconUserFileCommunitiesElement;
    };
    interface HTMLScaleIconUserFileContactsElement extends Components.ScaleIconUserFileContacts, HTMLStencilElement {
    }
    var HTMLScaleIconUserFileContactsElement: {
        prototype: HTMLScaleIconUserFileContactsElement;
        new (): HTMLScaleIconUserFileContactsElement;
    };
    interface HTMLScaleIconUserFileContactsFromCloudElement extends Components.ScaleIconUserFileContactsFromCloud, HTMLStencilElement {
    }
    var HTMLScaleIconUserFileContactsFromCloudElement: {
        prototype: HTMLScaleIconUserFileContactsFromCloudElement;
        new (): HTMLScaleIconUserFileContactsFromCloudElement;
    };
    interface HTMLScaleIconUserFileContractsElement extends Components.ScaleIconUserFileContracts, HTMLStencilElement {
    }
    var HTMLScaleIconUserFileContractsElement: {
        prototype: HTMLScaleIconUserFileContractsElement;
        new (): HTMLScaleIconUserFileContractsElement;
    };
    interface HTMLScaleIconUserFileDraftFileElement extends Components.ScaleIconUserFileDraftFile, HTMLStencilElement {
    }
    var HTMLScaleIconUserFileDraftFileElement: {
        prototype: HTMLScaleIconUserFileDraftFileElement;
        new (): HTMLScaleIconUserFileDraftFileElement;
    };
    interface HTMLScaleIconUserFileFamiliesElement extends Components.ScaleIconUserFileFamilies, HTMLStencilElement {
    }
    var HTMLScaleIconUserFileFamiliesElement: {
        prototype: HTMLScaleIconUserFileFamiliesElement;
        new (): HTMLScaleIconUserFileFamiliesElement;
    };
    interface HTMLScaleIconUserFileFamilyElement extends Components.ScaleIconUserFileFamily, HTMLStencilElement {
    }
    var HTMLScaleIconUserFileFamilyElement: {
        prototype: HTMLScaleIconUserFileFamilyElement;
        new (): HTMLScaleIconUserFileFamilyElement;
    };
    interface HTMLScaleIconUserFileFileElement extends Components.ScaleIconUserFileFile, HTMLStencilElement {
    }
    var HTMLScaleIconUserFileFileElement: {
        prototype: HTMLScaleIconUserFileFileElement;
        new (): HTMLScaleIconUserFileFileElement;
    };
    interface HTMLScaleIconUserFileFileCollectionElement extends Components.ScaleIconUserFileFileCollection, HTMLStencilElement {
    }
    var HTMLScaleIconUserFileFileCollectionElement: {
        prototype: HTMLScaleIconUserFileFileCollectionElement;
        new (): HTMLScaleIconUserFileFileCollectionElement;
    };
    interface HTMLScaleIconUserFileGirlElement extends Components.ScaleIconUserFileGirl, HTMLStencilElement {
    }
    var HTMLScaleIconUserFileGirlElement: {
        prototype: HTMLScaleIconUserFileGirlElement;
        new (): HTMLScaleIconUserFileGirlElement;
    };
    interface HTMLScaleIconUserFileHandshakeElement extends Components.ScaleIconUserFileHandshake, HTMLStencilElement {
    }
    var HTMLScaleIconUserFileHandshakeElement: {
        prototype: HTMLScaleIconUserFileHandshakeElement;
        new (): HTMLScaleIconUserFileHandshakeElement;
    };
    interface HTMLScaleIconUserFileHtmlFileElement extends Components.ScaleIconUserFileHtmlFile, HTMLStencilElement {
    }
    var HTMLScaleIconUserFileHtmlFileElement: {
        prototype: HTMLScaleIconUserFileHtmlFileElement;
        new (): HTMLScaleIconUserFileHtmlFileElement;
    };
    interface HTMLScaleIconUserFileIdCardElement extends Components.ScaleIconUserFileIdCard, HTMLStencilElement {
    }
    var HTMLScaleIconUserFileIdCardElement: {
        prototype: HTMLScaleIconUserFileIdCardElement;
        new (): HTMLScaleIconUserFileIdCardElement;
    };
    interface HTMLScaleIconUserFileImageFileElement extends Components.ScaleIconUserFileImageFile, HTMLStencilElement {
    }
    var HTMLScaleIconUserFileImageFileElement: {
        prototype: HTMLScaleIconUserFileImageFileElement;
        new (): HTMLScaleIconUserFileImageFileElement;
    };
    interface HTMLScaleIconUserFileLogoutElement extends Components.ScaleIconUserFileLogout, HTMLStencilElement {
    }
    var HTMLScaleIconUserFileLogoutElement: {
        prototype: HTMLScaleIconUserFileLogoutElement;
        new (): HTMLScaleIconUserFileLogoutElement;
    };
    interface HTMLScaleIconUserFileManElement extends Components.ScaleIconUserFileMan, HTMLStencilElement {
    }
    var HTMLScaleIconUserFileManElement: {
        prototype: HTMLScaleIconUserFileManElement;
        new (): HTMLScaleIconUserFileManElement;
    };
    interface HTMLScaleIconUserFilePdfFileElement extends Components.ScaleIconUserFilePdfFile, HTMLStencilElement {
    }
    var HTMLScaleIconUserFilePdfFileElement: {
        prototype: HTMLScaleIconUserFilePdfFileElement;
        new (): HTMLScaleIconUserFilePdfFileElement;
    };
    interface HTMLScaleIconUserFileSwitchUsersElement extends Components.ScaleIconUserFileSwitchUsers, HTMLStencilElement {
    }
    var HTMLScaleIconUserFileSwitchUsersElement: {
        prototype: HTMLScaleIconUserFileSwitchUsersElement;
        new (): HTMLScaleIconUserFileSwitchUsersElement;
    };
    interface HTMLScaleIconUserFileUserElement extends Components.ScaleIconUserFileUser, HTMLStencilElement {
    }
    var HTMLScaleIconUserFileUserElement: {
        prototype: HTMLScaleIconUserFileUserElement;
        new (): HTMLScaleIconUserFileUserElement;
    };
    interface HTMLScaleIconUserFileVideosElement extends Components.ScaleIconUserFileVideos, HTMLStencilElement {
    }
    var HTMLScaleIconUserFileVideosElement: {
        prototype: HTMLScaleIconUserFileVideosElement;
        new (): HTMLScaleIconUserFileVideosElement;
    };
    interface HTMLScaleIconUserFileWomanElement extends Components.ScaleIconUserFileWoman, HTMLStencilElement {
    }
    var HTMLScaleIconUserFileWomanElement: {
        prototype: HTMLScaleIconUserFileWomanElement;
        new (): HTMLScaleIconUserFileWomanElement;
    };
    interface HTMLScaleIconWeatherCloudyElement extends Components.ScaleIconWeatherCloudy, HTMLStencilElement {
    }
    var HTMLScaleIconWeatherCloudyElement: {
        prototype: HTMLScaleIconWeatherCloudyElement;
        new (): HTMLScaleIconWeatherCloudyElement;
    };
    interface HTMLScaleIconWeatherCloudyRainElement extends Components.ScaleIconWeatherCloudyRain, HTMLStencilElement {
    }
    var HTMLScaleIconWeatherCloudyRainElement: {
        prototype: HTMLScaleIconWeatherCloudyRainElement;
        new (): HTMLScaleIconWeatherCloudyRainElement;
    };
    interface HTMLScaleIconWeatherCloudySleetElement extends Components.ScaleIconWeatherCloudySleet, HTMLStencilElement {
    }
    var HTMLScaleIconWeatherCloudySleetElement: {
        prototype: HTMLScaleIconWeatherCloudySleetElement;
        new (): HTMLScaleIconWeatherCloudySleetElement;
    };
    interface HTMLScaleIconWeatherCloudySnowElement extends Components.ScaleIconWeatherCloudySnow, HTMLStencilElement {
    }
    var HTMLScaleIconWeatherCloudySnowElement: {
        prototype: HTMLScaleIconWeatherCloudySnowElement;
        new (): HTMLScaleIconWeatherCloudySnowElement;
    };
    interface HTMLScaleIconWeatherCloudyThunderRainElement extends Components.ScaleIconWeatherCloudyThunderRain, HTMLStencilElement {
    }
    var HTMLScaleIconWeatherCloudyThunderRainElement: {
        prototype: HTMLScaleIconWeatherCloudyThunderRainElement;
        new (): HTMLScaleIconWeatherCloudyThunderRainElement;
    };
    interface HTMLScaleIconWeatherCloudyThunderSnowElement extends Components.ScaleIconWeatherCloudyThunderSnow, HTMLStencilElement {
    }
    var HTMLScaleIconWeatherCloudyThunderSnowElement: {
        prototype: HTMLScaleIconWeatherCloudyThunderSnowElement;
        new (): HTMLScaleIconWeatherCloudyThunderSnowElement;
    };
    interface HTMLScaleIconWeatherHeavySleetElement extends Components.ScaleIconWeatherHeavySleet, HTMLStencilElement {
    }
    var HTMLScaleIconWeatherHeavySleetElement: {
        prototype: HTMLScaleIconWeatherHeavySleetElement;
        new (): HTMLScaleIconWeatherHeavySleetElement;
    };
    interface HTMLScaleIconWeatherHeavySnowElement extends Components.ScaleIconWeatherHeavySnow, HTMLStencilElement {
    }
    var HTMLScaleIconWeatherHeavySnowElement: {
        prototype: HTMLScaleIconWeatherHeavySnowElement;
        new (): HTMLScaleIconWeatherHeavySnowElement;
    };
    interface HTMLScaleIconWeatherMoonClearElement extends Components.ScaleIconWeatherMoonClear, HTMLStencilElement {
    }
    var HTMLScaleIconWeatherMoonClearElement: {
        prototype: HTMLScaleIconWeatherMoonClearElement;
        new (): HTMLScaleIconWeatherMoonClearElement;
    };
    interface HTMLScaleIconWeatherMoonCloudyAElement extends Components.ScaleIconWeatherMoonCloudyA, HTMLStencilElement {
    }
    var HTMLScaleIconWeatherMoonCloudyAElement: {
        prototype: HTMLScaleIconWeatherMoonCloudyAElement;
        new (): HTMLScaleIconWeatherMoonCloudyAElement;
    };
    interface HTMLScaleIconWeatherMoonCloudyBElement extends Components.ScaleIconWeatherMoonCloudyB, HTMLStencilElement {
    }
    var HTMLScaleIconWeatherMoonCloudyBElement: {
        prototype: HTMLScaleIconWeatherMoonCloudyBElement;
        new (): HTMLScaleIconWeatherMoonCloudyBElement;
    };
    interface HTMLScaleIconWeatherMoonRainElement extends Components.ScaleIconWeatherMoonRain, HTMLStencilElement {
    }
    var HTMLScaleIconWeatherMoonRainElement: {
        prototype: HTMLScaleIconWeatherMoonRainElement;
        new (): HTMLScaleIconWeatherMoonRainElement;
    };
    interface HTMLScaleIconWeatherMoonSleetElement extends Components.ScaleIconWeatherMoonSleet, HTMLStencilElement {
    }
    var HTMLScaleIconWeatherMoonSleetElement: {
        prototype: HTMLScaleIconWeatherMoonSleetElement;
        new (): HTMLScaleIconWeatherMoonSleetElement;
    };
    interface HTMLScaleIconWeatherMoonSnowElement extends Components.ScaleIconWeatherMoonSnow, HTMLStencilElement {
    }
    var HTMLScaleIconWeatherMoonSnowElement: {
        prototype: HTMLScaleIconWeatherMoonSnowElement;
        new (): HTMLScaleIconWeatherMoonSnowElement;
    };
    interface HTMLScaleIconWeatherMoonThunderRainElement extends Components.ScaleIconWeatherMoonThunderRain, HTMLStencilElement {
    }
    var HTMLScaleIconWeatherMoonThunderRainElement: {
        prototype: HTMLScaleIconWeatherMoonThunderRainElement;
        new (): HTMLScaleIconWeatherMoonThunderRainElement;
    };
    interface HTMLScaleIconWeatherMoonThunderSnowElement extends Components.ScaleIconWeatherMoonThunderSnow, HTMLStencilElement {
    }
    var HTMLScaleIconWeatherMoonThunderSnowElement: {
        prototype: HTMLScaleIconWeatherMoonThunderSnowElement;
        new (): HTMLScaleIconWeatherMoonThunderSnowElement;
    };
    interface HTMLScaleIconWeatherOvercastElement extends Components.ScaleIconWeatherOvercast, HTMLStencilElement {
    }
    var HTMLScaleIconWeatherOvercastElement: {
        prototype: HTMLScaleIconWeatherOvercastElement;
        new (): HTMLScaleIconWeatherOvercastElement;
    };
    interface HTMLScaleIconWeatherRainElement extends Components.ScaleIconWeatherRain, HTMLStencilElement {
    }
    var HTMLScaleIconWeatherRainElement: {
        prototype: HTMLScaleIconWeatherRainElement;
        new (): HTMLScaleIconWeatherRainElement;
    };
    interface HTMLScaleIconWeatherSunnyElement extends Components.ScaleIconWeatherSunny, HTMLStencilElement {
    }
    var HTMLScaleIconWeatherSunnyElement: {
        prototype: HTMLScaleIconWeatherSunnyElement;
        new (): HTMLScaleIconWeatherSunnyElement;
    };
    interface HTMLScaleIconWeatherThunderRainElement extends Components.ScaleIconWeatherThunderRain, HTMLStencilElement {
    }
    var HTMLScaleIconWeatherThunderRainElement: {
        prototype: HTMLScaleIconWeatherThunderRainElement;
        new (): HTMLScaleIconWeatherThunderRainElement;
    };
    interface HTMLScaleIconWeatherThunderSnowElement extends Components.ScaleIconWeatherThunderSnow, HTMLStencilElement {
    }
    var HTMLScaleIconWeatherThunderSnowElement: {
        prototype: HTMLScaleIconWeatherThunderSnowElement;
        new (): HTMLScaleIconWeatherThunderSnowElement;
    };
    interface HTMLScaleInputElement extends Components.ScaleInput, HTMLStencilElement {
    }
    var HTMLScaleInputElement: {
        prototype: HTMLScaleInputElement;
        new (): HTMLScaleInputElement;
    };
    interface HTMLScaleLinkElement extends Components.ScaleLink, HTMLStencilElement {
    }
    var HTMLScaleLinkElement: {
        prototype: HTMLScaleLinkElement;
        new (): HTMLScaleLinkElement;
    };
    interface HTMLScaleListElement extends Components.ScaleList, HTMLStencilElement {
    }
    var HTMLScaleListElement: {
        prototype: HTMLScaleListElement;
        new (): HTMLScaleListElement;
    };
    interface HTMLScaleListItemElement extends Components.ScaleListItem, HTMLStencilElement {
    }
    var HTMLScaleListItemElement: {
        prototype: HTMLScaleListItemElement;
        new (): HTMLScaleListItemElement;
    };
    interface HTMLScaleLoadingSpinnerElement extends Components.ScaleLoadingSpinner, HTMLStencilElement {
    }
    var HTMLScaleLoadingSpinnerElement: {
        prototype: HTMLScaleLoadingSpinnerElement;
        new (): HTMLScaleLoadingSpinnerElement;
    };
    interface HTMLScaleLogoElement extends Components.ScaleLogo, HTMLStencilElement {
    }
    var HTMLScaleLogoElement: {
        prototype: HTMLScaleLogoElement;
        new (): HTMLScaleLogoElement;
    };
    interface HTMLScaleLogoSvgElement extends Components.ScaleLogoSvg, HTMLStencilElement {
    }
    var HTMLScaleLogoSvgElement: {
        prototype: HTMLScaleLogoSvgElement;
        new (): HTMLScaleLogoSvgElement;
    };
    interface HTMLScaleMenuFlyoutElement extends Components.ScaleMenuFlyout, HTMLStencilElement {
    }
    var HTMLScaleMenuFlyoutElement: {
        prototype: HTMLScaleMenuFlyoutElement;
        new (): HTMLScaleMenuFlyoutElement;
    };
    interface HTMLScaleMenuFlyoutDividerElement extends Components.ScaleMenuFlyoutDivider, HTMLStencilElement {
    }
    var HTMLScaleMenuFlyoutDividerElement: {
        prototype: HTMLScaleMenuFlyoutDividerElement;
        new (): HTMLScaleMenuFlyoutDividerElement;
    };
    interface HTMLScaleMenuFlyoutItemElement extends Components.ScaleMenuFlyoutItem, HTMLStencilElement {
    }
    var HTMLScaleMenuFlyoutItemElement: {
        prototype: HTMLScaleMenuFlyoutItemElement;
        new (): HTMLScaleMenuFlyoutItemElement;
    };
    interface HTMLScaleMenuFlyoutListElement extends Components.ScaleMenuFlyoutList, HTMLStencilElement {
    }
    var HTMLScaleMenuFlyoutListElement: {
        prototype: HTMLScaleMenuFlyoutListElement;
        new (): HTMLScaleMenuFlyoutListElement;
    };
    interface HTMLScaleModalElement extends Components.ScaleModal, HTMLStencilElement {
    }
    var HTMLScaleModalElement: {
        prototype: HTMLScaleModalElement;
        new (): HTMLScaleModalElement;
    };
    interface HTMLScaleNavIconElement extends Components.ScaleNavIcon, HTMLStencilElement {
    }
    var HTMLScaleNavIconElement: {
        prototype: HTMLScaleNavIconElement;
        new (): HTMLScaleNavIconElement;
    };
    interface HTMLScaleNavMainElement extends Components.ScaleNavMain, HTMLStencilElement {
    }
    var HTMLScaleNavMainElement: {
        prototype: HTMLScaleNavMainElement;
        new (): HTMLScaleNavMainElement;
    };
    interface HTMLScaleNavSegmentElement extends Components.ScaleNavSegment, HTMLStencilElement {
    }
    var HTMLScaleNavSegmentElement: {
        prototype: HTMLScaleNavSegmentElement;
        new (): HTMLScaleNavSegmentElement;
    };
    interface HTMLScaleNotificationElement extends Components.ScaleNotification, HTMLStencilElement {
    }
    var HTMLScaleNotificationElement: {
        prototype: HTMLScaleNotificationElement;
        new (): HTMLScaleNotificationElement;
    };
    interface HTMLScaleNotificationBadgeElement extends Components.ScaleNotificationBadge, HTMLStencilElement {
    }
    var HTMLScaleNotificationBadgeElement: {
        prototype: HTMLScaleNotificationBadgeElement;
        new (): HTMLScaleNotificationBadgeElement;
    };
    interface HTMLScaleNotificationBannerElement extends Components.ScaleNotificationBanner, HTMLStencilElement {
    }
    var HTMLScaleNotificationBannerElement: {
        prototype: HTMLScaleNotificationBannerElement;
        new (): HTMLScaleNotificationBannerElement;
    };
    interface HTMLScaleNotificationMessageElement extends Components.ScaleNotificationMessage, HTMLStencilElement {
    }
    var HTMLScaleNotificationMessageElement: {
        prototype: HTMLScaleNotificationMessageElement;
        new (): HTMLScaleNotificationMessageElement;
    };
    interface HTMLScaleNotificationToastElement extends Components.ScaleNotificationToast, HTMLStencilElement {
    }
    var HTMLScaleNotificationToastElement: {
        prototype: HTMLScaleNotificationToastElement;
        new (): HTMLScaleNotificationToastElement;
    };
    interface HTMLScalePaginationElement extends Components.ScalePagination, HTMLStencilElement {
    }
    var HTMLScalePaginationElement: {
        prototype: HTMLScalePaginationElement;
        new (): HTMLScalePaginationElement;
    };
    interface HTMLScaleProgressBarElement extends Components.ScaleProgressBar, HTMLStencilElement {
    }
    var HTMLScaleProgressBarElement: {
        prototype: HTMLScaleProgressBarElement;
        new (): HTMLScaleProgressBarElement;
    };
    interface HTMLScaleRadioButtonElement extends Components.ScaleRadioButton, HTMLStencilElement {
    }
    var HTMLScaleRadioButtonElement: {
        prototype: HTMLScaleRadioButtonElement;
        new (): HTMLScaleRadioButtonElement;
    };
    interface HTMLScaleRadioButtonGroupElement extends Components.ScaleRadioButtonGroup, HTMLStencilElement {
    }
    var HTMLScaleRadioButtonGroupElement: {
        prototype: HTMLScaleRadioButtonGroupElement;
        new (): HTMLScaleRadioButtonGroupElement;
    };
    interface HTMLScaleRatingStarsElement extends Components.ScaleRatingStars, HTMLStencilElement {
    }
    var HTMLScaleRatingStarsElement: {
        prototype: HTMLScaleRatingStarsElement;
        new (): HTMLScaleRatingStarsElement;
    };
    interface HTMLScaleSegmentElement extends Components.ScaleSegment, HTMLStencilElement {
    }
    var HTMLScaleSegmentElement: {
        prototype: HTMLScaleSegmentElement;
        new (): HTMLScaleSegmentElement;
    };
    interface HTMLScaleSegmentedButtonElement extends Components.ScaleSegmentedButton, HTMLStencilElement {
    }
    var HTMLScaleSegmentedButtonElement: {
        prototype: HTMLScaleSegmentedButtonElement;
        new (): HTMLScaleSegmentedButtonElement;
    };
    interface HTMLScaleSidebarNavElement extends Components.ScaleSidebarNav, HTMLStencilElement {
    }
    var HTMLScaleSidebarNavElement: {
        prototype: HTMLScaleSidebarNavElement;
        new (): HTMLScaleSidebarNavElement;
    };
    interface HTMLScaleSidebarNavCollapsibleElement extends Components.ScaleSidebarNavCollapsible, HTMLStencilElement {
    }
    var HTMLScaleSidebarNavCollapsibleElement: {
        prototype: HTMLScaleSidebarNavCollapsibleElement;
        new (): HTMLScaleSidebarNavCollapsibleElement;
    };
    interface HTMLScaleSidebarNavItemElement extends Components.ScaleSidebarNavItem, HTMLStencilElement {
    }
    var HTMLScaleSidebarNavItemElement: {
        prototype: HTMLScaleSidebarNavItemElement;
        new (): HTMLScaleSidebarNavItemElement;
    };
    interface HTMLScaleSliderElement extends Components.ScaleSlider, HTMLStencilElement {
    }
    var HTMLScaleSliderElement: {
        prototype: HTMLScaleSliderElement;
        new (): HTMLScaleSliderElement;
    };
    interface HTMLScaleSsrSlotFixElement extends Components.ScaleSsrSlotFix, HTMLStencilElement {
    }
    var HTMLScaleSsrSlotFixElement: {
        prototype: HTMLScaleSsrSlotFixElement;
        new (): HTMLScaleSsrSlotFixElement;
    };
    interface HTMLScaleSwitchElement extends Components.ScaleSwitch, HTMLStencilElement {
    }
    var HTMLScaleSwitchElement: {
        prototype: HTMLScaleSwitchElement;
        new (): HTMLScaleSwitchElement;
    };
    interface HTMLScaleTabHeaderElement extends Components.ScaleTabHeader, HTMLStencilElement {
    }
    var HTMLScaleTabHeaderElement: {
        prototype: HTMLScaleTabHeaderElement;
        new (): HTMLScaleTabHeaderElement;
    };
    interface HTMLScaleTabNavElement extends Components.ScaleTabNav, HTMLStencilElement {
    }
    var HTMLScaleTabNavElement: {
        prototype: HTMLScaleTabNavElement;
        new (): HTMLScaleTabNavElement;
    };
    interface HTMLScaleTabPanelElement extends Components.ScaleTabPanel, HTMLStencilElement {
    }
    var HTMLScaleTabPanelElement: {
        prototype: HTMLScaleTabPanelElement;
        new (): HTMLScaleTabPanelElement;
    };
    interface HTMLScaleTableElement extends Components.ScaleTable, HTMLStencilElement {
    }
    var HTMLScaleTableElement: {
        prototype: HTMLScaleTableElement;
        new (): HTMLScaleTableElement;
    };
    interface HTMLScaleTagElement extends Components.ScaleTag, HTMLStencilElement {
    }
    var HTMLScaleTagElement: {
        prototype: HTMLScaleTagElement;
        new (): HTMLScaleTagElement;
    };
    interface HTMLScaleTelekomAppShellElement extends Components.ScaleTelekomAppShell, HTMLStencilElement {
    }
    var HTMLScaleTelekomAppShellElement: {
        prototype: HTMLScaleTelekomAppShellElement;
        new (): HTMLScaleTelekomAppShellElement;
    };
    interface HTMLScaleTelekomFooterElement extends Components.ScaleTelekomFooter, HTMLStencilElement {
    }
    var HTMLScaleTelekomFooterElement: {
        prototype: HTMLScaleTelekomFooterElement;
        new (): HTMLScaleTelekomFooterElement;
    };
    interface HTMLScaleTelekomFooterContentElement extends Components.ScaleTelekomFooterContent, HTMLStencilElement {
    }
    var HTMLScaleTelekomFooterContentElement: {
        prototype: HTMLScaleTelekomFooterContentElement;
        new (): HTMLScaleTelekomFooterContentElement;
    };
    interface HTMLScaleTelekomFooterDataBackCompatElement extends Components.ScaleTelekomFooterDataBackCompat, HTMLStencilElement {
    }
    var HTMLScaleTelekomFooterDataBackCompatElement: {
        prototype: HTMLScaleTelekomFooterDataBackCompatElement;
        new (): HTMLScaleTelekomFooterDataBackCompatElement;
    };
    interface HTMLScaleTelekomFooterExtendedNavigationElement extends Components.ScaleTelekomFooterExtendedNavigation, HTMLStencilElement {
    }
    var HTMLScaleTelekomFooterExtendedNavigationElement: {
        prototype: HTMLScaleTelekomFooterExtendedNavigationElement;
        new (): HTMLScaleTelekomFooterExtendedNavigationElement;
    };
    interface HTMLScaleTelekomFooterExtendedNavigationColumnElement extends Components.ScaleTelekomFooterExtendedNavigationColumn, HTMLStencilElement {
    }
    var HTMLScaleTelekomFooterExtendedNavigationColumnElement: {
        prototype: HTMLScaleTelekomFooterExtendedNavigationColumnElement;
        new (): HTMLScaleTelekomFooterExtendedNavigationColumnElement;
    };
    interface HTMLScaleTelekomHeaderElement extends Components.ScaleTelekomHeader, HTMLStencilElement {
    }
    var HTMLScaleTelekomHeaderElement: {
        prototype: HTMLScaleTelekomHeaderElement;
        new (): HTMLScaleTelekomHeaderElement;
    };
    interface HTMLScaleTelekomHeaderDataBackCompatElement extends Components.ScaleTelekomHeaderDataBackCompat, HTMLStencilElement {
    }
    var HTMLScaleTelekomHeaderDataBackCompatElement: {
        prototype: HTMLScaleTelekomHeaderDataBackCompatElement;
        new (): HTMLScaleTelekomHeaderDataBackCompatElement;
    };
    interface HTMLScaleTelekomMegaMenuElement extends Components.ScaleTelekomMegaMenu, HTMLStencilElement {
    }
    var HTMLScaleTelekomMegaMenuElement: {
        prototype: HTMLScaleTelekomMegaMenuElement;
        new (): HTMLScaleTelekomMegaMenuElement;
    };
    interface HTMLScaleTelekomMegaMenuColumnElement extends Components.ScaleTelekomMegaMenuColumn, HTMLStencilElement {
    }
    var HTMLScaleTelekomMegaMenuColumnElement: {
        prototype: HTMLScaleTelekomMegaMenuColumnElement;
        new (): HTMLScaleTelekomMegaMenuColumnElement;
    };
    interface HTMLScaleTelekomMobileFlyoutCanvasElement extends Components.ScaleTelekomMobileFlyoutCanvas, HTMLStencilElement {
    }
    var HTMLScaleTelekomMobileFlyoutCanvasElement: {
        prototype: HTMLScaleTelekomMobileFlyoutCanvasElement;
        new (): HTMLScaleTelekomMobileFlyoutCanvasElement;
    };
    interface HTMLScaleTelekomMobileMenuElement extends Components.ScaleTelekomMobileMenu, HTMLStencilElement {
    }
    var HTMLScaleTelekomMobileMenuElement: {
        prototype: HTMLScaleTelekomMobileMenuElement;
        new (): HTMLScaleTelekomMobileMenuElement;
    };
    interface HTMLScaleTelekomMobileMenuItemElement extends Components.ScaleTelekomMobileMenuItem, HTMLStencilElement {
    }
    var HTMLScaleTelekomMobileMenuItemElement: {
        prototype: HTMLScaleTelekomMobileMenuItemElement;
        new (): HTMLScaleTelekomMobileMenuItemElement;
    };
    interface HTMLScaleTelekomNavFlyoutElement extends Components.ScaleTelekomNavFlyout, HTMLStencilElement {
    }
    var HTMLScaleTelekomNavFlyoutElement: {
        prototype: HTMLScaleTelekomNavFlyoutElement;
        new (): HTMLScaleTelekomNavFlyoutElement;
    };
    interface HTMLScaleTelekomNavItemElement extends Components.ScaleTelekomNavItem, HTMLStencilElement {
    }
    var HTMLScaleTelekomNavItemElement: {
        prototype: HTMLScaleTelekomNavItemElement;
        new (): HTMLScaleTelekomNavItemElement;
    };
    interface HTMLScaleTelekomNavListElement extends Components.ScaleTelekomNavList, HTMLStencilElement {
    }
    var HTMLScaleTelekomNavListElement: {
        prototype: HTMLScaleTelekomNavListElement;
        new (): HTMLScaleTelekomNavListElement;
    };
    interface HTMLScaleTelekomProfileMenuElement extends Components.ScaleTelekomProfileMenu, HTMLStencilElement {
    }
    var HTMLScaleTelekomProfileMenuElement: {
        prototype: HTMLScaleTelekomProfileMenuElement;
        new (): HTMLScaleTelekomProfileMenuElement;
    };
    interface HTMLScaleTextFieldElement extends Components.ScaleTextField, HTMLStencilElement {
    }
    var HTMLScaleTextFieldElement: {
        prototype: HTMLScaleTextFieldElement;
        new (): HTMLScaleTextFieldElement;
    };
    interface HTMLScaleTextareaElement extends Components.ScaleTextarea, HTMLStencilElement {
    }
    var HTMLScaleTextareaElement: {
        prototype: HTMLScaleTextareaElement;
        new (): HTMLScaleTextareaElement;
    };
    interface HTMLScaleToastElement extends Components.ScaleToast, HTMLStencilElement {
    }
    var HTMLScaleToastElement: {
        prototype: HTMLScaleToastElement;
        new (): HTMLScaleToastElement;
    };
    interface HTMLScaleToggleButtonElement extends Components.ScaleToggleButton, HTMLStencilElement {
    }
    var HTMLScaleToggleButtonElement: {
        prototype: HTMLScaleToggleButtonElement;
        new (): HTMLScaleToggleButtonElement;
    };
    interface HTMLScaleToggleGroupElement extends Components.ScaleToggleGroup, HTMLStencilElement {
    }
    var HTMLScaleToggleGroupElement: {
        prototype: HTMLScaleToggleGroupElement;
        new (): HTMLScaleToggleGroupElement;
    };
    interface HTMLScaleTooltipElement extends Components.ScaleTooltip, HTMLStencilElement {
    }
    var HTMLScaleTooltipElement: {
        prototype: HTMLScaleTooltipElement;
        new (): HTMLScaleTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "app-logo": HTMLAppLogoElement;
        "app-mega-menu": HTMLAppMegaMenuElement;
        "app-navigation-main-mobile": HTMLAppNavigationMainMobileElement;
        "app-navigation-sector-mobile": HTMLAppNavigationSectorMobileElement;
        "app-navigation-user-menu": HTMLAppNavigationUserMenuElement;
        "scale-accordion": HTMLScaleAccordionElement;
        "scale-alert": HTMLScaleAlertElement;
        "scale-app-footer": HTMLScaleAppFooterElement;
        "scale-app-header": HTMLScaleAppHeaderElement;
        "scale-app-shell": HTMLScaleAppShellElement;
        "scale-badge": HTMLScaleBadgeElement;
        "scale-breadcrumb": HTMLScaleBreadcrumbElement;
        "scale-button": HTMLScaleButtonElement;
        "scale-callout": HTMLScaleCalloutElement;
        "scale-card": HTMLScaleCardElement;
        "scale-carousel": HTMLScaleCarouselElement;
        "scale-chart-stack-card": HTMLScaleChartStackCardElement;
        "scale-checkbox": HTMLScaleCheckboxElement;
        "scale-checkbox-group": HTMLScaleCheckboxGroupElement;
        "scale-chip": HTMLScaleChipElement;
        "scale-collapsible": HTMLScaleCollapsibleElement;
        "scale-data-grid": HTMLScaleDataGridElement;
        "scale-date-picker": HTMLScaleDatePickerElement;
        "scale-divider": HTMLScaleDividerElement;
        "scale-dropdown": HTMLScaleDropdownElement;
        "scale-dropdown-select": HTMLScaleDropdownSelectElement;
        "scale-dropdown-select-item": HTMLScaleDropdownSelectItemElement;
        "scale-grid": HTMLScaleGridElement;
        "scale-grid-item": HTMLScaleGridItemElement;
        "scale-helper-text": HTMLScaleHelperTextElement;
        "scale-icon": HTMLScaleIconElement;
        "scale-icon-action-add": HTMLScaleIconActionAddElement;
        "scale-icon-action-add-card": HTMLScaleIconActionAddCardElement;
        "scale-icon-action-arrange": HTMLScaleIconActionArrangeElement;
        "scale-icon-action-arrow-down": HTMLScaleIconActionArrowDownElement;
        "scale-icon-action-arrow-left": HTMLScaleIconActionArrowLeftElement;
        "scale-icon-action-arrow-right": HTMLScaleIconActionArrowRightElement;
        "scale-icon-action-arrow-up": HTMLScaleIconActionArrowUpElement;
        "scale-icon-action-auto-login": HTMLScaleIconActionAutoLoginElement;
        "scale-icon-action-backspace": HTMLScaleIconActionBackspaceElement;
        "scale-icon-action-backward": HTMLScaleIconActionBackwardElement;
        "scale-icon-action-changelog": HTMLScaleIconActionChangelogElement;
        "scale-icon-action-checkmark": HTMLScaleIconActionCheckmarkElement;
        "scale-icon-action-circle-add": HTMLScaleIconActionCircleAddElement;
        "scale-icon-action-circle-close": HTMLScaleIconActionCircleCloseElement;
        "scale-icon-action-close": HTMLScaleIconActionCloseElement;
        "scale-icon-action-compare": HTMLScaleIconActionCompareElement;
        "scale-icon-action-copy-paste": HTMLScaleIconActionCopyPasteElement;
        "scale-icon-action-cut-paste": HTMLScaleIconActionCutPasteElement;
        "scale-icon-action-disabled-microphone": HTMLScaleIconActionDisabledMicrophoneElement;
        "scale-icon-action-download": HTMLScaleIconActionDownloadElement;
        "scale-icon-action-download-from-cloud": HTMLScaleIconActionDownloadFromCloudElement;
        "scale-icon-action-drag-and-drop": HTMLScaleIconActionDragAndDropElement;
        "scale-icon-action-edit": HTMLScaleIconActionEditElement;
        "scale-icon-action-export": HTMLScaleIconActionExportElement;
        "scale-icon-action-fast-forward": HTMLScaleIconActionFastForwardElement;
        "scale-icon-action-fast-forward-nb": HTMLScaleIconActionFastForwardNbElement;
        "scale-icon-action-favorite": HTMLScaleIconActionFavoriteElement;
        "scale-icon-action-filter": HTMLScaleIconActionFilterElement;
        "scale-icon-action-filter-2": HTMLScaleIconActionFilter2Element;
        "scale-icon-action-forward": HTMLScaleIconActionForwardElement;
        "scale-icon-action-full-screen": HTMLScaleIconActionFullScreenElement;
        "scale-icon-action-hide-password": HTMLScaleIconActionHidePasswordElement;
        "scale-icon-action-import": HTMLScaleIconActionImportElement;
        "scale-icon-action-install": HTMLScaleIconActionInstallElement;
        "scale-icon-action-launch": HTMLScaleIconActionLaunchElement;
        "scale-icon-action-light-dark-mode": HTMLScaleIconActionLightDarkModeElement;
        "scale-icon-action-link": HTMLScaleIconActionLinkElement;
        "scale-icon-action-logout": HTMLScaleIconActionLogoutElement;
        "scale-icon-action-loop": HTMLScaleIconActionLoopElement;
        "scale-icon-action-menu": HTMLScaleIconActionMenuElement;
        "scale-icon-action-microphone": HTMLScaleIconActionMicrophoneElement;
        "scale-icon-action-minimize-screen": HTMLScaleIconActionMinimizeScreenElement;
        "scale-icon-action-minus": HTMLScaleIconActionMinusElement;
        "scale-icon-action-minus-circle": HTMLScaleIconActionMinusCircleElement;
        "scale-icon-action-more": HTMLScaleIconActionMoreElement;
        "scale-icon-action-move": HTMLScaleIconActionMoveElement;
        "scale-icon-action-mute": HTMLScaleIconActionMuteElement;
        "scale-icon-action-notification": HTMLScaleIconActionNotificationElement;
        "scale-icon-action-pause": HTMLScaleIconActionPauseElement;
        "scale-icon-action-pause-nb": HTMLScaleIconActionPauseNbElement;
        "scale-icon-action-pin": HTMLScaleIconActionPinElement;
        "scale-icon-action-play": HTMLScaleIconActionPlayElement;
        "scale-icon-action-play-nb": HTMLScaleIconActionPlayNbElement;
        "scale-icon-action-pop-up-window": HTMLScaleIconActionPopUpWindowElement;
        "scale-icon-action-power": HTMLScaleIconActionPowerElement;
        "scale-icon-action-previous-nb": HTMLScaleIconActionPreviousNbElement;
        "scale-icon-action-print": HTMLScaleIconActionPrintElement;
        "scale-icon-action-publish": HTMLScaleIconActionPublishElement;
        "scale-icon-action-random": HTMLScaleIconActionRandomElement;
        "scale-icon-action-record-nb": HTMLScaleIconActionRecordNbElement;
        "scale-icon-action-refresh": HTMLScaleIconActionRefreshElement;
        "scale-icon-action-remove": HTMLScaleIconActionRemoveElement;
        "scale-icon-action-reply": HTMLScaleIconActionReplyElement;
        "scale-icon-action-reply-all": HTMLScaleIconActionReplyAllElement;
        "scale-icon-action-reply-forward": HTMLScaleIconActionReplyForwardElement;
        "scale-icon-action-restart": HTMLScaleIconActionRestartElement;
        "scale-icon-action-search": HTMLScaleIconActionSearchElement;
        "scale-icon-action-send": HTMLScaleIconActionSendElement;
        "scale-icon-action-share": HTMLScaleIconActionShareElement;
        "scale-icon-action-shopping-cart": HTMLScaleIconActionShoppingCartElement;
        "scale-icon-action-show-password": HTMLScaleIconActionShowPasswordElement;
        "scale-icon-action-sort": HTMLScaleIconActionSortElement;
        "scale-icon-action-sound-on": HTMLScaleIconActionSoundOnElement;
        "scale-icon-action-star": HTMLScaleIconActionStarElement;
        "scale-icon-action-stream-on": HTMLScaleIconActionStreamOnElement;
        "scale-icon-action-success": HTMLScaleIconActionSuccessElement;
        "scale-icon-action-thumbs-down": HTMLScaleIconActionThumbsDownElement;
        "scale-icon-action-thumbs-up": HTMLScaleIconActionThumbsUpElement;
        "scale-icon-action-tiles-add": HTMLScaleIconActionTilesAddElement;
        "scale-icon-action-upload": HTMLScaleIconActionUploadElement;
        "scale-icon-action-upload-to-cloud": HTMLScaleIconActionUploadToCloudElement;
        "scale-icon-action-volume-down": HTMLScaleIconActionVolumeDownElement;
        "scale-icon-action-volume-up": HTMLScaleIconActionVolumeUpElement;
        "scale-icon-action-zoom-in": HTMLScaleIconActionZoomInElement;
        "scale-icon-action-zoom-out": HTMLScaleIconActionZoomOutElement;
        "scale-icon-alert-antivirus-protection": HTMLScaleIconAlertAntivirusProtectionElement;
        "scale-icon-alert-compliance": HTMLScaleIconAlertComplianceElement;
        "scale-icon-alert-cyber-security": HTMLScaleIconAlertCyberSecurityElement;
        "scale-icon-alert-error": HTMLScaleIconAlertErrorElement;
        "scale-icon-alert-help": HTMLScaleIconAlertHelpElement;
        "scale-icon-alert-high-priority-email": HTMLScaleIconAlertHighPriorityEmailElement;
        "scale-icon-alert-imprint-dataprivacy": HTMLScaleIconAlertImprintDataprivacyElement;
        "scale-icon-alert-information": HTMLScaleIconAlertInformationElement;
        "scale-icon-alert-legal": HTMLScaleIconAlertLegalElement;
        "scale-icon-alert-network-disrupted": HTMLScaleIconAlertNetworkDisruptedElement;
        "scale-icon-alert-password-breaking": HTMLScaleIconAlertPasswordBreakingElement;
        "scale-icon-alert-security": HTMLScaleIconAlertSecurityElement;
        "scale-icon-alert-traffic-disruption": HTMLScaleIconAlertTrafficDisruptionElement;
        "scale-icon-alert-unknown": HTMLScaleIconAlertUnknownElement;
        "scale-icon-alert-warning": HTMLScaleIconAlertWarningElement;
        "scale-icon-communication-available": HTMLScaleIconCommunicationAvailableElement;
        "scale-icon-communication-blog": HTMLScaleIconCommunicationBlogElement;
        "scale-icon-communication-call-incoming": HTMLScaleIconCommunicationCallIncomingElement;
        "scale-icon-communication-call-outgoing": HTMLScaleIconCommunicationCallOutgoingElement;
        "scale-icon-communication-chat": HTMLScaleIconCommunicationChatElement;
        "scale-icon-communication-chat-badge": HTMLScaleIconCommunicationChatBadgeElement;
        "scale-icon-communication-email": HTMLScaleIconCommunicationEmailElement;
        "scale-icon-communication-end-call": HTMLScaleIconCommunicationEndCallElement;
        "scale-icon-communication-feedback": HTMLScaleIconCommunicationFeedbackElement;
        "scale-icon-communication-flight-mode": HTMLScaleIconCommunicationFlightModeElement;
        "scale-icon-communication-happy-person": HTMLScaleIconCommunicationHappyPersonElement;
        "scale-icon-communication-inbox": HTMLScaleIconCommunicationInboxElement;
        "scale-icon-communication-landing-mobile-contact-client": HTMLScaleIconCommunicationLandingMobileContactClientElement;
        "scale-icon-communication-loyalty-earned": HTMLScaleIconCommunicationLoyaltyEarnedElement;
        "scale-icon-communication-loyalty-lost": HTMLScaleIconCommunicationLoyaltyLostElement;
        "scale-icon-communication-mail-opened": HTMLScaleIconCommunicationMailOpenedElement;
        "scale-icon-communication-message": HTMLScaleIconCommunicationMessageElement;
        "scale-icon-communication-message-incoming": HTMLScaleIconCommunicationMessageIncomingElement;
        "scale-icon-communication-message-outgoing": HTMLScaleIconCommunicationMessageOutgoingElement;
        "scale-icon-communication-mms-incoming": HTMLScaleIconCommunicationMmsIncomingElement;
        "scale-icon-communication-mms-outgoing": HTMLScaleIconCommunicationMmsOutgoingElement;
        "scale-icon-communication-mobile-phone-number": HTMLScaleIconCommunicationMobilePhoneNumberElement;
        "scale-icon-communication-network-signal": HTMLScaleIconCommunicationNetworkSignalElement;
        "scale-icon-communication-new-email": HTMLScaleIconCommunicationNewEmailElement;
        "scale-icon-communication-outbox": HTMLScaleIconCommunicationOutboxElement;
        "scale-icon-communication-phone-number": HTMLScaleIconCommunicationPhoneNumberElement;
        "scale-icon-communication-recipient": HTMLScaleIconCommunicationRecipientElement;
        "scale-icon-communication-save-emails-to-drafts": HTMLScaleIconCommunicationSaveEmailsToDraftsElement;
        "scale-icon-communication-sms": HTMLScaleIconCommunicationSmsElement;
        "scale-icon-communication-spam": HTMLScaleIconCommunicationSpamElement;
        "scale-icon-communication-voice-message": HTMLScaleIconCommunicationVoiceMessageElement;
        "scale-icon-content-2fa-google-auth": HTMLScaleIconContent2faGoogleAuthElement;
        "scale-icon-content-achievement": HTMLScaleIconContentAchievementElement;
        "scale-icon-content-android": HTMLScaleIconContentAndroidElement;
        "scale-icon-content-apple": HTMLScaleIconContentAppleElement;
        "scale-icon-content-applications": HTMLScaleIconContentApplicationsElement;
        "scale-icon-content-available-keychain": HTMLScaleIconContentAvailableKeychainElement;
        "scale-icon-content-bank": HTMLScaleIconContentBankElement;
        "scale-icon-content-biometric": HTMLScaleIconContentBiometricElement;
        "scale-icon-content-birthday": HTMLScaleIconContentBirthdayElement;
        "scale-icon-content-bookmark": HTMLScaleIconContentBookmarkElement;
        "scale-icon-content-calendar": HTMLScaleIconContentCalendarElement;
        "scale-icon-content-clipboard": HTMLScaleIconContentClipboardElement;
        "scale-icon-content-clock": HTMLScaleIconContentClockElement;
        "scale-icon-content-cloud-security": HTMLScaleIconContentCloudSecurityElement;
        "scale-icon-content-code-scanner": HTMLScaleIconContentCodeScannerElement;
        "scale-icon-content-color-selection": HTMLScaleIconContentColorSelectionElement;
        "scale-icon-content-country": HTMLScaleIconContentCountryElement;
        "scale-icon-content-credit-card": HTMLScaleIconContentCreditCardElement;
        "scale-icon-content-data-visualisation": HTMLScaleIconContentDataVisualisationElement;
        "scale-icon-content-delivery": HTMLScaleIconContentDeliveryElement;
        "scale-icon-content-digital-banking": HTMLScaleIconContentDigitalBankingElement;
        "scale-icon-content-digital-media": HTMLScaleIconContentDigitalMediaElement;
        "scale-icon-content-discount": HTMLScaleIconContentDiscountElement;
        "scale-icon-content-e-sim": HTMLScaleIconContentESimElement;
        "scale-icon-content-eu": HTMLScaleIconContentEuElement;
        "scale-icon-content-face-mask": HTMLScaleIconContentFaceMaskElement;
        "scale-icon-content-features": HTMLScaleIconContentFeaturesElement;
        "scale-icon-content-flexible-tariffs": HTMLScaleIconContentFlexibleTariffsElement;
        "scale-icon-content-folder": HTMLScaleIconContentFolderElement;
        "scale-icon-content-food": HTMLScaleIconContentFoodElement;
        "scale-icon-content-gender-diverse": HTMLScaleIconContentGenderDiverseElement;
        "scale-icon-content-gender-female": HTMLScaleIconContentGenderFemaleElement;
        "scale-icon-content-gender-male": HTMLScaleIconContentGenderMaleElement;
        "scale-icon-content-half-rating": HTMLScaleIconContentHalfRatingElement;
        "scale-icon-content-heart": HTMLScaleIconContentHeartElement;
        "scale-icon-content-height": HTMLScaleIconContentHeightElement;
        "scale-icon-content-history": HTMLScaleIconContentHistoryElement;
        "scale-icon-content-hour-glass": HTMLScaleIconContentHourGlassElement;
        "scale-icon-content-iban": HTMLScaleIconContentIbanElement;
        "scale-icon-content-id": HTMLScaleIconContentIdElement;
        "scale-icon-content-in-stock": HTMLScaleIconContentInStockElement;
        "scale-icon-content-international": HTMLScaleIconContentInternationalElement;
        "scale-icon-content-international-sms": HTMLScaleIconContentInternationalSmsElement;
        "scale-icon-content-interview": HTMLScaleIconContentInterviewElement;
        "scale-icon-content-key": HTMLScaleIconContentKeyElement;
        "scale-icon-content-language": HTMLScaleIconContentLanguageElement;
        "scale-icon-content-lock": HTMLScaleIconContentLockElement;
        "scale-icon-content-loyalty": HTMLScaleIconContentLoyaltyElement;
        "scale-icon-content-media-folder": HTMLScaleIconContentMediaFolderElement;
        "scale-icon-content-money-at": HTMLScaleIconContentMoneyAtElement;
        "scale-icon-content-music": HTMLScaleIconContentMusicElement;
        "scale-icon-content-news": HTMLScaleIconContentNewsElement;
        "scale-icon-content-out-of-stock": HTMLScaleIconContentOutOfStockElement;
        "scale-icon-content-person-walking": HTMLScaleIconContentPersonWalkingElement;
        "scale-icon-content-prepaid-activate": HTMLScaleIconContentPrepaidActivateElement;
        "scale-icon-content-price-tag": HTMLScaleIconContentPriceTagElement;
        "scale-icon-content-ratings": HTMLScaleIconContentRatingsElement;
        "scale-icon-content-route": HTMLScaleIconContentRouteElement;
        "scale-icon-content-rss": HTMLScaleIconContentRssElement;
        "scale-icon-content-shop": HTMLScaleIconContentShopElement;
        "scale-icon-content-signal": HTMLScaleIconContentSignalElement;
        "scale-icon-content-sim-card": HTMLScaleIconContentSimCardElement;
        "scale-icon-content-smile": HTMLScaleIconContentSmileElement;
        "scale-icon-content-sort-indicator-down": HTMLScaleIconContentSortIndicatorDownElement;
        "scale-icon-content-sort-indicator-mini-down": HTMLScaleIconContentSortIndicatorMiniDownElement;
        "scale-icon-content-sort-indicator-up": HTMLScaleIconContentSortIndicatorUpElement;
        "scale-icon-content-sort-indicator-up-mini": HTMLScaleIconContentSortIndicatorUpMiniElement;
        "scale-icon-content-status-inactive": HTMLScaleIconContentStatusInactiveElement;
        "scale-icon-content-status-recurring": HTMLScaleIconContentStatusRecurringElement;
        "scale-icon-content-stopwatch": HTMLScaleIconContentStopwatchElement;
        "scale-icon-content-support-chat": HTMLScaleIconContentSupportChatElement;
        "scale-icon-content-sustainable": HTMLScaleIconContentSustainableElement;
        "scale-icon-content-tariffs": HTMLScaleIconContentTariffsElement;
        "scale-icon-content-threats": HTMLScaleIconContentThreatsElement;
        "scale-icon-content-todo-list": HTMLScaleIconContentTodoListElement;
        "scale-icon-content-transport": HTMLScaleIconContentTransportElement;
        "scale-icon-content-unlock": HTMLScaleIconContentUnlockElement;
        "scale-icon-content-voucher": HTMLScaleIconContentVoucherElement;
        "scale-icon-content-waiting": HTMLScaleIconContentWaitingElement;
        "scale-icon-content-wallet": HTMLScaleIconContentWalletElement;
        "scale-icon-device-add-device": HTMLScaleIconDeviceAddDeviceElement;
        "scale-icon-device-camera": HTMLScaleIconDeviceCameraElement;
        "scale-icon-device-change-camera": HTMLScaleIconDeviceChangeCameraElement;
        "scale-icon-device-computer": HTMLScaleIconDeviceComputerElement;
        "scale-icon-device-device-controller": HTMLScaleIconDeviceDeviceControllerElement;
        "scale-icon-device-device-ethernet": HTMLScaleIconDeviceDeviceEthernetElement;
        "scale-icon-device-device-mesh": HTMLScaleIconDeviceDeviceMeshElement;
        "scale-icon-device-device-phone": HTMLScaleIconDeviceDevicePhoneElement;
        "scale-icon-device-device-router": HTMLScaleIconDeviceDeviceRouterElement;
        "scale-icon-device-device-tv": HTMLScaleIconDeviceDeviceTvElement;
        "scale-icon-device-device-watch": HTMLScaleIconDeviceDeviceWatchElement;
        "scale-icon-device-dongle": HTMLScaleIconDeviceDongleElement;
        "scale-icon-device-fax": HTMLScaleIconDeviceFaxElement;
        "scale-icon-device-fixed-line-services": HTMLScaleIconDeviceFixedLineServicesElement;
        "scale-icon-device-game-controller": HTMLScaleIconDeviceGameControllerElement;
        "scale-icon-device-media-receiver": HTMLScaleIconDeviceMediaReceiverElement;
        "scale-icon-device-mobile-data": HTMLScaleIconDeviceMobileDataElement;
        "scale-icon-device-mobile-devices-combination": HTMLScaleIconDeviceMobileDevicesCombinationElement;
        "scale-icon-device-mobile-equipment": HTMLScaleIconDeviceMobileEquipmentElement;
        "scale-icon-device-mobile-phone-insurance": HTMLScaleIconDeviceMobilePhoneInsuranceElement;
        "scale-icon-device-mobile-services": HTMLScaleIconDeviceMobileServicesElement;
        "scale-icon-device-no-camera": HTMLScaleIconDeviceNoCameraElement;
        "scale-icon-device-phone-with-mobile-plan": HTMLScaleIconDevicePhoneWithMobilePlanElement;
        "scale-icon-device-phone-without-mobile-plan": HTMLScaleIconDevicePhoneWithoutMobilePlanElement;
        "scale-icon-device-photo-camera": HTMLScaleIconDevicePhotoCameraElement;
        "scale-icon-device-remote-controller": HTMLScaleIconDeviceRemoteControllerElement;
        "scale-icon-device-replacement-mobilephone": HTMLScaleIconDeviceReplacementMobilephoneElement;
        "scale-icon-device-screen-rotate": HTMLScaleIconDeviceScreenRotateElement;
        "scale-icon-device-server": HTMLScaleIconDeviceServerElement;
        "scale-icon-device-smart-speaker": HTMLScaleIconDeviceSmartSpeakerElement;
        "scale-icon-device-tablet": HTMLScaleIconDeviceTabletElement;
        "scale-icon-device-tv-and-mobile": HTMLScaleIconDeviceTvAndMobileElement;
        "scale-icon-device-twitching-closed-state": HTMLScaleIconDeviceTwitchingClosedStateElement;
        "scale-icon-device-twitching-open-state": HTMLScaleIconDeviceTwitchingOpenStateElement;
        "scale-icon-home-home": HTMLScaleIconHomeHomeElement;
        "scale-icon-home-internet-at-home": HTMLScaleIconHomeInternetAtHomeElement;
        "scale-icon-home-iot": HTMLScaleIconHomeIotElement;
        "scale-icon-home-light-bulb": HTMLScaleIconHomeLightBulbElement;
        "scale-icon-home-network-secure": HTMLScaleIconHomeNetworkSecureElement;
        "scale-icon-home-no-wifi": HTMLScaleIconHomeNoWifiElement;
        "scale-icon-home-power-socket": HTMLScaleIconHomePowerSocketElement;
        "scale-icon-home-preferred-wifi": HTMLScaleIconHomePreferredWifiElement;
        "scale-icon-home-reduced-wifi": HTMLScaleIconHomeReducedWifiElement;
        "scale-icon-home-slow-wifi": HTMLScaleIconHomeSlowWifiElement;
        "scale-icon-home-smarthome": HTMLScaleIconHomeSmarthomeElement;
        "scale-icon-home-unable-to-connect-to-router": HTMLScaleIconHomeUnableToConnectToRouterElement;
        "scale-icon-home-wifi": HTMLScaleIconHomeWifiElement;
        "scale-icon-home-wifi-connected": HTMLScaleIconHomeWifiConnectedElement;
        "scale-icon-home-wifi-connection-error": HTMLScaleIconHomeWifiConnectionErrorElement;
        "scale-icon-home-wifi-manual-login": HTMLScaleIconHomeWifiManualLoginElement;
        "scale-icon-home-wifi-no-wired-internet": HTMLScaleIconHomeWifiNoWiredInternetElement;
        "scale-icon-navigation-circle-top-up": HTMLScaleIconNavigationCircleTopUpElement;
        "scale-icon-navigation-collapse-down": HTMLScaleIconNavigationCollapseDownElement;
        "scale-icon-navigation-collapse-up": HTMLScaleIconNavigationCollapseUpElement;
        "scale-icon-navigation-double-left": HTMLScaleIconNavigationDoubleLeftElement;
        "scale-icon-navigation-double-right": HTMLScaleIconNavigationDoubleRightElement;
        "scale-icon-navigation-external-link": HTMLScaleIconNavigationExternalLinkElement;
        "scale-icon-navigation-internal-link": HTMLScaleIconNavigationInternalLinkElement;
        "scale-icon-navigation-left": HTMLScaleIconNavigationLeftElement;
        "scale-icon-navigation-left-condensed": HTMLScaleIconNavigationLeftCondensedElement;
        "scale-icon-navigation-location": HTMLScaleIconNavigationLocationElement;
        "scale-icon-navigation-map": HTMLScaleIconNavigationMapElement;
        "scale-icon-navigation-my-location": HTMLScaleIconNavigationMyLocationElement;
        "scale-icon-navigation-right": HTMLScaleIconNavigationRightElement;
        "scale-icon-navigation-right-condensed": HTMLScaleIconNavigationRightCondensedElement;
        "scale-icon-navigation-start": HTMLScaleIconNavigationStartElement;
        "scale-icon-navigation-top-up": HTMLScaleIconNavigationTopUpElement;
        "scale-icon-process-order-status": HTMLScaleIconProcessOrderStatusElement;
        "scale-icon-process-processing": HTMLScaleIconProcessProcessingElement;
        "scale-icon-process-sepa-transaction": HTMLScaleIconProcessSepaTransactionElement;
        "scale-icon-service-devices-service": HTMLScaleIconServiceDevicesServiceElement;
        "scale-icon-service-maintanance": HTMLScaleIconServiceMaintananceElement;
        "scale-icon-service-manual": HTMLScaleIconServiceManualElement;
        "scale-icon-service-one-time-password": HTMLScaleIconServiceOneTimePasswordElement;
        "scale-icon-service-services": HTMLScaleIconServiceServicesElement;
        "scale-icon-service-settings": HTMLScaleIconServiceSettingsElement;
        "scale-icon-service-support": HTMLScaleIconServiceSupportElement;
        "scale-icon-service-vpn": HTMLScaleIconServiceVpnElement;
        "scale-icon-t-product-2fa-telekom-app": HTMLScaleIconTProduct2faTelekomAppElement;
        "scale-icon-t-product-magenta-cloud": HTMLScaleIconTProductMagentaCloudElement;
        "scale-icon-t-product-magenta-tv": HTMLScaleIconTProductMagentaTvElement;
        "scale-icon-t-product-magentaone": HTMLScaleIconTProductMagentaoneElement;
        "scale-icon-t-product-measure-internet-speed": HTMLScaleIconTProductMeasureInternetSpeedElement;
        "scale-icon-t-product-seamless-connectivity": HTMLScaleIconTProductSeamlessConnectivityElement;
        "scale-icon-t-product-telekom-1t1": HTMLScaleIconTProductTelekom1t1Element;
        "scale-icon-t-product-telekom-plan": HTMLScaleIconTProductTelekomPlanElement;
        "scale-icon-t-product-telekom-shop-b": HTMLScaleIconTProductTelekomShopBElement;
        "scale-icon-t-product-usage": HTMLScaleIconTProductUsageElement;
        "scale-icon-t-product-voice": HTMLScaleIconTProductVoiceElement;
        "scale-icon-user-file-admin": HTMLScaleIconUserFileAdminElement;
        "scale-icon-user-file-analytics": HTMLScaleIconUserFileAnalyticsElement;
        "scale-icon-user-file-attachment": HTMLScaleIconUserFileAttachmentElement;
        "scale-icon-user-file-audio-file": HTMLScaleIconUserFileAudioFileElement;
        "scale-icon-user-file-billing": HTMLScaleIconUserFileBillingElement;
        "scale-icon-user-file-boy": HTMLScaleIconUserFileBoyElement;
        "scale-icon-user-file-bussines-users": HTMLScaleIconUserFileBussinesUsersElement;
        "scale-icon-user-file-communities": HTMLScaleIconUserFileCommunitiesElement;
        "scale-icon-user-file-contacts": HTMLScaleIconUserFileContactsElement;
        "scale-icon-user-file-contacts-from-cloud": HTMLScaleIconUserFileContactsFromCloudElement;
        "scale-icon-user-file-contracts": HTMLScaleIconUserFileContractsElement;
        "scale-icon-user-file-draft-file": HTMLScaleIconUserFileDraftFileElement;
        "scale-icon-user-file-families": HTMLScaleIconUserFileFamiliesElement;
        "scale-icon-user-file-family": HTMLScaleIconUserFileFamilyElement;
        "scale-icon-user-file-file": HTMLScaleIconUserFileFileElement;
        "scale-icon-user-file-file-collection": HTMLScaleIconUserFileFileCollectionElement;
        "scale-icon-user-file-girl": HTMLScaleIconUserFileGirlElement;
        "scale-icon-user-file-handshake": HTMLScaleIconUserFileHandshakeElement;
        "scale-icon-user-file-html-file": HTMLScaleIconUserFileHtmlFileElement;
        "scale-icon-user-file-id-card": HTMLScaleIconUserFileIdCardElement;
        "scale-icon-user-file-image-file": HTMLScaleIconUserFileImageFileElement;
        "scale-icon-user-file-logout": HTMLScaleIconUserFileLogoutElement;
        "scale-icon-user-file-man": HTMLScaleIconUserFileManElement;
        "scale-icon-user-file-pdf-file": HTMLScaleIconUserFilePdfFileElement;
        "scale-icon-user-file-switch-users": HTMLScaleIconUserFileSwitchUsersElement;
        "scale-icon-user-file-user": HTMLScaleIconUserFileUserElement;
        "scale-icon-user-file-videos": HTMLScaleIconUserFileVideosElement;
        "scale-icon-user-file-woman": HTMLScaleIconUserFileWomanElement;
        "scale-icon-weather-cloudy": HTMLScaleIconWeatherCloudyElement;
        "scale-icon-weather-cloudy-rain": HTMLScaleIconWeatherCloudyRainElement;
        "scale-icon-weather-cloudy-sleet": HTMLScaleIconWeatherCloudySleetElement;
        "scale-icon-weather-cloudy-snow": HTMLScaleIconWeatherCloudySnowElement;
        "scale-icon-weather-cloudy-thunder-rain": HTMLScaleIconWeatherCloudyThunderRainElement;
        "scale-icon-weather-cloudy-thunder-snow": HTMLScaleIconWeatherCloudyThunderSnowElement;
        "scale-icon-weather-heavy-sleet": HTMLScaleIconWeatherHeavySleetElement;
        "scale-icon-weather-heavy-snow": HTMLScaleIconWeatherHeavySnowElement;
        "scale-icon-weather-moon-clear": HTMLScaleIconWeatherMoonClearElement;
        "scale-icon-weather-moon-cloudy-a": HTMLScaleIconWeatherMoonCloudyAElement;
        "scale-icon-weather-moon-cloudy-b": HTMLScaleIconWeatherMoonCloudyBElement;
        "scale-icon-weather-moon-rain": HTMLScaleIconWeatherMoonRainElement;
        "scale-icon-weather-moon-sleet": HTMLScaleIconWeatherMoonSleetElement;
        "scale-icon-weather-moon-snow": HTMLScaleIconWeatherMoonSnowElement;
        "scale-icon-weather-moon-thunder-rain": HTMLScaleIconWeatherMoonThunderRainElement;
        "scale-icon-weather-moon-thunder-snow": HTMLScaleIconWeatherMoonThunderSnowElement;
        "scale-icon-weather-overcast": HTMLScaleIconWeatherOvercastElement;
        "scale-icon-weather-rain": HTMLScaleIconWeatherRainElement;
        "scale-icon-weather-sunny": HTMLScaleIconWeatherSunnyElement;
        "scale-icon-weather-thunder-rain": HTMLScaleIconWeatherThunderRainElement;
        "scale-icon-weather-thunder-snow": HTMLScaleIconWeatherThunderSnowElement;
        "scale-input": HTMLScaleInputElement;
        "scale-link": HTMLScaleLinkElement;
        "scale-list": HTMLScaleListElement;
        "scale-list-item": HTMLScaleListItemElement;
        "scale-loading-spinner": HTMLScaleLoadingSpinnerElement;
        "scale-logo": HTMLScaleLogoElement;
        "scale-logo-svg": HTMLScaleLogoSvgElement;
        "scale-menu-flyout": HTMLScaleMenuFlyoutElement;
        "scale-menu-flyout-divider": HTMLScaleMenuFlyoutDividerElement;
        "scale-menu-flyout-item": HTMLScaleMenuFlyoutItemElement;
        "scale-menu-flyout-list": HTMLScaleMenuFlyoutListElement;
        "scale-modal": HTMLScaleModalElement;
        "scale-nav-icon": HTMLScaleNavIconElement;
        "scale-nav-main": HTMLScaleNavMainElement;
        "scale-nav-segment": HTMLScaleNavSegmentElement;
        "scale-notification": HTMLScaleNotificationElement;
        "scale-notification-badge": HTMLScaleNotificationBadgeElement;
        "scale-notification-banner": HTMLScaleNotificationBannerElement;
        "scale-notification-message": HTMLScaleNotificationMessageElement;
        "scale-notification-toast": HTMLScaleNotificationToastElement;
        "scale-pagination": HTMLScalePaginationElement;
        "scale-progress-bar": HTMLScaleProgressBarElement;
        "scale-radio-button": HTMLScaleRadioButtonElement;
        "scale-radio-button-group": HTMLScaleRadioButtonGroupElement;
        "scale-rating-stars": HTMLScaleRatingStarsElement;
        "scale-segment": HTMLScaleSegmentElement;
        "scale-segmented-button": HTMLScaleSegmentedButtonElement;
        "scale-sidebar-nav": HTMLScaleSidebarNavElement;
        "scale-sidebar-nav-collapsible": HTMLScaleSidebarNavCollapsibleElement;
        "scale-sidebar-nav-item": HTMLScaleSidebarNavItemElement;
        "scale-slider": HTMLScaleSliderElement;
        "scale-ssr-slot-fix": HTMLScaleSsrSlotFixElement;
        "scale-switch": HTMLScaleSwitchElement;
        "scale-tab-header": HTMLScaleTabHeaderElement;
        "scale-tab-nav": HTMLScaleTabNavElement;
        "scale-tab-panel": HTMLScaleTabPanelElement;
        "scale-table": HTMLScaleTableElement;
        "scale-tag": HTMLScaleTagElement;
        "scale-telekom-app-shell": HTMLScaleTelekomAppShellElement;
        "scale-telekom-footer": HTMLScaleTelekomFooterElement;
        "scale-telekom-footer-content": HTMLScaleTelekomFooterContentElement;
        "scale-telekom-footer-data-back-compat": HTMLScaleTelekomFooterDataBackCompatElement;
        "scale-telekom-footer-extended-navigation": HTMLScaleTelekomFooterExtendedNavigationElement;
        "scale-telekom-footer-extended-navigation-column": HTMLScaleTelekomFooterExtendedNavigationColumnElement;
        "scale-telekom-header": HTMLScaleTelekomHeaderElement;
        "scale-telekom-header-data-back-compat": HTMLScaleTelekomHeaderDataBackCompatElement;
        "scale-telekom-mega-menu": HTMLScaleTelekomMegaMenuElement;
        "scale-telekom-mega-menu-column": HTMLScaleTelekomMegaMenuColumnElement;
        "scale-telekom-mobile-flyout-canvas": HTMLScaleTelekomMobileFlyoutCanvasElement;
        "scale-telekom-mobile-menu": HTMLScaleTelekomMobileMenuElement;
        "scale-telekom-mobile-menu-item": HTMLScaleTelekomMobileMenuItemElement;
        "scale-telekom-nav-flyout": HTMLScaleTelekomNavFlyoutElement;
        "scale-telekom-nav-item": HTMLScaleTelekomNavItemElement;
        "scale-telekom-nav-list": HTMLScaleTelekomNavListElement;
        "scale-telekom-profile-menu": HTMLScaleTelekomProfileMenuElement;
        "scale-text-field": HTMLScaleTextFieldElement;
        "scale-textarea": HTMLScaleTextareaElement;
        "scale-toast": HTMLScaleToastElement;
        "scale-toggle-button": HTMLScaleToggleButtonElement;
        "scale-toggle-group": HTMLScaleToggleGroupElement;
        "scale-tooltip": HTMLScaleTooltipElement;
    }
}
declare namespace LocalJSX {
    interface AppLogo {
        "claim"?: boolean;
        "claimLang"?: string;
        "color"?: string;
        "focusable"?: boolean;
        "href"?: string;
        "logoTitle"?: string;
    }
    interface AppMegaMenu {
        "active"?: boolean;
        "activeRouteId"?: string;
        "hide"?: () => void;
        "isActive"?: boolean;
        "navigation"?: MenuItem[];
    }
    interface AppNavigationMainMobile {
        "activeRouteId"?: string;
        "hide"?: () => void;
        "navigation"?: MenuItem[];
        "onCloseMenu"?: (event: AppNavigationMainMobileCustomEvent<any>) => void;
    }
    interface AppNavigationSectorMobile {
        "activeSectorId"?: string;
        "hide"?: () => void;
        "navigation"?: MenuItem[];
    }
    interface AppNavigationUserMenu {
        "hide"?: () => void;
        "navigation"?: any;
        "onCloseMenu"?: (event: AppNavigationUserMenuCustomEvent<any>) => void;
        "styles"?: string;
    }
    interface ScaleAccordion {
        /**
          * If `true`, only one scale-collapsible within the accordion can be open at a time
         */
        "dependent"?: boolean;
        /**
          * If `true`, scale-collapsibles within the accordion will all be open initially, unless this is dependant
         */
        "expanded"?: boolean;
        /**
          * Heading level for scale-collapsible descendants
         */
        "headingLevel"?: number | null;
        "iconLocation"?: 'left' | 'right';
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleAlert {
        /**
          * (optional) Alert title
         */
        "headline"?: string;
        /**
          * (optional) Alert icon
         */
        "icon"?: string;
        /**
          * (optional) Alert opened
         */
        "opened"?: boolean;
        /**
          * (optional) Alert size
         */
        "size"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Alert timeout
         */
        "timeout"?: boolean | number;
        /**
          * (optional) Alert variant
         */
        "variant"?: string;
    }
    interface ScaleAppFooter {
        "copyright"?: string;
        "footerNavigation"?: any;
        "logoAriaDescribedBy"?: string;
        "logoClick"?: any;
        "logoHref"?: string;
        "logoTitle"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        "variant"?: string;
    }
    interface ScaleAppHeader {
        "activeRouteId"?: string;
        "activeSectorId"?: string;
        "addonNavigation"?: any;
        "claimLang"?: string;
        "iconNavigation"?: any;
        "isMegaMenuVisible"?: boolean;
        "isMobileMenuVisible"?: boolean;
        "logoAriaDescribedBy"?: string;
        "logoClick"?: any;
        "logoHideTitle"?: boolean;
        "logoHref"?: string;
        "logoTitle"?: string;
        "mainNavigation"?: any;
        "megaMenuVisible"?: boolean;
        "mobileMenuVisible"?: boolean;
        "portalName"?: string;
        "sectorNavigation"?: any;
        "sticky"?: boolean;
        "userMenuAriaLabel"?: string;
        "userNavigation"?: any;
    }
    interface ScaleAppShell {
        "activeRouteId"?: string;
        "activeSectorId"?: string;
        "addonNavigation"?: any;
        "claimLang"?: string;
        "iconNavigation"?: any;
        "logoAriaDescribedBy"?: string;
        "logoClick"?: any;
        "logoHideTitle"?: boolean;
        "logoHref"?: string;
        "logoTitle"?: string;
        "mainNavigation"?: any;
        "portalName"?: string;
        "sectorNavigation"?: any;
        "sticky"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        "userMenuAriaLabel"?: string;
        "userNavigation"?: any;
    }
    interface ScaleBadge {
        /**
          * a11y text for getting meaningful value.
         */
        "ariaLabelTranslation"?: string;
        "count"?: number;
        "label"?: string;
        "labelVisuallyHidden"?: boolean;
    }
    interface ScaleBreadcrumb {
        "separator"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleButton {
        /**
          * (optional) If `true`, the button is disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Name of a file to be downloaded
         */
        "download"?: string;
        /**
          * (optional) When present, an <a> tag will be used
         */
        "href"?: string;
        /**
          * (optional) Set to `true` when the button contains only an icon
         */
        "iconOnly"?: boolean;
        /**
          * (optional) Icon position related to the label
         */
        "iconPosition"?: 'before' | 'after';
        /**
          * (optional) Button aria-label
         */
        "innerAriaLabel"?: string;
        /**
          * (optional) Set `tabindex` in the inner button or link element
         */
        "innerTabindex"?: number;
        /**
          * (optional) The name of the button, submitted as a pair with the button's `value` as part of the form data
         */
        "name"?: string;
        /**
          * (optional) The size of the button
         */
        "size"?: 'small' | 'large';
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) The target attribute for the <a> tag
         */
        "target"?: string;
        /**
          * (optional) Button type
         */
        "type"?: 'reset' | 'submit' | 'button';
        /**
          * (optional) Defines the value associated with the button's `name`
         */
        "value"?: string;
        /**
          * (optional) Button variant
         */
        "variant"?: string;
    }
    interface ScaleCallout {
        /**
          * (optional) CSS `bottom` value for absolute position
         */
        "bottom"?: string;
        /**
          * (optional) CSS `left` value for absolute position
         */
        "left"?: string;
        /**
          * (optional) CSS `right` value for absolute position
         */
        "right"?: string;
        /**
          * (optional) Degree of rotation
         */
        "rotation"?: number;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) CSS `top` value for absolute position
         */
        "top"?: string;
        /**
          * (optional) Color variant of the callout
         */
        "variant"?: 'primary' | 'blue' | 'white' | 'black' | string;
    }
    interface ScaleCard {
        /**
          * (optional) Label of the card
         */
        "label"?: string;
        /**
          * (optional) Link card rel
         */
        "rel"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Link card target
         */
        "target"?: string;
        /**
          * (optional) Link card
         */
        "to"?: string;
    }
    interface ScaleCarousel {
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) carousel display direction
         */
        "vertical"?: boolean;
    }
    interface ScaleChartStackCard {
        /**
          * Chart Data
         */
        "data"?: string | Array<Record<'type' | 'value' | 'percentage', string>>;
        /**
          * Chart Title
         */
        "heading"?: string;
    }
    interface ScaleCheckbox {
        /**
          * (optional) Input label output
         */
        "ariaLabelCheckbox"?: string;
        /**
          * (optional) Active switch
         */
        "checked"?: boolean;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Hides the specified label visually
         */
        "hideLabel"?: boolean;
        /**
          * (optional) indeterminate
         */
        "indeterminate"?: boolean;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input status
         */
        "invalid"?: boolean;
        /**
          * (optional) Input label
         */
        "label"?: string;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * Emitted when the value has changed.
         */
        "onScale-change"?: (event: ScaleCheckboxCustomEvent<any>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleChange"?: (event: ScaleCheckboxCustomEvent<any>) => void;
        /**
          * (optional) Input required
         */
        "required"?: boolean;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Input value
         */
        "value"?: string;
    }
    interface ScaleCheckboxGroup {
        /**
          * @deprecated - ariaLabelCheckboxGroup should replace ariaLabel
         */
        "ariaLabelCheckboxGroup"?: string;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input status
         */
        "invalid"?: boolean;
        /**
          * (optional) Input label
         */
        "label"?: string;
        /**
          * (optional) Input name
         */
        "name"?: string;
        "selectText"?: string;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        "unselectText"?: string;
        /**
          * (optional) Input value
         */
        "value"?: string;
    }
    interface ScaleChip {
        /**
          * @deprecated (optional) chip aria-checked - should be derived from selected state attribute
         */
        "ariaCheckedState"?: boolean;
        /**
          * (optional) chip aria-role
         */
        "ariaRoleTitle"?: | 'switch'
    | 'radio'
    | 'option'
    | 'menuitemreadio'
    | 'menuitemcheckbox'
    | 'checkbox';
        /**
          * (optional) chip disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Dismiss label
         */
        "dismissText"?: string;
        /**
          * (optional) chip label
         */
        "label"?: string;
        /**
          * (optional) Change icon click event
         */
        "onScale-change"?: (event: ScaleChipCustomEvent<MouseEvent>) => void;
        /**
          * (optional) Close icon click event
         */
        "onScale-close"?: (event: ScaleChipCustomEvent<MouseEvent>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleChange"?: (event: ScaleChipCustomEvent<MouseEvent>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleClose"?: (event: ScaleChipCustomEvent<MouseEvent>) => void;
        /**
          * (optional)
         */
        "selected"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional)
         */
        "type"?: 'dynamic' | 'persistent';
        /**
          * (optional)
         */
        "variant"?: 'standard' | 'outline';
    }
    interface ScaleCollapsible {
        /**
          * Set to `true` to expand
         */
        "expanded"?: boolean;
        /**
          * Default aria-level for heading
         */
        "headingLevel"?: number;
        "iconLocation"?: 'left' | 'right';
        /**
          * Emitted so parent <scale-accordion> knows about it
         */
        "onScale-expand"?: (event: ScaleCollapsibleCustomEvent<CollapsibleEventDetail>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleExpand"?: (event: ScaleCollapsibleCustomEvent<CollapsibleEventDetail>) => void;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleDataGrid {
        /**
          * Input fields config array
         */
        "fields"?: any;
        /**
          * (optional) Freeze header row from scrolling
         */
        "freezeHeader"?: boolean;
        /**
          * (optional) Heading string
         */
        "heading"?: string;
        /**
          * (optional) Set static table height, by default will auto-resize
         */
        "height"?: string;
        /**
          * (optional) Set to true to remove border
         */
        "hideBorder"?: boolean;
        /**
          * (optional) Set to true to hide header row
         */
        "hideHeader"?: boolean;
        /**
          * (optional) Set to true to remove info footer block including pagination and selection status
         */
        "hideInfo"?: boolean;
        /**
          * (optional) Set to true to hide settings menu
         */
        "hideMenu"?: boolean;
        /**
          * (optional) set localization for sort, toggle and select/deselect table Default is English.
         */
        "localization"?: {
    sortBy: string;
    toggle: string;
    select: string;
  };
        /**
          * (optional) Set to true to add numbers column
         */
        "numbered"?: boolean;
        /**
          * Event triggered every time the editable cells are changed, updating the original rows data
         */
        "onScale-edit"?: (event: ScaleDataGridCustomEvent<DataGridEditEventDetail>) => void;
        /**
          * Event triggered every time the data is sorted, changing original rows data
         */
        "onScale-sort"?: (event: ScaleDataGridCustomEvent<DataGridSortedEventDetail>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleEdit"?: (event: ScaleDataGridCustomEvent<DataGridEditEventDetail>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleSort"?: (event: ScaleDataGridCustomEvent<DataGridSortedEventDetail>) => void;
        /**
          * (optional) Set number of rows to display per pagination page
         */
        "pageSize"?: number;
        /**
          * Input data array
         */
        "rows"?: any;
        /**
          * (optional) Set to true to add selection column
         */
        "selectable"?: boolean;
        /**
          * Read-only selection array - populated with raw data from selected rows
         */
        "selection"?: string[];
        /**
          * (optional) Shade every second row darker
         */
        "shadeAlternate"?: boolean;
        /**
          * (optional) Title for sortable columns
         */
        "sortableColumnTitle"?: string;
        /**
          * (optional) Injected css styles
         */
        "styles"?: any;
        /**
          * (optional) Set to false to hide table, used for nested tables to re-render upon toggle
         */
        "visible"?: boolean;
    }
    interface ScaleDatePicker {
        /**
          * Date adapter, for custom parsing/formatting. Must be object with a `parse` function which accepts a `string` and returns a `Date`, and a `format` function which accepts a `Date` and returns a `string`. Default is IS0-8601 parsing and formatting.
         */
        "dateAdapter"?: any;
        /**
          * Forces the opening direction of the calendar modal to be always left or right. This setting can be useful when the input is smaller than the opening date picker would be as by default the picker always opens towards right.
         */
        "direction"?: DuetDatePickerDirection;
        /**
          * Makes the date picker input component disabled. This prevents users from being able to interact with the input, and conveys its inactive state to assistive technologies.
         */
        "disabled"?: boolean;
        /**
          * Which day is considered first day of the week? `0` for Sunday, `1` for Monday, etc. Default is Monday.
         */
        "firstDayOfWeek"?: any;
        /**
          * (optional) Helper text
         */
        "helperText"?: string;
        /**
          * Adds a unique identifier for the date picker input. Use this instead of html `id` attribute.
         */
        "identifier"?: string;
        /**
          * Defines a specific role attribute for the date picker input.
         */
        "innerRole"?: string;
        /**
          * (optional) invalid status
         */
        "invalid"?: boolean;
        /**
          * (optional) Label
         */
        "label"?: string;
        /**
          * Button labels, day names, month names, etc, used for localization. Default is English.
         */
        "localization"?: DuetLocalizedText & {
    today: string;
  };
        /**
          * Maximum date allowed to be picked. Must be in IS0-8601 format: YYYY-MM-DD. This setting can be used alone or together with the min property.
         */
        "max"?: string;
        /**
          * Minimum date allowed to be picked. Must be in IS0-8601 format: YYYY-MM-DD. This setting can be used alone or together with the max property.
         */
        "min"?: string;
        /**
          * Name of the date picker input.
         */
        "name"?: string;
        /**
          * Event emitted the date picker input is blurred.
         */
        "onScale-blur"?: (event: ScaleDatePickerCustomEvent<DuetDatePickerFocusEvent>) => void;
        /**
          * Event emitted when a date is selected.
         */
        "onScale-change"?: (event: ScaleDatePickerCustomEvent<DuetDatePickerChangeEvent>) => void;
        /**
          * Event emitted the date picker input is focused.
         */
        "onScale-focus"?: (event: ScaleDatePickerCustomEvent<DuetDatePickerFocusEvent>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleBlur"?: (event: ScaleDatePickerCustomEvent<DuetDatePickerFocusEvent>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleChange"?: (event: ScaleDatePickerCustomEvent<DuetDatePickerChangeEvent>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleFocus"?: (event: ScaleDatePickerCustomEvent<DuetDatePickerFocusEvent>) => void;
        /**
          * (optional) Input place holder
         */
        "placeholder"?: string;
        /**
          * @deprecated in v3 in favor of localization.calendarHeading
         */
        "popupTitle"?: string;
        /**
          * Should the input be marked as required?
         */
        "required"?: boolean;
        /**
          * @deprecated
         */
        "size"?: string;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * Date value. Must be in IS0-8601 format: YYYY-MM-DD.
         */
        "value"?: string;
        "variant"?: 'informational' | 'warning' | 'danger' | 'success';
    }
    interface ScaleDivider {
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Divider vertical
         */
        "vertical"?: boolean;
    }
    interface ScaleDropdown {
        /**
          * (optional) Makes type `select` behave as a controlled component in React
         */
        "controlled"?: boolean;
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) to avoid displaying the label
         */
        "hideLabelVisually"?: boolean;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input status
         */
        "invalid"?: boolean;
        /**
          * (optional) Input label
         */
        "label"?: string;
        /**
          * (optional) select multiple options
         */
        "multiple"?: boolean;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onScale-blur"?: (event: ScaleDropdownCustomEvent<void>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onScale-change"?: (event: ScaleDropdownCustomEvent<InputChangeEventDetail>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onScale-focus"?: (event: ScaleDropdownCustomEvent<void>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onScale-input"?: (event: ScaleDropdownCustomEvent<KeyboardEvent>) => void;
        /**
          * Emitted on keydown.
         */
        "onScale-keydown"?: (event: ScaleDropdownCustomEvent<KeyboardEvent>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleBlur"?: (event: ScaleDropdownCustomEvent<void>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleChange"?: (event: ScaleDropdownCustomEvent<InputChangeEventDetail>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleFocus"?: (event: ScaleDropdownCustomEvent<void>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleInput"?: (event: ScaleDropdownCustomEvent<KeyboardEvent>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleKeydown"?: (event: ScaleDropdownCustomEvent<KeyboardEvent>) => void;
        /**
          * (optional) Input required
         */
        "required"?: boolean;
        /**
          * @deprecated
         */
        "size"?: string;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) input background transparent
         */
        "transparent"?: boolean;
        /**
          * (optional) Input value
         */
        "value"?: string | number | null;
        /**
          * (optional) Variant
         */
        "variant"?: 'informational' | 'warning' | 'danger' | 'success';
        /**
          * (optional) the number of visible options in a select drop-down list
         */
        "visibleSize"?: number;
    }
    interface ScaleDropdownSelect {
        /**
          * (optional) Screen reader text appended to the selected element
         */
        "ariaLabelSelected"?: string;
        "comboboxId"?: string;
        "disabled"?: boolean;
        /**
          * @see {
          * @url https://floating-ui.com/docs/computePosition#strategy}
         */
        "floatingStrategy"?: 'absolute' | 'fixed';
        /**
          * (optional) Text displayed in high contrast mode only to indicate disabled state
         */
        "hcmLabelDisabled"?: string;
        "helperText"?: string;
        /**
          * (optional) to hide the label
         */
        "hideLabelVisually"?: boolean;
        "invalid"?: boolean;
        "label"?: string;
        "name"?: string;
        "onScale-blur"?: (event: ScaleDropdownSelectCustomEvent<void>) => void;
        "onScale-change"?: (event: ScaleDropdownSelectCustomEvent<void>) => void;
        "onScale-focus"?: (event: ScaleDropdownSelectCustomEvent<void>) => void;
        "onScale-keydown"?: (event: ScaleDropdownSelectCustomEvent<void>) => void;
        "readonly"?: boolean;
        "transparent"?: boolean;
        "value"?: any;
        "variant"?: 'informational' | 'warning' | 'danger' | 'success';
    }
    interface ScaleDropdownSelectItem {
        "disabled"?: boolean;
        "focused"?: boolean;
        "selected"?: boolean;
        "value"?: any;
    }
    interface ScaleGrid {
        /**
          * (optional) Set amount of columns in container
         */
        "columns"?: string;
        /**
          * (optioanl) Set gutter between rows
         */
        "gutterX"?: string;
        /**
          * (optional) Set gutter between columns
         */
        "gutterY"?: string;
        /**
          * (optioanl) Set max-width to contaier
         */
        "maxWidth"?: string;
        /**
          * (optioanl) Set padding to container
         */
        "spacing"?: string;
    }
    interface ScaleGridItem {
        /**
          * (optional) Set starting column
         */
        "offset"?: string;
        /**
          * (optional) Set size of column
         */
        "size"?: string;
    }
    interface ScaleHelperText {
        /**
          * (optional) Helper text
         */
        "helperText"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "variant"?: | 'neutral'
    | 'informational'
    | 'warning'
    | 'danger'
    | 'success';
    }
    interface ScaleIcon {
        /**
          * (optional) When using the icon as standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) If `true` the svg element will get aria-hidden="true"
         */
        "decorative"?: boolean;
        /**
          * The SVG `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * A name that will be used to reference an SVG object defined elsewhere, via `<use xlink:href="">`. `icon-` will be prepended to the name, so if you pass `circle`, it will look for for the `icon-circle` id e.g. `<use xlink:href="#icon-circle">`. If there is no element in the document with the id by the name provided, this component will render empty.
         */
        "name"?: string;
        /**
          * A path shape to be used in the `d` attribute of a path element.
         */
        "path"?: string;
        /**
          * Will be used for both `width` and `height`, all icons are square. Keep in mind the `viewBox` attribute is set to "0 0 24 24".
         */
        "size"?: number;
        /**
          * The SVG `stroke` attribute
         */
        "stroke"?: string;
    }
    interface ScaleIconActionAdd {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionAddCard {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionArrange {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionArrowDown {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionArrowLeft {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionArrowRight {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionArrowUp {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionAutoLogin {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionBackspace {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionBackward {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionChangelog {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionCheckmark {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionCircleAdd {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionCircleClose {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionClose {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionCompare {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionCopyPaste {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionCutPaste {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionDisabledMicrophone {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionDownload {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionDownloadFromCloud {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionDragAndDrop {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionEdit {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionExport {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionFastForward {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionFastForwardNb {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionFavorite {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionFilter {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionFilter2 {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionForward {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionFullScreen {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionHidePassword {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionImport {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionInstall {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionLaunch {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionLightDarkMode {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionLink {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionLogout {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionLoop {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionMenu {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionMicrophone {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionMinimizeScreen {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionMinus {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionMinusCircle {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionMore {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionMove {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionMute {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionNotification {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionPause {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionPauseNb {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionPin {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionPlay {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionPlayNb {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionPopUpWindow {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionPower {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionPreviousNb {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionPrint {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionPublish {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionRandom {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionRecordNb {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionRefresh {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionRemove {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionReply {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionReplyAll {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionReplyForward {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionRestart {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionSearch {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionSend {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionShare {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionShoppingCart {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionShowPassword {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionSort {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionSoundOn {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionStar {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionStreamOn {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionSuccess {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionThumbsDown {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionThumbsUp {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionTilesAdd {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionUpload {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionUploadToCloud {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionVolumeDown {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionVolumeUp {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionZoomIn {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionZoomOut {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconAlertAntivirusProtection {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconAlertCompliance {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconAlertCyberSecurity {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconAlertError {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconAlertHelp {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconAlertHighPriorityEmail {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconAlertImprintDataprivacy {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconAlertInformation {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconAlertLegal {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconAlertNetworkDisrupted {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconAlertPasswordBreaking {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconAlertSecurity {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconAlertTrafficDisruption {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconAlertUnknown {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconAlertWarning {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationAvailable {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationBlog {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationCallIncoming {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationCallOutgoing {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationChat {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationChatBadge {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationEmail {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationEndCall {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationFeedback {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationFlightMode {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationHappyPerson {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationInbox {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationLandingMobileContactClient {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationLoyaltyEarned {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationLoyaltyLost {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationMailOpened {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationMessage {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationMessageIncoming {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationMessageOutgoing {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationMmsIncoming {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationMmsOutgoing {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationMobilePhoneNumber {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationNetworkSignal {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationNewEmail {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationOutbox {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationPhoneNumber {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationRecipient {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationSaveEmailsToDrafts {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationSms {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationSpam {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconCommunicationVoiceMessage {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContent2faGoogleAuth {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentAchievement {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentAndroid {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentApple {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentApplications {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentAvailableKeychain {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentBank {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentBiometric {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentBirthday {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentBookmark {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentCalendar {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentClipboard {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentClock {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentCloudSecurity {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentCodeScanner {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentColorSelection {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentCountry {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentCreditCard {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentDataVisualisation {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentDelivery {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentDigitalBanking {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentDigitalMedia {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentDiscount {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentESim {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentEu {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentFaceMask {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentFeatures {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentFlexibleTariffs {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentFolder {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentFood {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentGenderDiverse {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentGenderFemale {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentGenderMale {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentHalfRating {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentHeart {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentHeight {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentHistory {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentHourGlass {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentIban {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentId {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentInStock {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentInternational {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentInternationalSms {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentInterview {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentKey {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentLanguage {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentLock {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentLoyalty {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentMediaFolder {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentMoneyAt {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentMusic {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentNews {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentOutOfStock {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentPersonWalking {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentPrepaidActivate {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentPriceTag {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentRatings {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentRoute {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentRss {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentShop {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentSignal {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentSimCard {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentSmile {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentSortIndicatorDown {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentSortIndicatorMiniDown {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentSortIndicatorUp {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentSortIndicatorUpMini {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentStatusInactive {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentStatusRecurring {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentStopwatch {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentSupportChat {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentSustainable {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentTariffs {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentThreats {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentTodoList {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentTransport {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentUnlock {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentVoucher {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentWaiting {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentWallet {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceAddDevice {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceCamera {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceChangeCamera {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceComputer {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceDeviceController {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceDeviceEthernet {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceDeviceMesh {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceDevicePhone {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceDeviceRouter {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceDeviceTv {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceDeviceWatch {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceDongle {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceFax {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceFixedLineServices {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceGameController {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceMediaReceiver {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceMobileData {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceMobileDevicesCombination {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceMobileEquipment {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceMobilePhoneInsurance {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceMobileServices {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceNoCamera {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDevicePhoneWithMobilePlan {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDevicePhoneWithoutMobilePlan {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDevicePhotoCamera {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceRemoteController {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceReplacementMobilephone {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceScreenRotate {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceServer {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceSmartSpeaker {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceTablet {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceTvAndMobile {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceTwitchingClosedState {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconDeviceTwitchingOpenState {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomeHome {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomeInternetAtHome {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomeIot {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomeLightBulb {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomeNetworkSecure {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomeNoWifi {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomePowerSocket {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomePreferredWifi {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomeReducedWifi {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomeSlowWifi {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomeSmarthome {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomeUnableToConnectToRouter {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomeWifi {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomeWifiConnected {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomeWifiConnectionError {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomeWifiManualLogin {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomeWifiNoWiredInternet {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationCircleTopUp {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationCollapseDown {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationCollapseUp {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationDoubleLeft {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationDoubleRight {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationExternalLink {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationInternalLink {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationLeft {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationLeftCondensed {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationLocation {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationMap {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationMyLocation {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationRight {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationRightCondensed {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationStart {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationTopUp {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconProcessOrderStatus {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconProcessProcessing {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconProcessSepaTransaction {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconServiceDevicesService {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconServiceMaintanance {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconServiceManual {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconServiceOneTimePassword {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconServiceServices {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconServiceSettings {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconServiceSupport {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconServiceVpn {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconTProduct2faTelekomApp {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconTProductMagentaCloud {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconTProductMagentaTv {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconTProductMagentaone {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconTProductMeasureInternetSpeed {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconTProductSeamlessConnectivity {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconTProductTelekom1t1 {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconTProductTelekomPlan {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconTProductTelekomShopB {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconTProductUsage {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconTProductVoice {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileAdmin {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileAnalytics {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileAttachment {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileAudioFile {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileBilling {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileBoy {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileBussinesUsers {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileCommunities {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileContacts {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileContactsFromCloud {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileContracts {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileDraftFile {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileFamilies {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileFamily {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileFile {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileFileCollection {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileGirl {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileHandshake {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileHtmlFile {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileIdCard {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileImageFile {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileLogout {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileMan {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFilePdfFile {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileSwitchUsers {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileUser {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileVideos {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileWoman {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherCloudy {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherCloudyRain {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherCloudySleet {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherCloudySnow {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherCloudyThunderRain {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherCloudyThunderSnow {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherHeavySleet {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherHeavySnow {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherMoonClear {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherMoonCloudyA {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherMoonCloudyB {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherMoonRain {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherMoonSleet {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherMoonSnow {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherMoonThunderRain {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherMoonThunderSnow {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherOvercast {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherRain {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherSunny {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherThunderRain {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconWeatherThunderSnow {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleInput {
        /**
          * (optional) Active switch
         */
        "checked"?: boolean;
        /**
          * (optional) textarea column
         */
        "cols"?: number;
        /**
          * (optional) Makes type `select` behave as a controlled component in React
         */
        "controlled"?: boolean;
        /**
          * (optional) Input counter
         */
        "counter"?: boolean;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Input checkbox checked icon
         */
        "icon"?: string;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input status
         */
        "invalid"?: boolean;
        /**
          * (optional) Input label
         */
        "label"?: string;
        /**
          * (optional) Input max length
         */
        "maxLength"?: number;
        /**
          * (optional) Input min length
         */
        "minLength"?: number;
        /**
          * (optional) select multiple options
         */
        "multiple"?: boolean;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onScale-blur"?: (event: ScaleInputCustomEvent<void>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onScale-change"?: (event: ScaleInputCustomEvent<InputChangeEventDetail>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onScale-focus"?: (event: ScaleInputCustomEvent<void>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onScale-input"?: (event: ScaleInputCustomEvent<KeyboardEvent>) => void;
        /**
          * Emitted on keydown.
         */
        "onScale-keydown"?: (event: ScaleInputCustomEvent<KeyboardEvent>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleBlur"?: (event: ScaleInputCustomEvent<void>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleChange"?: (event: ScaleInputCustomEvent<InputChangeEventDetail>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleFocus"?: (event: ScaleInputCustomEvent<void>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleInput"?: (event: ScaleInputCustomEvent<KeyboardEvent>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleKeyDown"?: (event: ScaleInputCustomEvent<KeyboardEvent>) => void;
        /**
          * (optional) Input placeHolder
         */
        "placeholder"?: string;
        /**
          * (optional) Input required
         */
        "required"?: boolean;
        /**
          * (optional) textarea resize
         */
        "resize"?: 'unset' | 'none' | 'vertical' | 'horizontal';
        /**
          * (optional) textarea row
         */
        "rows"?: number;
        /**
          * (optional) Input size
         */
        "size"?: string;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) input background transparent
         */
        "transparent"?: boolean;
        /**
          * (optional) Input type
         */
        "type"?: | 'email'
    | 'hidden'
    | 'number'
    | 'password'
    | 'tel'
    | 'text'
    | 'checkbox'
    | 'radio'
    | 'select'
    | 'textarea'
    | 'url';
        /**
          * (optional) Input value
         */
        "value"?: string | number | null;
        /**
          * (optional) Input label variant
         */
        "variant"?: 'animated' | 'static';
        /**
          * (optional) the number of visible options in a select drop-down list
         */
        "visibleSize"?: number;
    }
    interface ScaleLink {
        /**
          * (optional) Disabled link
         */
        "disabled"?: boolean;
        /**
          * (optional) Download declaration
         */
        "download"?: string;
        /**
          * (optional) Link href
         */
        "href"?: string;
        /**
          * (optional)
         */
        "hreflang"?: string;
        /**
          * (optional) Chnage icon/content slot order
         */
        "iconPosition"?: 'before' | 'after';
        /**
          * (optional) Set `tabindex` in the inner button or link element
         */
        "innerTabindex"?: number;
        /**
          * (optional) Remove the initial line from the text (can also be achieved via `--line-thickness-initial: 0`) Remove the line for every state with `--line-thickness: 0`
         */
        "omitUnderline"?: boolean;
        /**
          * (optional)
         */
        "ping"?: string;
        /**
          * (optional)
         */
        "referrerpolicy"?: ReferrerPolicy;
        /**
          * (optional)
         */
        "rel"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional)
         */
        "target"?: '_self' | '_blank' | '_parent' | '_top';
        /**
          * (optional)
         */
        "type"?: string;
    }
    interface ScaleList {
        /**
          * (optional) Make the list ordered (ol)
         */
        "ordered"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleListItem {
        /**
          * Index number, useful only for styling the `ordered` type
         */
        "index"?: number;
        /**
          * If `false`, no marker or left padding will be visible
         */
        "marker"?: boolean;
        /**
          * Whether this is a child of an ordered scale-list, gets set automatically by its parent
         */
        "ordered"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleLoadingSpinner {
        "accessibilityTitle"?: string;
        "alignment"?: 'horizontal' | 'vertical';
        "size"?: 'small' | 'large';
        "text"?: string;
        "variant"?: 'white' | 'primary';
    }
    interface ScaleLogo {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        "focusable"?: boolean;
        /**
          * (optional) Set a link
         */
        "href"?: string;
        /**
          * @deprecated ; (optional) Language of the logo text/ claimOff showes just the T Logo
         */
        "language"?: | 'de'
    | 'en'
    | 'cz'
    | 'hr'
    | 'hu'
    | 'me'
    | 'mk_lat'
    | 'mk_kyr'
    | 'ro'
    | 'sk'
    | string;
        /**
          * FIXME is this actually working? probably not because of shadow DOM?
         */
        "logoAriaDescribedBy"?: string;
        /**
          * FIXME this is also probably not working properly, see below (it needs a string value)
         */
        "logoAriaHidden"?: boolean;
        /**
          * (optional) Hide all logo related titles
         */
        "logoHideTitle"?: boolean;
        /**
          * (optional) set logo specific title
         */
        "logoTitle"?: string;
        "scrollIntoViewOnFocus"?: boolean;
        /**
          * (optional) The height in pixels
         */
        "size"?: number;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Set transparent background
         */
        "transparent"?: boolean;
        /**
          * (optional) Variant/color of the logo text and logo
         */
        "variant"?: 'magenta' | 'white';
    }
    interface ScaleLogoSvg {
        /**
          * @deprecated (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        "focusable"?: boolean;
        "innerRole"?: 'link' | 'img';
        /**
          * (optional) Hide all logo related titles
         */
        "logoHideTitle"?: boolean;
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "logoTitle"?: string;
    }
    interface ScaleMenuFlyout {
        /**
          * (optional) Determines whether the flyout should close when a menu item is selected
         */
        "closeOnSelect"?: boolean;
        /**
          * (optional) Set preference for where the menu appears, space permitting
         */
        "direction"?: | 'bottom-right'
    | 'bottom-left'
    | 'top-right'
    | 'top-left'
    | 'right'
    | 'left';
        /**
          * (optional) Injected styles
         */
        "styles"?: string;
        /**
          * (optional) Determines whether the flyout trigger should get the aria-haspopup attribute
         */
        "triggerHasPopup"?: boolean;
    }
    interface ScaleMenuFlyoutDivider {
        /**
          * (optional) Injected styles
         */
        "styles"?: string;
    }
    interface ScaleMenuFlyoutItem {
        /**
          * (optional) Mark as active
         */
        "active"?: boolean;
        /**
          * (optional) Set to true to display arrow icon suffix
         */
        "cascade"?: boolean;
        /**
          * (optional) Whether the item should behave as a checkbox
         */
        "checkable"?: 'checkbox' | 'radio' | null;
        /**
          * (optional) Set to true to display check prefix, false to display empty prefix
         */
        "checked"?: boolean;
        /**
          * (optional) Disabled
         */
        "disabled"?: boolean;
        /**
          * Event triggered when menu item selected
         */
        "onScale-select"?: (event: ScaleMenuFlyoutItemCustomEvent<{
    item: HTMLElement;
  }>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleSelect"?: (event: ScaleMenuFlyoutItemCustomEvent<{
    item: HTMLElement;
  }>) => void;
        /**
          * (optional) Injected styles
         */
        "styles"?: string;
        /**
          * (optional) value
         */
        "value"?: string;
    }
    interface ScaleMenuFlyoutList {
        "active"?: boolean;
        /**
          * (optional) set to true when using in telekom-brand-header
         */
        "brandHeaderDropdown"?: boolean;
        /**
          * (optional) Determines whether the flyout should close when a menu item is selected
         */
        "closeOnSelect"?: boolean;
        /**
          * (optional) Set preference for where the menu appears, space permitting
         */
        "direction"?: | 'bottom-right'
    | 'bottom-left'
    | 'top-right'
    | 'top-left'
    | 'right'
    | 'left';
        /**
          * Event triggered when menu list closed
         */
        "onScale-close"?: (event: ScaleMenuFlyoutListCustomEvent<{
    list: HTMLElement;
  }>) => void;
        /**
          * Event triggered when menu list opened
         */
        "onScale-open"?: (event: ScaleMenuFlyoutListCustomEvent<{
    list: HTMLElement;
  }>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleClose"?: (event: ScaleMenuFlyoutListCustomEvent<{
    list: HTMLElement;
  }>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleOpen"?: (event: ScaleMenuFlyoutListCustomEvent<{
    list: HTMLElement;
  }>) => void;
        "opened"?: boolean;
        /**
          * (optional) set to true to prevent flipping orientation when off the screen vertically
         */
        "preventFlipVertical"?: boolean;
        /**
          * (optional) Injected styles
         */
        "styles"?: string;
        "trigger"?: () => HTMLElement;
    }
    interface ScaleModal {
        /**
          * (optional) Alignment of action buttons
         */
        "alignActions"?: 'right' | 'left';
        /**
          * (optional) allow to inject css style {overflow: hidden} to body when modal is open
         */
        "allowInjectingStyleToBody"?: boolean;
        /**
          * (optional) Label for close button
         */
        "closeButtonLabel"?: string;
        /**
          * (optional) title for close button
         */
        "closeButtonTitle"?: string;
        /**
          * (optional) Transition duration
         */
        "duration"?: number;
        /**
          * Modal heading
         */
        "heading"?: string;
        /**
          * (optional) hide close button
         */
        "omitCloseButton"?: boolean;
        /**
          * Fires on every close attempt. Calling `event.preventDefault()` will prevent the modal from closing
         */
        "onScale-before-close"?: (event: ScaleModalCustomEvent<BeforeCloseEventDetail>) => void;
        /**
          * Fires when the modal has been closed
         */
        "onScale-close"?: (event: ScaleModalCustomEvent<void>) => void;
        /**
          * Fires when the modal has been opened
         */
        "onScale-open"?: (event: ScaleModalCustomEvent<void>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleBeforeClose"?: (event: ScaleModalCustomEvent<BeforeCloseEventDetail>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleClose"?: (event: ScaleModalCustomEvent<void>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleOpen"?: (event: ScaleModalCustomEvent<void>) => void;
        /**
          * (optional) If `true`, the Modal is open.
         */
        "opened"?: boolean;
        /**
          * (optional) Modal size
         */
        "size"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleNavIcon {
        "active"?: boolean;
        "badge"?: boolean;
        "badgeLabel"?: number;
        "clickLink"?: any;
        /**
          * (optional) href value
         */
        "href"?: string;
        "icon"?: string;
        /**
          * (optional) if this item is active
         */
        "isActive"?: boolean;
        "isMobileMenuOpen"?: boolean;
        "mobileMenuOpen"?: boolean;
        "refMobileMenuToggle"?: any;
        "refMobileUserMenuToggle"?: any;
        "refUserMenuToggle"?: any;
    }
    interface ScaleNavMain {
        /**
          * (optional) if this item is active
         */
        "active"?: boolean;
        "clickLink"?: any;
        /**
          * (optional) href value
         */
        "href"?: string;
        /**
          * (optional) inner element id
         */
        "innerId"?: string;
        "isActive"?: boolean;
        "isMegaMenuVisible"?: boolean;
        /**
          * (optional) if this mega-menu is visible
         */
        "megaMenuVisible"?: boolean;
        /**
          * (optional) name value
         */
        "name"?: string;
        "popup"?: boolean;
        /**
          * (optional) target value
         */
        "target"?: string;
    }
    interface ScaleNavSegment {
        "active"?: boolean;
        /**
          * (optional) href value
         */
        "href"?: string;
        /**
          * (optional) if this item is active
         */
        "isActive"?: boolean;
    }
    interface ScaleNotification {
        /**
          * (optional) string prepended to the heading
         */
        "ariaHeading"?: string;
        /**
          * (optional) Label for close button
         */
        "closeButtonLabel"?: string;
        /**
          * (optional) `title` for close button
         */
        "closeButtonTitle"?: string;
        /**
          * (optional) Time in milliseconds until it closes by itself
         */
        "delay"?: number;
        /**
          * (optional) Show the close button
         */
        "dismissible"?: boolean;
        /**
          * Heading
         */
        "heading"?: string;
        /**
          * Default aria-level for heading
         */
        "headingLevel"?: number;
        /**
          * @deprecated - ariaRole should replace innerAriaLive
         */
        "innerAriaLive"?: string;
        /**
          * (optional) string prepended to the heading
         */
        "innerRole"?: 'alert' | 'status';
        /**
          * Fires on every close attempt. Calling `event.preventDefault()` will prevent the modal from closing
         */
        "onScale-before-close"?: (event: ScaleNotificationCustomEvent<BeforeCloseEventDetail>) => void;
        /**
          * Fires after the notification has been closed
         */
        "onScale-close"?: (event: ScaleNotificationCustomEvent<void>) => void;
        /**
          * Fires after the notification has been opened
         */
        "onScale-open"?: (event: ScaleNotificationCustomEvent<void>) => void;
        /**
          * (optional) Visible
         */
        "opened"?: boolean;
        /**
          * (optional) Injected styles
         */
        "styles"?: string;
        /**
          * (optional) Type
         */
        "type"?: 'inline' | 'banner' | 'toast';
        /**
          * (optional) Variant
         */
        "variant"?: 'danger' | 'warning' | 'success' | 'informational';
    }
    interface ScaleNotificationBadge {
        /**
          * (optional) Handle click on the badge and surroundet slot elements
         */
        "clickHandler"?: any;
        /**
          * (optional) Text that is displayed in the badge
         */
        "label"?: number;
        /**
          * (optional) Maximal number of characters displayed in the badge
         */
        "maxCharacters"?: number;
        /**
          * (optional) Setting/Slotcontent in which the badge is used
         */
        "type"?: 'icon' | 'text' | 'nav-icon';
    }
    interface ScaleNotificationBanner {
        "autoHide"?: boolean;
        "autoHideDuration"?: number;
        /**
          * (optional) Label for close button
         */
        "closeButtonLabel"?: string;
        /**
          * (optional) Title for close button
         */
        "closeButtonTitle"?: string;
        "dismissible"?: boolean;
        "href"?: string;
        /**
          * Fires when the notification banner has been dismissed
         */
        "onScale-close"?: (event: ScaleNotificationBannerCustomEvent<void>) => void;
        "opened"?: boolean;
        "variant"?: 'informational' | 'success' | 'warning' | 'error';
    }
    interface ScaleNotificationMessage {
        "autoHide"?: boolean;
        "autoHideDuration"?: number;
        /**
          * (optional) Label for close button
         */
        "closeButtonLabel"?: string;
        /**
          * (optional) Title for close button
         */
        "closeButtonTitle"?: string;
        "dismissible"?: boolean;
        /**
          * Fires when the notification message has been dismissed
         */
        "onScale-close"?: (event: ScaleNotificationMessageCustomEvent<void>) => void;
        "opened"?: boolean;
        "variant"?: 'informational' | 'success' | 'warning' | 'error';
    }
    interface ScaleNotificationToast {
        /**
          * (optional) Alignment choose for top and bottom
         */
        "alignment"?: | 'bottom-right'
    | 'bottom-left'
    | 'top-right'
    | 'top-left';
        /**
          * (optional) Animated toast
         */
        "animated"?: boolean;
        /**
          * (optional) Toast auto hide
         */
        "autoHide"?: boolean;
        /**
          * (optional) Toast auto hide duration
         */
        "autoHideDuration"?: number;
        /**
          * (optional) Label for close button
         */
        "closeButtonLabel"?: string;
        /**
          * (optional) Title for close button
         */
        "closeButtonTitle"?: string;
        /**
          * (optional) Toast fade duration
         */
        "fadeDuration"?: number;
        "href"?: string;
        /**
          * Triggered when the notification toast has been dismissed
         */
        "onScale-close"?: (event: ScaleNotificationToastCustomEvent<void>) => void;
        /**
          * Triggered when the notification toast closing process begins
         */
        "onScale-closing"?: (event: ScaleNotificationToastCustomEvent<void>) => void;
        /**
          * (optional) Toast opened
         */
        "opened"?: boolean;
        /**
          * (optional) Toast position right
         */
        "positionHorizontal"?: number;
        /**
          * (optional) Toast position at the top
         */
        "positionVertical"?: number;
        /**
          * (do not use) it is a helper prop for storybook
         */
        "story"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Toast variant
         */
        "variant"?: 'error' | 'warning' | 'success' | 'informational';
    }
    interface ScalePagination {
        /**
          * (optional) translation to 'Go to first page'
         */
        "ariaLabelFirstPage"?: string;
        /**
          * (optional) translation to 'Go to last page'
         */
        "ariaLabelLastPage"?: string;
        /**
          * (optional) translation to 'Go to next page'
         */
        "ariaLabelNextPage"?: string;
        /**
          * (optional) translation to 'Go to previous page'
         */
        "ariaLabelPreviousPage"?: string;
        /**
          * (optional) Set to true to hide top and bottom borders
         */
        "hideBorder"?: boolean;
        /**
          * (optional) Deprecated; hideBorder should replace hideBorders
         */
        "hideBorders"?: boolean;
        /**
          * Event triggered every time the data is edited, changing original rows data
         */
        "onScale-pagination"?: (event: ScalePaginationCustomEvent<{
    startElement?: number;
    currentPage?: number;
    direction: PaginationEventDirection;
  }>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScalePagination"?: (event: ScalePaginationCustomEvent<{
    startElement?: number;
    currentPage?: number;
    direction: PaginationEventDirection;
  }>) => void;
        /**
          * (optional) Set number of rows/elements to show per page
         */
        "pageSize"?: number;
        /**
          * @deprecated - size should replace small
         */
        "size"?: 'small' | 'large';
        /**
          * @deprecated - size should replace small
         */
        "small"?: boolean;
        /**
          * (optional) Index of first element to display
         */
        "startElement"?: number;
        /**
          * (optional) Injected styles
         */
        "styles"?: string;
        /**
          * (optional) Total number of rows/elements used to calculate page displays
         */
        "totalElements"?: number;
    }
    interface ScaleProgressBar {
        /**
          * (optional) Progress bar busy switch
         */
        "busy"?: boolean;
        /**
          * @deprecated - (optional) Progress bar customColor
         */
        "customColor"?: string;
        /**
          * (optional) Progress bar disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Progress bar error
         */
        "hasError"?: boolean;
        /**
          * (optional) Progress bar icon indicator
         */
        "icon"?: string;
        /**
          * (optional) Progress bar label
         */
        "label"?: string;
        /**
          * (optional) disables aria-live
         */
        "mute"?: boolean;
        /**
          * (required) Progress bar percentage
         */
        "percentage"?: number;
        /**
          * (optional) Progress bar percentage to start the animation from (default: 0)
         */
        "percentageStart"?: number;
        /**
          * (optional) Progress bar id
         */
        "progressBarId"?: string;
        /**
          * (optional) Progress bar percentage text
         */
        "showStatus"?: boolean;
        /**
          * (optional) Progress bar status description text
         */
        "statusDescription"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleRadioButton {
        /**
          * (optional) Input checked
         */
        "checked"?: boolean;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input status
         */
        "invalid"?: boolean;
        /**
          * (optional) Input label
         */
        "label"?: string;
        /**
          * (optional) Input name
         */
        "name"?: string;
        "onScale-change"?: (event: ScaleRadioButtonCustomEvent<InputChangeEventDetail>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleChange"?: (event: ScaleRadioButtonCustomEvent<InputChangeEventDetail>) => void;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Input value
         */
        "value"?: string | number | null;
    }
    interface ScaleRadioButtonGroup {
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Input status
         */
        "invalid"?: boolean;
        /**
          * (optional) Input label
         */
        "label"?: string;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
    }
    interface ScaleRatingStars {
        /**
          * a11y text for getting meaningful value. `$rating` and `$max` (deprecated `$maxRating`) are template variables and will be replaces by their corresponding properties.
         */
        "ariaLabelTranslation"?: string;
        /**
          * disables input
         */
        "disabled"?: boolean;
        /**
          * (optional) info text
         */
        "hideLabel"?: boolean;
        /**
          * (optional) info text
         */
        "infoText"?: string;
        /**
          * (optional) rating label
         */
        "label"?: string;
        /**
          * The upper limit of the rating
         */
        "max"?: number;
        /**
          * @deprecated ; max should be used instead of maxRating
         */
        "maxRating"?: number;
        /**
          * @deprecated ; The lower limit of the rating
         */
        "minRating"?: number;
        /**
          * Emitted when the rating has changed
         */
        "onScale-change"?: (event: ScaleRatingStarsCustomEvent<any>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleChange"?: (event: ScaleRatingStarsCustomEvent<any>) => void;
        /**
          * Represents the current value of the rating
         */
        "rating"?: number;
        /**
          * makes the rating non-interactive (but still accessible)
         */
        "readonly"?: boolean;
        /**
          * size of the stars
         */
        "size"?: 'small' | 'large';
        /**
          * @deprecated ; size should be used instead of starSize
         */
        "starSize"?: 'small' | 'large';
    }
    interface ScaleSegment {
        "adjacentSiblings"?: | 'left'
    | 'right'
    | 'leftright';
        /**
          * a11y text for getting meaningful value. `$buttonNumber` and `$selected` are template variables and will be replaces by their corresponding properties.
         */
        "ariaDescriptionTranslation"?: string;
        /**
          * (optional) aria-label attribute needed for icon-only segments
         */
        "ariaLabelSegment"?: string;
        /**
          * (optional) translation of 'deselected
         */
        "ariaLangDeselected"?: string;
        /**
          * (optional) translation of 'selected
         */
        "ariaLangSelected"?: string;
        /**
          * (optional) If `true`, the segment is disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) position within group
         */
        "hasIcon"?: boolean;
        /**
          * (optional) position within group
         */
        "iconOnly"?: boolean;
        /**
          * Emitted when button is clicked
         */
        "onScale-click"?: (event: ScaleSegmentCustomEvent<{
    id: string;
    selected: boolean;
  }>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleClick"?: (event: ScaleSegmentCustomEvent<{
    id: string;
    selected: boolean;
  }>) => void;
        /**
          * (optional) position within group
         */
        "position"?: number;
        /**
          * (optional) segment's id
         */
        "segmentId"?: string;
        /**
          * (optional) If `true`, the segment is selected
         */
        "selected"?: boolean;
        /**
          * (optional) the index of the currently selected segment in the segmented-button
         */
        "selectedIndex"?: string;
        /**
          * (optional) The size of the segment
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) position within group
         */
        "textOnly"?: boolean;
        /**
          * (optional) Segment width set to ensure that all segments have the same width
         */
        "width"?: string;
    }
    interface ScaleSegmentedButton {
        /**
          * (optional) aria-label attribute needed for icon-only buttons
         */
        "ariaLabelTranslation"?: string;
        /**
          * (optional) If `true`, the button is disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) If `true`, expand to container width
         */
        "fullWidth"?: boolean;
        /**
          * (optional) If `true`, show error message
         */
        "helperText"?: string;
        /**
          * (optional) If `true`, show error message
         */
        "invalid"?: boolean;
        /**
          * (optional) Button label
         */
        "label"?: string;
        "longestButtonWidth"?: string;
        /**
          * (optional) Allow more than one button to be selected
         */
        "multiSelect"?: boolean;
        /**
          * Emitted when button is clicked
         */
        "onScale-change"?: (event: ScaleSegmentedButtonCustomEvent<any>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleChange"?: (event: ScaleSegmentedButtonCustomEvent<any>) => void;
        /**
          * (optional) the index of the selected segment
         */
        "selectedIndex"?: number;
        /**
          * (optional) The size of the button
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleSidebarNav {
        /**
          * From mdn: A brief description of the purpose of the navigation, omitting the term "navigation", as the screen reader will read both the role and the contents of the label.
         */
        "ariaLabelSidebarNav"?: string;
        /**
          * Set to `true` to make the sidebar toggleable (useful for small screens)
         */
        "collapsible"?: boolean;
        /**
          * Label for toggle button
         */
        "collapsibleLabel"?: string;
        /**
          * Automatically set `collapsible` based on this media query
         */
        "collapsibleMediaQuery"?: string;
        /**
          * (optional) Extra styles
         */
        "styles"?: string;
    }
    interface ScaleSidebarNavCollapsible {
        /**
          * Label and icon get the active color
         */
        "active"?: boolean;
        /**
          * Bold label and icon
         */
        "bold"?: boolean;
        /**
          * Used normally for third level items
         */
        "condensed"?: boolean;
        /**
          * Set this to `true` to expand
         */
        "expanded"?: boolean;
        /**
          * The URL where the link should point to
         */
        "href"?: string;
        /**
          * The text for the button
         */
        "label"?: string;
        /**
          * Nesting level within the <scale-sidebar-nav> parent, gets set automatically
         */
        "nestingLevel"?: number;
        /**
          * (optional) Extra styles
         */
        "styles"?: string;
        /**
          * The parent wrapper
         */
        "tag"?: string;
    }
    interface ScaleSidebarNavItem {
        /**
          * Text gets the active color
         */
        "active"?: boolean;
        /**
          * Bold text
         */
        "bold"?: boolean;
        /**
          * Used normally for third level items, remove the bottom border
         */
        "condensed"?: boolean;
        /**
          * Mark the child link as "current" with `aria-current=page`. Provide the text hint if needed, default is: "Zurzeit aktiv"
         */
        "current"?: string | null | boolean;
        /**
          * Nesting level within the <scale-sidebar-nav> parent, gets set automatically
         */
        "nestingLevel"?: number;
        /**
          * (optional) Extra styles
         */
        "styles"?: string;
    }
    interface ScaleSlider {
        /**
          * @deprecated (optional) slider custom color
         */
        "customColor"?: string;
        /**
          * (optional) number of decimal places
         */
        "decimals"?: 0 | 1 | 2;
        /**
          * (optional) disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) helper text
         */
        "helperText"?: string;
        /**
          * (optional) Aria label for range slider
         */
        "innerAriaValueText"?: string;
        /**
          * (optional) slider label
         */
        "label"?: string;
        /**
          * (optional) the maximal value of the slider
         */
        "max"?: number;
        /**
          * t(optional) he minimal value of the slider
         */
        "min"?: number;
        /**
          * (optional) the name of the slider
         */
        "name"?: string;
        "onScale-change"?: (event: ScaleSliderCustomEvent<number>) => void;
        "onScale-input"?: (event: ScaleSliderCustomEvent<number>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleChange"?: (event: ScaleSliderCustomEvent<number>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleInput"?: (event: ScaleSliderCustomEvent<number>) => void;
        /**
          * (optional) adapt styles for a specific platform. Ideally done via a global `data-platform` attribute (e.g. data-platform="ios" on `body`) but browser support is not yet sufficient.
          * @see 
          * @url (https://caniuse.com/mdn-css_selectors_host-context)
         */
        "platform"?: 'ios' | 'android';
        /**
          * (optional) multi-thumb
         */
        "range"?: boolean;
        /**
          * (optional) show a mark for each step
         */
        "showStepMarks"?: boolean;
        /**
          * (optional) slider display value
         */
        "showValue"?: boolean;
        /**
          * (optional) Slider id
         */
        "sliderId"?: string;
        /**
          * (optional) the step size to increase or decrease when dragging slider
         */
        "step"?: number;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * @deprecated (optional) larger thumb
         */
        "thumbLarge"?: boolean;
        /**
          * @deprecated (optional) smaller track
         */
        "trackSmall"?: boolean;
        /**
          * (optional) slider value unit
         */
        "unit"?: string;
        /**
          * (optional) unit position
         */
        "unitPosition"?: 'before' | 'after';
        /**
          * (optional) the value of the slider
         */
        "value"?: number;
        /**
          * (optional) when `range` is true, the "from" value
         */
        "valueFrom"?: number;
        /**
          * (optional) when `range` is true, the "to" value
         */
        "valueTo"?: number;
    }
    interface ScaleSsrSlotFix {
    }
    interface ScaleSwitch {
        /**
          * (optional) Active switch
         */
        "checked"?: boolean;
        /**
          * (optional) Disabled switch
         */
        "disabled"?: boolean;
        /**
          * (optional) Input id
         */
        "inputId"?: string;
        /**
          * (optional) switch label
         */
        "label"?: string;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * Emitted when the switch was clicked
         */
        "onScale-change"?: (event: ScaleSwitchCustomEvent<any>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleChange"?: (event: ScaleSwitchCustomEvent<any>) => void;
        "size"?: 'small' | 'large';
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleTabHeader {
        /**
          * True for a disabled Tabnavigation
         */
        "disabled"?: boolean;
        "onScale-select"?: (event: ScaleTabHeaderCustomEvent<any>) => void;
        /**
          * (optional) Whether the tab is selected
         */
        "selected"?: boolean;
        /**
          * (optional) size
         */
        "size"?: 'small' | 'large';
        /**
          * @deprecated - size should replace small
         */
        "small"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleTabNav {
        /**
          * (optional) size
         */
        "size"?: 'small' | 'large';
        /**
          * @deprecated - size should replace small
         */
        "small"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleTabPanel {
        /**
          * @deprecated - no more size difference
         */
        "size"?: 'small' | 'large';
        /**
          * @deprecated - no more size difference
         */
        "small"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) adds tab-index="0" to the panel, set to false to exclude the tab-panel from the tab sequence, e.g. if the first element in the panel is a focusable button
         */
        "tabbablePanel"?: boolean;
    }
    interface ScaleTable {
        /**
          * (optional) Display sort arrows on/off
         */
        "showSort"?: boolean;
        /**
          * @deprecated - css overwrite should replace size
         */
        "size"?: string;
        /**
          * (optional) Striped Table
         */
        "striped"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleTag {
        /**
          * (optional) Tag color
         */
        "color"?: | 'cyan'
    | 'yellow'
    | 'green'
    | 'orange'
    | 'red'
    | 'violet'
    | 'brown'
    | 'olive'
    | 'teal'
    | 'black'
    | 'dismissable'
    | 'standard';
        /**
          * (optional) Tag disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Dismiss label
         */
        "dismissText"?: string;
        /**
          * (optional) Tag dismissable
         */
        "dismissable"?: boolean;
        /**
          * (optional) Tag href
         */
        "href"?: string;
        /**
          * (optional) Close icon click event
         */
        "onScale-close"?: (event: ScaleTagCustomEvent<MouseEvent>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleClose"?: (event: ScaleTagCustomEvent<MouseEvent>) => void;
        /**
          * (optional) Tag size
         */
        "size"?: 'small';
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Tag target
         */
        "target"?: string;
        /**
          * (optional) Tag type
         */
        "type"?: 'standard' | 'strong';
    }
    interface ScaleTelekomAppShell {
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleTelekomFooter {
        "type"?: 'standard' | 'minimal';
    }
    interface ScaleTelekomFooterContent {
        /**
          * (optional) set logo specific title
         */
        "logoHideTitle"?: boolean;
        /**
          * (optional) Logo link
         */
        "logoHref"?: string;
        /**
          * (optional) set logo specific title
         */
        "logoTitle"?: string;
    }
    interface ScaleTelekomFooterDataBackCompat {
        "copyright"?: string;
        "footerNavigation"?: any;
        "type"?: 'standard' | 'minimal';
    }
    interface ScaleTelekomFooterExtendedNavigation {
    }
    interface ScaleTelekomFooterExtendedNavigationColumn {
        /**
          * Set to `true` to expand
         */
        "expanded"?: boolean;
        "heading"?: string;
        "headingLevel"?: string;
    }
    interface ScaleTelekomHeader {
        "appName"?: string;
        "appNameClick"?: any;
        "appNameLink"?: string;
        "langSwitcherAriaLabel"?: string;
        "logoHideTitle"?: boolean;
        "logoHref"?: string;
        "logoTitle"?: string;
        "mainNavAriaLabel"?: string;
        "metaNavAriaLabel"?: string;
        "metaNavExternalAriaLabel"?: string;
        "type"?: string;
    }
    interface ScaleTelekomHeaderDataBackCompat {
        "activeRouteId"?: string;
        "addonNavigation"?: any;
        "appName"?: string;
        "appNameClick"?: any;
        "appNameLink"?: string;
        "iconNavigation"?: any;
        "logoHideTitle"?: boolean;
        "logoHref"?: string;
        "logoTitle"?: string;
        "mainNavigation"?: any;
        "sectorNavigation"?: any;
        "userNavigation"?: any;
    }
    interface ScaleTelekomMegaMenu {
    }
    interface ScaleTelekomMegaMenuColumn {
        "headingLevel"?: number;
    }
    interface ScaleTelekomMobileFlyoutCanvas {
        "appName"?: string;
        "appNameClick"?: any;
        "appNameLink"?: string;
        "closeButtonLabel"?: string;
        "closeButtonTitle"?: string | null;
        "onScale-close-nav-flyout"?: (event: ScaleTelekomMobileFlyoutCanvasCustomEvent<any>) => void;
    }
    interface ScaleTelekomMobileMenu {
        "appName"?: string;
        "appNameClick"?: any;
        "appNameLink"?: string;
        "backButtonTitle"?: string;
        "onScale-close-nav-flyout"?: (event: ScaleTelekomMobileMenuCustomEvent<any>) => void;
    }
    interface ScaleTelekomMobileMenuItem {
        "active"?: boolean;
        "currentLevel"?: string;
        "level"?: string;
        "onScale-close-nav-flyout"?: (event: ScaleTelekomMobileMenuItemCustomEvent<any>) => void;
        "onScale-set-menu-item-active"?: (event: ScaleTelekomMobileMenuItemCustomEvent<any>) => void;
        "onScale-set-menu-item-open"?: (event: ScaleTelekomMobileMenuItemCustomEvent<any>) => void;
        "open"?: boolean;
    }
    interface ScaleTelekomNavFlyout {
        /**
          * Open the flyout menu
         */
        "expanded"?: boolean;
        /**
          * (optinal) Whether the flyout should open on hover (needs better name!)
         */
        "hover"?: boolean;
        "onScale-expanded"?: (event: ScaleTelekomNavFlyoutCustomEvent<any>) => void;
        /**
          * (optional) Selector to query the trigger element in case it's not the previous sibling
         */
        "triggerSelector"?: string;
        /**
          * (optional) Variant ("mobile" gives it a fixed height of `100vh`)
         */
        "variant"?: null | 'mobile';
    }
    interface ScaleTelekomNavItem {
        "active"?: boolean;
        "hideOnDesktop"?: boolean;
        "hideOnMobile"?: boolean;
        "role"?: string | null;
        "variant"?: | 'meta-nav-external'
    | 'meta-nav'
    | 'lang-switcher'
    | 'main-nav'
    | 'functions';
    }
    interface ScaleTelekomNavList {
        "alignment"?: 'left' | 'center' | 'right';
        "role"?: string | null;
        "variant"?: | 'meta-nav-external'
    | 'meta-nav'
    | 'lang-switcher'
    | 'main-nav'
    | 'functions';
    }
    interface ScaleTelekomProfileMenu {
        "accessibilityLabel"?: string;
        "appName"?: string;
        "closeMenuAccessibilityLabel"?: string;
        "hideLoginSettings"?: boolean;
        "label"?: string;
        "loggedIn"?: boolean;
        "loginHelpLabel"?: string;
        "loginHelpUrl"?: string;
        "loginLabel"?: string;
        "loginSettingsLabel"?: string;
        "loginSettingsUrl"?: string;
        "loginUrl"?: string;
        "logoutHandler"?: string;
        "logoutLabel"?: string;
        "logoutUrl"?: string;
        "registerHeadline"?: string;
        "registerLabel"?: string;
        "registerUrl"?: string;
        "serviceDescription"?: string;
        "serviceLinks"?: any;
        "serviceName"?: string;
        "userInfo"?: any;
    }
    interface ScaleTextField {
        /**
          * (optional) id or space separated list of ids of elements that provide or link to additional related information.
         */
        "ariaDetailedId"?: string;
        /**
          * (optional) Input counter
         */
        "counter"?: boolean;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional)) Makes type `input` behave as a controlled component in React
         */
        "experimentalControlled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) to avoid displaying the label
         */
        "hideLabelVisually"?: boolean;
        /**
          * (optional) custom value for autocomplete HTML attribute
         */
        "inputAutocomplete"?: string;
        /**
          * (optional) the input should automatically get focus when the page loads.
         */
        "inputAutofocus"?: boolean;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input mode
         */
        "inputModeType"?: | 'none'
    | 'text'
    | 'decimal'
    | 'numeric'
    | 'tel'
    | 'search'
    | 'email'
    | 'url';
        /**
          * (optional) Input status
         */
        "invalid"?: boolean;
        /**
          * Input label
         */
        "label"?: string;
        /**
          * (optional) input list
         */
        "list"?: string;
        /**
          * (optional) define the numeric maximum value of input types such as month, date, time
         */
        "max"?: number;
        /**
          * (optional) Input text string max length
         */
        "maxLength"?: number;
        /**
          * (optional) defines the numeric minimum value of input types such as month, date, time
         */
        "min"?: number;
        /**
          * (optional) Input text string min length
         */
        "minLength"?: number;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onScale-blur"?: (event: ScaleTextFieldCustomEvent<void>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onScale-change"?: (event: ScaleTextFieldCustomEvent<InputChangeEventDetail>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onScale-focus"?: (event: ScaleTextFieldCustomEvent<void>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onScale-input"?: (event: ScaleTextFieldCustomEvent<KeyboardEvent>) => void;
        /**
          * Emitted on keydown.
         */
        "onScale-keydown"?: (event: ScaleTextFieldCustomEvent<KeyboardEvent>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleBlur"?: (event: ScaleTextFieldCustomEvent<void>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleChange"?: (event: ScaleTextFieldCustomEvent<InputChangeEventDetail>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleFocus"?: (event: ScaleTextFieldCustomEvent<void>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleInput"?: (event: ScaleTextFieldCustomEvent<KeyboardEvent>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleKeydown"?: (event: ScaleTextFieldCustomEvent<KeyboardEvent>) => void;
        /**
          * (optional) Input placeHolder
         */
        "placeholder"?: string;
        /**
          * (optional) Input readonly
         */
        "readonly"?: boolean;
        /**
          * (optional) Input required
         */
        "required"?: boolean;
        /**
          * @deprecated - css overwrite should replace size
         */
        "size"?: string;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
        /**
          * (optional) the step attribute specifies the interval between legal numbers in an <input type="number"> element.
         */
        "step"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) input background transparent
         */
        "transparent"?: boolean;
        /**
          * (optional) Input type
         */
        "type"?: | 'email'
    | 'hidden'
    | 'number'
    | 'password'
    | 'tel'
    | 'text'
    | 'date'
    | 'month' // example yyyy-mm
    | 'week' // example yyyy-W##
    | 'time' // example hh:mm
    | 'datetime-local' // example yyyy-mm-ddThh:mm
    | 'url';
        /**
          * (optional) Input value
         */
        "value"?: string | number | null;
        /**
          * (optional) Variant
         */
        "variant"?: 'informational' | 'warning' | 'danger' | 'success';
    }
    interface ScaleTextarea {
        /**
          * (optional) textarea column
         */
        "cols"?: number;
        /**
          * (optional) Input counter
         */
        "counter"?: boolean;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) the input should automatically get focus when the page loads.
         */
        "inputAutofocus"?: boolean;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input status
         */
        "invalid"?: boolean;
        /**
          * (optional) Input label
         */
        "label"?: string;
        /**
          * (optional) Input max length
         */
        "maxLength"?: number;
        /**
          * (optional) Input min length
         */
        "minLength"?: number;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onScale-blur"?: (event: ScaleTextareaCustomEvent<void>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onScale-change"?: (event: ScaleTextareaCustomEvent<InputChangeEventDetail>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onScale-focus"?: (event: ScaleTextareaCustomEvent<void>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onScale-input"?: (event: ScaleTextareaCustomEvent<KeyboardEvent>) => void;
        /**
          * Emitted on keydown.
         */
        "onScale-keydown"?: (event: ScaleTextareaCustomEvent<KeyboardEvent>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleBlur"?: (event: ScaleTextareaCustomEvent<void>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleChange"?: (event: ScaleTextareaCustomEvent<InputChangeEventDetail>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleFocus"?: (event: ScaleTextareaCustomEvent<void>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleInput"?: (event: ScaleTextareaCustomEvent<KeyboardEvent>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleKeyDown"?: (event: ScaleTextareaCustomEvent<KeyboardEvent>) => void;
        /**
          * (optional) Input placeHolder
         */
        "placeholder"?: string;
        /**
          * (optional) Input readonly
         */
        "readonly"?: boolean;
        /**
          * (optional) Input required
         */
        "required"?: boolean;
        /**
          * (optional) textarea resize
         */
        "resize"?: 'unset' | 'none' | 'vertical' | 'horizontal';
        /**
          * (optional) textarea row
         */
        "rows"?: number;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) input background transparent
         */
        "transparent"?: boolean;
        /**
          * (optional) Input value
         */
        "value"?: string | number | null;
        /**
          * (optional) Variant
         */
        "variant"?: 'informational' | 'warning' | 'danger' | 'success';
    }
    interface ScaleToast {
        /**
          * (optional) Animated toast
         */
        "animated"?: boolean;
        /**
          * (optional) Toast autohide time
         */
        "autoHide"?: boolean | number;
        /**
          * (optional) Toast fade duration
         */
        "fadeDuration"?: number;
        /**
          * (optional) Toast opened
         */
        "opened"?: boolean;
        /**
          * (optional) Toast position right
         */
        "positionRight"?: number;
        /**
          * (optional) Toast position at the top
         */
        "positionTop"?: number;
        /**
          * (optional) Toast size
         */
        "size"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Toast time
         */
        "time"?: number;
        /**
          * (optional) Toast variant
         */
        "variant"?: string;
    }
    interface ScaleToggleButton {
        /**
          * a11y text for getting meaningful value. `$buttonNumber` and `$selected` are template variables and will be replaces by their corresponding properties.
         */
        "ariaDescriptionTranslation"?: string;
        /**
          * (optional) aria-label attribute needed for icon-only buttons
         */
        "ariaLabelToggleButton"?: string;
        /**
          * (optional) translation of 'deselected
         */
        "ariaLangDeselected"?: string;
        /**
          * (optional) translation of 'selected
         */
        "ariaLangSelected"?: string;
        /**
          * (optional) Button background
         */
        "background"?: 'grey' | 'white';
        /**
          * @deprecated - variant should replace colorScheme
         */
        "colorScheme"?: 'monochrome' | 'color';
        /**
          * (optional) If `true`, the button is disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) set the border-radius left, right or both
         */
        "hideBorder"?: false;
        /**
          * (optional) Button type
         */
        "iconOnly"?: boolean;
        /**
          * (optional) Icon position related to the label
         */
        "iconPosition"?: 'before' | 'after';
        /**
          * Emitted when button is clicked
         */
        "onScale-click"?: (event: ScaleToggleButtonCustomEvent<{
    id: string;
    selected: boolean;
  }>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleClick"?: (event: ScaleToggleButtonCustomEvent<{
    id: string;
    selected: boolean;
  }>) => void;
        /**
          * (optional) position within group
         */
        "position"?: number;
        /**
          * (optional) set the border-radius left, right or both
         */
        "radius"?: 'left' | 'right' | 'both' | 'neither' | null;
        /**
          * (optional) If `true`, the button is selected
         */
        "selected"?: boolean;
        /**
          * (optional) The size of the button
         */
        "size"?: 'large' | 'regular' | 'small' | 'xs';
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) toggle button's id
         */
        "toggleButtonId"?: string;
        /**
          * (optional) background variant of a selected toggle-button
         */
        "variant"?: 'monochrome' | 'color';
    }
    interface ScaleToggleGroup {
        /**
          * (optional) aria-label attribute needed for icon-only buttons
         */
        "ariaLabelTranslation"?: string;
        /**
          * (optional) Button Group background
         */
        "background"?: 'grey' | 'white';
        /**
          * @deprecated - variant should replace colorScheme
         */
        "colorScheme"?: 'monochrome' | 'color';
        /**
          * (optional) If `true`, the button is disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) 100% width
         */
        "fullWidth"?: boolean;
        /**
          * (optional) If `true`, the group has a border
         */
        "hideBorder"?: boolean;
        /**
          * Emitted when button is clicked
         */
        "onScale-change"?: (event: ScaleToggleGroupCustomEvent<any>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleChange"?: (event: ScaleToggleGroupCustomEvent<any>) => void;
        /**
          * (optional) more than one button selected possible
         */
        "singleSelect"?: boolean;
        /**
          * (optional) The size of the button
         */
        "size"?: 'large' | 'regular' | 'small' | 'xs';
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) background variant of a selected toggle-button
         */
        "variant"?: 'monochrome' | 'color';
    }
    interface ScaleTooltip {
        /**
          * (optional) How much of the arrow element is "hidden"
         */
        "arrowOffset"?: number;
        /**
          * (optional) Padding between the arrow and the edges of the tooltip
         */
        "arrowPadding"?: number;
        /**
          * (optional) The content of the Tooltip, supporting text only
         */
        "content"?: string;
        /**
          * (optional) Disable the tooltip
         */
        "disabled"?: boolean;
        /**
          * (optional) Tooltip distance from the target element (related to `placement`)
         */
        "distance"?: number;
        /**
          * (optional) Switching the flip option of the tooltip on and off
         */
        "flip"?: boolean;
        "onScale-before-hide"?: (event: ScaleTooltipCustomEvent<any>) => void;
        "onScale-before-show"?: (event: ScaleTooltipCustomEvent<any>) => void;
        "onScale-hide"?: (event: ScaleTooltipCustomEvent<any>) => void;
        "onScale-show"?: (event: ScaleTooltipCustomEvent<any>) => void;
        /**
          * (optional) Set the tooltip to opened by default (will still be closed on closing events)
         */
        "opened"?: boolean;
        /**
          * (optional) Position of the Tooltip around the trigger element
         */
        "placement"?: | 'top'
    | 'top-start'
    | 'top-end'
    | 'right'
    | 'right-start'
    | 'right-end'
    | 'bottom'
    | 'bottom-start'
    | 'bottom-end'
    | 'left'
    | 'left-start'
    | 'left-end';
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Set custom trigger event (hover, focus, click)
         */
        "trigger"?: string;
    }
    interface IntrinsicElements {
        "app-logo": AppLogo;
        "app-mega-menu": AppMegaMenu;
        "app-navigation-main-mobile": AppNavigationMainMobile;
        "app-navigation-sector-mobile": AppNavigationSectorMobile;
        "app-navigation-user-menu": AppNavigationUserMenu;
        "scale-accordion": ScaleAccordion;
        "scale-alert": ScaleAlert;
        "scale-app-footer": ScaleAppFooter;
        "scale-app-header": ScaleAppHeader;
        "scale-app-shell": ScaleAppShell;
        "scale-badge": ScaleBadge;
        "scale-breadcrumb": ScaleBreadcrumb;
        "scale-button": ScaleButton;
        "scale-callout": ScaleCallout;
        "scale-card": ScaleCard;
        "scale-carousel": ScaleCarousel;
        "scale-chart-stack-card": ScaleChartStackCard;
        "scale-checkbox": ScaleCheckbox;
        "scale-checkbox-group": ScaleCheckboxGroup;
        "scale-chip": ScaleChip;
        "scale-collapsible": ScaleCollapsible;
        "scale-data-grid": ScaleDataGrid;
        "scale-date-picker": ScaleDatePicker;
        "scale-divider": ScaleDivider;
        "scale-dropdown": ScaleDropdown;
        "scale-dropdown-select": ScaleDropdownSelect;
        "scale-dropdown-select-item": ScaleDropdownSelectItem;
        "scale-grid": ScaleGrid;
        "scale-grid-item": ScaleGridItem;
        "scale-helper-text": ScaleHelperText;
        "scale-icon": ScaleIcon;
        "scale-icon-action-add": ScaleIconActionAdd;
        "scale-icon-action-add-card": ScaleIconActionAddCard;
        "scale-icon-action-arrange": ScaleIconActionArrange;
        "scale-icon-action-arrow-down": ScaleIconActionArrowDown;
        "scale-icon-action-arrow-left": ScaleIconActionArrowLeft;
        "scale-icon-action-arrow-right": ScaleIconActionArrowRight;
        "scale-icon-action-arrow-up": ScaleIconActionArrowUp;
        "scale-icon-action-auto-login": ScaleIconActionAutoLogin;
        "scale-icon-action-backspace": ScaleIconActionBackspace;
        "scale-icon-action-backward": ScaleIconActionBackward;
        "scale-icon-action-changelog": ScaleIconActionChangelog;
        "scale-icon-action-checkmark": ScaleIconActionCheckmark;
        "scale-icon-action-circle-add": ScaleIconActionCircleAdd;
        "scale-icon-action-circle-close": ScaleIconActionCircleClose;
        "scale-icon-action-close": ScaleIconActionClose;
        "scale-icon-action-compare": ScaleIconActionCompare;
        "scale-icon-action-copy-paste": ScaleIconActionCopyPaste;
        "scale-icon-action-cut-paste": ScaleIconActionCutPaste;
        "scale-icon-action-disabled-microphone": ScaleIconActionDisabledMicrophone;
        "scale-icon-action-download": ScaleIconActionDownload;
        "scale-icon-action-download-from-cloud": ScaleIconActionDownloadFromCloud;
        "scale-icon-action-drag-and-drop": ScaleIconActionDragAndDrop;
        "scale-icon-action-edit": ScaleIconActionEdit;
        "scale-icon-action-export": ScaleIconActionExport;
        "scale-icon-action-fast-forward": ScaleIconActionFastForward;
        "scale-icon-action-fast-forward-nb": ScaleIconActionFastForwardNb;
        "scale-icon-action-favorite": ScaleIconActionFavorite;
        "scale-icon-action-filter": ScaleIconActionFilter;
        "scale-icon-action-filter-2": ScaleIconActionFilter2;
        "scale-icon-action-forward": ScaleIconActionForward;
        "scale-icon-action-full-screen": ScaleIconActionFullScreen;
        "scale-icon-action-hide-password": ScaleIconActionHidePassword;
        "scale-icon-action-import": ScaleIconActionImport;
        "scale-icon-action-install": ScaleIconActionInstall;
        "scale-icon-action-launch": ScaleIconActionLaunch;
        "scale-icon-action-light-dark-mode": ScaleIconActionLightDarkMode;
        "scale-icon-action-link": ScaleIconActionLink;
        "scale-icon-action-logout": ScaleIconActionLogout;
        "scale-icon-action-loop": ScaleIconActionLoop;
        "scale-icon-action-menu": ScaleIconActionMenu;
        "scale-icon-action-microphone": ScaleIconActionMicrophone;
        "scale-icon-action-minimize-screen": ScaleIconActionMinimizeScreen;
        "scale-icon-action-minus": ScaleIconActionMinus;
        "scale-icon-action-minus-circle": ScaleIconActionMinusCircle;
        "scale-icon-action-more": ScaleIconActionMore;
        "scale-icon-action-move": ScaleIconActionMove;
        "scale-icon-action-mute": ScaleIconActionMute;
        "scale-icon-action-notification": ScaleIconActionNotification;
        "scale-icon-action-pause": ScaleIconActionPause;
        "scale-icon-action-pause-nb": ScaleIconActionPauseNb;
        "scale-icon-action-pin": ScaleIconActionPin;
        "scale-icon-action-play": ScaleIconActionPlay;
        "scale-icon-action-play-nb": ScaleIconActionPlayNb;
        "scale-icon-action-pop-up-window": ScaleIconActionPopUpWindow;
        "scale-icon-action-power": ScaleIconActionPower;
        "scale-icon-action-previous-nb": ScaleIconActionPreviousNb;
        "scale-icon-action-print": ScaleIconActionPrint;
        "scale-icon-action-publish": ScaleIconActionPublish;
        "scale-icon-action-random": ScaleIconActionRandom;
        "scale-icon-action-record-nb": ScaleIconActionRecordNb;
        "scale-icon-action-refresh": ScaleIconActionRefresh;
        "scale-icon-action-remove": ScaleIconActionRemove;
        "scale-icon-action-reply": ScaleIconActionReply;
        "scale-icon-action-reply-all": ScaleIconActionReplyAll;
        "scale-icon-action-reply-forward": ScaleIconActionReplyForward;
        "scale-icon-action-restart": ScaleIconActionRestart;
        "scale-icon-action-search": ScaleIconActionSearch;
        "scale-icon-action-send": ScaleIconActionSend;
        "scale-icon-action-share": ScaleIconActionShare;
        "scale-icon-action-shopping-cart": ScaleIconActionShoppingCart;
        "scale-icon-action-show-password": ScaleIconActionShowPassword;
        "scale-icon-action-sort": ScaleIconActionSort;
        "scale-icon-action-sound-on": ScaleIconActionSoundOn;
        "scale-icon-action-star": ScaleIconActionStar;
        "scale-icon-action-stream-on": ScaleIconActionStreamOn;
        "scale-icon-action-success": ScaleIconActionSuccess;
        "scale-icon-action-thumbs-down": ScaleIconActionThumbsDown;
        "scale-icon-action-thumbs-up": ScaleIconActionThumbsUp;
        "scale-icon-action-tiles-add": ScaleIconActionTilesAdd;
        "scale-icon-action-upload": ScaleIconActionUpload;
        "scale-icon-action-upload-to-cloud": ScaleIconActionUploadToCloud;
        "scale-icon-action-volume-down": ScaleIconActionVolumeDown;
        "scale-icon-action-volume-up": ScaleIconActionVolumeUp;
        "scale-icon-action-zoom-in": ScaleIconActionZoomIn;
        "scale-icon-action-zoom-out": ScaleIconActionZoomOut;
        "scale-icon-alert-antivirus-protection": ScaleIconAlertAntivirusProtection;
        "scale-icon-alert-compliance": ScaleIconAlertCompliance;
        "scale-icon-alert-cyber-security": ScaleIconAlertCyberSecurity;
        "scale-icon-alert-error": ScaleIconAlertError;
        "scale-icon-alert-help": ScaleIconAlertHelp;
        "scale-icon-alert-high-priority-email": ScaleIconAlertHighPriorityEmail;
        "scale-icon-alert-imprint-dataprivacy": ScaleIconAlertImprintDataprivacy;
        "scale-icon-alert-information": ScaleIconAlertInformation;
        "scale-icon-alert-legal": ScaleIconAlertLegal;
        "scale-icon-alert-network-disrupted": ScaleIconAlertNetworkDisrupted;
        "scale-icon-alert-password-breaking": ScaleIconAlertPasswordBreaking;
        "scale-icon-alert-security": ScaleIconAlertSecurity;
        "scale-icon-alert-traffic-disruption": ScaleIconAlertTrafficDisruption;
        "scale-icon-alert-unknown": ScaleIconAlertUnknown;
        "scale-icon-alert-warning": ScaleIconAlertWarning;
        "scale-icon-communication-available": ScaleIconCommunicationAvailable;
        "scale-icon-communication-blog": ScaleIconCommunicationBlog;
        "scale-icon-communication-call-incoming": ScaleIconCommunicationCallIncoming;
        "scale-icon-communication-call-outgoing": ScaleIconCommunicationCallOutgoing;
        "scale-icon-communication-chat": ScaleIconCommunicationChat;
        "scale-icon-communication-chat-badge": ScaleIconCommunicationChatBadge;
        "scale-icon-communication-email": ScaleIconCommunicationEmail;
        "scale-icon-communication-end-call": ScaleIconCommunicationEndCall;
        "scale-icon-communication-feedback": ScaleIconCommunicationFeedback;
        "scale-icon-communication-flight-mode": ScaleIconCommunicationFlightMode;
        "scale-icon-communication-happy-person": ScaleIconCommunicationHappyPerson;
        "scale-icon-communication-inbox": ScaleIconCommunicationInbox;
        "scale-icon-communication-landing-mobile-contact-client": ScaleIconCommunicationLandingMobileContactClient;
        "scale-icon-communication-loyalty-earned": ScaleIconCommunicationLoyaltyEarned;
        "scale-icon-communication-loyalty-lost": ScaleIconCommunicationLoyaltyLost;
        "scale-icon-communication-mail-opened": ScaleIconCommunicationMailOpened;
        "scale-icon-communication-message": ScaleIconCommunicationMessage;
        "scale-icon-communication-message-incoming": ScaleIconCommunicationMessageIncoming;
        "scale-icon-communication-message-outgoing": ScaleIconCommunicationMessageOutgoing;
        "scale-icon-communication-mms-incoming": ScaleIconCommunicationMmsIncoming;
        "scale-icon-communication-mms-outgoing": ScaleIconCommunicationMmsOutgoing;
        "scale-icon-communication-mobile-phone-number": ScaleIconCommunicationMobilePhoneNumber;
        "scale-icon-communication-network-signal": ScaleIconCommunicationNetworkSignal;
        "scale-icon-communication-new-email": ScaleIconCommunicationNewEmail;
        "scale-icon-communication-outbox": ScaleIconCommunicationOutbox;
        "scale-icon-communication-phone-number": ScaleIconCommunicationPhoneNumber;
        "scale-icon-communication-recipient": ScaleIconCommunicationRecipient;
        "scale-icon-communication-save-emails-to-drafts": ScaleIconCommunicationSaveEmailsToDrafts;
        "scale-icon-communication-sms": ScaleIconCommunicationSms;
        "scale-icon-communication-spam": ScaleIconCommunicationSpam;
        "scale-icon-communication-voice-message": ScaleIconCommunicationVoiceMessage;
        "scale-icon-content-2fa-google-auth": ScaleIconContent2faGoogleAuth;
        "scale-icon-content-achievement": ScaleIconContentAchievement;
        "scale-icon-content-android": ScaleIconContentAndroid;
        "scale-icon-content-apple": ScaleIconContentApple;
        "scale-icon-content-applications": ScaleIconContentApplications;
        "scale-icon-content-available-keychain": ScaleIconContentAvailableKeychain;
        "scale-icon-content-bank": ScaleIconContentBank;
        "scale-icon-content-biometric": ScaleIconContentBiometric;
        "scale-icon-content-birthday": ScaleIconContentBirthday;
        "scale-icon-content-bookmark": ScaleIconContentBookmark;
        "scale-icon-content-calendar": ScaleIconContentCalendar;
        "scale-icon-content-clipboard": ScaleIconContentClipboard;
        "scale-icon-content-clock": ScaleIconContentClock;
        "scale-icon-content-cloud-security": ScaleIconContentCloudSecurity;
        "scale-icon-content-code-scanner": ScaleIconContentCodeScanner;
        "scale-icon-content-color-selection": ScaleIconContentColorSelection;
        "scale-icon-content-country": ScaleIconContentCountry;
        "scale-icon-content-credit-card": ScaleIconContentCreditCard;
        "scale-icon-content-data-visualisation": ScaleIconContentDataVisualisation;
        "scale-icon-content-delivery": ScaleIconContentDelivery;
        "scale-icon-content-digital-banking": ScaleIconContentDigitalBanking;
        "scale-icon-content-digital-media": ScaleIconContentDigitalMedia;
        "scale-icon-content-discount": ScaleIconContentDiscount;
        "scale-icon-content-e-sim": ScaleIconContentESim;
        "scale-icon-content-eu": ScaleIconContentEu;
        "scale-icon-content-face-mask": ScaleIconContentFaceMask;
        "scale-icon-content-features": ScaleIconContentFeatures;
        "scale-icon-content-flexible-tariffs": ScaleIconContentFlexibleTariffs;
        "scale-icon-content-folder": ScaleIconContentFolder;
        "scale-icon-content-food": ScaleIconContentFood;
        "scale-icon-content-gender-diverse": ScaleIconContentGenderDiverse;
        "scale-icon-content-gender-female": ScaleIconContentGenderFemale;
        "scale-icon-content-gender-male": ScaleIconContentGenderMale;
        "scale-icon-content-half-rating": ScaleIconContentHalfRating;
        "scale-icon-content-heart": ScaleIconContentHeart;
        "scale-icon-content-height": ScaleIconContentHeight;
        "scale-icon-content-history": ScaleIconContentHistory;
        "scale-icon-content-hour-glass": ScaleIconContentHourGlass;
        "scale-icon-content-iban": ScaleIconContentIban;
        "scale-icon-content-id": ScaleIconContentId;
        "scale-icon-content-in-stock": ScaleIconContentInStock;
        "scale-icon-content-international": ScaleIconContentInternational;
        "scale-icon-content-international-sms": ScaleIconContentInternationalSms;
        "scale-icon-content-interview": ScaleIconContentInterview;
        "scale-icon-content-key": ScaleIconContentKey;
        "scale-icon-content-language": ScaleIconContentLanguage;
        "scale-icon-content-lock": ScaleIconContentLock;
        "scale-icon-content-loyalty": ScaleIconContentLoyalty;
        "scale-icon-content-media-folder": ScaleIconContentMediaFolder;
        "scale-icon-content-money-at": ScaleIconContentMoneyAt;
        "scale-icon-content-music": ScaleIconContentMusic;
        "scale-icon-content-news": ScaleIconContentNews;
        "scale-icon-content-out-of-stock": ScaleIconContentOutOfStock;
        "scale-icon-content-person-walking": ScaleIconContentPersonWalking;
        "scale-icon-content-prepaid-activate": ScaleIconContentPrepaidActivate;
        "scale-icon-content-price-tag": ScaleIconContentPriceTag;
        "scale-icon-content-ratings": ScaleIconContentRatings;
        "scale-icon-content-route": ScaleIconContentRoute;
        "scale-icon-content-rss": ScaleIconContentRss;
        "scale-icon-content-shop": ScaleIconContentShop;
        "scale-icon-content-signal": ScaleIconContentSignal;
        "scale-icon-content-sim-card": ScaleIconContentSimCard;
        "scale-icon-content-smile": ScaleIconContentSmile;
        "scale-icon-content-sort-indicator-down": ScaleIconContentSortIndicatorDown;
        "scale-icon-content-sort-indicator-mini-down": ScaleIconContentSortIndicatorMiniDown;
        "scale-icon-content-sort-indicator-up": ScaleIconContentSortIndicatorUp;
        "scale-icon-content-sort-indicator-up-mini": ScaleIconContentSortIndicatorUpMini;
        "scale-icon-content-status-inactive": ScaleIconContentStatusInactive;
        "scale-icon-content-status-recurring": ScaleIconContentStatusRecurring;
        "scale-icon-content-stopwatch": ScaleIconContentStopwatch;
        "scale-icon-content-support-chat": ScaleIconContentSupportChat;
        "scale-icon-content-sustainable": ScaleIconContentSustainable;
        "scale-icon-content-tariffs": ScaleIconContentTariffs;
        "scale-icon-content-threats": ScaleIconContentThreats;
        "scale-icon-content-todo-list": ScaleIconContentTodoList;
        "scale-icon-content-transport": ScaleIconContentTransport;
        "scale-icon-content-unlock": ScaleIconContentUnlock;
        "scale-icon-content-voucher": ScaleIconContentVoucher;
        "scale-icon-content-waiting": ScaleIconContentWaiting;
        "scale-icon-content-wallet": ScaleIconContentWallet;
        "scale-icon-device-add-device": ScaleIconDeviceAddDevice;
        "scale-icon-device-camera": ScaleIconDeviceCamera;
        "scale-icon-device-change-camera": ScaleIconDeviceChangeCamera;
        "scale-icon-device-computer": ScaleIconDeviceComputer;
        "scale-icon-device-device-controller": ScaleIconDeviceDeviceController;
        "scale-icon-device-device-ethernet": ScaleIconDeviceDeviceEthernet;
        "scale-icon-device-device-mesh": ScaleIconDeviceDeviceMesh;
        "scale-icon-device-device-phone": ScaleIconDeviceDevicePhone;
        "scale-icon-device-device-router": ScaleIconDeviceDeviceRouter;
        "scale-icon-device-device-tv": ScaleIconDeviceDeviceTv;
        "scale-icon-device-device-watch": ScaleIconDeviceDeviceWatch;
        "scale-icon-device-dongle": ScaleIconDeviceDongle;
        "scale-icon-device-fax": ScaleIconDeviceFax;
        "scale-icon-device-fixed-line-services": ScaleIconDeviceFixedLineServices;
        "scale-icon-device-game-controller": ScaleIconDeviceGameController;
        "scale-icon-device-media-receiver": ScaleIconDeviceMediaReceiver;
        "scale-icon-device-mobile-data": ScaleIconDeviceMobileData;
        "scale-icon-device-mobile-devices-combination": ScaleIconDeviceMobileDevicesCombination;
        "scale-icon-device-mobile-equipment": ScaleIconDeviceMobileEquipment;
        "scale-icon-device-mobile-phone-insurance": ScaleIconDeviceMobilePhoneInsurance;
        "scale-icon-device-mobile-services": ScaleIconDeviceMobileServices;
        "scale-icon-device-no-camera": ScaleIconDeviceNoCamera;
        "scale-icon-device-phone-with-mobile-plan": ScaleIconDevicePhoneWithMobilePlan;
        "scale-icon-device-phone-without-mobile-plan": ScaleIconDevicePhoneWithoutMobilePlan;
        "scale-icon-device-photo-camera": ScaleIconDevicePhotoCamera;
        "scale-icon-device-remote-controller": ScaleIconDeviceRemoteController;
        "scale-icon-device-replacement-mobilephone": ScaleIconDeviceReplacementMobilephone;
        "scale-icon-device-screen-rotate": ScaleIconDeviceScreenRotate;
        "scale-icon-device-server": ScaleIconDeviceServer;
        "scale-icon-device-smart-speaker": ScaleIconDeviceSmartSpeaker;
        "scale-icon-device-tablet": ScaleIconDeviceTablet;
        "scale-icon-device-tv-and-mobile": ScaleIconDeviceTvAndMobile;
        "scale-icon-device-twitching-closed-state": ScaleIconDeviceTwitchingClosedState;
        "scale-icon-device-twitching-open-state": ScaleIconDeviceTwitchingOpenState;
        "scale-icon-home-home": ScaleIconHomeHome;
        "scale-icon-home-internet-at-home": ScaleIconHomeInternetAtHome;
        "scale-icon-home-iot": ScaleIconHomeIot;
        "scale-icon-home-light-bulb": ScaleIconHomeLightBulb;
        "scale-icon-home-network-secure": ScaleIconHomeNetworkSecure;
        "scale-icon-home-no-wifi": ScaleIconHomeNoWifi;
        "scale-icon-home-power-socket": ScaleIconHomePowerSocket;
        "scale-icon-home-preferred-wifi": ScaleIconHomePreferredWifi;
        "scale-icon-home-reduced-wifi": ScaleIconHomeReducedWifi;
        "scale-icon-home-slow-wifi": ScaleIconHomeSlowWifi;
        "scale-icon-home-smarthome": ScaleIconHomeSmarthome;
        "scale-icon-home-unable-to-connect-to-router": ScaleIconHomeUnableToConnectToRouter;
        "scale-icon-home-wifi": ScaleIconHomeWifi;
        "scale-icon-home-wifi-connected": ScaleIconHomeWifiConnected;
        "scale-icon-home-wifi-connection-error": ScaleIconHomeWifiConnectionError;
        "scale-icon-home-wifi-manual-login": ScaleIconHomeWifiManualLogin;
        "scale-icon-home-wifi-no-wired-internet": ScaleIconHomeWifiNoWiredInternet;
        "scale-icon-navigation-circle-top-up": ScaleIconNavigationCircleTopUp;
        "scale-icon-navigation-collapse-down": ScaleIconNavigationCollapseDown;
        "scale-icon-navigation-collapse-up": ScaleIconNavigationCollapseUp;
        "scale-icon-navigation-double-left": ScaleIconNavigationDoubleLeft;
        "scale-icon-navigation-double-right": ScaleIconNavigationDoubleRight;
        "scale-icon-navigation-external-link": ScaleIconNavigationExternalLink;
        "scale-icon-navigation-internal-link": ScaleIconNavigationInternalLink;
        "scale-icon-navigation-left": ScaleIconNavigationLeft;
        "scale-icon-navigation-left-condensed": ScaleIconNavigationLeftCondensed;
        "scale-icon-navigation-location": ScaleIconNavigationLocation;
        "scale-icon-navigation-map": ScaleIconNavigationMap;
        "scale-icon-navigation-my-location": ScaleIconNavigationMyLocation;
        "scale-icon-navigation-right": ScaleIconNavigationRight;
        "scale-icon-navigation-right-condensed": ScaleIconNavigationRightCondensed;
        "scale-icon-navigation-start": ScaleIconNavigationStart;
        "scale-icon-navigation-top-up": ScaleIconNavigationTopUp;
        "scale-icon-process-order-status": ScaleIconProcessOrderStatus;
        "scale-icon-process-processing": ScaleIconProcessProcessing;
        "scale-icon-process-sepa-transaction": ScaleIconProcessSepaTransaction;
        "scale-icon-service-devices-service": ScaleIconServiceDevicesService;
        "scale-icon-service-maintanance": ScaleIconServiceMaintanance;
        "scale-icon-service-manual": ScaleIconServiceManual;
        "scale-icon-service-one-time-password": ScaleIconServiceOneTimePassword;
        "scale-icon-service-services": ScaleIconServiceServices;
        "scale-icon-service-settings": ScaleIconServiceSettings;
        "scale-icon-service-support": ScaleIconServiceSupport;
        "scale-icon-service-vpn": ScaleIconServiceVpn;
        "scale-icon-t-product-2fa-telekom-app": ScaleIconTProduct2faTelekomApp;
        "scale-icon-t-product-magenta-cloud": ScaleIconTProductMagentaCloud;
        "scale-icon-t-product-magenta-tv": ScaleIconTProductMagentaTv;
        "scale-icon-t-product-magentaone": ScaleIconTProductMagentaone;
        "scale-icon-t-product-measure-internet-speed": ScaleIconTProductMeasureInternetSpeed;
        "scale-icon-t-product-seamless-connectivity": ScaleIconTProductSeamlessConnectivity;
        "scale-icon-t-product-telekom-1t1": ScaleIconTProductTelekom1t1;
        "scale-icon-t-product-telekom-plan": ScaleIconTProductTelekomPlan;
        "scale-icon-t-product-telekom-shop-b": ScaleIconTProductTelekomShopB;
        "scale-icon-t-product-usage": ScaleIconTProductUsage;
        "scale-icon-t-product-voice": ScaleIconTProductVoice;
        "scale-icon-user-file-admin": ScaleIconUserFileAdmin;
        "scale-icon-user-file-analytics": ScaleIconUserFileAnalytics;
        "scale-icon-user-file-attachment": ScaleIconUserFileAttachment;
        "scale-icon-user-file-audio-file": ScaleIconUserFileAudioFile;
        "scale-icon-user-file-billing": ScaleIconUserFileBilling;
        "scale-icon-user-file-boy": ScaleIconUserFileBoy;
        "scale-icon-user-file-bussines-users": ScaleIconUserFileBussinesUsers;
        "scale-icon-user-file-communities": ScaleIconUserFileCommunities;
        "scale-icon-user-file-contacts": ScaleIconUserFileContacts;
        "scale-icon-user-file-contacts-from-cloud": ScaleIconUserFileContactsFromCloud;
        "scale-icon-user-file-contracts": ScaleIconUserFileContracts;
        "scale-icon-user-file-draft-file": ScaleIconUserFileDraftFile;
        "scale-icon-user-file-families": ScaleIconUserFileFamilies;
        "scale-icon-user-file-family": ScaleIconUserFileFamily;
        "scale-icon-user-file-file": ScaleIconUserFileFile;
        "scale-icon-user-file-file-collection": ScaleIconUserFileFileCollection;
        "scale-icon-user-file-girl": ScaleIconUserFileGirl;
        "scale-icon-user-file-handshake": ScaleIconUserFileHandshake;
        "scale-icon-user-file-html-file": ScaleIconUserFileHtmlFile;
        "scale-icon-user-file-id-card": ScaleIconUserFileIdCard;
        "scale-icon-user-file-image-file": ScaleIconUserFileImageFile;
        "scale-icon-user-file-logout": ScaleIconUserFileLogout;
        "scale-icon-user-file-man": ScaleIconUserFileMan;
        "scale-icon-user-file-pdf-file": ScaleIconUserFilePdfFile;
        "scale-icon-user-file-switch-users": ScaleIconUserFileSwitchUsers;
        "scale-icon-user-file-user": ScaleIconUserFileUser;
        "scale-icon-user-file-videos": ScaleIconUserFileVideos;
        "scale-icon-user-file-woman": ScaleIconUserFileWoman;
        "scale-icon-weather-cloudy": ScaleIconWeatherCloudy;
        "scale-icon-weather-cloudy-rain": ScaleIconWeatherCloudyRain;
        "scale-icon-weather-cloudy-sleet": ScaleIconWeatherCloudySleet;
        "scale-icon-weather-cloudy-snow": ScaleIconWeatherCloudySnow;
        "scale-icon-weather-cloudy-thunder-rain": ScaleIconWeatherCloudyThunderRain;
        "scale-icon-weather-cloudy-thunder-snow": ScaleIconWeatherCloudyThunderSnow;
        "scale-icon-weather-heavy-sleet": ScaleIconWeatherHeavySleet;
        "scale-icon-weather-heavy-snow": ScaleIconWeatherHeavySnow;
        "scale-icon-weather-moon-clear": ScaleIconWeatherMoonClear;
        "scale-icon-weather-moon-cloudy-a": ScaleIconWeatherMoonCloudyA;
        "scale-icon-weather-moon-cloudy-b": ScaleIconWeatherMoonCloudyB;
        "scale-icon-weather-moon-rain": ScaleIconWeatherMoonRain;
        "scale-icon-weather-moon-sleet": ScaleIconWeatherMoonSleet;
        "scale-icon-weather-moon-snow": ScaleIconWeatherMoonSnow;
        "scale-icon-weather-moon-thunder-rain": ScaleIconWeatherMoonThunderRain;
        "scale-icon-weather-moon-thunder-snow": ScaleIconWeatherMoonThunderSnow;
        "scale-icon-weather-overcast": ScaleIconWeatherOvercast;
        "scale-icon-weather-rain": ScaleIconWeatherRain;
        "scale-icon-weather-sunny": ScaleIconWeatherSunny;
        "scale-icon-weather-thunder-rain": ScaleIconWeatherThunderRain;
        "scale-icon-weather-thunder-snow": ScaleIconWeatherThunderSnow;
        "scale-input": ScaleInput;
        "scale-link": ScaleLink;
        "scale-list": ScaleList;
        "scale-list-item": ScaleListItem;
        "scale-loading-spinner": ScaleLoadingSpinner;
        "scale-logo": ScaleLogo;
        "scale-logo-svg": ScaleLogoSvg;
        "scale-menu-flyout": ScaleMenuFlyout;
        "scale-menu-flyout-divider": ScaleMenuFlyoutDivider;
        "scale-menu-flyout-item": ScaleMenuFlyoutItem;
        "scale-menu-flyout-list": ScaleMenuFlyoutList;
        "scale-modal": ScaleModal;
        "scale-nav-icon": ScaleNavIcon;
        "scale-nav-main": ScaleNavMain;
        "scale-nav-segment": ScaleNavSegment;
        "scale-notification": ScaleNotification;
        "scale-notification-badge": ScaleNotificationBadge;
        "scale-notification-banner": ScaleNotificationBanner;
        "scale-notification-message": ScaleNotificationMessage;
        "scale-notification-toast": ScaleNotificationToast;
        "scale-pagination": ScalePagination;
        "scale-progress-bar": ScaleProgressBar;
        "scale-radio-button": ScaleRadioButton;
        "scale-radio-button-group": ScaleRadioButtonGroup;
        "scale-rating-stars": ScaleRatingStars;
        "scale-segment": ScaleSegment;
        "scale-segmented-button": ScaleSegmentedButton;
        "scale-sidebar-nav": ScaleSidebarNav;
        "scale-sidebar-nav-collapsible": ScaleSidebarNavCollapsible;
        "scale-sidebar-nav-item": ScaleSidebarNavItem;
        "scale-slider": ScaleSlider;
        "scale-ssr-slot-fix": ScaleSsrSlotFix;
        "scale-switch": ScaleSwitch;
        "scale-tab-header": ScaleTabHeader;
        "scale-tab-nav": ScaleTabNav;
        "scale-tab-panel": ScaleTabPanel;
        "scale-table": ScaleTable;
        "scale-tag": ScaleTag;
        "scale-telekom-app-shell": ScaleTelekomAppShell;
        "scale-telekom-footer": ScaleTelekomFooter;
        "scale-telekom-footer-content": ScaleTelekomFooterContent;
        "scale-telekom-footer-data-back-compat": ScaleTelekomFooterDataBackCompat;
        "scale-telekom-footer-extended-navigation": ScaleTelekomFooterExtendedNavigation;
        "scale-telekom-footer-extended-navigation-column": ScaleTelekomFooterExtendedNavigationColumn;
        "scale-telekom-header": ScaleTelekomHeader;
        "scale-telekom-header-data-back-compat": ScaleTelekomHeaderDataBackCompat;
        "scale-telekom-mega-menu": ScaleTelekomMegaMenu;
        "scale-telekom-mega-menu-column": ScaleTelekomMegaMenuColumn;
        "scale-telekom-mobile-flyout-canvas": ScaleTelekomMobileFlyoutCanvas;
        "scale-telekom-mobile-menu": ScaleTelekomMobileMenu;
        "scale-telekom-mobile-menu-item": ScaleTelekomMobileMenuItem;
        "scale-telekom-nav-flyout": ScaleTelekomNavFlyout;
        "scale-telekom-nav-item": ScaleTelekomNavItem;
        "scale-telekom-nav-list": ScaleTelekomNavList;
        "scale-telekom-profile-menu": ScaleTelekomProfileMenu;
        "scale-text-field": ScaleTextField;
        "scale-textarea": ScaleTextarea;
        "scale-toast": ScaleToast;
        "scale-toggle-button": ScaleToggleButton;
        "scale-toggle-group": ScaleToggleGroup;
        "scale-tooltip": ScaleTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-logo": LocalJSX.AppLogo & JSXBase.HTMLAttributes<HTMLAppLogoElement>;
            "app-mega-menu": LocalJSX.AppMegaMenu & JSXBase.HTMLAttributes<HTMLAppMegaMenuElement>;
            "app-navigation-main-mobile": LocalJSX.AppNavigationMainMobile & JSXBase.HTMLAttributes<HTMLAppNavigationMainMobileElement>;
            "app-navigation-sector-mobile": LocalJSX.AppNavigationSectorMobile & JSXBase.HTMLAttributes<HTMLAppNavigationSectorMobileElement>;
            "app-navigation-user-menu": LocalJSX.AppNavigationUserMenu & JSXBase.HTMLAttributes<HTMLAppNavigationUserMenuElement>;
            "scale-accordion": LocalJSX.ScaleAccordion & JSXBase.HTMLAttributes<HTMLScaleAccordionElement>;
            "scale-alert": LocalJSX.ScaleAlert & JSXBase.HTMLAttributes<HTMLScaleAlertElement>;
            "scale-app-footer": LocalJSX.ScaleAppFooter & JSXBase.HTMLAttributes<HTMLScaleAppFooterElement>;
            "scale-app-header": LocalJSX.ScaleAppHeader & JSXBase.HTMLAttributes<HTMLScaleAppHeaderElement>;
            "scale-app-shell": LocalJSX.ScaleAppShell & JSXBase.HTMLAttributes<HTMLScaleAppShellElement>;
            "scale-badge": LocalJSX.ScaleBadge & JSXBase.HTMLAttributes<HTMLScaleBadgeElement>;
            "scale-breadcrumb": LocalJSX.ScaleBreadcrumb & JSXBase.HTMLAttributes<HTMLScaleBreadcrumbElement>;
            "scale-button": LocalJSX.ScaleButton & JSXBase.HTMLAttributes<HTMLScaleButtonElement>;
            "scale-callout": LocalJSX.ScaleCallout & JSXBase.HTMLAttributes<HTMLScaleCalloutElement>;
            "scale-card": LocalJSX.ScaleCard & JSXBase.HTMLAttributes<HTMLScaleCardElement>;
            "scale-carousel": LocalJSX.ScaleCarousel & JSXBase.HTMLAttributes<HTMLScaleCarouselElement>;
            "scale-chart-stack-card": LocalJSX.ScaleChartStackCard & JSXBase.HTMLAttributes<HTMLScaleChartStackCardElement>;
            "scale-checkbox": LocalJSX.ScaleCheckbox & JSXBase.HTMLAttributes<HTMLScaleCheckboxElement>;
            "scale-checkbox-group": LocalJSX.ScaleCheckboxGroup & JSXBase.HTMLAttributes<HTMLScaleCheckboxGroupElement>;
            "scale-chip": LocalJSX.ScaleChip & JSXBase.HTMLAttributes<HTMLScaleChipElement>;
            "scale-collapsible": LocalJSX.ScaleCollapsible & JSXBase.HTMLAttributes<HTMLScaleCollapsibleElement>;
            "scale-data-grid": LocalJSX.ScaleDataGrid & JSXBase.HTMLAttributes<HTMLScaleDataGridElement>;
            "scale-date-picker": LocalJSX.ScaleDatePicker & JSXBase.HTMLAttributes<HTMLScaleDatePickerElement>;
            "scale-divider": LocalJSX.ScaleDivider & JSXBase.HTMLAttributes<HTMLScaleDividerElement>;
            "scale-dropdown": LocalJSX.ScaleDropdown & JSXBase.HTMLAttributes<HTMLScaleDropdownElement>;
            "scale-dropdown-select": LocalJSX.ScaleDropdownSelect & JSXBase.HTMLAttributes<HTMLScaleDropdownSelectElement>;
            "scale-dropdown-select-item": LocalJSX.ScaleDropdownSelectItem & JSXBase.HTMLAttributes<HTMLScaleDropdownSelectItemElement>;
            "scale-grid": LocalJSX.ScaleGrid & JSXBase.HTMLAttributes<HTMLScaleGridElement>;
            "scale-grid-item": LocalJSX.ScaleGridItem & JSXBase.HTMLAttributes<HTMLScaleGridItemElement>;
            "scale-helper-text": LocalJSX.ScaleHelperText & JSXBase.HTMLAttributes<HTMLScaleHelperTextElement>;
            "scale-icon": LocalJSX.ScaleIcon & JSXBase.HTMLAttributes<HTMLScaleIconElement>;
            "scale-icon-action-add": LocalJSX.ScaleIconActionAdd & JSXBase.HTMLAttributes<HTMLScaleIconActionAddElement>;
            "scale-icon-action-add-card": LocalJSX.ScaleIconActionAddCard & JSXBase.HTMLAttributes<HTMLScaleIconActionAddCardElement>;
            "scale-icon-action-arrange": LocalJSX.ScaleIconActionArrange & JSXBase.HTMLAttributes<HTMLScaleIconActionArrangeElement>;
            "scale-icon-action-arrow-down": LocalJSX.ScaleIconActionArrowDown & JSXBase.HTMLAttributes<HTMLScaleIconActionArrowDownElement>;
            "scale-icon-action-arrow-left": LocalJSX.ScaleIconActionArrowLeft & JSXBase.HTMLAttributes<HTMLScaleIconActionArrowLeftElement>;
            "scale-icon-action-arrow-right": LocalJSX.ScaleIconActionArrowRight & JSXBase.HTMLAttributes<HTMLScaleIconActionArrowRightElement>;
            "scale-icon-action-arrow-up": LocalJSX.ScaleIconActionArrowUp & JSXBase.HTMLAttributes<HTMLScaleIconActionArrowUpElement>;
            "scale-icon-action-auto-login": LocalJSX.ScaleIconActionAutoLogin & JSXBase.HTMLAttributes<HTMLScaleIconActionAutoLoginElement>;
            "scale-icon-action-backspace": LocalJSX.ScaleIconActionBackspace & JSXBase.HTMLAttributes<HTMLScaleIconActionBackspaceElement>;
            "scale-icon-action-backward": LocalJSX.ScaleIconActionBackward & JSXBase.HTMLAttributes<HTMLScaleIconActionBackwardElement>;
            "scale-icon-action-changelog": LocalJSX.ScaleIconActionChangelog & JSXBase.HTMLAttributes<HTMLScaleIconActionChangelogElement>;
            "scale-icon-action-checkmark": LocalJSX.ScaleIconActionCheckmark & JSXBase.HTMLAttributes<HTMLScaleIconActionCheckmarkElement>;
            "scale-icon-action-circle-add": LocalJSX.ScaleIconActionCircleAdd & JSXBase.HTMLAttributes<HTMLScaleIconActionCircleAddElement>;
            "scale-icon-action-circle-close": LocalJSX.ScaleIconActionCircleClose & JSXBase.HTMLAttributes<HTMLScaleIconActionCircleCloseElement>;
            "scale-icon-action-close": LocalJSX.ScaleIconActionClose & JSXBase.HTMLAttributes<HTMLScaleIconActionCloseElement>;
            "scale-icon-action-compare": LocalJSX.ScaleIconActionCompare & JSXBase.HTMLAttributes<HTMLScaleIconActionCompareElement>;
            "scale-icon-action-copy-paste": LocalJSX.ScaleIconActionCopyPaste & JSXBase.HTMLAttributes<HTMLScaleIconActionCopyPasteElement>;
            "scale-icon-action-cut-paste": LocalJSX.ScaleIconActionCutPaste & JSXBase.HTMLAttributes<HTMLScaleIconActionCutPasteElement>;
            "scale-icon-action-disabled-microphone": LocalJSX.ScaleIconActionDisabledMicrophone & JSXBase.HTMLAttributes<HTMLScaleIconActionDisabledMicrophoneElement>;
            "scale-icon-action-download": LocalJSX.ScaleIconActionDownload & JSXBase.HTMLAttributes<HTMLScaleIconActionDownloadElement>;
            "scale-icon-action-download-from-cloud": LocalJSX.ScaleIconActionDownloadFromCloud & JSXBase.HTMLAttributes<HTMLScaleIconActionDownloadFromCloudElement>;
            "scale-icon-action-drag-and-drop": LocalJSX.ScaleIconActionDragAndDrop & JSXBase.HTMLAttributes<HTMLScaleIconActionDragAndDropElement>;
            "scale-icon-action-edit": LocalJSX.ScaleIconActionEdit & JSXBase.HTMLAttributes<HTMLScaleIconActionEditElement>;
            "scale-icon-action-export": LocalJSX.ScaleIconActionExport & JSXBase.HTMLAttributes<HTMLScaleIconActionExportElement>;
            "scale-icon-action-fast-forward": LocalJSX.ScaleIconActionFastForward & JSXBase.HTMLAttributes<HTMLScaleIconActionFastForwardElement>;
            "scale-icon-action-fast-forward-nb": LocalJSX.ScaleIconActionFastForwardNb & JSXBase.HTMLAttributes<HTMLScaleIconActionFastForwardNbElement>;
            "scale-icon-action-favorite": LocalJSX.ScaleIconActionFavorite & JSXBase.HTMLAttributes<HTMLScaleIconActionFavoriteElement>;
            "scale-icon-action-filter": LocalJSX.ScaleIconActionFilter & JSXBase.HTMLAttributes<HTMLScaleIconActionFilterElement>;
            "scale-icon-action-filter-2": LocalJSX.ScaleIconActionFilter2 & JSXBase.HTMLAttributes<HTMLScaleIconActionFilter2Element>;
            "scale-icon-action-forward": LocalJSX.ScaleIconActionForward & JSXBase.HTMLAttributes<HTMLScaleIconActionForwardElement>;
            "scale-icon-action-full-screen": LocalJSX.ScaleIconActionFullScreen & JSXBase.HTMLAttributes<HTMLScaleIconActionFullScreenElement>;
            "scale-icon-action-hide-password": LocalJSX.ScaleIconActionHidePassword & JSXBase.HTMLAttributes<HTMLScaleIconActionHidePasswordElement>;
            "scale-icon-action-import": LocalJSX.ScaleIconActionImport & JSXBase.HTMLAttributes<HTMLScaleIconActionImportElement>;
            "scale-icon-action-install": LocalJSX.ScaleIconActionInstall & JSXBase.HTMLAttributes<HTMLScaleIconActionInstallElement>;
            "scale-icon-action-launch": LocalJSX.ScaleIconActionLaunch & JSXBase.HTMLAttributes<HTMLScaleIconActionLaunchElement>;
            "scale-icon-action-light-dark-mode": LocalJSX.ScaleIconActionLightDarkMode & JSXBase.HTMLAttributes<HTMLScaleIconActionLightDarkModeElement>;
            "scale-icon-action-link": LocalJSX.ScaleIconActionLink & JSXBase.HTMLAttributes<HTMLScaleIconActionLinkElement>;
            "scale-icon-action-logout": LocalJSX.ScaleIconActionLogout & JSXBase.HTMLAttributes<HTMLScaleIconActionLogoutElement>;
            "scale-icon-action-loop": LocalJSX.ScaleIconActionLoop & JSXBase.HTMLAttributes<HTMLScaleIconActionLoopElement>;
            "scale-icon-action-menu": LocalJSX.ScaleIconActionMenu & JSXBase.HTMLAttributes<HTMLScaleIconActionMenuElement>;
            "scale-icon-action-microphone": LocalJSX.ScaleIconActionMicrophone & JSXBase.HTMLAttributes<HTMLScaleIconActionMicrophoneElement>;
            "scale-icon-action-minimize-screen": LocalJSX.ScaleIconActionMinimizeScreen & JSXBase.HTMLAttributes<HTMLScaleIconActionMinimizeScreenElement>;
            "scale-icon-action-minus": LocalJSX.ScaleIconActionMinus & JSXBase.HTMLAttributes<HTMLScaleIconActionMinusElement>;
            "scale-icon-action-minus-circle": LocalJSX.ScaleIconActionMinusCircle & JSXBase.HTMLAttributes<HTMLScaleIconActionMinusCircleElement>;
            "scale-icon-action-more": LocalJSX.ScaleIconActionMore & JSXBase.HTMLAttributes<HTMLScaleIconActionMoreElement>;
            "scale-icon-action-move": LocalJSX.ScaleIconActionMove & JSXBase.HTMLAttributes<HTMLScaleIconActionMoveElement>;
            "scale-icon-action-mute": LocalJSX.ScaleIconActionMute & JSXBase.HTMLAttributes<HTMLScaleIconActionMuteElement>;
            "scale-icon-action-notification": LocalJSX.ScaleIconActionNotification & JSXBase.HTMLAttributes<HTMLScaleIconActionNotificationElement>;
            "scale-icon-action-pause": LocalJSX.ScaleIconActionPause & JSXBase.HTMLAttributes<HTMLScaleIconActionPauseElement>;
            "scale-icon-action-pause-nb": LocalJSX.ScaleIconActionPauseNb & JSXBase.HTMLAttributes<HTMLScaleIconActionPauseNbElement>;
            "scale-icon-action-pin": LocalJSX.ScaleIconActionPin & JSXBase.HTMLAttributes<HTMLScaleIconActionPinElement>;
            "scale-icon-action-play": LocalJSX.ScaleIconActionPlay & JSXBase.HTMLAttributes<HTMLScaleIconActionPlayElement>;
            "scale-icon-action-play-nb": LocalJSX.ScaleIconActionPlayNb & JSXBase.HTMLAttributes<HTMLScaleIconActionPlayNbElement>;
            "scale-icon-action-pop-up-window": LocalJSX.ScaleIconActionPopUpWindow & JSXBase.HTMLAttributes<HTMLScaleIconActionPopUpWindowElement>;
            "scale-icon-action-power": LocalJSX.ScaleIconActionPower & JSXBase.HTMLAttributes<HTMLScaleIconActionPowerElement>;
            "scale-icon-action-previous-nb": LocalJSX.ScaleIconActionPreviousNb & JSXBase.HTMLAttributes<HTMLScaleIconActionPreviousNbElement>;
            "scale-icon-action-print": LocalJSX.ScaleIconActionPrint & JSXBase.HTMLAttributes<HTMLScaleIconActionPrintElement>;
            "scale-icon-action-publish": LocalJSX.ScaleIconActionPublish & JSXBase.HTMLAttributes<HTMLScaleIconActionPublishElement>;
            "scale-icon-action-random": LocalJSX.ScaleIconActionRandom & JSXBase.HTMLAttributes<HTMLScaleIconActionRandomElement>;
            "scale-icon-action-record-nb": LocalJSX.ScaleIconActionRecordNb & JSXBase.HTMLAttributes<HTMLScaleIconActionRecordNbElement>;
            "scale-icon-action-refresh": LocalJSX.ScaleIconActionRefresh & JSXBase.HTMLAttributes<HTMLScaleIconActionRefreshElement>;
            "scale-icon-action-remove": LocalJSX.ScaleIconActionRemove & JSXBase.HTMLAttributes<HTMLScaleIconActionRemoveElement>;
            "scale-icon-action-reply": LocalJSX.ScaleIconActionReply & JSXBase.HTMLAttributes<HTMLScaleIconActionReplyElement>;
            "scale-icon-action-reply-all": LocalJSX.ScaleIconActionReplyAll & JSXBase.HTMLAttributes<HTMLScaleIconActionReplyAllElement>;
            "scale-icon-action-reply-forward": LocalJSX.ScaleIconActionReplyForward & JSXBase.HTMLAttributes<HTMLScaleIconActionReplyForwardElement>;
            "scale-icon-action-restart": LocalJSX.ScaleIconActionRestart & JSXBase.HTMLAttributes<HTMLScaleIconActionRestartElement>;
            "scale-icon-action-search": LocalJSX.ScaleIconActionSearch & JSXBase.HTMLAttributes<HTMLScaleIconActionSearchElement>;
            "scale-icon-action-send": LocalJSX.ScaleIconActionSend & JSXBase.HTMLAttributes<HTMLScaleIconActionSendElement>;
            "scale-icon-action-share": LocalJSX.ScaleIconActionShare & JSXBase.HTMLAttributes<HTMLScaleIconActionShareElement>;
            "scale-icon-action-shopping-cart": LocalJSX.ScaleIconActionShoppingCart & JSXBase.HTMLAttributes<HTMLScaleIconActionShoppingCartElement>;
            "scale-icon-action-show-password": LocalJSX.ScaleIconActionShowPassword & JSXBase.HTMLAttributes<HTMLScaleIconActionShowPasswordElement>;
            "scale-icon-action-sort": LocalJSX.ScaleIconActionSort & JSXBase.HTMLAttributes<HTMLScaleIconActionSortElement>;
            "scale-icon-action-sound-on": LocalJSX.ScaleIconActionSoundOn & JSXBase.HTMLAttributes<HTMLScaleIconActionSoundOnElement>;
            "scale-icon-action-star": LocalJSX.ScaleIconActionStar & JSXBase.HTMLAttributes<HTMLScaleIconActionStarElement>;
            "scale-icon-action-stream-on": LocalJSX.ScaleIconActionStreamOn & JSXBase.HTMLAttributes<HTMLScaleIconActionStreamOnElement>;
            "scale-icon-action-success": LocalJSX.ScaleIconActionSuccess & JSXBase.HTMLAttributes<HTMLScaleIconActionSuccessElement>;
            "scale-icon-action-thumbs-down": LocalJSX.ScaleIconActionThumbsDown & JSXBase.HTMLAttributes<HTMLScaleIconActionThumbsDownElement>;
            "scale-icon-action-thumbs-up": LocalJSX.ScaleIconActionThumbsUp & JSXBase.HTMLAttributes<HTMLScaleIconActionThumbsUpElement>;
            "scale-icon-action-tiles-add": LocalJSX.ScaleIconActionTilesAdd & JSXBase.HTMLAttributes<HTMLScaleIconActionTilesAddElement>;
            "scale-icon-action-upload": LocalJSX.ScaleIconActionUpload & JSXBase.HTMLAttributes<HTMLScaleIconActionUploadElement>;
            "scale-icon-action-upload-to-cloud": LocalJSX.ScaleIconActionUploadToCloud & JSXBase.HTMLAttributes<HTMLScaleIconActionUploadToCloudElement>;
            "scale-icon-action-volume-down": LocalJSX.ScaleIconActionVolumeDown & JSXBase.HTMLAttributes<HTMLScaleIconActionVolumeDownElement>;
            "scale-icon-action-volume-up": LocalJSX.ScaleIconActionVolumeUp & JSXBase.HTMLAttributes<HTMLScaleIconActionVolumeUpElement>;
            "scale-icon-action-zoom-in": LocalJSX.ScaleIconActionZoomIn & JSXBase.HTMLAttributes<HTMLScaleIconActionZoomInElement>;
            "scale-icon-action-zoom-out": LocalJSX.ScaleIconActionZoomOut & JSXBase.HTMLAttributes<HTMLScaleIconActionZoomOutElement>;
            "scale-icon-alert-antivirus-protection": LocalJSX.ScaleIconAlertAntivirusProtection & JSXBase.HTMLAttributes<HTMLScaleIconAlertAntivirusProtectionElement>;
            "scale-icon-alert-compliance": LocalJSX.ScaleIconAlertCompliance & JSXBase.HTMLAttributes<HTMLScaleIconAlertComplianceElement>;
            "scale-icon-alert-cyber-security": LocalJSX.ScaleIconAlertCyberSecurity & JSXBase.HTMLAttributes<HTMLScaleIconAlertCyberSecurityElement>;
            "scale-icon-alert-error": LocalJSX.ScaleIconAlertError & JSXBase.HTMLAttributes<HTMLScaleIconAlertErrorElement>;
            "scale-icon-alert-help": LocalJSX.ScaleIconAlertHelp & JSXBase.HTMLAttributes<HTMLScaleIconAlertHelpElement>;
            "scale-icon-alert-high-priority-email": LocalJSX.ScaleIconAlertHighPriorityEmail & JSXBase.HTMLAttributes<HTMLScaleIconAlertHighPriorityEmailElement>;
            "scale-icon-alert-imprint-dataprivacy": LocalJSX.ScaleIconAlertImprintDataprivacy & JSXBase.HTMLAttributes<HTMLScaleIconAlertImprintDataprivacyElement>;
            "scale-icon-alert-information": LocalJSX.ScaleIconAlertInformation & JSXBase.HTMLAttributes<HTMLScaleIconAlertInformationElement>;
            "scale-icon-alert-legal": LocalJSX.ScaleIconAlertLegal & JSXBase.HTMLAttributes<HTMLScaleIconAlertLegalElement>;
            "scale-icon-alert-network-disrupted": LocalJSX.ScaleIconAlertNetworkDisrupted & JSXBase.HTMLAttributes<HTMLScaleIconAlertNetworkDisruptedElement>;
            "scale-icon-alert-password-breaking": LocalJSX.ScaleIconAlertPasswordBreaking & JSXBase.HTMLAttributes<HTMLScaleIconAlertPasswordBreakingElement>;
            "scale-icon-alert-security": LocalJSX.ScaleIconAlertSecurity & JSXBase.HTMLAttributes<HTMLScaleIconAlertSecurityElement>;
            "scale-icon-alert-traffic-disruption": LocalJSX.ScaleIconAlertTrafficDisruption & JSXBase.HTMLAttributes<HTMLScaleIconAlertTrafficDisruptionElement>;
            "scale-icon-alert-unknown": LocalJSX.ScaleIconAlertUnknown & JSXBase.HTMLAttributes<HTMLScaleIconAlertUnknownElement>;
            "scale-icon-alert-warning": LocalJSX.ScaleIconAlertWarning & JSXBase.HTMLAttributes<HTMLScaleIconAlertWarningElement>;
            "scale-icon-communication-available": LocalJSX.ScaleIconCommunicationAvailable & JSXBase.HTMLAttributes<HTMLScaleIconCommunicationAvailableElement>;
            "scale-icon-communication-blog": LocalJSX.ScaleIconCommunicationBlog & JSXBase.HTMLAttributes<HTMLScaleIconCommunicationBlogElement>;
            "scale-icon-communication-call-incoming": LocalJSX.ScaleIconCommunicationCallIncoming & JSXBase.HTMLAttributes<HTMLScaleIconCommunicationCallIncomingElement>;
            "scale-icon-communication-call-outgoing": LocalJSX.ScaleIconCommunicationCallOutgoing & JSXBase.HTMLAttributes<HTMLScaleIconCommunicationCallOutgoingElement>;
            "scale-icon-communication-chat": LocalJSX.ScaleIconCommunicationChat & JSXBase.HTMLAttributes<HTMLScaleIconCommunicationChatElement>;
            "scale-icon-communication-chat-badge": LocalJSX.ScaleIconCommunicationChatBadge & JSXBase.HTMLAttributes<HTMLScaleIconCommunicationChatBadgeElement>;
            "scale-icon-communication-email": LocalJSX.ScaleIconCommunicationEmail & JSXBase.HTMLAttributes<HTMLScaleIconCommunicationEmailElement>;
            "scale-icon-communication-end-call": LocalJSX.ScaleIconCommunicationEndCall & JSXBase.HTMLAttributes<HTMLScaleIconCommunicationEndCallElement>;
            "scale-icon-communication-feedback": LocalJSX.ScaleIconCommunicationFeedback & JSXBase.HTMLAttributes<HTMLScaleIconCommunicationFeedbackElement>;
            "scale-icon-communication-flight-mode": LocalJSX.ScaleIconCommunicationFlightMode & JSXBase.HTMLAttributes<HTMLScaleIconCommunicationFlightModeElement>;
            "scale-icon-communication-happy-person": LocalJSX.ScaleIconCommunicationHappyPerson & JSXBase.HTMLAttributes<HTMLScaleIconCommunicationHappyPersonElement>;
            "scale-icon-communication-inbox": LocalJSX.ScaleIconCommunicationInbox & JSXBase.HTMLAttributes<HTMLScaleIconCommunicationInboxElement>;
            "scale-icon-communication-landing-mobile-contact-client": LocalJSX.ScaleIconCommunicationLandingMobileContactClient & JSXBase.HTMLAttributes<HTMLScaleIconCommunicationLandingMobileContactClientElement>;
            "scale-icon-communication-loyalty-earned": LocalJSX.ScaleIconCommunicationLoyaltyEarned & JSXBase.HTMLAttributes<HTMLScaleIconCommunicationLoyaltyEarnedElement>;
            "scale-icon-communication-loyalty-lost": LocalJSX.ScaleIconCommunicationLoyaltyLost & JSXBase.HTMLAttributes<HTMLScaleIconCommunicationLoyaltyLostElement>;
            "scale-icon-communication-mail-opened": LocalJSX.ScaleIconCommunicationMailOpened & JSXBase.HTMLAttributes<HTMLScaleIconCommunicationMailOpenedElement>;
            "scale-icon-communication-message": LocalJSX.ScaleIconCommunicationMessage & JSXBase.HTMLAttributes<HTMLScaleIconCommunicationMessageElement>;
            "scale-icon-communication-message-incoming": LocalJSX.ScaleIconCommunicationMessageIncoming & JSXBase.HTMLAttributes<HTMLScaleIconCommunicationMessageIncomingElement>;
            "scale-icon-communication-message-outgoing": LocalJSX.ScaleIconCommunicationMessageOutgoing & JSXBase.HTMLAttributes<HTMLScaleIconCommunicationMessageOutgoingElement>;
            "scale-icon-communication-mms-incoming": LocalJSX.ScaleIconCommunicationMmsIncoming & JSXBase.HTMLAttributes<HTMLScaleIconCommunicationMmsIncomingElement>;
            "scale-icon-communication-mms-outgoing": LocalJSX.ScaleIconCommunicationMmsOutgoing & JSXBase.HTMLAttributes<HTMLScaleIconCommunicationMmsOutgoingElement>;
            "scale-icon-communication-mobile-phone-number": LocalJSX.ScaleIconCommunicationMobilePhoneNumber & JSXBase.HTMLAttributes<HTMLScaleIconCommunicationMobilePhoneNumberElement>;
            "scale-icon-communication-network-signal": LocalJSX.ScaleIconCommunicationNetworkSignal & JSXBase.HTMLAttributes<HTMLScaleIconCommunicationNetworkSignalElement>;
            "scale-icon-communication-new-email": LocalJSX.ScaleIconCommunicationNewEmail & JSXBase.HTMLAttributes<HTMLScaleIconCommunicationNewEmailElement>;
            "scale-icon-communication-outbox": LocalJSX.ScaleIconCommunicationOutbox & JSXBase.HTMLAttributes<HTMLScaleIconCommunicationOutboxElement>;
            "scale-icon-communication-phone-number": LocalJSX.ScaleIconCommunicationPhoneNumber & JSXBase.HTMLAttributes<HTMLScaleIconCommunicationPhoneNumberElement>;
            "scale-icon-communication-recipient": LocalJSX.ScaleIconCommunicationRecipient & JSXBase.HTMLAttributes<HTMLScaleIconCommunicationRecipientElement>;
            "scale-icon-communication-save-emails-to-drafts": LocalJSX.ScaleIconCommunicationSaveEmailsToDrafts & JSXBase.HTMLAttributes<HTMLScaleIconCommunicationSaveEmailsToDraftsElement>;
            "scale-icon-communication-sms": LocalJSX.ScaleIconCommunicationSms & JSXBase.HTMLAttributes<HTMLScaleIconCommunicationSmsElement>;
            "scale-icon-communication-spam": LocalJSX.ScaleIconCommunicationSpam & JSXBase.HTMLAttributes<HTMLScaleIconCommunicationSpamElement>;
            "scale-icon-communication-voice-message": LocalJSX.ScaleIconCommunicationVoiceMessage & JSXBase.HTMLAttributes<HTMLScaleIconCommunicationVoiceMessageElement>;
            "scale-icon-content-2fa-google-auth": LocalJSX.ScaleIconContent2faGoogleAuth & JSXBase.HTMLAttributes<HTMLScaleIconContent2faGoogleAuthElement>;
            "scale-icon-content-achievement": LocalJSX.ScaleIconContentAchievement & JSXBase.HTMLAttributes<HTMLScaleIconContentAchievementElement>;
            "scale-icon-content-android": LocalJSX.ScaleIconContentAndroid & JSXBase.HTMLAttributes<HTMLScaleIconContentAndroidElement>;
            "scale-icon-content-apple": LocalJSX.ScaleIconContentApple & JSXBase.HTMLAttributes<HTMLScaleIconContentAppleElement>;
            "scale-icon-content-applications": LocalJSX.ScaleIconContentApplications & JSXBase.HTMLAttributes<HTMLScaleIconContentApplicationsElement>;
            "scale-icon-content-available-keychain": LocalJSX.ScaleIconContentAvailableKeychain & JSXBase.HTMLAttributes<HTMLScaleIconContentAvailableKeychainElement>;
            "scale-icon-content-bank": LocalJSX.ScaleIconContentBank & JSXBase.HTMLAttributes<HTMLScaleIconContentBankElement>;
            "scale-icon-content-biometric": LocalJSX.ScaleIconContentBiometric & JSXBase.HTMLAttributes<HTMLScaleIconContentBiometricElement>;
            "scale-icon-content-birthday": LocalJSX.ScaleIconContentBirthday & JSXBase.HTMLAttributes<HTMLScaleIconContentBirthdayElement>;
            "scale-icon-content-bookmark": LocalJSX.ScaleIconContentBookmark & JSXBase.HTMLAttributes<HTMLScaleIconContentBookmarkElement>;
            "scale-icon-content-calendar": LocalJSX.ScaleIconContentCalendar & JSXBase.HTMLAttributes<HTMLScaleIconContentCalendarElement>;
            "scale-icon-content-clipboard": LocalJSX.ScaleIconContentClipboard & JSXBase.HTMLAttributes<HTMLScaleIconContentClipboardElement>;
            "scale-icon-content-clock": LocalJSX.ScaleIconContentClock & JSXBase.HTMLAttributes<HTMLScaleIconContentClockElement>;
            "scale-icon-content-cloud-security": LocalJSX.ScaleIconContentCloudSecurity & JSXBase.HTMLAttributes<HTMLScaleIconContentCloudSecurityElement>;
            "scale-icon-content-code-scanner": LocalJSX.ScaleIconContentCodeScanner & JSXBase.HTMLAttributes<HTMLScaleIconContentCodeScannerElement>;
            "scale-icon-content-color-selection": LocalJSX.ScaleIconContentColorSelection & JSXBase.HTMLAttributes<HTMLScaleIconContentColorSelectionElement>;
            "scale-icon-content-country": LocalJSX.ScaleIconContentCountry & JSXBase.HTMLAttributes<HTMLScaleIconContentCountryElement>;
            "scale-icon-content-credit-card": LocalJSX.ScaleIconContentCreditCard & JSXBase.HTMLAttributes<HTMLScaleIconContentCreditCardElement>;
            "scale-icon-content-data-visualisation": LocalJSX.ScaleIconContentDataVisualisation & JSXBase.HTMLAttributes<HTMLScaleIconContentDataVisualisationElement>;
            "scale-icon-content-delivery": LocalJSX.ScaleIconContentDelivery & JSXBase.HTMLAttributes<HTMLScaleIconContentDeliveryElement>;
            "scale-icon-content-digital-banking": LocalJSX.ScaleIconContentDigitalBanking & JSXBase.HTMLAttributes<HTMLScaleIconContentDigitalBankingElement>;
            "scale-icon-content-digital-media": LocalJSX.ScaleIconContentDigitalMedia & JSXBase.HTMLAttributes<HTMLScaleIconContentDigitalMediaElement>;
            "scale-icon-content-discount": LocalJSX.ScaleIconContentDiscount & JSXBase.HTMLAttributes<HTMLScaleIconContentDiscountElement>;
            "scale-icon-content-e-sim": LocalJSX.ScaleIconContentESim & JSXBase.HTMLAttributes<HTMLScaleIconContentESimElement>;
            "scale-icon-content-eu": LocalJSX.ScaleIconContentEu & JSXBase.HTMLAttributes<HTMLScaleIconContentEuElement>;
            "scale-icon-content-face-mask": LocalJSX.ScaleIconContentFaceMask & JSXBase.HTMLAttributes<HTMLScaleIconContentFaceMaskElement>;
            "scale-icon-content-features": LocalJSX.ScaleIconContentFeatures & JSXBase.HTMLAttributes<HTMLScaleIconContentFeaturesElement>;
            "scale-icon-content-flexible-tariffs": LocalJSX.ScaleIconContentFlexibleTariffs & JSXBase.HTMLAttributes<HTMLScaleIconContentFlexibleTariffsElement>;
            "scale-icon-content-folder": LocalJSX.ScaleIconContentFolder & JSXBase.HTMLAttributes<HTMLScaleIconContentFolderElement>;
            "scale-icon-content-food": LocalJSX.ScaleIconContentFood & JSXBase.HTMLAttributes<HTMLScaleIconContentFoodElement>;
            "scale-icon-content-gender-diverse": LocalJSX.ScaleIconContentGenderDiverse & JSXBase.HTMLAttributes<HTMLScaleIconContentGenderDiverseElement>;
            "scale-icon-content-gender-female": LocalJSX.ScaleIconContentGenderFemale & JSXBase.HTMLAttributes<HTMLScaleIconContentGenderFemaleElement>;
            "scale-icon-content-gender-male": LocalJSX.ScaleIconContentGenderMale & JSXBase.HTMLAttributes<HTMLScaleIconContentGenderMaleElement>;
            "scale-icon-content-half-rating": LocalJSX.ScaleIconContentHalfRating & JSXBase.HTMLAttributes<HTMLScaleIconContentHalfRatingElement>;
            "scale-icon-content-heart": LocalJSX.ScaleIconContentHeart & JSXBase.HTMLAttributes<HTMLScaleIconContentHeartElement>;
            "scale-icon-content-height": LocalJSX.ScaleIconContentHeight & JSXBase.HTMLAttributes<HTMLScaleIconContentHeightElement>;
            "scale-icon-content-history": LocalJSX.ScaleIconContentHistory & JSXBase.HTMLAttributes<HTMLScaleIconContentHistoryElement>;
            "scale-icon-content-hour-glass": LocalJSX.ScaleIconContentHourGlass & JSXBase.HTMLAttributes<HTMLScaleIconContentHourGlassElement>;
            "scale-icon-content-iban": LocalJSX.ScaleIconContentIban & JSXBase.HTMLAttributes<HTMLScaleIconContentIbanElement>;
            "scale-icon-content-id": LocalJSX.ScaleIconContentId & JSXBase.HTMLAttributes<HTMLScaleIconContentIdElement>;
            "scale-icon-content-in-stock": LocalJSX.ScaleIconContentInStock & JSXBase.HTMLAttributes<HTMLScaleIconContentInStockElement>;
            "scale-icon-content-international": LocalJSX.ScaleIconContentInternational & JSXBase.HTMLAttributes<HTMLScaleIconContentInternationalElement>;
            "scale-icon-content-international-sms": LocalJSX.ScaleIconContentInternationalSms & JSXBase.HTMLAttributes<HTMLScaleIconContentInternationalSmsElement>;
            "scale-icon-content-interview": LocalJSX.ScaleIconContentInterview & JSXBase.HTMLAttributes<HTMLScaleIconContentInterviewElement>;
            "scale-icon-content-key": LocalJSX.ScaleIconContentKey & JSXBase.HTMLAttributes<HTMLScaleIconContentKeyElement>;
            "scale-icon-content-language": LocalJSX.ScaleIconContentLanguage & JSXBase.HTMLAttributes<HTMLScaleIconContentLanguageElement>;
            "scale-icon-content-lock": LocalJSX.ScaleIconContentLock & JSXBase.HTMLAttributes<HTMLScaleIconContentLockElement>;
            "scale-icon-content-loyalty": LocalJSX.ScaleIconContentLoyalty & JSXBase.HTMLAttributes<HTMLScaleIconContentLoyaltyElement>;
            "scale-icon-content-media-folder": LocalJSX.ScaleIconContentMediaFolder & JSXBase.HTMLAttributes<HTMLScaleIconContentMediaFolderElement>;
            "scale-icon-content-money-at": LocalJSX.ScaleIconContentMoneyAt & JSXBase.HTMLAttributes<HTMLScaleIconContentMoneyAtElement>;
            "scale-icon-content-music": LocalJSX.ScaleIconContentMusic & JSXBase.HTMLAttributes<HTMLScaleIconContentMusicElement>;
            "scale-icon-content-news": LocalJSX.ScaleIconContentNews & JSXBase.HTMLAttributes<HTMLScaleIconContentNewsElement>;
            "scale-icon-content-out-of-stock": LocalJSX.ScaleIconContentOutOfStock & JSXBase.HTMLAttributes<HTMLScaleIconContentOutOfStockElement>;
            "scale-icon-content-person-walking": LocalJSX.ScaleIconContentPersonWalking & JSXBase.HTMLAttributes<HTMLScaleIconContentPersonWalkingElement>;
            "scale-icon-content-prepaid-activate": LocalJSX.ScaleIconContentPrepaidActivate & JSXBase.HTMLAttributes<HTMLScaleIconContentPrepaidActivateElement>;
            "scale-icon-content-price-tag": LocalJSX.ScaleIconContentPriceTag & JSXBase.HTMLAttributes<HTMLScaleIconContentPriceTagElement>;
            "scale-icon-content-ratings": LocalJSX.ScaleIconContentRatings & JSXBase.HTMLAttributes<HTMLScaleIconContentRatingsElement>;
            "scale-icon-content-route": LocalJSX.ScaleIconContentRoute & JSXBase.HTMLAttributes<HTMLScaleIconContentRouteElement>;
            "scale-icon-content-rss": LocalJSX.ScaleIconContentRss & JSXBase.HTMLAttributes<HTMLScaleIconContentRssElement>;
            "scale-icon-content-shop": LocalJSX.ScaleIconContentShop & JSXBase.HTMLAttributes<HTMLScaleIconContentShopElement>;
            "scale-icon-content-signal": LocalJSX.ScaleIconContentSignal & JSXBase.HTMLAttributes<HTMLScaleIconContentSignalElement>;
            "scale-icon-content-sim-card": LocalJSX.ScaleIconContentSimCard & JSXBase.HTMLAttributes<HTMLScaleIconContentSimCardElement>;
            "scale-icon-content-smile": LocalJSX.ScaleIconContentSmile & JSXBase.HTMLAttributes<HTMLScaleIconContentSmileElement>;
            "scale-icon-content-sort-indicator-down": LocalJSX.ScaleIconContentSortIndicatorDown & JSXBase.HTMLAttributes<HTMLScaleIconContentSortIndicatorDownElement>;
            "scale-icon-content-sort-indicator-mini-down": LocalJSX.ScaleIconContentSortIndicatorMiniDown & JSXBase.HTMLAttributes<HTMLScaleIconContentSortIndicatorMiniDownElement>;
            "scale-icon-content-sort-indicator-up": LocalJSX.ScaleIconContentSortIndicatorUp & JSXBase.HTMLAttributes<HTMLScaleIconContentSortIndicatorUpElement>;
            "scale-icon-content-sort-indicator-up-mini": LocalJSX.ScaleIconContentSortIndicatorUpMini & JSXBase.HTMLAttributes<HTMLScaleIconContentSortIndicatorUpMiniElement>;
            "scale-icon-content-status-inactive": LocalJSX.ScaleIconContentStatusInactive & JSXBase.HTMLAttributes<HTMLScaleIconContentStatusInactiveElement>;
            "scale-icon-content-status-recurring": LocalJSX.ScaleIconContentStatusRecurring & JSXBase.HTMLAttributes<HTMLScaleIconContentStatusRecurringElement>;
            "scale-icon-content-stopwatch": LocalJSX.ScaleIconContentStopwatch & JSXBase.HTMLAttributes<HTMLScaleIconContentStopwatchElement>;
            "scale-icon-content-support-chat": LocalJSX.ScaleIconContentSupportChat & JSXBase.HTMLAttributes<HTMLScaleIconContentSupportChatElement>;
            "scale-icon-content-sustainable": LocalJSX.ScaleIconContentSustainable & JSXBase.HTMLAttributes<HTMLScaleIconContentSustainableElement>;
            "scale-icon-content-tariffs": LocalJSX.ScaleIconContentTariffs & JSXBase.HTMLAttributes<HTMLScaleIconContentTariffsElement>;
            "scale-icon-content-threats": LocalJSX.ScaleIconContentThreats & JSXBase.HTMLAttributes<HTMLScaleIconContentThreatsElement>;
            "scale-icon-content-todo-list": LocalJSX.ScaleIconContentTodoList & JSXBase.HTMLAttributes<HTMLScaleIconContentTodoListElement>;
            "scale-icon-content-transport": LocalJSX.ScaleIconContentTransport & JSXBase.HTMLAttributes<HTMLScaleIconContentTransportElement>;
            "scale-icon-content-unlock": LocalJSX.ScaleIconContentUnlock & JSXBase.HTMLAttributes<HTMLScaleIconContentUnlockElement>;
            "scale-icon-content-voucher": LocalJSX.ScaleIconContentVoucher & JSXBase.HTMLAttributes<HTMLScaleIconContentVoucherElement>;
            "scale-icon-content-waiting": LocalJSX.ScaleIconContentWaiting & JSXBase.HTMLAttributes<HTMLScaleIconContentWaitingElement>;
            "scale-icon-content-wallet": LocalJSX.ScaleIconContentWallet & JSXBase.HTMLAttributes<HTMLScaleIconContentWalletElement>;
            "scale-icon-device-add-device": LocalJSX.ScaleIconDeviceAddDevice & JSXBase.HTMLAttributes<HTMLScaleIconDeviceAddDeviceElement>;
            "scale-icon-device-camera": LocalJSX.ScaleIconDeviceCamera & JSXBase.HTMLAttributes<HTMLScaleIconDeviceCameraElement>;
            "scale-icon-device-change-camera": LocalJSX.ScaleIconDeviceChangeCamera & JSXBase.HTMLAttributes<HTMLScaleIconDeviceChangeCameraElement>;
            "scale-icon-device-computer": LocalJSX.ScaleIconDeviceComputer & JSXBase.HTMLAttributes<HTMLScaleIconDeviceComputerElement>;
            "scale-icon-device-device-controller": LocalJSX.ScaleIconDeviceDeviceController & JSXBase.HTMLAttributes<HTMLScaleIconDeviceDeviceControllerElement>;
            "scale-icon-device-device-ethernet": LocalJSX.ScaleIconDeviceDeviceEthernet & JSXBase.HTMLAttributes<HTMLScaleIconDeviceDeviceEthernetElement>;
            "scale-icon-device-device-mesh": LocalJSX.ScaleIconDeviceDeviceMesh & JSXBase.HTMLAttributes<HTMLScaleIconDeviceDeviceMeshElement>;
            "scale-icon-device-device-phone": LocalJSX.ScaleIconDeviceDevicePhone & JSXBase.HTMLAttributes<HTMLScaleIconDeviceDevicePhoneElement>;
            "scale-icon-device-device-router": LocalJSX.ScaleIconDeviceDeviceRouter & JSXBase.HTMLAttributes<HTMLScaleIconDeviceDeviceRouterElement>;
            "scale-icon-device-device-tv": LocalJSX.ScaleIconDeviceDeviceTv & JSXBase.HTMLAttributes<HTMLScaleIconDeviceDeviceTvElement>;
            "scale-icon-device-device-watch": LocalJSX.ScaleIconDeviceDeviceWatch & JSXBase.HTMLAttributes<HTMLScaleIconDeviceDeviceWatchElement>;
            "scale-icon-device-dongle": LocalJSX.ScaleIconDeviceDongle & JSXBase.HTMLAttributes<HTMLScaleIconDeviceDongleElement>;
            "scale-icon-device-fax": LocalJSX.ScaleIconDeviceFax & JSXBase.HTMLAttributes<HTMLScaleIconDeviceFaxElement>;
            "scale-icon-device-fixed-line-services": LocalJSX.ScaleIconDeviceFixedLineServices & JSXBase.HTMLAttributes<HTMLScaleIconDeviceFixedLineServicesElement>;
            "scale-icon-device-game-controller": LocalJSX.ScaleIconDeviceGameController & JSXBase.HTMLAttributes<HTMLScaleIconDeviceGameControllerElement>;
            "scale-icon-device-media-receiver": LocalJSX.ScaleIconDeviceMediaReceiver & JSXBase.HTMLAttributes<HTMLScaleIconDeviceMediaReceiverElement>;
            "scale-icon-device-mobile-data": LocalJSX.ScaleIconDeviceMobileData & JSXBase.HTMLAttributes<HTMLScaleIconDeviceMobileDataElement>;
            "scale-icon-device-mobile-devices-combination": LocalJSX.ScaleIconDeviceMobileDevicesCombination & JSXBase.HTMLAttributes<HTMLScaleIconDeviceMobileDevicesCombinationElement>;
            "scale-icon-device-mobile-equipment": LocalJSX.ScaleIconDeviceMobileEquipment & JSXBase.HTMLAttributes<HTMLScaleIconDeviceMobileEquipmentElement>;
            "scale-icon-device-mobile-phone-insurance": LocalJSX.ScaleIconDeviceMobilePhoneInsurance & JSXBase.HTMLAttributes<HTMLScaleIconDeviceMobilePhoneInsuranceElement>;
            "scale-icon-device-mobile-services": LocalJSX.ScaleIconDeviceMobileServices & JSXBase.HTMLAttributes<HTMLScaleIconDeviceMobileServicesElement>;
            "scale-icon-device-no-camera": LocalJSX.ScaleIconDeviceNoCamera & JSXBase.HTMLAttributes<HTMLScaleIconDeviceNoCameraElement>;
            "scale-icon-device-phone-with-mobile-plan": LocalJSX.ScaleIconDevicePhoneWithMobilePlan & JSXBase.HTMLAttributes<HTMLScaleIconDevicePhoneWithMobilePlanElement>;
            "scale-icon-device-phone-without-mobile-plan": LocalJSX.ScaleIconDevicePhoneWithoutMobilePlan & JSXBase.HTMLAttributes<HTMLScaleIconDevicePhoneWithoutMobilePlanElement>;
            "scale-icon-device-photo-camera": LocalJSX.ScaleIconDevicePhotoCamera & JSXBase.HTMLAttributes<HTMLScaleIconDevicePhotoCameraElement>;
            "scale-icon-device-remote-controller": LocalJSX.ScaleIconDeviceRemoteController & JSXBase.HTMLAttributes<HTMLScaleIconDeviceRemoteControllerElement>;
            "scale-icon-device-replacement-mobilephone": LocalJSX.ScaleIconDeviceReplacementMobilephone & JSXBase.HTMLAttributes<HTMLScaleIconDeviceReplacementMobilephoneElement>;
            "scale-icon-device-screen-rotate": LocalJSX.ScaleIconDeviceScreenRotate & JSXBase.HTMLAttributes<HTMLScaleIconDeviceScreenRotateElement>;
            "scale-icon-device-server": LocalJSX.ScaleIconDeviceServer & JSXBase.HTMLAttributes<HTMLScaleIconDeviceServerElement>;
            "scale-icon-device-smart-speaker": LocalJSX.ScaleIconDeviceSmartSpeaker & JSXBase.HTMLAttributes<HTMLScaleIconDeviceSmartSpeakerElement>;
            "scale-icon-device-tablet": LocalJSX.ScaleIconDeviceTablet & JSXBase.HTMLAttributes<HTMLScaleIconDeviceTabletElement>;
            "scale-icon-device-tv-and-mobile": LocalJSX.ScaleIconDeviceTvAndMobile & JSXBase.HTMLAttributes<HTMLScaleIconDeviceTvAndMobileElement>;
            "scale-icon-device-twitching-closed-state": LocalJSX.ScaleIconDeviceTwitchingClosedState & JSXBase.HTMLAttributes<HTMLScaleIconDeviceTwitchingClosedStateElement>;
            "scale-icon-device-twitching-open-state": LocalJSX.ScaleIconDeviceTwitchingOpenState & JSXBase.HTMLAttributes<HTMLScaleIconDeviceTwitchingOpenStateElement>;
            "scale-icon-home-home": LocalJSX.ScaleIconHomeHome & JSXBase.HTMLAttributes<HTMLScaleIconHomeHomeElement>;
            "scale-icon-home-internet-at-home": LocalJSX.ScaleIconHomeInternetAtHome & JSXBase.HTMLAttributes<HTMLScaleIconHomeInternetAtHomeElement>;
            "scale-icon-home-iot": LocalJSX.ScaleIconHomeIot & JSXBase.HTMLAttributes<HTMLScaleIconHomeIotElement>;
            "scale-icon-home-light-bulb": LocalJSX.ScaleIconHomeLightBulb & JSXBase.HTMLAttributes<HTMLScaleIconHomeLightBulbElement>;
            "scale-icon-home-network-secure": LocalJSX.ScaleIconHomeNetworkSecure & JSXBase.HTMLAttributes<HTMLScaleIconHomeNetworkSecureElement>;
            "scale-icon-home-no-wifi": LocalJSX.ScaleIconHomeNoWifi & JSXBase.HTMLAttributes<HTMLScaleIconHomeNoWifiElement>;
            "scale-icon-home-power-socket": LocalJSX.ScaleIconHomePowerSocket & JSXBase.HTMLAttributes<HTMLScaleIconHomePowerSocketElement>;
            "scale-icon-home-preferred-wifi": LocalJSX.ScaleIconHomePreferredWifi & JSXBase.HTMLAttributes<HTMLScaleIconHomePreferredWifiElement>;
            "scale-icon-home-reduced-wifi": LocalJSX.ScaleIconHomeReducedWifi & JSXBase.HTMLAttributes<HTMLScaleIconHomeReducedWifiElement>;
            "scale-icon-home-slow-wifi": LocalJSX.ScaleIconHomeSlowWifi & JSXBase.HTMLAttributes<HTMLScaleIconHomeSlowWifiElement>;
            "scale-icon-home-smarthome": LocalJSX.ScaleIconHomeSmarthome & JSXBase.HTMLAttributes<HTMLScaleIconHomeSmarthomeElement>;
            "scale-icon-home-unable-to-connect-to-router": LocalJSX.ScaleIconHomeUnableToConnectToRouter & JSXBase.HTMLAttributes<HTMLScaleIconHomeUnableToConnectToRouterElement>;
            "scale-icon-home-wifi": LocalJSX.ScaleIconHomeWifi & JSXBase.HTMLAttributes<HTMLScaleIconHomeWifiElement>;
            "scale-icon-home-wifi-connected": LocalJSX.ScaleIconHomeWifiConnected & JSXBase.HTMLAttributes<HTMLScaleIconHomeWifiConnectedElement>;
            "scale-icon-home-wifi-connection-error": LocalJSX.ScaleIconHomeWifiConnectionError & JSXBase.HTMLAttributes<HTMLScaleIconHomeWifiConnectionErrorElement>;
            "scale-icon-home-wifi-manual-login": LocalJSX.ScaleIconHomeWifiManualLogin & JSXBase.HTMLAttributes<HTMLScaleIconHomeWifiManualLoginElement>;
            "scale-icon-home-wifi-no-wired-internet": LocalJSX.ScaleIconHomeWifiNoWiredInternet & JSXBase.HTMLAttributes<HTMLScaleIconHomeWifiNoWiredInternetElement>;
            "scale-icon-navigation-circle-top-up": LocalJSX.ScaleIconNavigationCircleTopUp & JSXBase.HTMLAttributes<HTMLScaleIconNavigationCircleTopUpElement>;
            "scale-icon-navigation-collapse-down": LocalJSX.ScaleIconNavigationCollapseDown & JSXBase.HTMLAttributes<HTMLScaleIconNavigationCollapseDownElement>;
            "scale-icon-navigation-collapse-up": LocalJSX.ScaleIconNavigationCollapseUp & JSXBase.HTMLAttributes<HTMLScaleIconNavigationCollapseUpElement>;
            "scale-icon-navigation-double-left": LocalJSX.ScaleIconNavigationDoubleLeft & JSXBase.HTMLAttributes<HTMLScaleIconNavigationDoubleLeftElement>;
            "scale-icon-navigation-double-right": LocalJSX.ScaleIconNavigationDoubleRight & JSXBase.HTMLAttributes<HTMLScaleIconNavigationDoubleRightElement>;
            "scale-icon-navigation-external-link": LocalJSX.ScaleIconNavigationExternalLink & JSXBase.HTMLAttributes<HTMLScaleIconNavigationExternalLinkElement>;
            "scale-icon-navigation-internal-link": LocalJSX.ScaleIconNavigationInternalLink & JSXBase.HTMLAttributes<HTMLScaleIconNavigationInternalLinkElement>;
            "scale-icon-navigation-left": LocalJSX.ScaleIconNavigationLeft & JSXBase.HTMLAttributes<HTMLScaleIconNavigationLeftElement>;
            "scale-icon-navigation-left-condensed": LocalJSX.ScaleIconNavigationLeftCondensed & JSXBase.HTMLAttributes<HTMLScaleIconNavigationLeftCondensedElement>;
            "scale-icon-navigation-location": LocalJSX.ScaleIconNavigationLocation & JSXBase.HTMLAttributes<HTMLScaleIconNavigationLocationElement>;
            "scale-icon-navigation-map": LocalJSX.ScaleIconNavigationMap & JSXBase.HTMLAttributes<HTMLScaleIconNavigationMapElement>;
            "scale-icon-navigation-my-location": LocalJSX.ScaleIconNavigationMyLocation & JSXBase.HTMLAttributes<HTMLScaleIconNavigationMyLocationElement>;
            "scale-icon-navigation-right": LocalJSX.ScaleIconNavigationRight & JSXBase.HTMLAttributes<HTMLScaleIconNavigationRightElement>;
            "scale-icon-navigation-right-condensed": LocalJSX.ScaleIconNavigationRightCondensed & JSXBase.HTMLAttributes<HTMLScaleIconNavigationRightCondensedElement>;
            "scale-icon-navigation-start": LocalJSX.ScaleIconNavigationStart & JSXBase.HTMLAttributes<HTMLScaleIconNavigationStartElement>;
            "scale-icon-navigation-top-up": LocalJSX.ScaleIconNavigationTopUp & JSXBase.HTMLAttributes<HTMLScaleIconNavigationTopUpElement>;
            "scale-icon-process-order-status": LocalJSX.ScaleIconProcessOrderStatus & JSXBase.HTMLAttributes<HTMLScaleIconProcessOrderStatusElement>;
            "scale-icon-process-processing": LocalJSX.ScaleIconProcessProcessing & JSXBase.HTMLAttributes<HTMLScaleIconProcessProcessingElement>;
            "scale-icon-process-sepa-transaction": LocalJSX.ScaleIconProcessSepaTransaction & JSXBase.HTMLAttributes<HTMLScaleIconProcessSepaTransactionElement>;
            "scale-icon-service-devices-service": LocalJSX.ScaleIconServiceDevicesService & JSXBase.HTMLAttributes<HTMLScaleIconServiceDevicesServiceElement>;
            "scale-icon-service-maintanance": LocalJSX.ScaleIconServiceMaintanance & JSXBase.HTMLAttributes<HTMLScaleIconServiceMaintananceElement>;
            "scale-icon-service-manual": LocalJSX.ScaleIconServiceManual & JSXBase.HTMLAttributes<HTMLScaleIconServiceManualElement>;
            "scale-icon-service-one-time-password": LocalJSX.ScaleIconServiceOneTimePassword & JSXBase.HTMLAttributes<HTMLScaleIconServiceOneTimePasswordElement>;
            "scale-icon-service-services": LocalJSX.ScaleIconServiceServices & JSXBase.HTMLAttributes<HTMLScaleIconServiceServicesElement>;
            "scale-icon-service-settings": LocalJSX.ScaleIconServiceSettings & JSXBase.HTMLAttributes<HTMLScaleIconServiceSettingsElement>;
            "scale-icon-service-support": LocalJSX.ScaleIconServiceSupport & JSXBase.HTMLAttributes<HTMLScaleIconServiceSupportElement>;
            "scale-icon-service-vpn": LocalJSX.ScaleIconServiceVpn & JSXBase.HTMLAttributes<HTMLScaleIconServiceVpnElement>;
            "scale-icon-t-product-2fa-telekom-app": LocalJSX.ScaleIconTProduct2faTelekomApp & JSXBase.HTMLAttributes<HTMLScaleIconTProduct2faTelekomAppElement>;
            "scale-icon-t-product-magenta-cloud": LocalJSX.ScaleIconTProductMagentaCloud & JSXBase.HTMLAttributes<HTMLScaleIconTProductMagentaCloudElement>;
            "scale-icon-t-product-magenta-tv": LocalJSX.ScaleIconTProductMagentaTv & JSXBase.HTMLAttributes<HTMLScaleIconTProductMagentaTvElement>;
            "scale-icon-t-product-magentaone": LocalJSX.ScaleIconTProductMagentaone & JSXBase.HTMLAttributes<HTMLScaleIconTProductMagentaoneElement>;
            "scale-icon-t-product-measure-internet-speed": LocalJSX.ScaleIconTProductMeasureInternetSpeed & JSXBase.HTMLAttributes<HTMLScaleIconTProductMeasureInternetSpeedElement>;
            "scale-icon-t-product-seamless-connectivity": LocalJSX.ScaleIconTProductSeamlessConnectivity & JSXBase.HTMLAttributes<HTMLScaleIconTProductSeamlessConnectivityElement>;
            "scale-icon-t-product-telekom-1t1": LocalJSX.ScaleIconTProductTelekom1t1 & JSXBase.HTMLAttributes<HTMLScaleIconTProductTelekom1t1Element>;
            "scale-icon-t-product-telekom-plan": LocalJSX.ScaleIconTProductTelekomPlan & JSXBase.HTMLAttributes<HTMLScaleIconTProductTelekomPlanElement>;
            "scale-icon-t-product-telekom-shop-b": LocalJSX.ScaleIconTProductTelekomShopB & JSXBase.HTMLAttributes<HTMLScaleIconTProductTelekomShopBElement>;
            "scale-icon-t-product-usage": LocalJSX.ScaleIconTProductUsage & JSXBase.HTMLAttributes<HTMLScaleIconTProductUsageElement>;
            "scale-icon-t-product-voice": LocalJSX.ScaleIconTProductVoice & JSXBase.HTMLAttributes<HTMLScaleIconTProductVoiceElement>;
            "scale-icon-user-file-admin": LocalJSX.ScaleIconUserFileAdmin & JSXBase.HTMLAttributes<HTMLScaleIconUserFileAdminElement>;
            "scale-icon-user-file-analytics": LocalJSX.ScaleIconUserFileAnalytics & JSXBase.HTMLAttributes<HTMLScaleIconUserFileAnalyticsElement>;
            "scale-icon-user-file-attachment": LocalJSX.ScaleIconUserFileAttachment & JSXBase.HTMLAttributes<HTMLScaleIconUserFileAttachmentElement>;
            "scale-icon-user-file-audio-file": LocalJSX.ScaleIconUserFileAudioFile & JSXBase.HTMLAttributes<HTMLScaleIconUserFileAudioFileElement>;
            "scale-icon-user-file-billing": LocalJSX.ScaleIconUserFileBilling & JSXBase.HTMLAttributes<HTMLScaleIconUserFileBillingElement>;
            "scale-icon-user-file-boy": LocalJSX.ScaleIconUserFileBoy & JSXBase.HTMLAttributes<HTMLScaleIconUserFileBoyElement>;
            "scale-icon-user-file-bussines-users": LocalJSX.ScaleIconUserFileBussinesUsers & JSXBase.HTMLAttributes<HTMLScaleIconUserFileBussinesUsersElement>;
            "scale-icon-user-file-communities": LocalJSX.ScaleIconUserFileCommunities & JSXBase.HTMLAttributes<HTMLScaleIconUserFileCommunitiesElement>;
            "scale-icon-user-file-contacts": LocalJSX.ScaleIconUserFileContacts & JSXBase.HTMLAttributes<HTMLScaleIconUserFileContactsElement>;
            "scale-icon-user-file-contacts-from-cloud": LocalJSX.ScaleIconUserFileContactsFromCloud & JSXBase.HTMLAttributes<HTMLScaleIconUserFileContactsFromCloudElement>;
            "scale-icon-user-file-contracts": LocalJSX.ScaleIconUserFileContracts & JSXBase.HTMLAttributes<HTMLScaleIconUserFileContractsElement>;
            "scale-icon-user-file-draft-file": LocalJSX.ScaleIconUserFileDraftFile & JSXBase.HTMLAttributes<HTMLScaleIconUserFileDraftFileElement>;
            "scale-icon-user-file-families": LocalJSX.ScaleIconUserFileFamilies & JSXBase.HTMLAttributes<HTMLScaleIconUserFileFamiliesElement>;
            "scale-icon-user-file-family": LocalJSX.ScaleIconUserFileFamily & JSXBase.HTMLAttributes<HTMLScaleIconUserFileFamilyElement>;
            "scale-icon-user-file-file": LocalJSX.ScaleIconUserFileFile & JSXBase.HTMLAttributes<HTMLScaleIconUserFileFileElement>;
            "scale-icon-user-file-file-collection": LocalJSX.ScaleIconUserFileFileCollection & JSXBase.HTMLAttributes<HTMLScaleIconUserFileFileCollectionElement>;
            "scale-icon-user-file-girl": LocalJSX.ScaleIconUserFileGirl & JSXBase.HTMLAttributes<HTMLScaleIconUserFileGirlElement>;
            "scale-icon-user-file-handshake": LocalJSX.ScaleIconUserFileHandshake & JSXBase.HTMLAttributes<HTMLScaleIconUserFileHandshakeElement>;
            "scale-icon-user-file-html-file": LocalJSX.ScaleIconUserFileHtmlFile & JSXBase.HTMLAttributes<HTMLScaleIconUserFileHtmlFileElement>;
            "scale-icon-user-file-id-card": LocalJSX.ScaleIconUserFileIdCard & JSXBase.HTMLAttributes<HTMLScaleIconUserFileIdCardElement>;
            "scale-icon-user-file-image-file": LocalJSX.ScaleIconUserFileImageFile & JSXBase.HTMLAttributes<HTMLScaleIconUserFileImageFileElement>;
            "scale-icon-user-file-logout": LocalJSX.ScaleIconUserFileLogout & JSXBase.HTMLAttributes<HTMLScaleIconUserFileLogoutElement>;
            "scale-icon-user-file-man": LocalJSX.ScaleIconUserFileMan & JSXBase.HTMLAttributes<HTMLScaleIconUserFileManElement>;
            "scale-icon-user-file-pdf-file": LocalJSX.ScaleIconUserFilePdfFile & JSXBase.HTMLAttributes<HTMLScaleIconUserFilePdfFileElement>;
            "scale-icon-user-file-switch-users": LocalJSX.ScaleIconUserFileSwitchUsers & JSXBase.HTMLAttributes<HTMLScaleIconUserFileSwitchUsersElement>;
            "scale-icon-user-file-user": LocalJSX.ScaleIconUserFileUser & JSXBase.HTMLAttributes<HTMLScaleIconUserFileUserElement>;
            "scale-icon-user-file-videos": LocalJSX.ScaleIconUserFileVideos & JSXBase.HTMLAttributes<HTMLScaleIconUserFileVideosElement>;
            "scale-icon-user-file-woman": LocalJSX.ScaleIconUserFileWoman & JSXBase.HTMLAttributes<HTMLScaleIconUserFileWomanElement>;
            "scale-icon-weather-cloudy": LocalJSX.ScaleIconWeatherCloudy & JSXBase.HTMLAttributes<HTMLScaleIconWeatherCloudyElement>;
            "scale-icon-weather-cloudy-rain": LocalJSX.ScaleIconWeatherCloudyRain & JSXBase.HTMLAttributes<HTMLScaleIconWeatherCloudyRainElement>;
            "scale-icon-weather-cloudy-sleet": LocalJSX.ScaleIconWeatherCloudySleet & JSXBase.HTMLAttributes<HTMLScaleIconWeatherCloudySleetElement>;
            "scale-icon-weather-cloudy-snow": LocalJSX.ScaleIconWeatherCloudySnow & JSXBase.HTMLAttributes<HTMLScaleIconWeatherCloudySnowElement>;
            "scale-icon-weather-cloudy-thunder-rain": LocalJSX.ScaleIconWeatherCloudyThunderRain & JSXBase.HTMLAttributes<HTMLScaleIconWeatherCloudyThunderRainElement>;
            "scale-icon-weather-cloudy-thunder-snow": LocalJSX.ScaleIconWeatherCloudyThunderSnow & JSXBase.HTMLAttributes<HTMLScaleIconWeatherCloudyThunderSnowElement>;
            "scale-icon-weather-heavy-sleet": LocalJSX.ScaleIconWeatherHeavySleet & JSXBase.HTMLAttributes<HTMLScaleIconWeatherHeavySleetElement>;
            "scale-icon-weather-heavy-snow": LocalJSX.ScaleIconWeatherHeavySnow & JSXBase.HTMLAttributes<HTMLScaleIconWeatherHeavySnowElement>;
            "scale-icon-weather-moon-clear": LocalJSX.ScaleIconWeatherMoonClear & JSXBase.HTMLAttributes<HTMLScaleIconWeatherMoonClearElement>;
            "scale-icon-weather-moon-cloudy-a": LocalJSX.ScaleIconWeatherMoonCloudyA & JSXBase.HTMLAttributes<HTMLScaleIconWeatherMoonCloudyAElement>;
            "scale-icon-weather-moon-cloudy-b": LocalJSX.ScaleIconWeatherMoonCloudyB & JSXBase.HTMLAttributes<HTMLScaleIconWeatherMoonCloudyBElement>;
            "scale-icon-weather-moon-rain": LocalJSX.ScaleIconWeatherMoonRain & JSXBase.HTMLAttributes<HTMLScaleIconWeatherMoonRainElement>;
            "scale-icon-weather-moon-sleet": LocalJSX.ScaleIconWeatherMoonSleet & JSXBase.HTMLAttributes<HTMLScaleIconWeatherMoonSleetElement>;
            "scale-icon-weather-moon-snow": LocalJSX.ScaleIconWeatherMoonSnow & JSXBase.HTMLAttributes<HTMLScaleIconWeatherMoonSnowElement>;
            "scale-icon-weather-moon-thunder-rain": LocalJSX.ScaleIconWeatherMoonThunderRain & JSXBase.HTMLAttributes<HTMLScaleIconWeatherMoonThunderRainElement>;
            "scale-icon-weather-moon-thunder-snow": LocalJSX.ScaleIconWeatherMoonThunderSnow & JSXBase.HTMLAttributes<HTMLScaleIconWeatherMoonThunderSnowElement>;
            "scale-icon-weather-overcast": LocalJSX.ScaleIconWeatherOvercast & JSXBase.HTMLAttributes<HTMLScaleIconWeatherOvercastElement>;
            "scale-icon-weather-rain": LocalJSX.ScaleIconWeatherRain & JSXBase.HTMLAttributes<HTMLScaleIconWeatherRainElement>;
            "scale-icon-weather-sunny": LocalJSX.ScaleIconWeatherSunny & JSXBase.HTMLAttributes<HTMLScaleIconWeatherSunnyElement>;
            "scale-icon-weather-thunder-rain": LocalJSX.ScaleIconWeatherThunderRain & JSXBase.HTMLAttributes<HTMLScaleIconWeatherThunderRainElement>;
            "scale-icon-weather-thunder-snow": LocalJSX.ScaleIconWeatherThunderSnow & JSXBase.HTMLAttributes<HTMLScaleIconWeatherThunderSnowElement>;
            "scale-input": LocalJSX.ScaleInput & JSXBase.HTMLAttributes<HTMLScaleInputElement>;
            "scale-link": LocalJSX.ScaleLink & JSXBase.HTMLAttributes<HTMLScaleLinkElement>;
            "scale-list": LocalJSX.ScaleList & JSXBase.HTMLAttributes<HTMLScaleListElement>;
            "scale-list-item": LocalJSX.ScaleListItem & JSXBase.HTMLAttributes<HTMLScaleListItemElement>;
            "scale-loading-spinner": LocalJSX.ScaleLoadingSpinner & JSXBase.HTMLAttributes<HTMLScaleLoadingSpinnerElement>;
            "scale-logo": LocalJSX.ScaleLogo & JSXBase.HTMLAttributes<HTMLScaleLogoElement>;
            "scale-logo-svg": LocalJSX.ScaleLogoSvg & JSXBase.HTMLAttributes<HTMLScaleLogoSvgElement>;
            "scale-menu-flyout": LocalJSX.ScaleMenuFlyout & JSXBase.HTMLAttributes<HTMLScaleMenuFlyoutElement>;
            "scale-menu-flyout-divider": LocalJSX.ScaleMenuFlyoutDivider & JSXBase.HTMLAttributes<HTMLScaleMenuFlyoutDividerElement>;
            "scale-menu-flyout-item": LocalJSX.ScaleMenuFlyoutItem & JSXBase.HTMLAttributes<HTMLScaleMenuFlyoutItemElement>;
            "scale-menu-flyout-list": LocalJSX.ScaleMenuFlyoutList & JSXBase.HTMLAttributes<HTMLScaleMenuFlyoutListElement>;
            "scale-modal": LocalJSX.ScaleModal & JSXBase.HTMLAttributes<HTMLScaleModalElement>;
            "scale-nav-icon": LocalJSX.ScaleNavIcon & JSXBase.HTMLAttributes<HTMLScaleNavIconElement>;
            "scale-nav-main": LocalJSX.ScaleNavMain & JSXBase.HTMLAttributes<HTMLScaleNavMainElement>;
            "scale-nav-segment": LocalJSX.ScaleNavSegment & JSXBase.HTMLAttributes<HTMLScaleNavSegmentElement>;
            "scale-notification": LocalJSX.ScaleNotification & JSXBase.HTMLAttributes<HTMLScaleNotificationElement>;
            "scale-notification-badge": LocalJSX.ScaleNotificationBadge & JSXBase.HTMLAttributes<HTMLScaleNotificationBadgeElement>;
            "scale-notification-banner": LocalJSX.ScaleNotificationBanner & JSXBase.HTMLAttributes<HTMLScaleNotificationBannerElement>;
            "scale-notification-message": LocalJSX.ScaleNotificationMessage & JSXBase.HTMLAttributes<HTMLScaleNotificationMessageElement>;
            "scale-notification-toast": LocalJSX.ScaleNotificationToast & JSXBase.HTMLAttributes<HTMLScaleNotificationToastElement>;
            "scale-pagination": LocalJSX.ScalePagination & JSXBase.HTMLAttributes<HTMLScalePaginationElement>;
            "scale-progress-bar": LocalJSX.ScaleProgressBar & JSXBase.HTMLAttributes<HTMLScaleProgressBarElement>;
            "scale-radio-button": LocalJSX.ScaleRadioButton & JSXBase.HTMLAttributes<HTMLScaleRadioButtonElement>;
            "scale-radio-button-group": LocalJSX.ScaleRadioButtonGroup & JSXBase.HTMLAttributes<HTMLScaleRadioButtonGroupElement>;
            "scale-rating-stars": LocalJSX.ScaleRatingStars & JSXBase.HTMLAttributes<HTMLScaleRatingStarsElement>;
            "scale-segment": LocalJSX.ScaleSegment & JSXBase.HTMLAttributes<HTMLScaleSegmentElement>;
            "scale-segmented-button": LocalJSX.ScaleSegmentedButton & JSXBase.HTMLAttributes<HTMLScaleSegmentedButtonElement>;
            "scale-sidebar-nav": LocalJSX.ScaleSidebarNav & JSXBase.HTMLAttributes<HTMLScaleSidebarNavElement>;
            "scale-sidebar-nav-collapsible": LocalJSX.ScaleSidebarNavCollapsible & JSXBase.HTMLAttributes<HTMLScaleSidebarNavCollapsibleElement>;
            "scale-sidebar-nav-item": LocalJSX.ScaleSidebarNavItem & JSXBase.HTMLAttributes<HTMLScaleSidebarNavItemElement>;
            "scale-slider": LocalJSX.ScaleSlider & JSXBase.HTMLAttributes<HTMLScaleSliderElement>;
            "scale-ssr-slot-fix": LocalJSX.ScaleSsrSlotFix & JSXBase.HTMLAttributes<HTMLScaleSsrSlotFixElement>;
            "scale-switch": LocalJSX.ScaleSwitch & JSXBase.HTMLAttributes<HTMLScaleSwitchElement>;
            "scale-tab-header": LocalJSX.ScaleTabHeader & JSXBase.HTMLAttributes<HTMLScaleTabHeaderElement>;
            "scale-tab-nav": LocalJSX.ScaleTabNav & JSXBase.HTMLAttributes<HTMLScaleTabNavElement>;
            "scale-tab-panel": LocalJSX.ScaleTabPanel & JSXBase.HTMLAttributes<HTMLScaleTabPanelElement>;
            "scale-table": LocalJSX.ScaleTable & JSXBase.HTMLAttributes<HTMLScaleTableElement>;
            "scale-tag": LocalJSX.ScaleTag & JSXBase.HTMLAttributes<HTMLScaleTagElement>;
            "scale-telekom-app-shell": LocalJSX.ScaleTelekomAppShell & JSXBase.HTMLAttributes<HTMLScaleTelekomAppShellElement>;
            "scale-telekom-footer": LocalJSX.ScaleTelekomFooter & JSXBase.HTMLAttributes<HTMLScaleTelekomFooterElement>;
            "scale-telekom-footer-content": LocalJSX.ScaleTelekomFooterContent & JSXBase.HTMLAttributes<HTMLScaleTelekomFooterContentElement>;
            "scale-telekom-footer-data-back-compat": LocalJSX.ScaleTelekomFooterDataBackCompat & JSXBase.HTMLAttributes<HTMLScaleTelekomFooterDataBackCompatElement>;
            "scale-telekom-footer-extended-navigation": LocalJSX.ScaleTelekomFooterExtendedNavigation & JSXBase.HTMLAttributes<HTMLScaleTelekomFooterExtendedNavigationElement>;
            "scale-telekom-footer-extended-navigation-column": LocalJSX.ScaleTelekomFooterExtendedNavigationColumn & JSXBase.HTMLAttributes<HTMLScaleTelekomFooterExtendedNavigationColumnElement>;
            "scale-telekom-header": LocalJSX.ScaleTelekomHeader & JSXBase.HTMLAttributes<HTMLScaleTelekomHeaderElement>;
            "scale-telekom-header-data-back-compat": LocalJSX.ScaleTelekomHeaderDataBackCompat & JSXBase.HTMLAttributes<HTMLScaleTelekomHeaderDataBackCompatElement>;
            "scale-telekom-mega-menu": LocalJSX.ScaleTelekomMegaMenu & JSXBase.HTMLAttributes<HTMLScaleTelekomMegaMenuElement>;
            "scale-telekom-mega-menu-column": LocalJSX.ScaleTelekomMegaMenuColumn & JSXBase.HTMLAttributes<HTMLScaleTelekomMegaMenuColumnElement>;
            "scale-telekom-mobile-flyout-canvas": LocalJSX.ScaleTelekomMobileFlyoutCanvas & JSXBase.HTMLAttributes<HTMLScaleTelekomMobileFlyoutCanvasElement>;
            "scale-telekom-mobile-menu": LocalJSX.ScaleTelekomMobileMenu & JSXBase.HTMLAttributes<HTMLScaleTelekomMobileMenuElement>;
            "scale-telekom-mobile-menu-item": LocalJSX.ScaleTelekomMobileMenuItem & JSXBase.HTMLAttributes<HTMLScaleTelekomMobileMenuItemElement>;
            "scale-telekom-nav-flyout": LocalJSX.ScaleTelekomNavFlyout & JSXBase.HTMLAttributes<HTMLScaleTelekomNavFlyoutElement>;
            "scale-telekom-nav-item": LocalJSX.ScaleTelekomNavItem & JSXBase.HTMLAttributes<HTMLScaleTelekomNavItemElement>;
            "scale-telekom-nav-list": LocalJSX.ScaleTelekomNavList & JSXBase.HTMLAttributes<HTMLScaleTelekomNavListElement>;
            "scale-telekom-profile-menu": LocalJSX.ScaleTelekomProfileMenu & JSXBase.HTMLAttributes<HTMLScaleTelekomProfileMenuElement>;
            "scale-text-field": LocalJSX.ScaleTextField & JSXBase.HTMLAttributes<HTMLScaleTextFieldElement>;
            "scale-textarea": LocalJSX.ScaleTextarea & JSXBase.HTMLAttributes<HTMLScaleTextareaElement>;
            "scale-toast": LocalJSX.ScaleToast & JSXBase.HTMLAttributes<HTMLScaleToastElement>;
            "scale-toggle-button": LocalJSX.ScaleToggleButton & JSXBase.HTMLAttributes<HTMLScaleToggleButtonElement>;
            "scale-toggle-group": LocalJSX.ScaleToggleGroup & JSXBase.HTMLAttributes<HTMLScaleToggleGroupElement>;
            "scale-tooltip": LocalJSX.ScaleTooltip & JSXBase.HTMLAttributes<HTMLScaleTooltipElement>;
        }
    }
}
