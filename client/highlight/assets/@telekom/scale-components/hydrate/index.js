'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/*!
 Stencil Mock Doc v2.17.0 | MIT Licensed | https://stenciljs.com
 */
const CONTENT_REF_ID = 'r';
const ORG_LOCATION_ID = 'o';
const SLOT_NODE_ID = 's';
const TEXT_NODE_ID = 't';
const XLINK_NS = 'http://www.w3.org/1999/xlink';

const attrHandler = {
  get(obj, prop) {
    if (prop in obj) {
      return obj[prop];
    }
    if (typeof prop !== 'symbol' && !isNaN(prop)) {
      return obj.__items[prop];
    }
    return undefined;
  },
};
const createAttributeProxy = (caseInsensitive) => new Proxy(new MockAttributeMap(caseInsensitive), attrHandler);
class MockAttributeMap {
  constructor(caseInsensitive = false) {
    this.caseInsensitive = caseInsensitive;
    this.__items = [];
  }
  get length() {
    return this.__items.length;
  }
  item(index) {
    return this.__items[index] || null;
  }
  setNamedItem(attr) {
    attr.namespaceURI = null;
    this.setNamedItemNS(attr);
  }
  setNamedItemNS(attr) {
    if (attr != null && attr.value != null) {
      attr.value = String(attr.value);
    }
    const existingAttr = this.__items.find((a) => a.name === attr.name && a.namespaceURI === attr.namespaceURI);
    if (existingAttr != null) {
      existingAttr.value = attr.value;
    }
    else {
      this.__items.push(attr);
    }
  }
  getNamedItem(attrName) {
    if (this.caseInsensitive) {
      attrName = attrName.toLowerCase();
    }
    return this.getNamedItemNS(null, attrName);
  }
  getNamedItemNS(namespaceURI, attrName) {
    namespaceURI = getNamespaceURI(namespaceURI);
    return (this.__items.find((attr) => attr.name === attrName && getNamespaceURI(attr.namespaceURI) === namespaceURI) || null);
  }
  removeNamedItem(attr) {
    this.removeNamedItemNS(attr);
  }
  removeNamedItemNS(attr) {
    for (let i = 0, ii = this.__items.length; i < ii; i++) {
      if (this.__items[i].name === attr.name && this.__items[i].namespaceURI === attr.namespaceURI) {
        this.__items.splice(i, 1);
        break;
      }
    }
  }
  [Symbol.iterator]() {
    let i = 0;
    return {
      next: () => ({
        done: i === this.length,
        value: this.item(i++),
      }),
    };
  }
  get [Symbol.toStringTag]() {
    return 'MockAttributeMap';
  }
}
function getNamespaceURI(namespaceURI) {
  return namespaceURI === XLINK_NS ? null : namespaceURI;
}
function cloneAttributes(srcAttrs, sortByName = false) {
  const dstAttrs = new MockAttributeMap(srcAttrs.caseInsensitive);
  if (srcAttrs != null) {
    const attrLen = srcAttrs.length;
    if (sortByName && attrLen > 1) {
      const sortedAttrs = [];
      for (let i = 0; i < attrLen; i++) {
        const srcAttr = srcAttrs.item(i);
        const dstAttr = new MockAttr(srcAttr.name, srcAttr.value, srcAttr.namespaceURI);
        sortedAttrs.push(dstAttr);
      }
      sortedAttrs.sort(sortAttributes).forEach((attr) => {
        dstAttrs.setNamedItemNS(attr);
      });
    }
    else {
      for (let i = 0; i < attrLen; i++) {
        const srcAttr = srcAttrs.item(i);
        const dstAttr = new MockAttr(srcAttr.name, srcAttr.value, srcAttr.namespaceURI);
        dstAttrs.setNamedItemNS(dstAttr);
      }
    }
  }
  return dstAttrs;
}
function sortAttributes(a, b) {
  if (a.name < b.name)
    return -1;
  if (a.name > b.name)
    return 1;
  return 0;
}
class MockAttr {
  constructor(attrName, attrValue, namespaceURI = null) {
    this._name = attrName;
    this._value = String(attrValue);
    this._namespaceURI = namespaceURI;
  }
  get name() {
    return this._name;
  }
  set name(value) {
    this._name = value;
  }
  get value() {
    return this._value;
  }
  set value(value) {
    this._value = String(value);
  }
  get nodeName() {
    return this._name;
  }
  set nodeName(value) {
    this._name = value;
  }
  get nodeValue() {
    return this._value;
  }
  set nodeValue(value) {
    this._value = String(value);
  }
  get namespaceURI() {
    return this._namespaceURI;
  }
  set namespaceURI(namespaceURI) {
    this._namespaceURI = namespaceURI;
  }
}

class MockCustomElementRegistry {
  constructor(win) {
    this.win = win;
  }
  define(tagName, cstr, options) {
    if (tagName.toLowerCase() !== tagName) {
      throw new Error(`Failed to execute 'define' on 'CustomElementRegistry': "${tagName}" is not a valid custom element name`);
    }
    if (this.__registry == null) {
      this.__registry = new Map();
    }
    this.__registry.set(tagName, { cstr, options });
    if (this.__whenDefined != null) {
      const whenDefinedResolveFns = this.__whenDefined.get(tagName);
      if (whenDefinedResolveFns != null) {
        whenDefinedResolveFns.forEach((whenDefinedResolveFn) => {
          whenDefinedResolveFn();
        });
        whenDefinedResolveFns.length = 0;
        this.__whenDefined.delete(tagName);
      }
    }
    const doc = this.win.document;
    if (doc != null) {
      const hosts = doc.querySelectorAll(tagName);
      hosts.forEach((host) => {
        if (upgradedElements.has(host) === false) {
          tempDisableCallbacks.add(doc);
          const upgradedCmp = createCustomElement(this, doc, tagName);
          for (let i = 0; i < host.childNodes.length; i++) {
            const childNode = host.childNodes[i];
            childNode.remove();
            upgradedCmp.appendChild(childNode);
          }
          tempDisableCallbacks.delete(doc);
          if (proxyElements.has(host)) {
            proxyElements.set(host, upgradedCmp);
          }
        }
        fireConnectedCallback(host);
      });
    }
  }
  get(tagName) {
    if (this.__registry != null) {
      const def = this.__registry.get(tagName.toLowerCase());
      if (def != null) {
        return def.cstr;
      }
    }
    return undefined;
  }
  upgrade(_rootNode) {
    //
  }
  clear() {
    if (this.__registry != null) {
      this.__registry.clear();
    }
    if (this.__whenDefined != null) {
      this.__whenDefined.clear();
    }
  }
  whenDefined(tagName) {
    tagName = tagName.toLowerCase();
    if (this.__registry != null && this.__registry.has(tagName) === true) {
      return Promise.resolve(this.__registry.get(tagName).cstr);
    }
    return new Promise((resolve) => {
      if (this.__whenDefined == null) {
        this.__whenDefined = new Map();
      }
      let whenDefinedResolveFns = this.__whenDefined.get(tagName);
      if (whenDefinedResolveFns == null) {
        whenDefinedResolveFns = [];
        this.__whenDefined.set(tagName, whenDefinedResolveFns);
      }
      whenDefinedResolveFns.push(resolve);
    });
  }
}
function createCustomElement(customElements, ownerDocument, tagName) {
  const Cstr = customElements.get(tagName);
  if (Cstr != null) {
    const cmp = new Cstr(ownerDocument);
    cmp.nodeName = tagName.toUpperCase();
    upgradedElements.add(cmp);
    return cmp;
  }
  const host = new Proxy({}, {
    get(obj, prop) {
      const elm = proxyElements.get(host);
      if (elm != null) {
        return elm[prop];
      }
      return obj[prop];
    },
    set(obj, prop, val) {
      const elm = proxyElements.get(host);
      if (elm != null) {
        elm[prop] = val;
      }
      else {
        obj[prop] = val;
      }
      return true;
    },
    has(obj, prop) {
      const elm = proxyElements.get(host);
      if (prop in elm) {
        return true;
      }
      if (prop in obj) {
        return true;
      }
      return false;
    },
  });
  const elm = new MockHTMLElement(ownerDocument, tagName);
  proxyElements.set(host, elm);
  return host;
}
const proxyElements = new WeakMap();
const upgradedElements = new WeakSet();
function connectNode(ownerDocument, node) {
  node.ownerDocument = ownerDocument;
  if (node.nodeType === 1 /* ELEMENT_NODE */) {
    if (ownerDocument != null && node.nodeName.includes('-')) {
      const win = ownerDocument.defaultView;
      if (win != null && typeof node.connectedCallback === 'function' && node.isConnected) {
        fireConnectedCallback(node);
      }
      const shadowRoot = node.shadowRoot;
      if (shadowRoot != null) {
        shadowRoot.childNodes.forEach((childNode) => {
          connectNode(ownerDocument, childNode);
        });
      }
    }
    node.childNodes.forEach((childNode) => {
      connectNode(ownerDocument, childNode);
    });
  }
  else {
    node.childNodes.forEach((childNode) => {
      childNode.ownerDocument = ownerDocument;
    });
  }
}
function fireConnectedCallback(node) {
  if (typeof node.connectedCallback === 'function') {
    if (tempDisableCallbacks.has(node.ownerDocument) === false) {
      try {
        node.connectedCallback();
      }
      catch (e) {
        console.error(e);
      }
    }
  }
}
function disconnectNode(node) {
  if (node.nodeType === 1 /* ELEMENT_NODE */) {
    if (node.nodeName.includes('-') === true && typeof node.disconnectedCallback === 'function') {
      if (tempDisableCallbacks.has(node.ownerDocument) === false) {
        try {
          node.disconnectedCallback();
        }
        catch (e) {
          console.error(e);
        }
      }
    }
    node.childNodes.forEach(disconnectNode);
  }
}
function attributeChanged(node, attrName, oldValue, newValue) {
  attrName = attrName.toLowerCase();
  const observedAttributes = node.constructor.observedAttributes;
  if (Array.isArray(observedAttributes) === true &&
    observedAttributes.some((obs) => obs.toLowerCase() === attrName) === true) {
    try {
      node.attributeChangedCallback(attrName, oldValue, newValue);
    }
    catch (e) {
      console.error(e);
    }
  }
}
function checkAttributeChanged(node) {
  return node.nodeName.includes('-') === true && typeof node.attributeChangedCallback === 'function';
}
const tempDisableCallbacks = new Set();

function dataset(elm) {
  const ds = {};
  const attributes = elm.attributes;
  const attrLen = attributes.length;
  for (let i = 0; i < attrLen; i++) {
    const attr = attributes.item(i);
    const nodeName = attr.nodeName;
    if (nodeName.startsWith('data-')) {
      ds[dashToPascalCase(nodeName)] = attr.nodeValue;
    }
  }
  return new Proxy(ds, {
    get(_obj, camelCaseProp) {
      return ds[camelCaseProp];
    },
    set(_obj, camelCaseProp, value) {
      const dataAttr = toDataAttribute(camelCaseProp);
      elm.setAttribute(dataAttr, value);
      return true;
    },
  });
}
function toDataAttribute(str) {
  return ('data-' +
    String(str)
      .replace(/([A-Z0-9])/g, (g) => ' ' + g[0])
      .trim()
      .replace(/ /g, '-')
      .toLowerCase());
}
function dashToPascalCase(str) {
  str = String(str).slice(5);
  return str
    .split('-')
    .map((segment, index) => {
    if (index === 0) {
      return segment.charAt(0).toLowerCase() + segment.slice(1);
    }
    return segment.charAt(0).toUpperCase() + segment.slice(1);
  })
    .join('');
}

// Sizzle 2.3.6
const Sizzle = (function() {
const window = {
  document: {
  createElement() {
    return {};
  },
  nodeType: 9,
  documentElement: {
    nodeType: 1,
    nodeName: 'HTML'
  }
  }
};
const module = { exports: {} };

/*! Sizzle v2.3.6 | (c) JS Foundation and other contributors | js.foundation */
!function(e){var t,n,r,i,o,u,l,a,c,s,d,f,p,h,g,m,y,v,w,b="sizzle"+1*new Date,N=e.document,C=0,x=0,E=ae(),A=ae(),S=ae(),D=ae(),T=function(e,t){return e===t&&(d=!0),0},L={}.hasOwnProperty,q=[],I=q.pop,B=q.push,R=q.push,$=q.slice,k=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return -1},H="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",P="(?:\\\\[\\da-fA-F]{1,6}"+M+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",z="\\["+M+"*("+P+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+P+"))|)"+M+"*\\]",F=":("+P+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+z+")*)|.*)\\)|)",O=new RegExp(M+"+","g"),j=new RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),G=new RegExp("^"+M+"*,"+M+"*"),U=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),V=new RegExp(M+"|>"),X=new RegExp(F),J=new RegExp("^"+P+"$"),K={ID:new RegExp("^#("+P+")"),CLASS:new RegExp("^\\.("+P+")"),TAG:new RegExp("^("+P+"|[*])"),ATTR:new RegExp("^"+z),PSEUDO:new RegExp("^"+F),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:new RegExp("^(?:"+H+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},Q=/HTML$/i,W=/^(?:input|select|textarea|button)$/i,Y=/^h\d$/i,Z=/^[^{]+\{\s*\[native \w/,_=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}"+M+"?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ie=function(e,t){return t?"\0"===e?"\ufffd":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},oe=function(){f();},ue=ve(function(e){return !0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{R.apply(q=$.call(N.childNodes),N.childNodes),q[N.childNodes.length].nodeType;}catch(e){R={apply:q.length?function(e,t){B.apply(e,$.call(t));}:function(e,t){var n=e.length,r=0;while(e[n++]=t[r++]);e.length=n-1;}};}function le(e,t,r,i){var o,l,c,s,d,h,y,v=t&&t.ownerDocument,N=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==N&&9!==N&&11!==N)return r;if(!i&&(f(t),t=t||p,g)){if(11!==N&&(d=_.exec(e)))if(o=d[1]){if(9===N){if(!(c=t.getElementById(o)))return r;if(c.id===o)return r.push(c),r}else if(v&&(c=v.getElementById(o))&&w(t,c)&&c.id===o)return r.push(c),r}else {if(d[2])return R.apply(r,t.getElementsByTagName(e)),r;if((o=d[3])&&n.getElementsByClassName&&t.getElementsByClassName)return R.apply(r,t.getElementsByClassName(o)),r}if(n.qsa&&!D[e+" "]&&(!m||!m.test(e))&&(1!==N||"object"!==t.nodeName.toLowerCase())){if(y=e,v=t,1===N&&(V.test(e)||U.test(e))){(v=ee.test(e)&&ge(t.parentNode)||t)===t&&n.scope||((s=t.getAttribute("id"))?s=s.replace(re,ie):t.setAttribute("id",s=b)),l=(h=u(e)).length;while(l--)h[l]=(s?"#"+s:":scope")+" "+ye(h[l]);y=h.join(",");}try{return R.apply(r,v.querySelectorAll(y)),r}catch(t){D(e,!0);}finally{s===b&&t.removeAttribute("id");}}}return a(e.replace(j,"$1"),t,r,i)}function ae(){var e=[];function t(n,i){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=i}return t}function ce(e){return e[b]=!0,e}function se(e){var t=p.createElement("fieldset");try{return !!e(t)}catch(e){return !1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null;}}function de(e,t){var n=e.split("|"),i=n.length;while(i--)r.attrHandle[n[i]]=t;}function fe(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return -1;return e?1:-1}function pe(e){return function(t){return "form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ue(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function he(e){return ce(function(t){return t=+t,ce(function(n,r){var i,o=e([],n.length,t),u=o.length;while(u--)n[i=o[u]]&&(n[i]=!(r[i]=n[i]));})})}function ge(e){return e&&void 0!==e.getElementsByTagName&&e}n=le.support={},o=le.isXML=function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return !Q.test(t||n&&n.nodeName||"HTML")},f=le.setDocument=function(e){var t,i,u=e?e.ownerDocument||e:N;return u!=p&&9===u.nodeType&&u.documentElement?(p=u,h=p.documentElement,g=!o(p),N!=p&&(i=p.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",oe,!1):i.attachEvent&&i.attachEvent("onunload",oe)),n.scope=se(function(e){return h.appendChild(e).appendChild(p.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length}),n.attributes=se(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=se(function(e){return e.appendChild(p.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=Z.test(p.getElementsByClassName),n.getById=se(function(e){return h.appendChild(e).id=b,!p.getElementsByName||!p.getElementsByName(b).length}),n.getById?(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return [o];i=t.getElementsByName(e),r=0;while(o=i[r++])if((n=o.getAttributeNode("id"))&&n.value===e)return [o]}return []}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&g)return t.getElementsByClassName(e)},y=[],m=[],(n.qsa=Z.test(p.querySelectorAll))&&(se(function(e){var t;h.appendChild(e).innerHTML="<a id='"+b+"'></a><select id='"+b+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+M+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||m.push("\\["+M+"*(?:value|"+H+")"),e.querySelectorAll("[id~="+b+"-]").length||m.push("~="),(t=p.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||m.push("\\["+M+"*name"+M+"*="+M+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||m.push(":checked"),e.querySelectorAll("a#"+b+"+*").length||m.push(".#.+[+~]"),e.querySelectorAll("\\\f"),m.push("[\\r\\n\\f]");}),se(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=p.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&m.push("name"+M+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),m.push(",.*:");})),(n.matchesSelector=Z.test(v=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&se(function(e){n.disconnectedMatch=v.call(e,"*"),v.call(e,"[s!='']:x"),y.push("!=",F);}),m=m.length&&new RegExp(m.join("|")),y=y.length&&new RegExp(y.join("|")),t=Z.test(h.compareDocumentPosition),w=t||Z.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return !0;return !1},T=t?function(e,t){if(e===t)return d=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e==p||e.ownerDocument==N&&w(N,e)?-1:t==p||t.ownerDocument==N&&w(N,t)?1:s?k(s,e)-k(s,t):0:4&r?-1:1)}:function(e,t){if(e===t)return d=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,u=[e],l=[t];if(!i||!o)return e==p?-1:t==p?1:i?-1:o?1:s?k(s,e)-k(s,t):0;if(i===o)return fe(e,t);n=e;while(n=n.parentNode)u.unshift(n);n=t;while(n=n.parentNode)l.unshift(n);while(u[r]===l[r])r++;return r?fe(u[r],l[r]):u[r]==N?-1:l[r]==N?1:0},p):p},le.matches=function(e,t){return le(e,null,null,t)},le.matchesSelector=function(e,t){if(f(e),n.matchesSelector&&g&&!D[t+" "]&&(!y||!y.test(t))&&(!m||!m.test(t)))try{var r=v.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){D(t,!0);}return le(t,p,null,[e]).length>0},le.contains=function(e,t){return (e.ownerDocument||e)!=p&&f(e),w(e,t)},le.attr=function(e,t){(e.ownerDocument||e)!=p&&f(e);var i=r.attrHandle[t.toLowerCase()],o=i&&L.call(r.attrHandle,t.toLowerCase())?i(e,t,!g):void 0;return void 0!==o?o:n.attributes||!g?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},le.escape=function(e){return (e+"").replace(re,ie)},le.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},le.uniqueSort=function(e){var t,r=[],i=0,o=0;if(d=!n.detectDuplicates,s=!n.sortStable&&e.slice(0),e.sort(T),d){while(t=e[o++])t===e[o]&&(i=r.push(o));while(i--)e.splice(r[i],1);}return s=null,e},i=le.getText=function(e){var t,n="",r=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=i(e);}else if(3===o||4===o)return e.nodeValue}else while(t=e[r++])n+=i(t);return n},(r=le.selectors={cacheLength:50,createPseudo:ce,match:K,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||le.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&le.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return K.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&X.test(n)&&(t=u(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return "*"===e?function(){return !0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=E[e+" "];return t||(t=new RegExp("(^|"+M+")"+e+"("+M+"|$)"))&&E(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var i=le.attr(r,e);return null==i?"!="===t:!t||(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i.replace(O," ")+" ").indexOf(n)>-1:"|="===t&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),u="last"!==e.slice(-4),l="of-type"===t;return 1===r&&0===i?function(e){return !!e.parentNode}:function(t,n,a){var c,s,d,f,p,h,g=o!==u?"nextSibling":"previousSibling",m=t.parentNode,y=l&&t.nodeName.toLowerCase(),v=!a&&!l,w=!1;if(m){if(o){while(g){f=t;while(f=f[g])if(l?f.nodeName.toLowerCase()===y:1===f.nodeType)return !1;h=g="only"===e&&!h&&"nextSibling";}return !0}if(h=[u?m.firstChild:m.lastChild],u&&v){w=(p=(c=(s=(d=(f=m)[b]||(f[b]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]||[])[0]===C&&c[1])&&c[2],f=p&&m.childNodes[p];while(f=++p&&f&&f[g]||(w=p=0)||h.pop())if(1===f.nodeType&&++w&&f===t){s[e]=[C,p,w];break}}else if(v&&(w=p=(c=(s=(d=(f=t)[b]||(f[b]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]||[])[0]===C&&c[1]),!1===w)while(f=++p&&f&&f[g]||(w=p=0)||h.pop())if((l?f.nodeName.toLowerCase()===y:1===f.nodeType)&&++w&&(v&&((s=(d=f[b]||(f[b]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]=[C,w]),f===t))break;return (w-=i)===r||w%r==0&&w/r>=0}}},PSEUDO:function(e,t){var n,i=r.pseudos[e]||r.setFilters[e.toLowerCase()]||le.error("unsupported pseudo: "+e);return i[b]?i(t):i.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?ce(function(e,n){var r,o=i(e,t),u=o.length;while(u--)e[r=k(e,o[u])]=!(n[r]=o[u]);}):function(e){return i(e,0,n)}):i}},pseudos:{not:ce(function(e){var t=[],n=[],r=l(e.replace(j,"$1"));return r[b]?ce(function(e,t,n,i){var o,u=r(e,null,i,[]),l=e.length;while(l--)(o=u[l])&&(e[l]=!(t[l]=o));}):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}}),has:ce(function(e){return function(t){return le(e,t).length>0}}),contains:ce(function(e){return e=e.replace(te,ne),function(t){return (t.textContent||i(t)).indexOf(e)>-1}}),lang:ce(function(e){return J.test(e||"")||le.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=g?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return (n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return !1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:pe(!1),disabled:pe(!0),checked:function(e){var t=e.nodeName.toLowerCase();return "input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return !1;return !0},parent:function(e){return !r.pseudos.empty(e)},header:function(e){return Y.test(e.nodeName)},input:function(e){return W.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return "input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return "input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:he(function(){return [0]}),last:he(function(e,t){return [t-1]}),eq:he(function(e,t,n){return [n<0?n+t:n]}),even:he(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:he(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:he(function(e,t,n){for(var r=n<0?n+t:n>t?t:n;--r>=0;)e.push(r);return e}),gt:he(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=r.pseudos.eq;for(t in {radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=function(e){return function(t){return "input"===t.nodeName.toLowerCase()&&t.type===e}}(t);for(t in {submit:!0,reset:!0})r.pseudos[t]=function(e){return function(t){var n=t.nodeName.toLowerCase();return ("input"===n||"button"===n)&&t.type===e}}(t);function me(){}me.prototype=r.filters=r.pseudos,r.setFilters=new me,u=le.tokenize=function(e,t){var n,i,o,u,l,a,c,s=A[e+" "];if(s)return t?0:s.slice(0);l=e,a=[],c=r.preFilter;while(l){n&&!(i=G.exec(l))||(i&&(l=l.slice(i[0].length)||l),a.push(o=[])),n=!1,(i=U.exec(l))&&(n=i.shift(),o.push({value:n,type:i[0].replace(j," ")}),l=l.slice(n.length));for(u in r.filter)!(i=K[u].exec(l))||c[u]&&!(i=c[u](i))||(n=i.shift(),o.push({value:n,type:u,matches:i}),l=l.slice(n.length));if(!n)break}return t?l.length:l?le.error(e):A(e,a).slice(0)};function ye(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function ve(e,t,n){var r=t.dir,i=t.next,o=i||r,u=n&&"parentNode"===o,l=x++;return t.first?function(t,n,i){while(t=t[r])if(1===t.nodeType||u)return e(t,n,i);return !1}:function(t,n,a){var c,s,d,f=[C,l];if(a){while(t=t[r])if((1===t.nodeType||u)&&e(t,n,a))return !0}else while(t=t[r])if(1===t.nodeType||u)if(d=t[b]||(t[b]={}),s=d[t.uniqueID]||(d[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else {if((c=s[o])&&c[0]===C&&c[1]===l)return f[2]=c[2];if(s[o]=f,f[2]=e(t,n,a))return !0}return !1}}function we(e){return e.length>1?function(t,n,r){var i=e.length;while(i--)if(!e[i](t,n,r))return !1;return !0}:e[0]}function be(e,t,n){for(var r=0,i=t.length;r<i;r++)le(e,t[r],n);return n}function Ne(e,t,n,r,i){for(var o,u=[],l=0,a=e.length,c=null!=t;l<a;l++)(o=e[l])&&(n&&!n(o,r,i)||(u.push(o),c&&t.push(l)));return u}function Ce(e,t,n,r,i,o){return r&&!r[b]&&(r=Ce(r)),i&&!i[b]&&(i=Ce(i,o)),ce(function(o,u,l,a){var c,s,d,f=[],p=[],h=u.length,g=o||be(t||"*",l.nodeType?[l]:l,[]),m=!e||!o&&t?g:Ne(g,f,e,l,a),y=n?i||(o?e:h||r)?[]:u:m;if(n&&n(m,y,l,a),r){c=Ne(y,p),r(c,[],l,a),s=c.length;while(s--)(d=c[s])&&(y[p[s]]=!(m[p[s]]=d));}if(o){if(i||e){if(i){c=[],s=y.length;while(s--)(d=y[s])&&c.push(m[s]=d);i(null,y=[],c,a);}s=y.length;while(s--)(d=y[s])&&(c=i?k(o,d):f[s])>-1&&(o[c]=!(u[c]=d));}}else y=Ne(y===u?y.splice(h,y.length):y),i?i(null,u,y,a):R.apply(u,y);})}function xe(e){for(var t,n,i,o=e.length,u=r.relative[e[0].type],l=u||r.relative[" "],a=u?1:0,s=ve(function(e){return e===t},l,!0),d=ve(function(e){return k(t,e)>-1},l,!0),f=[function(e,n,r){var i=!u&&(r||n!==c)||((t=n).nodeType?s(e,n,r):d(e,n,r));return t=null,i}];a<o;a++)if(n=r.relative[e[a].type])f=[ve(we(f),n)];else {if((n=r.filter[e[a].type].apply(null,e[a].matches))[b]){for(i=++a;i<o;i++)if(r.relative[e[i].type])break;return Ce(a>1&&we(f),a>1&&ye(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(j,"$1"),n,a<i&&xe(e.slice(a,i)),i<o&&xe(e=e.slice(i)),i<o&&ye(e))}f.push(n);}return we(f)}function Ee(e,t){var n=t.length>0,i=e.length>0,o=function(o,u,l,a,s){var d,h,m,y=0,v="0",w=o&&[],b=[],N=c,x=o||i&&r.find.TAG("*",s),E=C+=null==N?1:Math.random()||.1,A=x.length;for(s&&(c=u==p||u||s);v!==A&&null!=(d=x[v]);v++){if(i&&d){h=0,u||d.ownerDocument==p||(f(d),l=!g);while(m=e[h++])if(m(d,u||p,l)){a.push(d);break}s&&(C=E);}n&&((d=!m&&d)&&y--,o&&w.push(d));}if(y+=v,n&&v!==y){h=0;while(m=t[h++])m(w,b,u,l);if(o){if(y>0)while(v--)w[v]||b[v]||(b[v]=I.call(a));b=Ne(b);}R.apply(a,b),s&&!o&&b.length>0&&y+t.length>1&&le.uniqueSort(a);}return s&&(C=E,c=N),w};return n?ce(o):o}l=le.compile=function(e,t){var n,r=[],i=[],o=S[e+" "];if(!o){t||(t=u(e)),n=t.length;while(n--)(o=xe(t[n]))[b]?r.push(o):i.push(o);(o=S(e,Ee(i,r))).selector=e;}return o},a=le.select=function(e,t,n,i){var o,a,c,s,d,f="function"==typeof e&&e,p=!i&&u(e=f.selector||e);if(n=n||[],1===p.length){if((a=p[0]=p[0].slice(0)).length>2&&"ID"===(c=a[0]).type&&9===t.nodeType&&g&&r.relative[a[1].type]){if(!(t=(r.find.ID(c.matches[0].replace(te,ne),t)||[])[0]))return n;f&&(t=t.parentNode),e=e.slice(a.shift().value.length);}o=K.needsContext.test(e)?0:a.length;while(o--){if(c=a[o],r.relative[s=c.type])break;if((d=r.find[s])&&(i=d(c.matches[0].replace(te,ne),ee.test(a[0].type)&&ge(t.parentNode)||t))){if(a.splice(o,1),!(e=i.length&&ye(a)))return R.apply(n,i),n;break}}}return (f||l(e,p))(i,t,!g,n,!t||ee.test(e)&&ge(t.parentNode)||t),n},n.sortStable=b.split("").sort(T).join("")===b,n.detectDuplicates=!!d,f(),n.sortDetached=se(function(e){return 1&e.compareDocumentPosition(p.createElement("fieldset"))}),se(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||de("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&se(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||de("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),se(function(e){return null==e.getAttribute("disabled")})||de(H,function(e,t,n){var r;if(!n)return !0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null});var Ae=e.Sizzle;le.noConflict=function(){return e.Sizzle===le&&(e.Sizzle=Ae),le},"function"==typeof define&&define.amd?define(function(){return le}):"undefined"!=typeof module&&module.exports?module.exports=le:e.Sizzle=le;}(window);
//# sourceMappingURL=sizzle.min.map

return module.exports;
})();

function matches(selector, elm) {
  const r = Sizzle.matches(selector, [elm]);
  return r.length > 0;
}
function selectOne(selector, elm) {
  const r = Sizzle(selector, elm);
  return r[0] || null;
}
function selectAll(selector, elm) {
  return Sizzle(selector, elm);
}

class MockClassList {
  constructor(elm) {
    this.elm = elm;
  }
  add(...classNames) {
    const clsNames = getItems(this.elm);
    let updated = false;
    classNames.forEach((className) => {
      className = String(className);
      validateClass(className);
      if (clsNames.includes(className) === false) {
        clsNames.push(className);
        updated = true;
      }
    });
    if (updated) {
      this.elm.setAttributeNS(null, 'class', clsNames.join(' '));
    }
  }
  remove(...classNames) {
    const clsNames = getItems(this.elm);
    let updated = false;
    classNames.forEach((className) => {
      className = String(className);
      validateClass(className);
      const index = clsNames.indexOf(className);
      if (index > -1) {
        clsNames.splice(index, 1);
        updated = true;
      }
    });
    if (updated) {
      this.elm.setAttributeNS(null, 'class', clsNames.filter((c) => c.length > 0).join(' '));
    }
  }
  contains(className) {
    className = String(className);
    return getItems(this.elm).includes(className);
  }
  toggle(className) {
    className = String(className);
    if (this.contains(className) === true) {
      this.remove(className);
    }
    else {
      this.add(className);
    }
  }
  get length() {
    return getItems(this.elm).length;
  }
  item(index) {
    return getItems(this.elm)[index];
  }
  toString() {
    return getItems(this.elm).join(' ');
  }
}
function validateClass(className) {
  if (className === '') {
    throw new Error('The token provided must not be empty.');
  }
  if (/\s/.test(className)) {
    throw new Error(`The token provided ('${className}') contains HTML space characters, which are not valid in tokens.`);
  }
}
function getItems(elm) {
  const className = elm.getAttribute('class');
  if (typeof className === 'string' && className.length > 0) {
    return className
      .trim()
      .split(' ')
      .filter((c) => c.length > 0);
  }
  return [];
}

class MockCSSStyleDeclaration {
  constructor() {
    this._styles = new Map();
  }
  setProperty(prop, value) {
    prop = jsCaseToCssCase(prop);
    if (value == null || value === '') {
      this._styles.delete(prop);
    }
    else {
      this._styles.set(prop, String(value));
    }
  }
  getPropertyValue(prop) {
    prop = jsCaseToCssCase(prop);
    return String(this._styles.get(prop) || '');
  }
  removeProperty(prop) {
    prop = jsCaseToCssCase(prop);
    this._styles.delete(prop);
  }
  get length() {
    return this._styles.size;
  }
  get cssText() {
    const cssText = [];
    this._styles.forEach((value, prop) => {
      cssText.push(`${prop}: ${value};`);
    });
    return cssText.join(' ').trim();
  }
  set cssText(cssText) {
    if (cssText == null || cssText === '') {
      this._styles.clear();
      return;
    }
    cssText.split(';').forEach((rule) => {
      rule = rule.trim();
      if (rule.length > 0) {
        const splt = rule.split(':');
        if (splt.length > 1) {
          const prop = splt[0].trim();
          const value = splt.slice(1).join(':').trim();
          if (prop !== '' && value !== '') {
            this._styles.set(jsCaseToCssCase(prop), value);
          }
        }
      }
    });
  }
}
function createCSSStyleDeclaration() {
  return new Proxy(new MockCSSStyleDeclaration(), cssProxyHandler);
}
const cssProxyHandler = {
  get(cssStyle, prop) {
    if (prop in cssStyle) {
      return cssStyle[prop];
    }
    prop = cssCaseToJsCase(prop);
    return cssStyle.getPropertyValue(prop);
  },
  set(cssStyle, prop, value) {
    if (prop in cssStyle) {
      cssStyle[prop] = value;
    }
    else {
      cssStyle.setProperty(prop, value);
    }
    return true;
  },
};
function cssCaseToJsCase(str) {
  // font-size to fontSize
  if (str.length > 1 && str.includes('-') === true) {
    str = str
      .toLowerCase()
      .split('-')
      .map((segment) => segment.charAt(0).toUpperCase() + segment.slice(1))
      .join('');
    str = str.slice(0, 1).toLowerCase() + str.slice(1);
  }
  return str;
}
function jsCaseToCssCase(str) {
  // fontSize to font-size
  if (str.length > 1 && str.includes('-') === false && /[A-Z]/.test(str) === true) {
    str = str
      .replace(/([A-Z])/g, (g) => ' ' + g[0])
      .trim()
      .replace(/ /g, '-')
      .toLowerCase();
  }
  return str;
}

class MockEvent {
  constructor(type, eventInitDict) {
    this.bubbles = false;
    this.cancelBubble = false;
    this.cancelable = false;
    this.composed = false;
    this.currentTarget = null;
    this.defaultPrevented = false;
    this.srcElement = null;
    this.target = null;
    if (typeof type !== 'string') {
      throw new Error(`Event type required`);
    }
    this.type = type;
    this.timeStamp = Date.now();
    if (eventInitDict != null) {
      Object.assign(this, eventInitDict);
    }
  }
  preventDefault() {
    this.defaultPrevented = true;
  }
  stopPropagation() {
    this.cancelBubble = true;
  }
  stopImmediatePropagation() {
    this.cancelBubble = true;
  }
  composedPath() {
    const composedPath = [];
    let currentElement = this.target;
    while (currentElement) {
      composedPath.push(currentElement);
      if (!currentElement.parentElement && currentElement.nodeName === "#document" /* DOCUMENT_NODE */) {
        // the current element doesn't have a parent, but we've detected it's our root document node. push the window
        // object associated with the document onto the path
        composedPath.push(currentElement.defaultView);
        break;
      }
      currentElement = currentElement.parentElement;
    }
    return composedPath;
  }
}
class MockCustomEvent extends MockEvent {
  constructor(type, customEventInitDic) {
    super(type);
    this.detail = null;
    if (customEventInitDic != null) {
      Object.assign(this, customEventInitDic);
    }
  }
}
class MockKeyboardEvent extends MockEvent {
  constructor(type, keyboardEventInitDic) {
    super(type);
    this.code = '';
    this.key = '';
    this.altKey = false;
    this.ctrlKey = false;
    this.metaKey = false;
    this.shiftKey = false;
    this.location = 0;
    this.repeat = false;
    if (keyboardEventInitDic != null) {
      Object.assign(this, keyboardEventInitDic);
    }
  }
}
class MockMouseEvent extends MockEvent {
  constructor(type, mouseEventInitDic) {
    super(type);
    this.screenX = 0;
    this.screenY = 0;
    this.clientX = 0;
    this.clientY = 0;
    this.ctrlKey = false;
    this.shiftKey = false;
    this.altKey = false;
    this.metaKey = false;
    this.button = 0;
    this.buttons = 0;
    this.relatedTarget = null;
    if (mouseEventInitDic != null) {
      Object.assign(this, mouseEventInitDic);
    }
  }
}
class MockEventListener {
  constructor(type, handler) {
    this.type = type;
    this.handler = handler;
  }
}
function addEventListener(elm, type, handler) {
  const target = elm;
  if (target.__listeners == null) {
    target.__listeners = [];
  }
  target.__listeners.push(new MockEventListener(type, handler));
}
function removeEventListener(elm, type, handler) {
  const target = elm;
  if (target != null && Array.isArray(target.__listeners) === true) {
    const elmListener = target.__listeners.find((e) => e.type === type && e.handler === handler);
    if (elmListener != null) {
      const index = target.__listeners.indexOf(elmListener);
      target.__listeners.splice(index, 1);
    }
  }
}
function resetEventListeners(target) {
  if (target != null && target.__listeners != null) {
    target.__listeners = null;
  }
}
function triggerEventListener(elm, ev) {
  if (elm == null || ev.cancelBubble === true) {
    return;
  }
  const target = elm;
  ev.currentTarget = elm;
  if (Array.isArray(target.__listeners) === true) {
    const listeners = target.__listeners.filter((e) => e.type === ev.type);
    listeners.forEach((listener) => {
      try {
        listener.handler.call(target, ev);
      }
      catch (err) {
        console.error(err);
      }
    });
  }
  if (ev.bubbles === false) {
    return;
  }
  if (elm.nodeName === "#document" /* DOCUMENT_NODE */) {
    triggerEventListener(elm.defaultView, ev);
  }
  else {
    triggerEventListener(elm.parentElement, ev);
  }
}
function dispatchEvent(currentTarget, ev) {
  ev.target = currentTarget;
  triggerEventListener(currentTarget, ev);
  return true;
}

function serializeNodeToHtml(elm, opts = {}) {
  const output = {
    currentLineWidth: 0,
    indent: 0,
    isWithinBody: false,
    text: [],
  };
  if (opts.prettyHtml) {
    if (typeof opts.indentSpaces !== 'number') {
      opts.indentSpaces = 2;
    }
    if (typeof opts.newLines !== 'boolean') {
      opts.newLines = true;
    }
    opts.approximateLineWidth = -1;
  }
  else {
    opts.prettyHtml = false;
    if (typeof opts.newLines !== 'boolean') {
      opts.newLines = false;
    }
    if (typeof opts.indentSpaces !== 'number') {
      opts.indentSpaces = 0;
    }
  }
  if (typeof opts.approximateLineWidth !== 'number') {
    opts.approximateLineWidth = -1;
  }
  if (typeof opts.removeEmptyAttributes !== 'boolean') {
    opts.removeEmptyAttributes = true;
  }
  if (typeof opts.removeAttributeQuotes !== 'boolean') {
    opts.removeAttributeQuotes = false;
  }
  if (typeof opts.removeBooleanAttributeQuotes !== 'boolean') {
    opts.removeBooleanAttributeQuotes = false;
  }
  if (typeof opts.removeHtmlComments !== 'boolean') {
    opts.removeHtmlComments = false;
  }
  if (typeof opts.serializeShadowRoot !== 'boolean') {
    opts.serializeShadowRoot = false;
  }
  if (opts.outerHtml) {
    serializeToHtml(elm, opts, output, false);
  }
  else {
    for (let i = 0, ii = elm.childNodes.length; i < ii; i++) {
      serializeToHtml(elm.childNodes[i], opts, output, false);
    }
  }
  if (output.text[0] === '\n') {
    output.text.shift();
  }
  if (output.text[output.text.length - 1] === '\n') {
    output.text.pop();
  }
  return output.text.join('');
}
function serializeToHtml(node, opts, output, isShadowRoot) {
  if (node.nodeType === 1 /* ELEMENT_NODE */ || isShadowRoot) {
    const tagName = isShadowRoot ? 'mock:shadow-root' : getTagName(node);
    if (tagName === 'body') {
      output.isWithinBody = true;
    }
    const ignoreTag = opts.excludeTags != null && opts.excludeTags.includes(tagName);
    if (ignoreTag === false) {
      const isWithinWhitespaceSensitiveNode = opts.newLines || opts.indentSpaces > 0 ? isWithinWhitespaceSensitive(node) : false;
      if (opts.newLines && !isWithinWhitespaceSensitiveNode) {
        output.text.push('\n');
        output.currentLineWidth = 0;
      }
      if (opts.indentSpaces > 0 && !isWithinWhitespaceSensitiveNode) {
        for (let i = 0; i < output.indent; i++) {
          output.text.push(' ');
        }
        output.currentLineWidth += output.indent;
      }
      output.text.push('<' + tagName);
      output.currentLineWidth += tagName.length + 1;
      const attrsLength = node.attributes.length;
      const attributes = opts.prettyHtml && attrsLength > 1
        ? cloneAttributes(node.attributes, true)
        : node.attributes;
      for (let i = 0; i < attrsLength; i++) {
        const attr = attributes.item(i);
        const attrName = attr.name;
        if (attrName === 'style') {
          continue;
        }
        let attrValue = attr.value;
        if (opts.removeEmptyAttributes && attrValue === '' && REMOVE_EMPTY_ATTR.has(attrName)) {
          continue;
        }
        const attrNamespaceURI = attr.namespaceURI;
        if (attrNamespaceURI == null) {
          output.currentLineWidth += attrName.length + 1;
          if (opts.approximateLineWidth > 0 && output.currentLineWidth > opts.approximateLineWidth) {
            output.text.push('\n' + attrName);
            output.currentLineWidth = 0;
          }
          else {
            output.text.push(' ' + attrName);
          }
        }
        else if (attrNamespaceURI === 'http://www.w3.org/XML/1998/namespace') {
          output.text.push(' xml:' + attrName);
          output.currentLineWidth += attrName.length + 5;
        }
        else if (attrNamespaceURI === 'http://www.w3.org/2000/xmlns/') {
          if (attrName !== 'xmlns') {
            output.text.push(' xmlns:' + attrName);
            output.currentLineWidth += attrName.length + 7;
          }
          else {
            output.text.push(' ' + attrName);
            output.currentLineWidth += attrName.length + 1;
          }
        }
        else if (attrNamespaceURI === XLINK_NS) {
          output.text.push(' xlink:' + attrName);
          output.currentLineWidth += attrName.length + 7;
        }
        else {
          output.text.push(' ' + attrNamespaceURI + ':' + attrName);
          output.currentLineWidth += attrNamespaceURI.length + attrName.length + 2;
        }
        if (opts.prettyHtml && attrName === 'class') {
          attrValue = attr.value = attrValue
            .split(' ')
            .filter((t) => t !== '')
            .sort()
            .join(' ')
            .trim();
        }
        if (attrValue === '') {
          if (opts.removeBooleanAttributeQuotes && BOOLEAN_ATTR.has(attrName)) {
            continue;
          }
          if (opts.removeEmptyAttributes && attrName.startsWith('data-')) {
            continue;
          }
        }
        if (opts.removeAttributeQuotes && CAN_REMOVE_ATTR_QUOTES.test(attrValue)) {
          output.text.push('=' + escapeString(attrValue, true));
          output.currentLineWidth += attrValue.length + 1;
        }
        else {
          output.text.push('="' + escapeString(attrValue, true) + '"');
          output.currentLineWidth += attrValue.length + 3;
        }
      }
      if (node.hasAttribute('style')) {
        const cssText = node.style.cssText;
        if (opts.approximateLineWidth > 0 &&
          output.currentLineWidth + cssText.length + 10 > opts.approximateLineWidth) {
          output.text.push(`\nstyle="${cssText}">`);
          output.currentLineWidth = 0;
        }
        else {
          output.text.push(` style="${cssText}">`);
          output.currentLineWidth += cssText.length + 10;
        }
      }
      else {
        output.text.push('>');
        output.currentLineWidth += 1;
      }
    }
    if (EMPTY_ELEMENTS.has(tagName) === false) {
      if (opts.serializeShadowRoot && node.shadowRoot != null) {
        output.indent = output.indent + opts.indentSpaces;
        serializeToHtml(node.shadowRoot, opts, output, true);
        output.indent = output.indent - opts.indentSpaces;
        if (opts.newLines &&
          (node.childNodes.length === 0 ||
            (node.childNodes.length === 1 &&
              node.childNodes[0].nodeType === 3 /* TEXT_NODE */ &&
              node.childNodes[0].nodeValue.trim() === ''))) {
          output.text.push('\n');
          output.currentLineWidth = 0;
          for (let i = 0; i < output.indent; i++) {
            output.text.push(' ');
          }
          output.currentLineWidth += output.indent;
        }
      }
      if (opts.excludeTagContent == null || opts.excludeTagContent.includes(tagName) === false) {
        const childNodes = tagName === 'template' ? node.content.childNodes : node.childNodes;
        const childNodeLength = childNodes.length;
        if (childNodeLength > 0) {
          if (childNodeLength === 1 &&
            childNodes[0].nodeType === 3 /* TEXT_NODE */ &&
            (typeof childNodes[0].nodeValue !== 'string' || childNodes[0].nodeValue.trim() === '')) ;
          else {
            const isWithinWhitespaceSensitiveNode = opts.newLines || opts.indentSpaces > 0 ? isWithinWhitespaceSensitive(node) : false;
            if (!isWithinWhitespaceSensitiveNode && opts.indentSpaces > 0 && ignoreTag === false) {
              output.indent = output.indent + opts.indentSpaces;
            }
            for (let i = 0; i < childNodeLength; i++) {
              serializeToHtml(childNodes[i], opts, output, false);
            }
            if (ignoreTag === false) {
              if (opts.newLines && !isWithinWhitespaceSensitiveNode) {
                output.text.push('\n');
                output.currentLineWidth = 0;
              }
              if (opts.indentSpaces > 0 && !isWithinWhitespaceSensitiveNode) {
                output.indent = output.indent - opts.indentSpaces;
                for (let i = 0; i < output.indent; i++) {
                  output.text.push(' ');
                }
                output.currentLineWidth += output.indent;
              }
            }
          }
        }
        if (ignoreTag === false) {
          output.text.push('</' + tagName + '>');
          output.currentLineWidth += tagName.length + 3;
        }
      }
    }
    if (opts.approximateLineWidth > 0 && STRUCTURE_ELEMENTS.has(tagName)) {
      output.text.push('\n');
      output.currentLineWidth = 0;
    }
    if (tagName === 'body') {
      output.isWithinBody = false;
    }
  }
  else if (node.nodeType === 3 /* TEXT_NODE */) {
    let textContent = node.nodeValue;
    if (typeof textContent === 'string') {
      const trimmedTextContent = textContent.trim();
      if (trimmedTextContent === '') {
        // this text node is whitespace only
        if (isWithinWhitespaceSensitive(node)) {
          // whitespace matters within this element
          // just add the exact text we were given
          output.text.push(textContent);
          output.currentLineWidth += textContent.length;
        }
        else if (opts.approximateLineWidth > 0 && !output.isWithinBody) ;
        else if (!opts.prettyHtml) {
          // this text node is only whitespace, and it's not
          // within a whitespace sensitive element like <pre> or <code>
          // so replace the entire white space with a single new line
          output.currentLineWidth += 1;
          if (opts.approximateLineWidth > 0 && output.currentLineWidth > opts.approximateLineWidth) {
            // good enough for a new line
            // for perf these are all just estimates
            // we don't care to ensure exact line lengths
            output.text.push('\n');
            output.currentLineWidth = 0;
          }
          else {
            // let's keep it all on the same line yet
            output.text.push(' ');
          }
        }
      }
      else {
        // this text node has text content
        const isWithinWhitespaceSensitiveNode = opts.newLines || opts.indentSpaces > 0 || opts.prettyHtml ? isWithinWhitespaceSensitive(node) : false;
        if (opts.newLines && !isWithinWhitespaceSensitiveNode) {
          output.text.push('\n');
          output.currentLineWidth = 0;
        }
        if (opts.indentSpaces > 0 && !isWithinWhitespaceSensitiveNode) {
          for (let i = 0; i < output.indent; i++) {
            output.text.push(' ');
          }
          output.currentLineWidth += output.indent;
        }
        let textContentLength = textContent.length;
        if (textContentLength > 0) {
          // this text node has text content
          const parentTagName = node.parentNode != null && node.parentNode.nodeType === 1 /* ELEMENT_NODE */
            ? node.parentNode.nodeName
            : null;
          if (NON_ESCAPABLE_CONTENT.has(parentTagName)) {
            // this text node cannot have its content escaped since it's going
            // into an element like <style> or <script>
            if (isWithinWhitespaceSensitive(node)) {
              output.text.push(textContent);
            }
            else {
              output.text.push(trimmedTextContent);
              textContentLength = trimmedTextContent.length;
            }
            output.currentLineWidth += textContentLength;
          }
          else {
            // this text node is going into a normal element and html can be escaped
            if (opts.prettyHtml && !isWithinWhitespaceSensitiveNode) {
              // pretty print the text node
              output.text.push(escapeString(textContent.replace(/\s\s+/g, ' ').trim(), false));
              output.currentLineWidth += textContentLength;
            }
            else {
              // not pretty printing the text node
              if (isWithinWhitespaceSensitive(node)) {
                output.currentLineWidth += textContentLength;
              }
              else {
                // this element is not a whitespace sensitive one, like <pre> or <code> so
                // any whitespace at the start and end can be cleaned up to just be one space
                if (/\s/.test(textContent.charAt(0))) {
                  textContent = ' ' + textContent.trimLeft();
                }
                textContentLength = textContent.length;
                if (textContentLength > 1) {
                  if (/\s/.test(textContent.charAt(textContentLength - 1))) {
                    if (opts.approximateLineWidth > 0 &&
                      output.currentLineWidth + textContentLength > opts.approximateLineWidth) {
                      textContent = textContent.trimRight() + '\n';
                      output.currentLineWidth = 0;
                    }
                    else {
                      textContent = textContent.trimRight() + ' ';
                    }
                  }
                }
                output.currentLineWidth += textContentLength;
              }
              output.text.push(escapeString(textContent, false));
            }
          }
        }
      }
    }
  }
  else if (node.nodeType === 8 /* COMMENT_NODE */) {
    const nodeValue = node.nodeValue;
    if (opts.removeHtmlComments) {
      const isHydrateAnnotation = nodeValue.startsWith(CONTENT_REF_ID + '.') ||
        nodeValue.startsWith(ORG_LOCATION_ID + '.') ||
        nodeValue.startsWith(SLOT_NODE_ID + '.') ||
        nodeValue.startsWith(TEXT_NODE_ID + '.');
      if (!isHydrateAnnotation) {
        return;
      }
    }
    const isWithinWhitespaceSensitiveNode = opts.newLines || opts.indentSpaces > 0 ? isWithinWhitespaceSensitive(node) : false;
    if (opts.newLines && !isWithinWhitespaceSensitiveNode) {
      output.text.push('\n');
      output.currentLineWidth = 0;
    }
    if (opts.indentSpaces > 0 && !isWithinWhitespaceSensitiveNode) {
      for (let i = 0; i < output.indent; i++) {
        output.text.push(' ');
      }
      output.currentLineWidth += output.indent;
    }
    output.text.push('<!--' + nodeValue + '-->');
    output.currentLineWidth += nodeValue.length + 7;
  }
  else if (node.nodeType === 10 /* DOCUMENT_TYPE_NODE */) {
    output.text.push('<!doctype html>');
  }
}
const AMP_REGEX = /&/g;
const NBSP_REGEX = /\u00a0/g;
const DOUBLE_QUOTE_REGEX = /"/g;
const LT_REGEX = /</g;
const GT_REGEX = />/g;
const CAN_REMOVE_ATTR_QUOTES = /^[^ \t\n\f\r"'`=<>\/\\-]+$/;
function getTagName(element) {
  if (element.namespaceURI === 'http://www.w3.org/1999/xhtml') {
    return element.nodeName.toLowerCase();
  }
  else {
    return element.nodeName;
  }
}
function escapeString(str, attrMode) {
  str = str.replace(AMP_REGEX, '&amp;').replace(NBSP_REGEX, '&nbsp;');
  if (attrMode) {
    return str.replace(DOUBLE_QUOTE_REGEX, '&quot;');
  }
  return str.replace(LT_REGEX, '&lt;').replace(GT_REGEX, '&gt;');
}
function isWithinWhitespaceSensitive(node) {
  while (node != null) {
    if (WHITESPACE_SENSITIVE.has(node.nodeName)) {
      return true;
    }
    node = node.parentNode;
  }
  return false;
}
/*@__PURE__*/ const NON_ESCAPABLE_CONTENT = new Set([
  'STYLE',
  'SCRIPT',
  'IFRAME',
  'NOSCRIPT',
  'XMP',
  'NOEMBED',
  'NOFRAMES',
  'PLAINTEXT',
]);
/*@__PURE__*/ const WHITESPACE_SENSITIVE = new Set([
  'CODE',
  'OUTPUT',
  'PLAINTEXT',
  'PRE',
  'SCRIPT',
  'TEMPLATE',
  'TEXTAREA',
]);
/*@__PURE__*/ const EMPTY_ELEMENTS = new Set([
  'area',
  'base',
  'basefont',
  'bgsound',
  'br',
  'col',
  'embed',
  'frame',
  'hr',
  'img',
  'input',
  'keygen',
  'link',
  'meta',
  'param',
  'source',
  'trace',
  'wbr',
]);
/*@__PURE__*/ const REMOVE_EMPTY_ATTR = new Set(['class', 'dir', 'id', 'lang', 'name', 'title']);
/*@__PURE__*/ const BOOLEAN_ATTR = new Set([
  'allowfullscreen',
  'async',
  'autofocus',
  'autoplay',
  'checked',
  'compact',
  'controls',
  'declare',
  'default',
  'defaultchecked',
  'defaultmuted',
  'defaultselected',
  'defer',
  'disabled',
  'enabled',
  'formnovalidate',
  'hidden',
  'indeterminate',
  'inert',
  'ismap',
  'itemscope',
  'loop',
  'multiple',
  'muted',
  'nohref',
  'nomodule',
  'noresize',
  'noshade',
  'novalidate',
  'nowrap',
  'open',
  'pauseonexit',
  'readonly',
  'required',
  'reversed',
  'scoped',
  'seamless',
  'selected',
  'sortable',
  'truespeed',
  'typemustmatch',
  'visible',
]);
/*@__PURE__*/ const STRUCTURE_ELEMENTS = new Set([
  'html',
  'body',
  'head',
  'iframe',
  'meta',
  'link',
  'base',
  'title',
  'script',
  'style',
]);

// Parse5 6.0.1
const e=function(e){const t=[65534,65535,131070,131071,196606,196607,262142,262143,327678,327679,393214,393215,458750,458751,524286,524287,589822,589823,655358,655359,720894,720895,786430,786431,851966,851967,917502,917503,983038,983039,1048574,1048575,1114110,1114111];var n="�",s={EOF:-1,NULL:0,TABULATION:9,CARRIAGE_RETURN:13,LINE_FEED:10,FORM_FEED:12,SPACE:32,EXCLAMATION_MARK:33,QUOTATION_MARK:34,NUMBER_SIGN:35,AMPERSAND:38,APOSTROPHE:39,HYPHEN_MINUS:45,SOLIDUS:47,DIGIT_0:48,DIGIT_9:57,SEMICOLON:59,LESS_THAN_SIGN:60,EQUALS_SIGN:61,GREATER_THAN_SIGN:62,QUESTION_MARK:63,LATIN_CAPITAL_A:65,LATIN_CAPITAL_F:70,LATIN_CAPITAL_X:88,LATIN_CAPITAL_Z:90,RIGHT_SQUARE_BRACKET:93,GRAVE_ACCENT:96,LATIN_SMALL_A:97,LATIN_SMALL_F:102,LATIN_SMALL_X:120,LATIN_SMALL_Z:122,REPLACEMENT_CHARACTER:65533},r=function(e){return e>=55296&&e<=57343},i=function(e){return 32!==e&&10!==e&&13!==e&&9!==e&&12!==e&&e>=1&&e<=31||e>=127&&e<=159},o=function(e){return e>=64976&&e<=65007||t.indexOf(e)>-1},a="unexpected-null-character",T="invalid-first-character-of-tag-name",E="missing-semicolon-after-character-reference",h="eof-before-tag-name",c="eof-in-tag",_="missing-whitespace-after-doctype-public-keyword",l="missing-whitespace-between-doctype-public-and-system-identifiers",m="missing-whitespace-after-doctype-system-keyword",p="missing-quote-before-doctype-public-identifier",A="missing-quote-before-doctype-system-identifier",u="missing-doctype-public-identifier",N="missing-doctype-system-identifier",d="abrupt-doctype-public-identifier",C="abrupt-doctype-system-identifier",O="eof-in-script-html-comment-like-text",f="eof-in-doctype",S="abrupt-closing-of-empty-comment",R="eof-in-comment",I="absence-of-digits-in-numeric-character-reference",L="end-tag-without-matching-open-element",k="misplaced-start-tag-for-head-element";const M=s;var g=new Uint16Array([4,52,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,106,303,412,810,1432,1701,1796,1987,2114,2360,2420,2484,3170,3251,4140,4393,4575,4610,5106,5512,5728,6117,6274,6315,6345,6427,6516,7002,7910,8733,9323,9870,10170,10631,10893,11318,11386,11467,12773,13092,14474,14922,15448,15542,16419,17666,18166,18611,19004,19095,19298,19397,4,16,69,77,97,98,99,102,103,108,109,110,111,112,114,115,116,117,140,150,158,169,176,194,199,210,216,222,226,242,256,266,283,294,108,105,103,5,198,1,59,148,1,198,80,5,38,1,59,156,1,38,99,117,116,101,5,193,1,59,167,1,193,114,101,118,101,59,1,258,4,2,105,121,182,191,114,99,5,194,1,59,189,1,194,59,1,1040,114,59,3,55349,56580,114,97,118,101,5,192,1,59,208,1,192,112,104,97,59,1,913,97,99,114,59,1,256,100,59,1,10835,4,2,103,112,232,237,111,110,59,1,260,102,59,3,55349,56632,112,108,121,70,117,110,99,116,105,111,110,59,1,8289,105,110,103,5,197,1,59,264,1,197,4,2,99,115,272,277,114,59,3,55349,56476,105,103,110,59,1,8788,105,108,100,101,5,195,1,59,292,1,195,109,108,5,196,1,59,301,1,196,4,8,97,99,101,102,111,114,115,117,321,350,354,383,388,394,400,405,4,2,99,114,327,336,107,115,108,97,115,104,59,1,8726,4,2,118,119,342,345,59,1,10983,101,100,59,1,8966,121,59,1,1041,4,3,99,114,116,362,369,379,97,117,115,101,59,1,8757,110,111,117,108,108,105,115,59,1,8492,97,59,1,914,114,59,3,55349,56581,112,102,59,3,55349,56633,101,118,101,59,1,728,99,114,59,1,8492,109,112,101,113,59,1,8782,4,14,72,79,97,99,100,101,102,104,105,108,111,114,115,117,442,447,456,504,542,547,569,573,577,616,678,784,790,796,99,121,59,1,1063,80,89,5,169,1,59,454,1,169,4,3,99,112,121,464,470,497,117,116,101,59,1,262,4,2,59,105,476,478,1,8914,116,97,108,68,105,102,102,101,114,101,110,116,105,97,108,68,59,1,8517,108,101,121,115,59,1,8493,4,4,97,101,105,111,514,520,530,535,114,111,110,59,1,268,100,105,108,5,199,1,59,528,1,199,114,99,59,1,264,110,105,110,116,59,1,8752,111,116,59,1,266,4,2,100,110,553,560,105,108,108,97,59,1,184,116,101,114,68,111,116,59,1,183,114,59,1,8493,105,59,1,935,114,99,108,101,4,4,68,77,80,84,591,596,603,609,111,116,59,1,8857,105,110,117,115,59,1,8854,108,117,115,59,1,8853,105,109,101,115,59,1,8855,111,4,2,99,115,623,646,107,119,105,115,101,67,111,110,116,111,117,114,73,110,116,101,103,114,97,108,59,1,8754,101,67,117,114,108,121,4,2,68,81,658,671,111,117,98,108,101,81,117,111,116,101,59,1,8221,117,111,116,101,59,1,8217,4,4,108,110,112,117,688,701,736,753,111,110,4,2,59,101,696,698,1,8759,59,1,10868,4,3,103,105,116,709,717,722,114,117,101,110,116,59,1,8801,110,116,59,1,8751,111,117,114,73,110,116,101,103,114,97,108,59,1,8750,4,2,102,114,742,745,59,1,8450,111,100,117,99,116,59,1,8720,110,116,101,114,67,108,111,99,107,119,105,115,101,67,111,110,116,111,117,114,73,110,116,101,103,114,97,108,59,1,8755,111,115,115,59,1,10799,99,114,59,3,55349,56478,112,4,2,59,67,803,805,1,8915,97,112,59,1,8781,4,11,68,74,83,90,97,99,101,102,105,111,115,834,850,855,860,865,888,903,916,921,1011,1415,4,2,59,111,840,842,1,8517,116,114,97,104,100,59,1,10513,99,121,59,1,1026,99,121,59,1,1029,99,121,59,1,1039,4,3,103,114,115,873,879,883,103,101,114,59,1,8225,114,59,1,8609,104,118,59,1,10980,4,2,97,121,894,900,114,111,110,59,1,270,59,1,1044,108,4,2,59,116,910,912,1,8711,97,59,1,916,114,59,3,55349,56583,4,2,97,102,927,998,4,2,99,109,933,992,114,105,116,105,99,97,108,4,4,65,68,71,84,950,957,978,985,99,117,116,101,59,1,180,111,4,2,116,117,964,967,59,1,729,98,108,101,65,99,117,116,101,59,1,733,114,97,118,101,59,1,96,105,108,100,101,59,1,732,111,110,100,59,1,8900,102,101,114,101,110,116,105,97,108,68,59,1,8518,4,4,112,116,117,119,1021,1026,1048,1249,102,59,3,55349,56635,4,3,59,68,69,1034,1036,1041,1,168,111,116,59,1,8412,113,117,97,108,59,1,8784,98,108,101,4,6,67,68,76,82,85,86,1065,1082,1101,1189,1211,1236,111,110,116,111,117,114,73,110,116,101,103,114,97,108,59,1,8751,111,4,2,116,119,1089,1092,59,1,168,110,65,114,114,111,119,59,1,8659,4,2,101,111,1107,1141,102,116,4,3,65,82,84,1117,1124,1136,114,114,111,119,59,1,8656,105,103,104,116,65,114,114,111,119,59,1,8660,101,101,59,1,10980,110,103,4,2,76,82,1149,1177,101,102,116,4,2,65,82,1158,1165,114,114,111,119,59,1,10232,105,103,104,116,65,114,114,111,119,59,1,10234,105,103,104,116,65,114,114,111,119,59,1,10233,105,103,104,116,4,2,65,84,1199,1206,114,114,111,119,59,1,8658,101,101,59,1,8872,112,4,2,65,68,1218,1225,114,114,111,119,59,1,8657,111,119,110,65,114,114,111,119,59,1,8661,101,114,116,105,99,97,108,66,97,114,59,1,8741,110,4,6,65,66,76,82,84,97,1264,1292,1299,1352,1391,1408,114,114,111,119,4,3,59,66,85,1276,1278,1283,1,8595,97,114,59,1,10515,112,65,114,114,111,119,59,1,8693,114,101,118,101,59,1,785,101,102,116,4,3,82,84,86,1310,1323,1334,105,103,104,116,86,101,99,116,111,114,59,1,10576,101,101,86,101,99,116,111,114,59,1,10590,101,99,116,111,114,4,2,59,66,1345,1347,1,8637,97,114,59,1,10582,105,103,104,116,4,2,84,86,1362,1373,101,101,86,101,99,116,111,114,59,1,10591,101,99,116,111,114,4,2,59,66,1384,1386,1,8641,97,114,59,1,10583,101,101,4,2,59,65,1399,1401,1,8868,114,114,111,119,59,1,8615,114,114,111,119,59,1,8659,4,2,99,116,1421,1426,114,59,3,55349,56479,114,111,107,59,1,272,4,16,78,84,97,99,100,102,103,108,109,111,112,113,115,116,117,120,1466,1470,1478,1489,1515,1520,1525,1536,1544,1593,1609,1617,1650,1664,1668,1677,71,59,1,330,72,5,208,1,59,1476,1,208,99,117,116,101,5,201,1,59,1487,1,201,4,3,97,105,121,1497,1503,1512,114,111,110,59,1,282,114,99,5,202,1,59,1510,1,202,59,1,1069,111,116,59,1,278,114,59,3,55349,56584,114,97,118,101,5,200,1,59,1534,1,200,101,109,101,110,116,59,1,8712,4,2,97,112,1550,1555,99,114,59,1,274,116,121,4,2,83,86,1563,1576,109,97,108,108,83,113,117,97,114,101,59,1,9723,101,114,121,83,109,97,108,108,83,113,117,97,114,101,59,1,9643,4,2,103,112,1599,1604,111,110,59,1,280,102,59,3,55349,56636,115,105,108,111,110,59,1,917,117,4,2,97,105,1624,1640,108,4,2,59,84,1631,1633,1,10869,105,108,100,101,59,1,8770,108,105,98,114,105,117,109,59,1,8652,4,2,99,105,1656,1660,114,59,1,8496,109,59,1,10867,97,59,1,919,109,108,5,203,1,59,1675,1,203,4,2,105,112,1683,1689,115,116,115,59,1,8707,111,110,101,110,116,105,97,108,69,59,1,8519,4,5,99,102,105,111,115,1713,1717,1722,1762,1791,121,59,1,1060,114,59,3,55349,56585,108,108,101,100,4,2,83,86,1732,1745,109,97,108,108,83,113,117,97,114,101,59,1,9724,101,114,121,83,109,97,108,108,83,113,117,97,114,101,59,1,9642,4,3,112,114,117,1770,1775,1781,102,59,3,55349,56637,65,108,108,59,1,8704,114,105,101,114,116,114,102,59,1,8497,99,114,59,1,8497,4,12,74,84,97,98,99,100,102,103,111,114,115,116,1822,1827,1834,1848,1855,1877,1882,1887,1890,1896,1978,1984,99,121,59,1,1027,5,62,1,59,1832,1,62,109,109,97,4,2,59,100,1843,1845,1,915,59,1,988,114,101,118,101,59,1,286,4,3,101,105,121,1863,1869,1874,100,105,108,59,1,290,114,99,59,1,284,59,1,1043,111,116,59,1,288,114,59,3,55349,56586,59,1,8921,112,102,59,3,55349,56638,101,97,116,101,114,4,6,69,70,71,76,83,84,1915,1933,1944,1953,1959,1971,113,117,97,108,4,2,59,76,1925,1927,1,8805,101,115,115,59,1,8923,117,108,108,69,113,117,97,108,59,1,8807,114,101,97,116,101,114,59,1,10914,101,115,115,59,1,8823,108,97,110,116,69,113,117,97,108,59,1,10878,105,108,100,101,59,1,8819,99,114,59,3,55349,56482,59,1,8811,4,8,65,97,99,102,105,111,115,117,2005,2012,2026,2032,2036,2049,2073,2089,82,68,99,121,59,1,1066,4,2,99,116,2018,2023,101,107,59,1,711,59,1,94,105,114,99,59,1,292,114,59,1,8460,108,98,101,114,116,83,112,97,99,101,59,1,8459,4,2,112,114,2055,2059,102,59,1,8461,105,122,111,110,116,97,108,76,105,110,101,59,1,9472,4,2,99,116,2079,2083,114,59,1,8459,114,111,107,59,1,294,109,112,4,2,68,69,2097,2107,111,119,110,72,117,109,112,59,1,8782,113,117,97,108,59,1,8783,4,14,69,74,79,97,99,100,102,103,109,110,111,115,116,117,2144,2149,2155,2160,2171,2189,2194,2198,2209,2245,2307,2329,2334,2341,99,121,59,1,1045,108,105,103,59,1,306,99,121,59,1,1025,99,117,116,101,5,205,1,59,2169,1,205,4,2,105,121,2177,2186,114,99,5,206,1,59,2184,1,206,59,1,1048,111,116,59,1,304,114,59,1,8465,114,97,118,101,5,204,1,59,2207,1,204,4,3,59,97,112,2217,2219,2238,1,8465,4,2,99,103,2225,2229,114,59,1,298,105,110,97,114,121,73,59,1,8520,108,105,101,115,59,1,8658,4,2,116,118,2251,2281,4,2,59,101,2257,2259,1,8748,4,2,103,114,2265,2271,114,97,108,59,1,8747,115,101,99,116,105,111,110,59,1,8898,105,115,105,98,108,101,4,2,67,84,2293,2300,111,109,109,97,59,1,8291,105,109,101,115,59,1,8290,4,3,103,112,116,2315,2320,2325,111,110,59,1,302,102,59,3,55349,56640,97,59,1,921,99,114,59,1,8464,105,108,100,101,59,1,296,4,2,107,109,2347,2352,99,121,59,1,1030,108,5,207,1,59,2358,1,207,4,5,99,102,111,115,117,2372,2386,2391,2397,2414,4,2,105,121,2378,2383,114,99,59,1,308,59,1,1049,114,59,3,55349,56589,112,102,59,3,55349,56641,4,2,99,101,2403,2408,114,59,3,55349,56485,114,99,121,59,1,1032,107,99,121,59,1,1028,4,7,72,74,97,99,102,111,115,2436,2441,2446,2452,2467,2472,2478,99,121,59,1,1061,99,121,59,1,1036,112,112,97,59,1,922,4,2,101,121,2458,2464,100,105,108,59,1,310,59,1,1050,114,59,3,55349,56590,112,102,59,3,55349,56642,99,114,59,3,55349,56486,4,11,74,84,97,99,101,102,108,109,111,115,116,2508,2513,2520,2562,2585,2981,2986,3004,3011,3146,3167,99,121,59,1,1033,5,60,1,59,2518,1,60,4,5,99,109,110,112,114,2532,2538,2544,2548,2558,117,116,101,59,1,313,98,100,97,59,1,923,103,59,1,10218,108,97,99,101,116,114,102,59,1,8466,114,59,1,8606,4,3,97,101,121,2570,2576,2582,114,111,110,59,1,317,100,105,108,59,1,315,59,1,1051,4,2,102,115,2591,2907,116,4,10,65,67,68,70,82,84,85,86,97,114,2614,2663,2672,2728,2735,2760,2820,2870,2888,2895,4,2,110,114,2620,2633,103,108,101,66,114,97,99,107,101,116,59,1,10216,114,111,119,4,3,59,66,82,2644,2646,2651,1,8592,97,114,59,1,8676,105,103,104,116,65,114,114,111,119,59,1,8646,101,105,108,105,110,103,59,1,8968,111,4,2,117,119,2679,2692,98,108,101,66,114,97,99,107,101,116,59,1,10214,110,4,2,84,86,2699,2710,101,101,86,101,99,116,111,114,59,1,10593,101,99,116,111,114,4,2,59,66,2721,2723,1,8643,97,114,59,1,10585,108,111,111,114,59,1,8970,105,103,104,116,4,2,65,86,2745,2752,114,114,111,119,59,1,8596,101,99,116,111,114,59,1,10574,4,2,101,114,2766,2792,101,4,3,59,65,86,2775,2777,2784,1,8867,114,114,111,119,59,1,8612,101,99,116,111,114,59,1,10586,105,97,110,103,108,101,4,3,59,66,69,2806,2808,2813,1,8882,97,114,59,1,10703,113,117,97,108,59,1,8884,112,4,3,68,84,86,2829,2841,2852,111,119,110,86,101,99,116,111,114,59,1,10577,101,101,86,101,99,116,111,114,59,1,10592,101,99,116,111,114,4,2,59,66,2863,2865,1,8639,97,114,59,1,10584,101,99,116,111,114,4,2,59,66,2881,2883,1,8636,97,114,59,1,10578,114,114,111,119,59,1,8656,105,103,104,116,97,114,114,111,119,59,1,8660,115,4,6,69,70,71,76,83,84,2922,2936,2947,2956,2962,2974,113,117,97,108,71,114,101,97,116,101,114,59,1,8922,117,108,108,69,113,117,97,108,59,1,8806,114,101,97,116,101,114,59,1,8822,101,115,115,59,1,10913,108,97,110,116,69,113,117,97,108,59,1,10877,105,108,100,101,59,1,8818,114,59,3,55349,56591,4,2,59,101,2992,2994,1,8920,102,116,97,114,114,111,119,59,1,8666,105,100,111,116,59,1,319,4,3,110,112,119,3019,3110,3115,103,4,4,76,82,108,114,3030,3058,3070,3098,101,102,116,4,2,65,82,3039,3046,114,114,111,119,59,1,10229,105,103,104,116,65,114,114,111,119,59,1,10231,105,103,104,116,65,114,114,111,119,59,1,10230,101,102,116,4,2,97,114,3079,3086,114,114,111,119,59,1,10232,105,103,104,116,97,114,114,111,119,59,1,10234,105,103,104,116,97,114,114,111,119,59,1,10233,102,59,3,55349,56643,101,114,4,2,76,82,3123,3134,101,102,116,65,114,114,111,119,59,1,8601,105,103,104,116,65,114,114,111,119,59,1,8600,4,3,99,104,116,3154,3158,3161,114,59,1,8466,59,1,8624,114,111,107,59,1,321,59,1,8810,4,8,97,99,101,102,105,111,115,117,3188,3192,3196,3222,3227,3237,3243,3248,112,59,1,10501,121,59,1,1052,4,2,100,108,3202,3213,105,117,109,83,112,97,99,101,59,1,8287,108,105,110,116,114,102,59,1,8499,114,59,3,55349,56592,110,117,115,80,108,117,115,59,1,8723,112,102,59,3,55349,56644,99,114,59,1,8499,59,1,924,4,9,74,97,99,101,102,111,115,116,117,3271,3276,3283,3306,3422,3427,4120,4126,4137,99,121,59,1,1034,99,117,116,101,59,1,323,4,3,97,101,121,3291,3297,3303,114,111,110,59,1,327,100,105,108,59,1,325,59,1,1053,4,3,103,115,119,3314,3380,3415,97,116,105,118,101,4,3,77,84,86,3327,3340,3365,101,100,105,117,109,83,112,97,99,101,59,1,8203,104,105,4,2,99,110,3348,3357,107,83,112,97,99,101,59,1,8203,83,112,97,99,101,59,1,8203,101,114,121,84,104,105,110,83,112,97,99,101,59,1,8203,116,101,100,4,2,71,76,3389,3405,114,101,97,116,101,114,71,114,101,97,116,101,114,59,1,8811,101,115,115,76,101,115,115,59,1,8810,76,105,110,101,59,1,10,114,59,3,55349,56593,4,4,66,110,112,116,3437,3444,3460,3464,114,101,97,107,59,1,8288,66,114,101,97,107,105,110,103,83,112,97,99,101,59,1,160,102,59,1,8469,4,13,59,67,68,69,71,72,76,78,80,82,83,84,86,3492,3494,3517,3536,3578,3657,3685,3784,3823,3860,3915,4066,4107,1,10988,4,2,111,117,3500,3510,110,103,114,117,101,110,116,59,1,8802,112,67,97,112,59,1,8813,111,117,98,108,101,86,101,114,116,105,99,97,108,66,97,114,59,1,8742,4,3,108,113,120,3544,3552,3571,101,109,101,110,116,59,1,8713,117,97,108,4,2,59,84,3561,3563,1,8800,105,108,100,101,59,3,8770,824,105,115,116,115,59,1,8708,114,101,97,116,101,114,4,7,59,69,70,71,76,83,84,3600,3602,3609,3621,3631,3637,3650,1,8815,113,117,97,108,59,1,8817,117,108,108,69,113,117,97,108,59,3,8807,824,114,101,97,116,101,114,59,3,8811,824,101,115,115,59,1,8825,108,97,110,116,69,113,117,97,108,59,3,10878,824,105,108,100,101,59,1,8821,117,109,112,4,2,68,69,3666,3677,111,119,110,72,117,109,112,59,3,8782,824,113,117,97,108,59,3,8783,824,101,4,2,102,115,3692,3724,116,84,114,105,97,110,103,108,101,4,3,59,66,69,3709,3711,3717,1,8938,97,114,59,3,10703,824,113,117,97,108,59,1,8940,115,4,6,59,69,71,76,83,84,3739,3741,3748,3757,3764,3777,1,8814,113,117,97,108,59,1,8816,114,101,97,116,101,114,59,1,8824,101,115,115,59,3,8810,824,108,97,110,116,69,113,117,97,108,59,3,10877,824,105,108,100,101,59,1,8820,101,115,116,101,100,4,2,71,76,3795,3812,114,101,97,116,101,114,71,114,101,97,116,101,114,59,3,10914,824,101,115,115,76,101,115,115,59,3,10913,824,114,101,99,101,100,101,115,4,3,59,69,83,3838,3840,3848,1,8832,113,117,97,108,59,3,10927,824,108,97,110,116,69,113,117,97,108,59,1,8928,4,2,101,105,3866,3881,118,101,114,115,101,69,108,101,109,101,110,116,59,1,8716,103,104,116,84,114,105,97,110,103,108,101,4,3,59,66,69,3900,3902,3908,1,8939,97,114,59,3,10704,824,113,117,97,108,59,1,8941,4,2,113,117,3921,3973,117,97,114,101,83,117,4,2,98,112,3933,3952,115,101,116,4,2,59,69,3942,3945,3,8847,824,113,117,97,108,59,1,8930,101,114,115,101,116,4,2,59,69,3963,3966,3,8848,824,113,117,97,108,59,1,8931,4,3,98,99,112,3981,4e3,4045,115,101,116,4,2,59,69,3990,3993,3,8834,8402,113,117,97,108,59,1,8840,99,101,101,100,115,4,4,59,69,83,84,4015,4017,4025,4037,1,8833,113,117,97,108,59,3,10928,824,108,97,110,116,69,113,117,97,108,59,1,8929,105,108,100,101,59,3,8831,824,101,114,115,101,116,4,2,59,69,4056,4059,3,8835,8402,113,117,97,108,59,1,8841,105,108,100,101,4,4,59,69,70,84,4080,4082,4089,4100,1,8769,113,117,97,108,59,1,8772,117,108,108,69,113,117,97,108,59,1,8775,105,108,100,101,59,1,8777,101,114,116,105,99,97,108,66,97,114,59,1,8740,99,114,59,3,55349,56489,105,108,100,101,5,209,1,59,4135,1,209,59,1,925,4,14,69,97,99,100,102,103,109,111,112,114,115,116,117,118,4170,4176,4187,4205,4212,4217,4228,4253,4259,4292,4295,4316,4337,4346,108,105,103,59,1,338,99,117,116,101,5,211,1,59,4185,1,211,4,2,105,121,4193,4202,114,99,5,212,1,59,4200,1,212,59,1,1054,98,108,97,99,59,1,336,114,59,3,55349,56594,114,97,118,101,5,210,1,59,4226,1,210,4,3,97,101,105,4236,4241,4246,99,114,59,1,332,103,97,59,1,937,99,114,111,110,59,1,927,112,102,59,3,55349,56646,101,110,67,117,114,108,121,4,2,68,81,4272,4285,111,117,98,108,101,81,117,111,116,101,59,1,8220,117,111,116,101,59,1,8216,59,1,10836,4,2,99,108,4301,4306,114,59,3,55349,56490,97,115,104,5,216,1,59,4314,1,216,105,4,2,108,109,4323,4332,100,101,5,213,1,59,4330,1,213,101,115,59,1,10807,109,108,5,214,1,59,4344,1,214,101,114,4,2,66,80,4354,4380,4,2,97,114,4360,4364,114,59,1,8254,97,99,4,2,101,107,4372,4375,59,1,9182,101,116,59,1,9140,97,114,101,110,116,104,101,115,105,115,59,1,9180,4,9,97,99,102,104,105,108,111,114,115,4413,4422,4426,4431,4435,4438,4448,4471,4561,114,116,105,97,108,68,59,1,8706,121,59,1,1055,114,59,3,55349,56595,105,59,1,934,59,1,928,117,115,77,105,110,117,115,59,1,177,4,2,105,112,4454,4467,110,99,97,114,101,112,108,97,110,101,59,1,8460,102,59,1,8473,4,4,59,101,105,111,4481,4483,4526,4531,1,10939,99,101,100,101,115,4,4,59,69,83,84,4498,4500,4507,4519,1,8826,113,117,97,108,59,1,10927,108,97,110,116,69,113,117,97,108,59,1,8828,105,108,100,101,59,1,8830,109,101,59,1,8243,4,2,100,112,4537,4543,117,99,116,59,1,8719,111,114,116,105,111,110,4,2,59,97,4555,4557,1,8759,108,59,1,8733,4,2,99,105,4567,4572,114,59,3,55349,56491,59,1,936,4,4,85,102,111,115,4585,4594,4599,4604,79,84,5,34,1,59,4592,1,34,114,59,3,55349,56596,112,102,59,1,8474,99,114,59,3,55349,56492,4,12,66,69,97,99,101,102,104,105,111,114,115,117,4636,4642,4650,4681,4704,4763,4767,4771,5047,5069,5081,5094,97,114,114,59,1,10512,71,5,174,1,59,4648,1,174,4,3,99,110,114,4658,4664,4668,117,116,101,59,1,340,103,59,1,10219,114,4,2,59,116,4675,4677,1,8608,108,59,1,10518,4,3,97,101,121,4689,4695,4701,114,111,110,59,1,344,100,105,108,59,1,342,59,1,1056,4,2,59,118,4710,4712,1,8476,101,114,115,101,4,2,69,85,4722,4748,4,2,108,113,4728,4736,101,109,101,110,116,59,1,8715,117,105,108,105,98,114,105,117,109,59,1,8651,112,69,113,117,105,108,105,98,114,105,117,109,59,1,10607,114,59,1,8476,111,59,1,929,103,104,116,4,8,65,67,68,70,84,85,86,97,4792,4840,4849,4905,4912,4972,5022,5040,4,2,110,114,4798,4811,103,108,101,66,114,97,99,107,101,116,59,1,10217,114,111,119,4,3,59,66,76,4822,4824,4829,1,8594,97,114,59,1,8677,101,102,116,65,114,114,111,119,59,1,8644,101,105,108,105,110,103,59,1,8969,111,4,2,117,119,4856,4869,98,108,101,66,114,97,99,107,101,116,59,1,10215,110,4,2,84,86,4876,4887,101,101,86,101,99,116,111,114,59,1,10589,101,99,116,111,114,4,2,59,66,4898,4900,1,8642,97,114,59,1,10581,108,111,111,114,59,1,8971,4,2,101,114,4918,4944,101,4,3,59,65,86,4927,4929,4936,1,8866,114,114,111,119,59,1,8614,101,99,116,111,114,59,1,10587,105,97,110,103,108,101,4,3,59,66,69,4958,4960,4965,1,8883,97,114,59,1,10704,113,117,97,108,59,1,8885,112,4,3,68,84,86,4981,4993,5004,111,119,110,86,101,99,116,111,114,59,1,10575,101,101,86,101,99,116,111,114,59,1,10588,101,99,116,111,114,4,2,59,66,5015,5017,1,8638,97,114,59,1,10580,101,99,116,111,114,4,2,59,66,5033,5035,1,8640,97,114,59,1,10579,114,114,111,119,59,1,8658,4,2,112,117,5053,5057,102,59,1,8477,110,100,73,109,112,108,105,101,115,59,1,10608,105,103,104,116,97,114,114,111,119,59,1,8667,4,2,99,104,5087,5091,114,59,1,8475,59,1,8625,108,101,68,101,108,97,121,101,100,59,1,10740,4,13,72,79,97,99,102,104,105,109,111,113,115,116,117,5134,5150,5157,5164,5198,5203,5259,5265,5277,5283,5374,5380,5385,4,2,67,99,5140,5146,72,99,121,59,1,1065,121,59,1,1064,70,84,99,121,59,1,1068,99,117,116,101,59,1,346,4,5,59,97,101,105,121,5176,5178,5184,5190,5195,1,10940,114,111,110,59,1,352,100,105,108,59,1,350,114,99,59,1,348,59,1,1057,114,59,3,55349,56598,111,114,116,4,4,68,76,82,85,5216,5227,5238,5250,111,119,110,65,114,114,111,119,59,1,8595,101,102,116,65,114,114,111,119,59,1,8592,105,103,104,116,65,114,114,111,119,59,1,8594,112,65,114,114,111,119,59,1,8593,103,109,97,59,1,931,97,108,108,67,105,114,99,108,101,59,1,8728,112,102,59,3,55349,56650,4,2,114,117,5289,5293,116,59,1,8730,97,114,101,4,4,59,73,83,85,5306,5308,5322,5367,1,9633,110,116,101,114,115,101,99,116,105,111,110,59,1,8851,117,4,2,98,112,5329,5347,115,101,116,4,2,59,69,5338,5340,1,8847,113,117,97,108,59,1,8849,101,114,115,101,116,4,2,59,69,5358,5360,1,8848,113,117,97,108,59,1,8850,110,105,111,110,59,1,8852,99,114,59,3,55349,56494,97,114,59,1,8902,4,4,98,99,109,112,5395,5420,5475,5478,4,2,59,115,5401,5403,1,8912,101,116,4,2,59,69,5411,5413,1,8912,113,117,97,108,59,1,8838,4,2,99,104,5426,5468,101,101,100,115,4,4,59,69,83,84,5440,5442,5449,5461,1,8827,113,117,97,108,59,1,10928,108,97,110,116,69,113,117,97,108,59,1,8829,105,108,100,101,59,1,8831,84,104,97,116,59,1,8715,59,1,8721,4,3,59,101,115,5486,5488,5507,1,8913,114,115,101,116,4,2,59,69,5498,5500,1,8835,113,117,97,108,59,1,8839,101,116,59,1,8913,4,11,72,82,83,97,99,102,104,105,111,114,115,5536,5546,5552,5567,5579,5602,5607,5655,5695,5701,5711,79,82,78,5,222,1,59,5544,1,222,65,68,69,59,1,8482,4,2,72,99,5558,5563,99,121,59,1,1035,121,59,1,1062,4,2,98,117,5573,5576,59,1,9,59,1,932,4,3,97,101,121,5587,5593,5599,114,111,110,59,1,356,100,105,108,59,1,354,59,1,1058,114,59,3,55349,56599,4,2,101,105,5613,5631,4,2,114,116,5619,5627,101,102,111,114,101,59,1,8756,97,59,1,920,4,2,99,110,5637,5647,107,83,112,97,99,101,59,3,8287,8202,83,112,97,99,101,59,1,8201,108,100,101,4,4,59,69,70,84,5668,5670,5677,5688,1,8764,113,117,97,108,59,1,8771,117,108,108,69,113,117,97,108,59,1,8773,105,108,100,101,59,1,8776,112,102,59,3,55349,56651,105,112,108,101,68,111,116,59,1,8411,4,2,99,116,5717,5722,114,59,3,55349,56495,114,111,107,59,1,358,4,14,97,98,99,100,102,103,109,110,111,112,114,115,116,117,5758,5789,5805,5823,5830,5835,5846,5852,5921,5937,6089,6095,6101,6108,4,2,99,114,5764,5774,117,116,101,5,218,1,59,5772,1,218,114,4,2,59,111,5781,5783,1,8607,99,105,114,59,1,10569,114,4,2,99,101,5796,5800,121,59,1,1038,118,101,59,1,364,4,2,105,121,5811,5820,114,99,5,219,1,59,5818,1,219,59,1,1059,98,108,97,99,59,1,368,114,59,3,55349,56600,114,97,118,101,5,217,1,59,5844,1,217,97,99,114,59,1,362,4,2,100,105,5858,5905,101,114,4,2,66,80,5866,5892,4,2,97,114,5872,5876,114,59,1,95,97,99,4,2,101,107,5884,5887,59,1,9183,101,116,59,1,9141,97,114,101,110,116,104,101,115,105,115,59,1,9181,111,110,4,2,59,80,5913,5915,1,8899,108,117,115,59,1,8846,4,2,103,112,5927,5932,111,110,59,1,370,102,59,3,55349,56652,4,8,65,68,69,84,97,100,112,115,5955,5985,5996,6009,6026,6033,6044,6075,114,114,111,119,4,3,59,66,68,5967,5969,5974,1,8593,97,114,59,1,10514,111,119,110,65,114,114,111,119,59,1,8645,111,119,110,65,114,114,111,119,59,1,8597,113,117,105,108,105,98,114,105,117,109,59,1,10606,101,101,4,2,59,65,6017,6019,1,8869,114,114,111,119,59,1,8613,114,114,111,119,59,1,8657,111,119,110,97,114,114,111,119,59,1,8661,101,114,4,2,76,82,6052,6063,101,102,116,65,114,114,111,119,59,1,8598,105,103,104,116,65,114,114,111,119,59,1,8599,105,4,2,59,108,6082,6084,1,978,111,110,59,1,933,105,110,103,59,1,366,99,114,59,3,55349,56496,105,108,100,101,59,1,360,109,108,5,220,1,59,6115,1,220,4,9,68,98,99,100,101,102,111,115,118,6137,6143,6148,6152,6166,6250,6255,6261,6267,97,115,104,59,1,8875,97,114,59,1,10987,121,59,1,1042,97,115,104,4,2,59,108,6161,6163,1,8873,59,1,10982,4,2,101,114,6172,6175,59,1,8897,4,3,98,116,121,6183,6188,6238,97,114,59,1,8214,4,2,59,105,6194,6196,1,8214,99,97,108,4,4,66,76,83,84,6209,6214,6220,6231,97,114,59,1,8739,105,110,101,59,1,124,101,112,97,114,97,116,111,114,59,1,10072,105,108,100,101,59,1,8768,84,104,105,110,83,112,97,99,101,59,1,8202,114,59,3,55349,56601,112,102,59,3,55349,56653,99,114,59,3,55349,56497,100,97,115,104,59,1,8874,4,5,99,101,102,111,115,6286,6292,6298,6303,6309,105,114,99,59,1,372,100,103,101,59,1,8896,114,59,3,55349,56602,112,102,59,3,55349,56654,99,114,59,3,55349,56498,4,4,102,105,111,115,6325,6330,6333,6339,114,59,3,55349,56603,59,1,926,112,102,59,3,55349,56655,99,114,59,3,55349,56499,4,9,65,73,85,97,99,102,111,115,117,6365,6370,6375,6380,6391,6405,6410,6416,6422,99,121,59,1,1071,99,121,59,1,1031,99,121,59,1,1070,99,117,116,101,5,221,1,59,6389,1,221,4,2,105,121,6397,6402,114,99,59,1,374,59,1,1067,114,59,3,55349,56604,112,102,59,3,55349,56656,99,114,59,3,55349,56500,109,108,59,1,376,4,8,72,97,99,100,101,102,111,115,6445,6450,6457,6472,6477,6501,6505,6510,99,121,59,1,1046,99,117,116,101,59,1,377,4,2,97,121,6463,6469,114,111,110,59,1,381,59,1,1047,111,116,59,1,379,4,2,114,116,6483,6497,111,87,105,100,116,104,83,112,97,99,101,59,1,8203,97,59,1,918,114,59,1,8488,112,102,59,1,8484,99,114,59,3,55349,56501,4,16,97,98,99,101,102,103,108,109,110,111,112,114,115,116,117,119,6550,6561,6568,6612,6622,6634,6645,6672,6699,6854,6870,6923,6933,6963,6974,6983,99,117,116,101,5,225,1,59,6559,1,225,114,101,118,101,59,1,259,4,6,59,69,100,105,117,121,6582,6584,6588,6591,6600,6609,1,8766,59,3,8766,819,59,1,8767,114,99,5,226,1,59,6598,1,226,116,101,5,180,1,59,6607,1,180,59,1,1072,108,105,103,5,230,1,59,6620,1,230,4,2,59,114,6628,6630,1,8289,59,3,55349,56606,114,97,118,101,5,224,1,59,6643,1,224,4,2,101,112,6651,6667,4,2,102,112,6657,6663,115,121,109,59,1,8501,104,59,1,8501,104,97,59,1,945,4,2,97,112,6678,6692,4,2,99,108,6684,6688,114,59,1,257,103,59,1,10815,5,38,1,59,6697,1,38,4,2,100,103,6705,6737,4,5,59,97,100,115,118,6717,6719,6724,6727,6734,1,8743,110,100,59,1,10837,59,1,10844,108,111,112,101,59,1,10840,59,1,10842,4,7,59,101,108,109,114,115,122,6753,6755,6758,6762,6814,6835,6848,1,8736,59,1,10660,101,59,1,8736,115,100,4,2,59,97,6770,6772,1,8737,4,8,97,98,99,100,101,102,103,104,6790,6793,6796,6799,6802,6805,6808,6811,59,1,10664,59,1,10665,59,1,10666,59,1,10667,59,1,10668,59,1,10669,59,1,10670,59,1,10671,116,4,2,59,118,6821,6823,1,8735,98,4,2,59,100,6830,6832,1,8894,59,1,10653,4,2,112,116,6841,6845,104,59,1,8738,59,1,197,97,114,114,59,1,9084,4,2,103,112,6860,6865,111,110,59,1,261,102,59,3,55349,56658,4,7,59,69,97,101,105,111,112,6886,6888,6891,6897,6900,6904,6908,1,8776,59,1,10864,99,105,114,59,1,10863,59,1,8778,100,59,1,8779,115,59,1,39,114,111,120,4,2,59,101,6917,6919,1,8776,113,59,1,8778,105,110,103,5,229,1,59,6931,1,229,4,3,99,116,121,6941,6946,6949,114,59,3,55349,56502,59,1,42,109,112,4,2,59,101,6957,6959,1,8776,113,59,1,8781,105,108,100,101,5,227,1,59,6972,1,227,109,108,5,228,1,59,6981,1,228,4,2,99,105,6989,6997,111,110,105,110,116,59,1,8755,110,116,59,1,10769,4,16,78,97,98,99,100,101,102,105,107,108,110,111,112,114,115,117,7036,7041,7119,7135,7149,7155,7219,7224,7347,7354,7463,7489,7786,7793,7814,7866,111,116,59,1,10989,4,2,99,114,7047,7094,107,4,4,99,101,112,115,7058,7064,7073,7080,111,110,103,59,1,8780,112,115,105,108,111,110,59,1,1014,114,105,109,101,59,1,8245,105,109,4,2,59,101,7088,7090,1,8765,113,59,1,8909,4,2,118,119,7100,7105,101,101,59,1,8893,101,100,4,2,59,103,7113,7115,1,8965,101,59,1,8965,114,107,4,2,59,116,7127,7129,1,9141,98,114,107,59,1,9142,4,2,111,121,7141,7146,110,103,59,1,8780,59,1,1073,113,117,111,59,1,8222,4,5,99,109,112,114,116,7167,7181,7188,7193,7199,97,117,115,4,2,59,101,7176,7178,1,8757,59,1,8757,112,116,121,118,59,1,10672,115,105,59,1,1014,110,111,117,59,1,8492,4,3,97,104,119,7207,7210,7213,59,1,946,59,1,8502,101,101,110,59,1,8812,114,59,3,55349,56607,103,4,7,99,111,115,116,117,118,119,7241,7262,7288,7305,7328,7335,7340,4,3,97,105,117,7249,7253,7258,112,59,1,8898,114,99,59,1,9711,112,59,1,8899,4,3,100,112,116,7270,7275,7281,111,116,59,1,10752,108,117,115,59,1,10753,105,109,101,115,59,1,10754,4,2,113,116,7294,7300,99,117,112,59,1,10758,97,114,59,1,9733,114,105,97,110,103,108,101,4,2,100,117,7318,7324,111,119,110,59,1,9661,112,59,1,9651,112,108,117,115,59,1,10756,101,101,59,1,8897,101,100,103,101,59,1,8896,97,114,111,119,59,1,10509,4,3,97,107,111,7362,7436,7458,4,2,99,110,7368,7432,107,4,3,108,115,116,7377,7386,7394,111,122,101,110,103,101,59,1,10731,113,117,97,114,101,59,1,9642,114,105,97,110,103,108,101,4,4,59,100,108,114,7411,7413,7419,7425,1,9652,111,119,110,59,1,9662,101,102,116,59,1,9666,105,103,104,116,59,1,9656,107,59,1,9251,4,2,49,51,7442,7454,4,2,50,52,7448,7451,59,1,9618,59,1,9617,52,59,1,9619,99,107,59,1,9608,4,2,101,111,7469,7485,4,2,59,113,7475,7478,3,61,8421,117,105,118,59,3,8801,8421,116,59,1,8976,4,4,112,116,119,120,7499,7504,7517,7523,102,59,3,55349,56659,4,2,59,116,7510,7512,1,8869,111,109,59,1,8869,116,105,101,59,1,8904,4,12,68,72,85,86,98,100,104,109,112,116,117,118,7549,7571,7597,7619,7655,7660,7682,7708,7715,7721,7728,7750,4,4,76,82,108,114,7559,7562,7565,7568,59,1,9559,59,1,9556,59,1,9558,59,1,9555,4,5,59,68,85,100,117,7583,7585,7588,7591,7594,1,9552,59,1,9574,59,1,9577,59,1,9572,59,1,9575,4,4,76,82,108,114,7607,7610,7613,7616,59,1,9565,59,1,9562,59,1,9564,59,1,9561,4,7,59,72,76,82,104,108,114,7635,7637,7640,7643,7646,7649,7652,1,9553,59,1,9580,59,1,9571,59,1,9568,59,1,9579,59,1,9570,59,1,9567,111,120,59,1,10697,4,4,76,82,108,114,7670,7673,7676,7679,59,1,9557,59,1,9554,59,1,9488,59,1,9484,4,5,59,68,85,100,117,7694,7696,7699,7702,7705,1,9472,59,1,9573,59,1,9576,59,1,9516,59,1,9524,105,110,117,115,59,1,8863,108,117,115,59,1,8862,105,109,101,115,59,1,8864,4,4,76,82,108,114,7738,7741,7744,7747,59,1,9563,59,1,9560,59,1,9496,59,1,9492,4,7,59,72,76,82,104,108,114,7766,7768,7771,7774,7777,7780,7783,1,9474,59,1,9578,59,1,9569,59,1,9566,59,1,9532,59,1,9508,59,1,9500,114,105,109,101,59,1,8245,4,2,101,118,7799,7804,118,101,59,1,728,98,97,114,5,166,1,59,7812,1,166,4,4,99,101,105,111,7824,7829,7834,7846,114,59,3,55349,56503,109,105,59,1,8271,109,4,2,59,101,7841,7843,1,8765,59,1,8909,108,4,3,59,98,104,7855,7857,7860,1,92,59,1,10693,115,117,98,59,1,10184,4,2,108,109,7872,7885,108,4,2,59,101,7879,7881,1,8226,116,59,1,8226,112,4,3,59,69,101,7894,7896,7899,1,8782,59,1,10926,4,2,59,113,7905,7907,1,8783,59,1,8783,4,15,97,99,100,101,102,104,105,108,111,114,115,116,117,119,121,7942,8021,8075,8080,8121,8126,8157,8279,8295,8430,8446,8485,8491,8707,8726,4,3,99,112,114,7950,7956,8007,117,116,101,59,1,263,4,6,59,97,98,99,100,115,7970,7972,7977,7984,7998,8003,1,8745,110,100,59,1,10820,114,99,117,112,59,1,10825,4,2,97,117,7990,7994,112,59,1,10827,112,59,1,10823,111,116,59,1,10816,59,3,8745,65024,4,2,101,111,8013,8017,116,59,1,8257,110,59,1,711,4,4,97,101,105,117,8031,8046,8056,8061,4,2,112,114,8037,8041,115,59,1,10829,111,110,59,1,269,100,105,108,5,231,1,59,8054,1,231,114,99,59,1,265,112,115,4,2,59,115,8069,8071,1,10828,109,59,1,10832,111,116,59,1,267,4,3,100,109,110,8088,8097,8104,105,108,5,184,1,59,8095,1,184,112,116,121,118,59,1,10674,116,5,162,2,59,101,8112,8114,1,162,114,100,111,116,59,1,183,114,59,3,55349,56608,4,3,99,101,105,8134,8138,8154,121,59,1,1095,99,107,4,2,59,109,8146,8148,1,10003,97,114,107,59,1,10003,59,1,967,114,4,7,59,69,99,101,102,109,115,8174,8176,8179,8258,8261,8268,8273,1,9675,59,1,10691,4,3,59,101,108,8187,8189,8193,1,710,113,59,1,8791,101,4,2,97,100,8200,8223,114,114,111,119,4,2,108,114,8210,8216,101,102,116,59,1,8634,105,103,104,116,59,1,8635,4,5,82,83,97,99,100,8235,8238,8241,8246,8252,59,1,174,59,1,9416,115,116,59,1,8859,105,114,99,59,1,8858,97,115,104,59,1,8861,59,1,8791,110,105,110,116,59,1,10768,105,100,59,1,10991,99,105,114,59,1,10690,117,98,115,4,2,59,117,8288,8290,1,9827,105,116,59,1,9827,4,4,108,109,110,112,8305,8326,8376,8400,111,110,4,2,59,101,8313,8315,1,58,4,2,59,113,8321,8323,1,8788,59,1,8788,4,2,109,112,8332,8344,97,4,2,59,116,8339,8341,1,44,59,1,64,4,3,59,102,108,8352,8354,8358,1,8705,110,59,1,8728,101,4,2,109,120,8365,8371,101,110,116,59,1,8705,101,115,59,1,8450,4,2,103,105,8382,8395,4,2,59,100,8388,8390,1,8773,111,116,59,1,10861,110,116,59,1,8750,4,3,102,114,121,8408,8412,8417,59,3,55349,56660,111,100,59,1,8720,5,169,2,59,115,8424,8426,1,169,114,59,1,8471,4,2,97,111,8436,8441,114,114,59,1,8629,115,115,59,1,10007,4,2,99,117,8452,8457,114,59,3,55349,56504,4,2,98,112,8463,8474,4,2,59,101,8469,8471,1,10959,59,1,10961,4,2,59,101,8480,8482,1,10960,59,1,10962,100,111,116,59,1,8943,4,7,100,101,108,112,114,118,119,8507,8522,8536,8550,8600,8697,8702,97,114,114,4,2,108,114,8516,8519,59,1,10552,59,1,10549,4,2,112,115,8528,8532,114,59,1,8926,99,59,1,8927,97,114,114,4,2,59,112,8545,8547,1,8630,59,1,10557,4,6,59,98,99,100,111,115,8564,8566,8573,8587,8592,8596,1,8746,114,99,97,112,59,1,10824,4,2,97,117,8579,8583,112,59,1,10822,112,59,1,10826,111,116,59,1,8845,114,59,1,10821,59,3,8746,65024,4,4,97,108,114,118,8610,8623,8663,8672,114,114,4,2,59,109,8618,8620,1,8631,59,1,10556,121,4,3,101,118,119,8632,8651,8656,113,4,2,112,115,8639,8645,114,101,99,59,1,8926,117,99,99,59,1,8927,101,101,59,1,8910,101,100,103,101,59,1,8911,101,110,5,164,1,59,8670,1,164,101,97,114,114,111,119,4,2,108,114,8684,8690,101,102,116,59,1,8630,105,103,104,116,59,1,8631,101,101,59,1,8910,101,100,59,1,8911,4,2,99,105,8713,8721,111,110,105,110,116,59,1,8754,110,116,59,1,8753,108,99,116,121,59,1,9005,4,19,65,72,97,98,99,100,101,102,104,105,106,108,111,114,115,116,117,119,122,8773,8778,8783,8821,8839,8854,8887,8914,8930,8944,9036,9041,9058,9197,9227,9258,9281,9297,9305,114,114,59,1,8659,97,114,59,1,10597,4,4,103,108,114,115,8793,8799,8805,8809,103,101,114,59,1,8224,101,116,104,59,1,8504,114,59,1,8595,104,4,2,59,118,8816,8818,1,8208,59,1,8867,4,2,107,108,8827,8834,97,114,111,119,59,1,10511,97,99,59,1,733,4,2,97,121,8845,8851,114,111,110,59,1,271,59,1,1076,4,3,59,97,111,8862,8864,8880,1,8518,4,2,103,114,8870,8876,103,101,114,59,1,8225,114,59,1,8650,116,115,101,113,59,1,10871,4,3,103,108,109,8895,8902,8907,5,176,1,59,8900,1,176,116,97,59,1,948,112,116,121,118,59,1,10673,4,2,105,114,8920,8926,115,104,116,59,1,10623,59,3,55349,56609,97,114,4,2,108,114,8938,8941,59,1,8643,59,1,8642,4,5,97,101,103,115,118,8956,8986,8989,8996,9001,109,4,3,59,111,115,8965,8967,8983,1,8900,110,100,4,2,59,115,8975,8977,1,8900,117,105,116,59,1,9830,59,1,9830,59,1,168,97,109,109,97,59,1,989,105,110,59,1,8946,4,3,59,105,111,9009,9011,9031,1,247,100,101,5,247,2,59,111,9020,9022,1,247,110,116,105,109,101,115,59,1,8903,110,120,59,1,8903,99,121,59,1,1106,99,4,2,111,114,9048,9053,114,110,59,1,8990,111,112,59,1,8973,4,5,108,112,116,117,119,9070,9076,9081,9130,9144,108,97,114,59,1,36,102,59,3,55349,56661,4,5,59,101,109,112,115,9093,9095,9109,9116,9122,1,729,113,4,2,59,100,9102,9104,1,8784,111,116,59,1,8785,105,110,117,115,59,1,8760,108,117,115,59,1,8724,113,117,97,114,101,59,1,8865,98,108,101,98,97,114,119,101,100,103,101,59,1,8966,110,4,3,97,100,104,9153,9160,9172,114,114,111,119,59,1,8595,111,119,110,97,114,114,111,119,115,59,1,8650,97,114,112,111,111,110,4,2,108,114,9184,9190,101,102,116,59,1,8643,105,103,104,116,59,1,8642,4,2,98,99,9203,9211,107,97,114,111,119,59,1,10512,4,2,111,114,9217,9222,114,110,59,1,8991,111,112,59,1,8972,4,3,99,111,116,9235,9248,9252,4,2,114,121,9241,9245,59,3,55349,56505,59,1,1109,108,59,1,10742,114,111,107,59,1,273,4,2,100,114,9264,9269,111,116,59,1,8945,105,4,2,59,102,9276,9278,1,9663,59,1,9662,4,2,97,104,9287,9292,114,114,59,1,8693,97,114,59,1,10607,97,110,103,108,101,59,1,10662,4,2,99,105,9311,9315,121,59,1,1119,103,114,97,114,114,59,1,10239,4,18,68,97,99,100,101,102,103,108,109,110,111,112,113,114,115,116,117,120,9361,9376,9398,9439,9444,9447,9462,9495,9531,9585,9598,9614,9659,9755,9771,9792,9808,9826,4,2,68,111,9367,9372,111,116,59,1,10871,116,59,1,8785,4,2,99,115,9382,9392,117,116,101,5,233,1,59,9390,1,233,116,101,114,59,1,10862,4,4,97,105,111,121,9408,9414,9430,9436,114,111,110,59,1,283,114,4,2,59,99,9421,9423,1,8790,5,234,1,59,9428,1,234,108,111,110,59,1,8789,59,1,1101,111,116,59,1,279,59,1,8519,4,2,68,114,9453,9458,111,116,59,1,8786,59,3,55349,56610,4,3,59,114,115,9470,9472,9482,1,10906,97,118,101,5,232,1,59,9480,1,232,4,2,59,100,9488,9490,1,10902,111,116,59,1,10904,4,4,59,105,108,115,9505,9507,9515,9518,1,10905,110,116,101,114,115,59,1,9191,59,1,8467,4,2,59,100,9524,9526,1,10901,111,116,59,1,10903,4,3,97,112,115,9539,9544,9564,99,114,59,1,275,116,121,4,3,59,115,118,9554,9556,9561,1,8709,101,116,59,1,8709,59,1,8709,112,4,2,49,59,9571,9583,4,2,51,52,9577,9580,59,1,8196,59,1,8197,1,8195,4,2,103,115,9591,9594,59,1,331,112,59,1,8194,4,2,103,112,9604,9609,111,110,59,1,281,102,59,3,55349,56662,4,3,97,108,115,9622,9635,9640,114,4,2,59,115,9629,9631,1,8917,108,59,1,10723,117,115,59,1,10865,105,4,3,59,108,118,9649,9651,9656,1,949,111,110,59,1,949,59,1,1013,4,4,99,115,117,118,9669,9686,9716,9747,4,2,105,111,9675,9680,114,99,59,1,8790,108,111,110,59,1,8789,4,2,105,108,9692,9696,109,59,1,8770,97,110,116,4,2,103,108,9705,9710,116,114,59,1,10902,101,115,115,59,1,10901,4,3,97,101,105,9724,9729,9734,108,115,59,1,61,115,116,59,1,8799,118,4,2,59,68,9741,9743,1,8801,68,59,1,10872,112,97,114,115,108,59,1,10725,4,2,68,97,9761,9766,111,116,59,1,8787,114,114,59,1,10609,4,3,99,100,105,9779,9783,9788,114,59,1,8495,111,116,59,1,8784,109,59,1,8770,4,2,97,104,9798,9801,59,1,951,5,240,1,59,9806,1,240,4,2,109,114,9814,9822,108,5,235,1,59,9820,1,235,111,59,1,8364,4,3,99,105,112,9834,9838,9843,108,59,1,33,115,116,59,1,8707,4,2,101,111,9849,9859,99,116,97,116,105,111,110,59,1,8496,110,101,110,116,105,97,108,101,59,1,8519,4,12,97,99,101,102,105,106,108,110,111,112,114,115,9896,9910,9914,9921,9954,9960,9967,9989,9994,10027,10036,10164,108,108,105,110,103,100,111,116,115,101,113,59,1,8786,121,59,1,1092,109,97,108,101,59,1,9792,4,3,105,108,114,9929,9935,9950,108,105,103,59,1,64259,4,2,105,108,9941,9945,103,59,1,64256,105,103,59,1,64260,59,3,55349,56611,108,105,103,59,1,64257,108,105,103,59,3,102,106,4,3,97,108,116,9975,9979,9984,116,59,1,9837,105,103,59,1,64258,110,115,59,1,9649,111,102,59,1,402,4,2,112,114,1e4,10005,102,59,3,55349,56663,4,2,97,107,10011,10016,108,108,59,1,8704,4,2,59,118,10022,10024,1,8916,59,1,10969,97,114,116,105,110,116,59,1,10765,4,2,97,111,10042,10159,4,2,99,115,10048,10155,4,6,49,50,51,52,53,55,10062,10102,10114,10135,10139,10151,4,6,50,51,52,53,54,56,10076,10083,10086,10093,10096,10099,5,189,1,59,10081,1,189,59,1,8531,5,188,1,59,10091,1,188,59,1,8533,59,1,8537,59,1,8539,4,2,51,53,10108,10111,59,1,8532,59,1,8534,4,3,52,53,56,10122,10129,10132,5,190,1,59,10127,1,190,59,1,8535,59,1,8540,53,59,1,8536,4,2,54,56,10145,10148,59,1,8538,59,1,8541,56,59,1,8542,108,59,1,8260,119,110,59,1,8994,99,114,59,3,55349,56507,4,17,69,97,98,99,100,101,102,103,105,106,108,110,111,114,115,116,118,10206,10217,10247,10254,10268,10273,10358,10363,10374,10380,10385,10406,10458,10464,10470,10497,10610,4,2,59,108,10212,10214,1,8807,59,1,10892,4,3,99,109,112,10225,10231,10244,117,116,101,59,1,501,109,97,4,2,59,100,10239,10241,1,947,59,1,989,59,1,10886,114,101,118,101,59,1,287,4,2,105,121,10260,10265,114,99,59,1,285,59,1,1075,111,116,59,1,289,4,4,59,108,113,115,10283,10285,10288,10308,1,8805,59,1,8923,4,3,59,113,115,10296,10298,10301,1,8805,59,1,8807,108,97,110,116,59,1,10878,4,4,59,99,100,108,10318,10320,10324,10345,1,10878,99,59,1,10921,111,116,4,2,59,111,10332,10334,1,10880,4,2,59,108,10340,10342,1,10882,59,1,10884,4,2,59,101,10351,10354,3,8923,65024,115,59,1,10900,114,59,3,55349,56612,4,2,59,103,10369,10371,1,8811,59,1,8921,109,101,108,59,1,8503,99,121,59,1,1107,4,4,59,69,97,106,10395,10397,10400,10403,1,8823,59,1,10898,59,1,10917,59,1,10916,4,4,69,97,101,115,10416,10419,10434,10453,59,1,8809,112,4,2,59,112,10426,10428,1,10890,114,111,120,59,1,10890,4,2,59,113,10440,10442,1,10888,4,2,59,113,10448,10450,1,10888,59,1,8809,105,109,59,1,8935,112,102,59,3,55349,56664,97,118,101,59,1,96,4,2,99,105,10476,10480,114,59,1,8458,109,4,3,59,101,108,10489,10491,10494,1,8819,59,1,10894,59,1,10896,5,62,6,59,99,100,108,113,114,10512,10514,10527,10532,10538,10545,1,62,4,2,99,105,10520,10523,59,1,10919,114,59,1,10874,111,116,59,1,8919,80,97,114,59,1,10645,117,101,115,116,59,1,10876,4,5,97,100,101,108,115,10557,10574,10579,10599,10605,4,2,112,114,10563,10570,112,114,111,120,59,1,10886,114,59,1,10616,111,116,59,1,8919,113,4,2,108,113,10586,10592,101,115,115,59,1,8923,108,101,115,115,59,1,10892,101,115,115,59,1,8823,105,109,59,1,8819,4,2,101,110,10616,10626,114,116,110,101,113,113,59,3,8809,65024,69,59,3,8809,65024,4,10,65,97,98,99,101,102,107,111,115,121,10653,10658,10713,10718,10724,10760,10765,10786,10850,10875,114,114,59,1,8660,4,4,105,108,109,114,10668,10674,10678,10684,114,115,112,59,1,8202,102,59,1,189,105,108,116,59,1,8459,4,2,100,114,10690,10695,99,121,59,1,1098,4,3,59,99,119,10703,10705,10710,1,8596,105,114,59,1,10568,59,1,8621,97,114,59,1,8463,105,114,99,59,1,293,4,3,97,108,114,10732,10748,10754,114,116,115,4,2,59,117,10741,10743,1,9829,105,116,59,1,9829,108,105,112,59,1,8230,99,111,110,59,1,8889,114,59,3,55349,56613,115,4,2,101,119,10772,10779,97,114,111,119,59,1,10533,97,114,111,119,59,1,10534,4,5,97,109,111,112,114,10798,10803,10809,10839,10844,114,114,59,1,8703,116,104,116,59,1,8763,107,4,2,108,114,10816,10827,101,102,116,97,114,114,111,119,59,1,8617,105,103,104,116,97,114,114,111,119,59,1,8618,102,59,3,55349,56665,98,97,114,59,1,8213,4,3,99,108,116,10858,10863,10869,114,59,3,55349,56509,97,115,104,59,1,8463,114,111,107,59,1,295,4,2,98,112,10881,10887,117,108,108,59,1,8259,104,101,110,59,1,8208,4,15,97,99,101,102,103,105,106,109,110,111,112,113,115,116,117,10925,10936,10958,10977,10990,11001,11039,11045,11101,11192,11220,11226,11237,11285,11299,99,117,116,101,5,237,1,59,10934,1,237,4,3,59,105,121,10944,10946,10955,1,8291,114,99,5,238,1,59,10953,1,238,59,1,1080,4,2,99,120,10964,10968,121,59,1,1077,99,108,5,161,1,59,10975,1,161,4,2,102,114,10983,10986,59,1,8660,59,3,55349,56614,114,97,118,101,5,236,1,59,10999,1,236,4,4,59,105,110,111,11011,11013,11028,11034,1,8520,4,2,105,110,11019,11024,110,116,59,1,10764,116,59,1,8749,102,105,110,59,1,10716,116,97,59,1,8489,108,105,103,59,1,307,4,3,97,111,112,11053,11092,11096,4,3,99,103,116,11061,11065,11088,114,59,1,299,4,3,101,108,112,11073,11076,11082,59,1,8465,105,110,101,59,1,8464,97,114,116,59,1,8465,104,59,1,305,102,59,1,8887,101,100,59,1,437,4,5,59,99,102,111,116,11113,11115,11121,11136,11142,1,8712,97,114,101,59,1,8453,105,110,4,2,59,116,11129,11131,1,8734,105,101,59,1,10717,100,111,116,59,1,305,4,5,59,99,101,108,112,11154,11156,11161,11179,11186,1,8747,97,108,59,1,8890,4,2,103,114,11167,11173,101,114,115,59,1,8484,99,97,108,59,1,8890,97,114,104,107,59,1,10775,114,111,100,59,1,10812,4,4,99,103,112,116,11202,11206,11211,11216,121,59,1,1105,111,110,59,1,303,102,59,3,55349,56666,97,59,1,953,114,111,100,59,1,10812,117,101,115,116,5,191,1,59,11235,1,191,4,2,99,105,11243,11248,114,59,3,55349,56510,110,4,5,59,69,100,115,118,11261,11263,11266,11271,11282,1,8712,59,1,8953,111,116,59,1,8949,4,2,59,118,11277,11279,1,8948,59,1,8947,59,1,8712,4,2,59,105,11291,11293,1,8290,108,100,101,59,1,297,4,2,107,109,11305,11310,99,121,59,1,1110,108,5,239,1,59,11316,1,239,4,6,99,102,109,111,115,117,11332,11346,11351,11357,11363,11380,4,2,105,121,11338,11343,114,99,59,1,309,59,1,1081,114,59,3,55349,56615,97,116,104,59,1,567,112,102,59,3,55349,56667,4,2,99,101,11369,11374,114,59,3,55349,56511,114,99,121,59,1,1112,107,99,121,59,1,1108,4,8,97,99,102,103,104,106,111,115,11404,11418,11433,11438,11445,11450,11455,11461,112,112,97,4,2,59,118,11413,11415,1,954,59,1,1008,4,2,101,121,11424,11430,100,105,108,59,1,311,59,1,1082,114,59,3,55349,56616,114,101,101,110,59,1,312,99,121,59,1,1093,99,121,59,1,1116,112,102,59,3,55349,56668,99,114,59,3,55349,56512,4,23,65,66,69,72,97,98,99,100,101,102,103,104,106,108,109,110,111,112,114,115,116,117,118,11515,11538,11544,11555,11560,11721,11780,11818,11868,12136,12160,12171,12203,12208,12246,12275,12327,12509,12523,12569,12641,12732,12752,4,3,97,114,116,11523,11528,11532,114,114,59,1,8666,114,59,1,8656,97,105,108,59,1,10523,97,114,114,59,1,10510,4,2,59,103,11550,11552,1,8806,59,1,10891,97,114,59,1,10594,4,9,99,101,103,109,110,112,113,114,116,11580,11586,11594,11600,11606,11624,11627,11636,11694,117,116,101,59,1,314,109,112,116,121,118,59,1,10676,114,97,110,59,1,8466,98,100,97,59,1,955,103,4,3,59,100,108,11615,11617,11620,1,10216,59,1,10641,101,59,1,10216,59,1,10885,117,111,5,171,1,59,11634,1,171,114,4,8,59,98,102,104,108,112,115,116,11655,11657,11669,11673,11677,11681,11685,11690,1,8592,4,2,59,102,11663,11665,1,8676,115,59,1,10527,115,59,1,10525,107,59,1,8617,112,59,1,8619,108,59,1,10553,105,109,59,1,10611,108,59,1,8610,4,3,59,97,101,11702,11704,11709,1,10923,105,108,59,1,10521,4,2,59,115,11715,11717,1,10925,59,3,10925,65024,4,3,97,98,114,11729,11734,11739,114,114,59,1,10508,114,107,59,1,10098,4,2,97,107,11745,11758,99,4,2,101,107,11752,11755,59,1,123,59,1,91,4,2,101,115,11764,11767,59,1,10635,108,4,2,100,117,11774,11777,59,1,10639,59,1,10637,4,4,97,101,117,121,11790,11796,11811,11815,114,111,110,59,1,318,4,2,100,105,11802,11807,105,108,59,1,316,108,59,1,8968,98,59,1,123,59,1,1083,4,4,99,113,114,115,11828,11832,11845,11864,97,59,1,10550,117,111,4,2,59,114,11840,11842,1,8220,59,1,8222,4,2,100,117,11851,11857,104,97,114,59,1,10599,115,104,97,114,59,1,10571,104,59,1,8626,4,5,59,102,103,113,115,11880,11882,12008,12011,12031,1,8804,116,4,5,97,104,108,114,116,11895,11913,11935,11947,11996,114,114,111,119,4,2,59,116,11905,11907,1,8592,97,105,108,59,1,8610,97,114,112,111,111,110,4,2,100,117,11925,11931,111,119,110,59,1,8637,112,59,1,8636,101,102,116,97,114,114,111,119,115,59,1,8647,105,103,104,116,4,3,97,104,115,11959,11974,11984,114,114,111,119,4,2,59,115,11969,11971,1,8596,59,1,8646,97,114,112,111,111,110,115,59,1,8651,113,117,105,103,97,114,114,111,119,59,1,8621,104,114,101,101,116,105,109,101,115,59,1,8907,59,1,8922,4,3,59,113,115,12019,12021,12024,1,8804,59,1,8806,108,97,110,116,59,1,10877,4,5,59,99,100,103,115,12043,12045,12049,12070,12083,1,10877,99,59,1,10920,111,116,4,2,59,111,12057,12059,1,10879,4,2,59,114,12065,12067,1,10881,59,1,10883,4,2,59,101,12076,12079,3,8922,65024,115,59,1,10899,4,5,97,100,101,103,115,12095,12103,12108,12126,12131,112,112,114,111,120,59,1,10885,111,116,59,1,8918,113,4,2,103,113,12115,12120,116,114,59,1,8922,103,116,114,59,1,10891,116,114,59,1,8822,105,109,59,1,8818,4,3,105,108,114,12144,12150,12156,115,104,116,59,1,10620,111,111,114,59,1,8970,59,3,55349,56617,4,2,59,69,12166,12168,1,8822,59,1,10897,4,2,97,98,12177,12198,114,4,2,100,117,12184,12187,59,1,8637,4,2,59,108,12193,12195,1,8636,59,1,10602,108,107,59,1,9604,99,121,59,1,1113,4,5,59,97,99,104,116,12220,12222,12227,12235,12241,1,8810,114,114,59,1,8647,111,114,110,101,114,59,1,8990,97,114,100,59,1,10603,114,105,59,1,9722,4,2,105,111,12252,12258,100,111,116,59,1,320,117,115,116,4,2,59,97,12267,12269,1,9136,99,104,101,59,1,9136,4,4,69,97,101,115,12285,12288,12303,12322,59,1,8808,112,4,2,59,112,12295,12297,1,10889,114,111,120,59,1,10889,4,2,59,113,12309,12311,1,10887,4,2,59,113,12317,12319,1,10887,59,1,8808,105,109,59,1,8934,4,8,97,98,110,111,112,116,119,122,12345,12359,12364,12421,12446,12467,12474,12490,4,2,110,114,12351,12355,103,59,1,10220,114,59,1,8701,114,107,59,1,10214,103,4,3,108,109,114,12373,12401,12409,101,102,116,4,2,97,114,12382,12389,114,114,111,119,59,1,10229,105,103,104,116,97,114,114,111,119,59,1,10231,97,112,115,116,111,59,1,10236,105,103,104,116,97,114,114,111,119,59,1,10230,112,97,114,114,111,119,4,2,108,114,12433,12439,101,102,116,59,1,8619,105,103,104,116,59,1,8620,4,3,97,102,108,12454,12458,12462,114,59,1,10629,59,3,55349,56669,117,115,59,1,10797,105,109,101,115,59,1,10804,4,2,97,98,12480,12485,115,116,59,1,8727,97,114,59,1,95,4,3,59,101,102,12498,12500,12506,1,9674,110,103,101,59,1,9674,59,1,10731,97,114,4,2,59,108,12517,12519,1,40,116,59,1,10643,4,5,97,99,104,109,116,12535,12540,12548,12561,12564,114,114,59,1,8646,111,114,110,101,114,59,1,8991,97,114,4,2,59,100,12556,12558,1,8651,59,1,10605,59,1,8206,114,105,59,1,8895,4,6,97,99,104,105,113,116,12583,12589,12594,12597,12614,12635,113,117,111,59,1,8249,114,59,3,55349,56513,59,1,8624,109,4,3,59,101,103,12606,12608,12611,1,8818,59,1,10893,59,1,10895,4,2,98,117,12620,12623,59,1,91,111,4,2,59,114,12630,12632,1,8216,59,1,8218,114,111,107,59,1,322,5,60,8,59,99,100,104,105,108,113,114,12660,12662,12675,12680,12686,12692,12698,12705,1,60,4,2,99,105,12668,12671,59,1,10918,114,59,1,10873,111,116,59,1,8918,114,101,101,59,1,8907,109,101,115,59,1,8905,97,114,114,59,1,10614,117,101,115,116,59,1,10875,4,2,80,105,12711,12716,97,114,59,1,10646,4,3,59,101,102,12724,12726,12729,1,9667,59,1,8884,59,1,9666,114,4,2,100,117,12739,12746,115,104,97,114,59,1,10570,104,97,114,59,1,10598,4,2,101,110,12758,12768,114,116,110,101,113,113,59,3,8808,65024,69,59,3,8808,65024,4,14,68,97,99,100,101,102,104,105,108,110,111,112,115,117,12803,12809,12893,12908,12914,12928,12933,12937,13011,13025,13032,13049,13052,13069,68,111,116,59,1,8762,4,4,99,108,112,114,12819,12827,12849,12887,114,5,175,1,59,12825,1,175,4,2,101,116,12833,12836,59,1,9794,4,2,59,101,12842,12844,1,10016,115,101,59,1,10016,4,2,59,115,12855,12857,1,8614,116,111,4,4,59,100,108,117,12869,12871,12877,12883,1,8614,111,119,110,59,1,8615,101,102,116,59,1,8612,112,59,1,8613,107,101,114,59,1,9646,4,2,111,121,12899,12905,109,109,97,59,1,10793,59,1,1084,97,115,104,59,1,8212,97,115,117,114,101,100,97,110,103,108,101,59,1,8737,114,59,3,55349,56618,111,59,1,8487,4,3,99,100,110,12945,12954,12985,114,111,5,181,1,59,12952,1,181,4,4,59,97,99,100,12964,12966,12971,12976,1,8739,115,116,59,1,42,105,114,59,1,10992,111,116,5,183,1,59,12983,1,183,117,115,4,3,59,98,100,12995,12997,13e3,1,8722,59,1,8863,4,2,59,117,13006,13008,1,8760,59,1,10794,4,2,99,100,13017,13021,112,59,1,10971,114,59,1,8230,112,108,117,115,59,1,8723,4,2,100,112,13038,13044,101,108,115,59,1,8871,102,59,3,55349,56670,59,1,8723,4,2,99,116,13058,13063,114,59,3,55349,56514,112,111,115,59,1,8766,4,3,59,108,109,13077,13079,13087,1,956,116,105,109,97,112,59,1,8888,97,112,59,1,8888,4,24,71,76,82,86,97,98,99,100,101,102,103,104,105,106,108,109,111,112,114,115,116,117,118,119,13142,13165,13217,13229,13247,13330,13359,13414,13420,13508,13513,13579,13602,13626,13631,13762,13767,13855,13936,13995,14214,14285,14312,14432,4,2,103,116,13148,13152,59,3,8921,824,4,2,59,118,13158,13161,3,8811,8402,59,3,8811,824,4,3,101,108,116,13173,13200,13204,102,116,4,2,97,114,13181,13188,114,114,111,119,59,1,8653,105,103,104,116,97,114,114,111,119,59,1,8654,59,3,8920,824,4,2,59,118,13210,13213,3,8810,8402,59,3,8810,824,105,103,104,116,97,114,114,111,119,59,1,8655,4,2,68,100,13235,13241,97,115,104,59,1,8879,97,115,104,59,1,8878,4,5,98,99,110,112,116,13259,13264,13270,13275,13308,108,97,59,1,8711,117,116,101,59,1,324,103,59,3,8736,8402,4,5,59,69,105,111,112,13287,13289,13293,13298,13302,1,8777,59,3,10864,824,100,59,3,8779,824,115,59,1,329,114,111,120,59,1,8777,117,114,4,2,59,97,13316,13318,1,9838,108,4,2,59,115,13325,13327,1,9838,59,1,8469,4,2,115,117,13336,13344,112,5,160,1,59,13342,1,160,109,112,4,2,59,101,13352,13355,3,8782,824,59,3,8783,824,4,5,97,101,111,117,121,13371,13385,13391,13407,13411,4,2,112,114,13377,13380,59,1,10819,111,110,59,1,328,100,105,108,59,1,326,110,103,4,2,59,100,13399,13401,1,8775,111,116,59,3,10861,824,112,59,1,10818,59,1,1085,97,115,104,59,1,8211,4,7,59,65,97,100,113,115,120,13436,13438,13443,13466,13472,13478,13494,1,8800,114,114,59,1,8663,114,4,2,104,114,13450,13454,107,59,1,10532,4,2,59,111,13460,13462,1,8599,119,59,1,8599,111,116,59,3,8784,824,117,105,118,59,1,8802,4,2,101,105,13484,13489,97,114,59,1,10536,109,59,3,8770,824,105,115,116,4,2,59,115,13503,13505,1,8708,59,1,8708,114,59,3,55349,56619,4,4,69,101,115,116,13523,13527,13563,13568,59,3,8807,824,4,3,59,113,115,13535,13537,13559,1,8817,4,3,59,113,115,13545,13547,13551,1,8817,59,3,8807,824,108,97,110,116,59,3,10878,824,59,3,10878,824,105,109,59,1,8821,4,2,59,114,13574,13576,1,8815,59,1,8815,4,3,65,97,112,13587,13592,13597,114,114,59,1,8654,114,114,59,1,8622,97,114,59,1,10994,4,3,59,115,118,13610,13612,13623,1,8715,4,2,59,100,13618,13620,1,8956,59,1,8954,59,1,8715,99,121,59,1,1114,4,7,65,69,97,100,101,115,116,13647,13652,13656,13661,13665,13737,13742,114,114,59,1,8653,59,3,8806,824,114,114,59,1,8602,114,59,1,8229,4,4,59,102,113,115,13675,13677,13703,13725,1,8816,116,4,2,97,114,13684,13691,114,114,111,119,59,1,8602,105,103,104,116,97,114,114,111,119,59,1,8622,4,3,59,113,115,13711,13713,13717,1,8816,59,3,8806,824,108,97,110,116,59,3,10877,824,4,2,59,115,13731,13734,3,10877,824,59,1,8814,105,109,59,1,8820,4,2,59,114,13748,13750,1,8814,105,4,2,59,101,13757,13759,1,8938,59,1,8940,105,100,59,1,8740,4,2,112,116,13773,13778,102,59,3,55349,56671,5,172,3,59,105,110,13787,13789,13829,1,172,110,4,4,59,69,100,118,13800,13802,13806,13812,1,8713,59,3,8953,824,111,116,59,3,8949,824,4,3,97,98,99,13820,13823,13826,59,1,8713,59,1,8951,59,1,8950,105,4,2,59,118,13836,13838,1,8716,4,3,97,98,99,13846,13849,13852,59,1,8716,59,1,8958,59,1,8957,4,3,97,111,114,13863,13892,13899,114,4,4,59,97,115,116,13874,13876,13883,13888,1,8742,108,108,101,108,59,1,8742,108,59,3,11005,8421,59,3,8706,824,108,105,110,116,59,1,10772,4,3,59,99,101,13907,13909,13914,1,8832,117,101,59,1,8928,4,2,59,99,13920,13923,3,10927,824,4,2,59,101,13929,13931,1,8832,113,59,3,10927,824,4,4,65,97,105,116,13946,13951,13971,13982,114,114,59,1,8655,114,114,4,3,59,99,119,13961,13963,13967,1,8603,59,3,10547,824,59,3,8605,824,103,104,116,97,114,114,111,119,59,1,8603,114,105,4,2,59,101,13990,13992,1,8939,59,1,8941,4,7,99,104,105,109,112,113,117,14011,14036,14060,14080,14085,14090,14106,4,4,59,99,101,114,14021,14023,14028,14032,1,8833,117,101,59,1,8929,59,3,10928,824,59,3,55349,56515,111,114,116,4,2,109,112,14045,14050,105,100,59,1,8740,97,114,97,108,108,101,108,59,1,8742,109,4,2,59,101,14067,14069,1,8769,4,2,59,113,14075,14077,1,8772,59,1,8772,105,100,59,1,8740,97,114,59,1,8742,115,117,4,2,98,112,14098,14102,101,59,1,8930,101,59,1,8931,4,3,98,99,112,14114,14157,14171,4,4,59,69,101,115,14124,14126,14130,14133,1,8836,59,3,10949,824,59,1,8840,101,116,4,2,59,101,14141,14144,3,8834,8402,113,4,2,59,113,14151,14153,1,8840,59,3,10949,824,99,4,2,59,101,14164,14166,1,8833,113,59,3,10928,824,4,4,59,69,101,115,14181,14183,14187,14190,1,8837,59,3,10950,824,59,1,8841,101,116,4,2,59,101,14198,14201,3,8835,8402,113,4,2,59,113,14208,14210,1,8841,59,3,10950,824,4,4,103,105,108,114,14224,14228,14238,14242,108,59,1,8825,108,100,101,5,241,1,59,14236,1,241,103,59,1,8824,105,97,110,103,108,101,4,2,108,114,14254,14269,101,102,116,4,2,59,101,14263,14265,1,8938,113,59,1,8940,105,103,104,116,4,2,59,101,14279,14281,1,8939,113,59,1,8941,4,2,59,109,14291,14293,1,957,4,3,59,101,115,14301,14303,14308,1,35,114,111,59,1,8470,112,59,1,8199,4,9,68,72,97,100,103,105,108,114,115,14332,14338,14344,14349,14355,14369,14376,14408,14426,97,115,104,59,1,8877,97,114,114,59,1,10500,112,59,3,8781,8402,97,115,104,59,1,8876,4,2,101,116,14361,14365,59,3,8805,8402,59,3,62,8402,110,102,105,110,59,1,10718,4,3,65,101,116,14384,14389,14393,114,114,59,1,10498,59,3,8804,8402,4,2,59,114,14399,14402,3,60,8402,105,101,59,3,8884,8402,4,2,65,116,14414,14419,114,114,59,1,10499,114,105,101,59,3,8885,8402,105,109,59,3,8764,8402,4,3,65,97,110,14440,14445,14468,114,114,59,1,8662,114,4,2,104,114,14452,14456,107,59,1,10531,4,2,59,111,14462,14464,1,8598,119,59,1,8598,101,97,114,59,1,10535,4,18,83,97,99,100,101,102,103,104,105,108,109,111,112,114,115,116,117,118,14512,14515,14535,14560,14597,14603,14618,14643,14657,14662,14701,14741,14747,14769,14851,14877,14907,14916,59,1,9416,4,2,99,115,14521,14531,117,116,101,5,243,1,59,14529,1,243,116,59,1,8859,4,2,105,121,14541,14557,114,4,2,59,99,14548,14550,1,8858,5,244,1,59,14555,1,244,59,1,1086,4,5,97,98,105,111,115,14572,14577,14583,14587,14591,115,104,59,1,8861,108,97,99,59,1,337,118,59,1,10808,116,59,1,8857,111,108,100,59,1,10684,108,105,103,59,1,339,4,2,99,114,14609,14614,105,114,59,1,10687,59,3,55349,56620,4,3,111,114,116,14626,14630,14640,110,59,1,731,97,118,101,5,242,1,59,14638,1,242,59,1,10689,4,2,98,109,14649,14654,97,114,59,1,10677,59,1,937,110,116,59,1,8750,4,4,97,99,105,116,14672,14677,14693,14698,114,114,59,1,8634,4,2,105,114,14683,14687,114,59,1,10686,111,115,115,59,1,10683,110,101,59,1,8254,59,1,10688,4,3,97,101,105,14709,14714,14719,99,114,59,1,333,103,97,59,1,969,4,3,99,100,110,14727,14733,14736,114,111,110,59,1,959,59,1,10678,117,115,59,1,8854,112,102,59,3,55349,56672,4,3,97,101,108,14755,14759,14764,114,59,1,10679,114,112,59,1,10681,117,115,59,1,8853,4,7,59,97,100,105,111,115,118,14785,14787,14792,14831,14837,14841,14848,1,8744,114,114,59,1,8635,4,4,59,101,102,109,14802,14804,14817,14824,1,10845,114,4,2,59,111,14811,14813,1,8500,102,59,1,8500,5,170,1,59,14822,1,170,5,186,1,59,14829,1,186,103,111,102,59,1,8886,114,59,1,10838,108,111,112,101,59,1,10839,59,1,10843,4,3,99,108,111,14859,14863,14873,114,59,1,8500,97,115,104,5,248,1,59,14871,1,248,108,59,1,8856,105,4,2,108,109,14884,14893,100,101,5,245,1,59,14891,1,245,101,115,4,2,59,97,14901,14903,1,8855,115,59,1,10806,109,108,5,246,1,59,14914,1,246,98,97,114,59,1,9021,4,12,97,99,101,102,104,105,108,109,111,114,115,117,14948,14992,14996,15033,15038,15068,15090,15189,15192,15222,15427,15441,114,4,4,59,97,115,116,14959,14961,14976,14989,1,8741,5,182,2,59,108,14968,14970,1,182,108,101,108,59,1,8741,4,2,105,108,14982,14986,109,59,1,10995,59,1,11005,59,1,8706,121,59,1,1087,114,4,5,99,105,109,112,116,15009,15014,15019,15024,15027,110,116,59,1,37,111,100,59,1,46,105,108,59,1,8240,59,1,8869,101,110,107,59,1,8241,114,59,3,55349,56621,4,3,105,109,111,15046,15057,15063,4,2,59,118,15052,15054,1,966,59,1,981,109,97,116,59,1,8499,110,101,59,1,9742,4,3,59,116,118,15076,15078,15087,1,960,99,104,102,111,114,107,59,1,8916,59,1,982,4,2,97,117,15096,15119,110,4,2,99,107,15103,15115,107,4,2,59,104,15110,15112,1,8463,59,1,8462,118,59,1,8463,115,4,9,59,97,98,99,100,101,109,115,116,15140,15142,15148,15151,15156,15168,15171,15179,15184,1,43,99,105,114,59,1,10787,59,1,8862,105,114,59,1,10786,4,2,111,117,15162,15165,59,1,8724,59,1,10789,59,1,10866,110,5,177,1,59,15177,1,177,105,109,59,1,10790,119,111,59,1,10791,59,1,177,4,3,105,112,117,15200,15208,15213,110,116,105,110,116,59,1,10773,102,59,3,55349,56673,110,100,5,163,1,59,15220,1,163,4,10,59,69,97,99,101,105,110,111,115,117,15244,15246,15249,15253,15258,15334,15347,15367,15416,15421,1,8826,59,1,10931,112,59,1,10935,117,101,59,1,8828,4,2,59,99,15264,15266,1,10927,4,6,59,97,99,101,110,115,15280,15282,15290,15299,15303,15329,1,8826,112,112,114,111,120,59,1,10935,117,114,108,121,101,113,59,1,8828,113,59,1,10927,4,3,97,101,115,15311,15319,15324,112,112,114,111,120,59,1,10937,113,113,59,1,10933,105,109,59,1,8936,105,109,59,1,8830,109,101,4,2,59,115,15342,15344,1,8242,59,1,8473,4,3,69,97,115,15355,15358,15362,59,1,10933,112,59,1,10937,105,109,59,1,8936,4,3,100,102,112,15375,15378,15404,59,1,8719,4,3,97,108,115,15386,15392,15398,108,97,114,59,1,9006,105,110,101,59,1,8978,117,114,102,59,1,8979,4,2,59,116,15410,15412,1,8733,111,59,1,8733,105,109,59,1,8830,114,101,108,59,1,8880,4,2,99,105,15433,15438,114,59,3,55349,56517,59,1,968,110,99,115,112,59,1,8200,4,6,102,105,111,112,115,117,15462,15467,15472,15478,15485,15491,114,59,3,55349,56622,110,116,59,1,10764,112,102,59,3,55349,56674,114,105,109,101,59,1,8279,99,114,59,3,55349,56518,4,3,97,101,111,15499,15520,15534,116,4,2,101,105,15506,15515,114,110,105,111,110,115,59,1,8461,110,116,59,1,10774,115,116,4,2,59,101,15528,15530,1,63,113,59,1,8799,116,5,34,1,59,15540,1,34,4,21,65,66,72,97,98,99,100,101,102,104,105,108,109,110,111,112,114,115,116,117,120,15586,15609,15615,15620,15796,15855,15893,15931,15977,16001,16039,16183,16204,16222,16228,16285,16312,16318,16363,16408,16416,4,3,97,114,116,15594,15599,15603,114,114,59,1,8667,114,59,1,8658,97,105,108,59,1,10524,97,114,114,59,1,10511,97,114,59,1,10596,4,7,99,100,101,110,113,114,116,15636,15651,15656,15664,15687,15696,15770,4,2,101,117,15642,15646,59,3,8765,817,116,101,59,1,341,105,99,59,1,8730,109,112,116,121,118,59,1,10675,103,4,4,59,100,101,108,15675,15677,15680,15683,1,10217,59,1,10642,59,1,10661,101,59,1,10217,117,111,5,187,1,59,15694,1,187,114,4,11,59,97,98,99,102,104,108,112,115,116,119,15721,15723,15727,15739,15742,15746,15750,15754,15758,15763,15767,1,8594,112,59,1,10613,4,2,59,102,15733,15735,1,8677,115,59,1,10528,59,1,10547,115,59,1,10526,107,59,1,8618,112,59,1,8620,108,59,1,10565,105,109,59,1,10612,108,59,1,8611,59,1,8605,4,2,97,105,15776,15781,105,108,59,1,10522,111,4,2,59,110,15788,15790,1,8758,97,108,115,59,1,8474,4,3,97,98,114,15804,15809,15814,114,114,59,1,10509,114,107,59,1,10099,4,2,97,107,15820,15833,99,4,2,101,107,15827,15830,59,1,125,59,1,93,4,2,101,115,15839,15842,59,1,10636,108,4,2,100,117,15849,15852,59,1,10638,59,1,10640,4,4,97,101,117,121,15865,15871,15886,15890,114,111,110,59,1,345,4,2,100,105,15877,15882,105,108,59,1,343,108,59,1,8969,98,59,1,125,59,1,1088,4,4,99,108,113,115,15903,15907,15914,15927,97,59,1,10551,100,104,97,114,59,1,10601,117,111,4,2,59,114,15922,15924,1,8221,59,1,8221,104,59,1,8627,4,3,97,99,103,15939,15966,15970,108,4,4,59,105,112,115,15950,15952,15957,15963,1,8476,110,101,59,1,8475,97,114,116,59,1,8476,59,1,8477,116,59,1,9645,5,174,1,59,15975,1,174,4,3,105,108,114,15985,15991,15997,115,104,116,59,1,10621,111,111,114,59,1,8971,59,3,55349,56623,4,2,97,111,16007,16028,114,4,2,100,117,16014,16017,59,1,8641,4,2,59,108,16023,16025,1,8640,59,1,10604,4,2,59,118,16034,16036,1,961,59,1,1009,4,3,103,110,115,16047,16167,16171,104,116,4,6,97,104,108,114,115,116,16063,16081,16103,16130,16143,16155,114,114,111,119,4,2,59,116,16073,16075,1,8594,97,105,108,59,1,8611,97,114,112,111,111,110,4,2,100,117,16093,16099,111,119,110,59,1,8641,112,59,1,8640,101,102,116,4,2,97,104,16112,16120,114,114,111,119,115,59,1,8644,97,114,112,111,111,110,115,59,1,8652,105,103,104,116,97,114,114,111,119,115,59,1,8649,113,117,105,103,97,114,114,111,119,59,1,8605,104,114,101,101,116,105,109,101,115,59,1,8908,103,59,1,730,105,110,103,100,111,116,115,101,113,59,1,8787,4,3,97,104,109,16191,16196,16201,114,114,59,1,8644,97,114,59,1,8652,59,1,8207,111,117,115,116,4,2,59,97,16214,16216,1,9137,99,104,101,59,1,9137,109,105,100,59,1,10990,4,4,97,98,112,116,16238,16252,16257,16278,4,2,110,114,16244,16248,103,59,1,10221,114,59,1,8702,114,107,59,1,10215,4,3,97,102,108,16265,16269,16273,114,59,1,10630,59,3,55349,56675,117,115,59,1,10798,105,109,101,115,59,1,10805,4,2,97,112,16291,16304,114,4,2,59,103,16298,16300,1,41,116,59,1,10644,111,108,105,110,116,59,1,10770,97,114,114,59,1,8649,4,4,97,99,104,113,16328,16334,16339,16342,113,117,111,59,1,8250,114,59,3,55349,56519,59,1,8625,4,2,98,117,16348,16351,59,1,93,111,4,2,59,114,16358,16360,1,8217,59,1,8217,4,3,104,105,114,16371,16377,16383,114,101,101,59,1,8908,109,101,115,59,1,8906,105,4,4,59,101,102,108,16394,16396,16399,16402,1,9657,59,1,8885,59,1,9656,116,114,105,59,1,10702,108,117,104,97,114,59,1,10600,59,1,8478,4,19,97,98,99,100,101,102,104,105,108,109,111,112,113,114,115,116,117,119,122,16459,16466,16472,16572,16590,16672,16687,16746,16844,16850,16924,16963,16988,17115,17121,17154,17206,17614,17656,99,117,116,101,59,1,347,113,117,111,59,1,8218,4,10,59,69,97,99,101,105,110,112,115,121,16494,16496,16499,16513,16518,16531,16536,16556,16564,16569,1,8827,59,1,10932,4,2,112,114,16505,16508,59,1,10936,111,110,59,1,353,117,101,59,1,8829,4,2,59,100,16524,16526,1,10928,105,108,59,1,351,114,99,59,1,349,4,3,69,97,115,16544,16547,16551,59,1,10934,112,59,1,10938,105,109,59,1,8937,111,108,105,110,116,59,1,10771,105,109,59,1,8831,59,1,1089,111,116,4,3,59,98,101,16582,16584,16587,1,8901,59,1,8865,59,1,10854,4,7,65,97,99,109,115,116,120,16606,16611,16634,16642,16646,16652,16668,114,114,59,1,8664,114,4,2,104,114,16618,16622,107,59,1,10533,4,2,59,111,16628,16630,1,8600,119,59,1,8600,116,5,167,1,59,16640,1,167,105,59,1,59,119,97,114,59,1,10537,109,4,2,105,110,16659,16665,110,117,115,59,1,8726,59,1,8726,116,59,1,10038,114,4,2,59,111,16679,16682,3,55349,56624,119,110,59,1,8994,4,4,97,99,111,121,16697,16702,16716,16739,114,112,59,1,9839,4,2,104,121,16708,16713,99,121,59,1,1097,59,1,1096,114,116,4,2,109,112,16724,16729,105,100,59,1,8739,97,114,97,108,108,101,108,59,1,8741,5,173,1,59,16744,1,173,4,2,103,109,16752,16770,109,97,4,3,59,102,118,16762,16764,16767,1,963,59,1,962,59,1,962,4,8,59,100,101,103,108,110,112,114,16788,16790,16795,16806,16817,16828,16832,16838,1,8764,111,116,59,1,10858,4,2,59,113,16801,16803,1,8771,59,1,8771,4,2,59,69,16812,16814,1,10910,59,1,10912,4,2,59,69,16823,16825,1,10909,59,1,10911,101,59,1,8774,108,117,115,59,1,10788,97,114,114,59,1,10610,97,114,114,59,1,8592,4,4,97,101,105,116,16860,16883,16891,16904,4,2,108,115,16866,16878,108,115,101,116,109,105,110,117,115,59,1,8726,104,112,59,1,10803,112,97,114,115,108,59,1,10724,4,2,100,108,16897,16900,59,1,8739,101,59,1,8995,4,2,59,101,16910,16912,1,10922,4,2,59,115,16918,16920,1,10924,59,3,10924,65024,4,3,102,108,112,16932,16938,16958,116,99,121,59,1,1100,4,2,59,98,16944,16946,1,47,4,2,59,97,16952,16954,1,10692,114,59,1,9023,102,59,3,55349,56676,97,4,2,100,114,16970,16985,101,115,4,2,59,117,16978,16980,1,9824,105,116,59,1,9824,59,1,8741,4,3,99,115,117,16996,17028,17089,4,2,97,117,17002,17015,112,4,2,59,115,17009,17011,1,8851,59,3,8851,65024,112,4,2,59,115,17022,17024,1,8852,59,3,8852,65024,117,4,2,98,112,17035,17062,4,3,59,101,115,17043,17045,17048,1,8847,59,1,8849,101,116,4,2,59,101,17056,17058,1,8847,113,59,1,8849,4,3,59,101,115,17070,17072,17075,1,8848,59,1,8850,101,116,4,2,59,101,17083,17085,1,8848,113,59,1,8850,4,3,59,97,102,17097,17099,17112,1,9633,114,4,2,101,102,17106,17109,59,1,9633,59,1,9642,59,1,9642,97,114,114,59,1,8594,4,4,99,101,109,116,17131,17136,17142,17148,114,59,3,55349,56520,116,109,110,59,1,8726,105,108,101,59,1,8995,97,114,102,59,1,8902,4,2,97,114,17160,17172,114,4,2,59,102,17167,17169,1,9734,59,1,9733,4,2,97,110,17178,17202,105,103,104,116,4,2,101,112,17188,17197,112,115,105,108,111,110,59,1,1013,104,105,59,1,981,115,59,1,175,4,5,98,99,109,110,112,17218,17351,17420,17423,17427,4,9,59,69,100,101,109,110,112,114,115,17238,17240,17243,17248,17261,17267,17279,17285,17291,1,8834,59,1,10949,111,116,59,1,10941,4,2,59,100,17254,17256,1,8838,111,116,59,1,10947,117,108,116,59,1,10945,4,2,69,101,17273,17276,59,1,10955,59,1,8842,108,117,115,59,1,10943,97,114,114,59,1,10617,4,3,101,105,117,17299,17335,17339,116,4,3,59,101,110,17308,17310,17322,1,8834,113,4,2,59,113,17317,17319,1,8838,59,1,10949,101,113,4,2,59,113,17330,17332,1,8842,59,1,10955,109,59,1,10951,4,2,98,112,17345,17348,59,1,10965,59,1,10963,99,4,6,59,97,99,101,110,115,17366,17368,17376,17385,17389,17415,1,8827,112,112,114,111,120,59,1,10936,117,114,108,121,101,113,59,1,8829,113,59,1,10928,4,3,97,101,115,17397,17405,17410,112,112,114,111,120,59,1,10938,113,113,59,1,10934,105,109,59,1,8937,105,109,59,1,8831,59,1,8721,103,59,1,9834,4,13,49,50,51,59,69,100,101,104,108,109,110,112,115,17455,17462,17469,17476,17478,17481,17496,17509,17524,17530,17536,17548,17554,5,185,1,59,17460,1,185,5,178,1,59,17467,1,178,5,179,1,59,17474,1,179,1,8835,59,1,10950,4,2,111,115,17487,17491,116,59,1,10942,117,98,59,1,10968,4,2,59,100,17502,17504,1,8839,111,116,59,1,10948,115,4,2,111,117,17516,17520,108,59,1,10185,98,59,1,10967,97,114,114,59,1,10619,117,108,116,59,1,10946,4,2,69,101,17542,17545,59,1,10956,59,1,8843,108,117,115,59,1,10944,4,3,101,105,117,17562,17598,17602,116,4,3,59,101,110,17571,17573,17585,1,8835,113,4,2,59,113,17580,17582,1,8839,59,1,10950,101,113,4,2,59,113,17593,17595,1,8843,59,1,10956,109,59,1,10952,4,2,98,112,17608,17611,59,1,10964,59,1,10966,4,3,65,97,110,17622,17627,17650,114,114,59,1,8665,114,4,2,104,114,17634,17638,107,59,1,10534,4,2,59,111,17644,17646,1,8601,119,59,1,8601,119,97,114,59,1,10538,108,105,103,5,223,1,59,17664,1,223,4,13,97,98,99,100,101,102,104,105,111,112,114,115,119,17694,17709,17714,17737,17742,17749,17754,17860,17905,17957,17964,18090,18122,4,2,114,117,17700,17706,103,101,116,59,1,8982,59,1,964,114,107,59,1,9140,4,3,97,101,121,17722,17728,17734,114,111,110,59,1,357,100,105,108,59,1,355,59,1,1090,111,116,59,1,8411,108,114,101,99,59,1,8981,114,59,3,55349,56625,4,4,101,105,107,111,17764,17805,17836,17851,4,2,114,116,17770,17786,101,4,2,52,102,17777,17780,59,1,8756,111,114,101,59,1,8756,97,4,3,59,115,118,17795,17797,17802,1,952,121,109,59,1,977,59,1,977,4,2,99,110,17811,17831,107,4,2,97,115,17818,17826,112,112,114,111,120,59,1,8776,105,109,59,1,8764,115,112,59,1,8201,4,2,97,115,17842,17846,112,59,1,8776,105,109,59,1,8764,114,110,5,254,1,59,17858,1,254,4,3,108,109,110,17868,17873,17901,100,101,59,1,732,101,115,5,215,3,59,98,100,17884,17886,17898,1,215,4,2,59,97,17892,17894,1,8864,114,59,1,10801,59,1,10800,116,59,1,8749,4,3,101,112,115,17913,17917,17953,97,59,1,10536,4,4,59,98,99,102,17927,17929,17934,17939,1,8868,111,116,59,1,9014,105,114,59,1,10993,4,2,59,111,17945,17948,3,55349,56677,114,107,59,1,10970,97,59,1,10537,114,105,109,101,59,1,8244,4,3,97,105,112,17972,17977,18082,100,101,59,1,8482,4,7,97,100,101,109,112,115,116,17993,18051,18056,18059,18066,18072,18076,110,103,108,101,4,5,59,100,108,113,114,18009,18011,18017,18032,18035,1,9653,111,119,110,59,1,9663,101,102,116,4,2,59,101,18026,18028,1,9667,113,59,1,8884,59,1,8796,105,103,104,116,4,2,59,101,18045,18047,1,9657,113,59,1,8885,111,116,59,1,9708,59,1,8796,105,110,117,115,59,1,10810,108,117,115,59,1,10809,98,59,1,10701,105,109,101,59,1,10811,101,122,105,117,109,59,1,9186,4,3,99,104,116,18098,18111,18116,4,2,114,121,18104,18108,59,3,55349,56521,59,1,1094,99,121,59,1,1115,114,111,107,59,1,359,4,2,105,111,18128,18133,120,116,59,1,8812,104,101,97,100,4,2,108,114,18143,18154,101,102,116,97,114,114,111,119,59,1,8606,105,103,104,116,97,114,114,111,119,59,1,8608,4,18,65,72,97,98,99,100,102,103,104,108,109,111,112,114,115,116,117,119,18204,18209,18214,18234,18250,18268,18292,18308,18319,18343,18379,18397,18413,18504,18547,18553,18584,18603,114,114,59,1,8657,97,114,59,1,10595,4,2,99,114,18220,18230,117,116,101,5,250,1,59,18228,1,250,114,59,1,8593,114,4,2,99,101,18241,18245,121,59,1,1118,118,101,59,1,365,4,2,105,121,18256,18265,114,99,5,251,1,59,18263,1,251,59,1,1091,4,3,97,98,104,18276,18281,18287,114,114,59,1,8645,108,97,99,59,1,369,97,114,59,1,10606,4,2,105,114,18298,18304,115,104,116,59,1,10622,59,3,55349,56626,114,97,118,101,5,249,1,59,18317,1,249,4,2,97,98,18325,18338,114,4,2,108,114,18332,18335,59,1,8639,59,1,8638,108,107,59,1,9600,4,2,99,116,18349,18374,4,2,111,114,18355,18369,114,110,4,2,59,101,18363,18365,1,8988,114,59,1,8988,111,112,59,1,8975,114,105,59,1,9720,4,2,97,108,18385,18390,99,114,59,1,363,5,168,1,59,18395,1,168,4,2,103,112,18403,18408,111,110,59,1,371,102,59,3,55349,56678,4,6,97,100,104,108,115,117,18427,18434,18445,18470,18475,18494,114,114,111,119,59,1,8593,111,119,110,97,114,114,111,119,59,1,8597,97,114,112,111,111,110,4,2,108,114,18457,18463,101,102,116,59,1,8639,105,103,104,116,59,1,8638,117,115,59,1,8846,105,4,3,59,104,108,18484,18486,18489,1,965,59,1,978,111,110,59,1,965,112,97,114,114,111,119,115,59,1,8648,4,3,99,105,116,18512,18537,18542,4,2,111,114,18518,18532,114,110,4,2,59,101,18526,18528,1,8989,114,59,1,8989,111,112,59,1,8974,110,103,59,1,367,114,105,59,1,9721,99,114,59,3,55349,56522,4,3,100,105,114,18561,18566,18572,111,116,59,1,8944,108,100,101,59,1,361,105,4,2,59,102,18579,18581,1,9653,59,1,9652,4,2,97,109,18590,18595,114,114,59,1,8648,108,5,252,1,59,18601,1,252,97,110,103,108,101,59,1,10663,4,15,65,66,68,97,99,100,101,102,108,110,111,112,114,115,122,18643,18648,18661,18667,18847,18851,18857,18904,18909,18915,18931,18937,18943,18949,18996,114,114,59,1,8661,97,114,4,2,59,118,18656,18658,1,10984,59,1,10985,97,115,104,59,1,8872,4,2,110,114,18673,18679,103,114,116,59,1,10652,4,7,101,107,110,112,114,115,116,18695,18704,18711,18720,18742,18754,18810,112,115,105,108,111,110,59,1,1013,97,112,112,97,59,1,1008,111,116,104,105,110,103,59,1,8709,4,3,104,105,114,18728,18732,18735,105,59,1,981,59,1,982,111,112,116,111,59,1,8733,4,2,59,104,18748,18750,1,8597,111,59,1,1009,4,2,105,117,18760,18766,103,109,97,59,1,962,4,2,98,112,18772,18791,115,101,116,110,101,113,4,2,59,113,18784,18787,3,8842,65024,59,3,10955,65024,115,101,116,110,101,113,4,2,59,113,18803,18806,3,8843,65024,59,3,10956,65024,4,2,104,114,18816,18822,101,116,97,59,1,977,105,97,110,103,108,101,4,2,108,114,18834,18840,101,102,116,59,1,8882,105,103,104,116,59,1,8883,121,59,1,1074,97,115,104,59,1,8866,4,3,101,108,114,18865,18884,18890,4,3,59,98,101,18873,18875,18880,1,8744,97,114,59,1,8891,113,59,1,8794,108,105,112,59,1,8942,4,2,98,116,18896,18901,97,114,59,1,124,59,1,124,114,59,3,55349,56627,116,114,105,59,1,8882,115,117,4,2,98,112,18923,18927,59,3,8834,8402,59,3,8835,8402,112,102,59,3,55349,56679,114,111,112,59,1,8733,116,114,105,59,1,8883,4,2,99,117,18955,18960,114,59,3,55349,56523,4,2,98,112,18966,18981,110,4,2,69,101,18973,18977,59,3,10955,65024,59,3,8842,65024,110,4,2,69,101,18988,18992,59,3,10956,65024,59,3,8843,65024,105,103,122,97,103,59,1,10650,4,7,99,101,102,111,112,114,115,19020,19026,19061,19066,19072,19075,19089,105,114,99,59,1,373,4,2,100,105,19032,19055,4,2,98,103,19038,19043,97,114,59,1,10847,101,4,2,59,113,19050,19052,1,8743,59,1,8793,101,114,112,59,1,8472,114,59,3,55349,56628,112,102,59,3,55349,56680,59,1,8472,4,2,59,101,19081,19083,1,8768,97,116,104,59,1,8768,99,114,59,3,55349,56524,4,14,99,100,102,104,105,108,109,110,111,114,115,117,118,119,19125,19146,19152,19157,19173,19176,19192,19197,19202,19236,19252,19269,19286,19291,4,3,97,105,117,19133,19137,19142,112,59,1,8898,114,99,59,1,9711,112,59,1,8899,116,114,105,59,1,9661,114,59,3,55349,56629,4,2,65,97,19163,19168,114,114,59,1,10234,114,114,59,1,10231,59,1,958,4,2,65,97,19182,19187,114,114,59,1,10232,114,114,59,1,10229,97,112,59,1,10236,105,115,59,1,8955,4,3,100,112,116,19210,19215,19230,111,116,59,1,10752,4,2,102,108,19221,19225,59,3,55349,56681,117,115,59,1,10753,105,109,101,59,1,10754,4,2,65,97,19242,19247,114,114,59,1,10233,114,114,59,1,10230,4,2,99,113,19258,19263,114,59,3,55349,56525,99,117,112,59,1,10758,4,2,112,116,19275,19281,108,117,115,59,1,10756,114,105,59,1,9651,101,101,59,1,8897,101,100,103,101,59,1,8896,4,8,97,99,101,102,105,111,115,117,19316,19335,19349,19357,19362,19367,19373,19379,99,4,2,117,121,19323,19332,116,101,5,253,1,59,19330,1,253,59,1,1103,4,2,105,121,19341,19346,114,99,59,1,375,59,1,1099,110,5,165,1,59,19355,1,165,114,59,3,55349,56630,99,121,59,1,1111,112,102,59,3,55349,56682,99,114,59,3,55349,56526,4,2,99,109,19385,19389,121,59,1,1102,108,5,255,1,59,19395,1,255,4,10,97,99,100,101,102,104,105,111,115,119,19419,19426,19441,19446,19462,19467,19472,19480,19486,19492,99,117,116,101,59,1,378,4,2,97,121,19432,19438,114,111,110,59,1,382,59,1,1079,111,116,59,1,380,4,2,101,116,19452,19458,116,114,102,59,1,8488,97,59,1,950,114,59,3,55349,56631,99,121,59,1,1078,103,114,97,114,114,59,1,8669,112,102,59,3,55349,56683,99,114,59,3,55349,56527,4,2,106,110,19498,19501,59,1,8205,106,59,1,8204]);const P=s,H={DASH_DASH_STRING:[45,45],DOCTYPE_STRING:[68,79,67,84,89,80,69],CDATA_START_STRING:[91,67,68,65,84,65,91],SCRIPT_STRING:[115,99,114,105,112,116],PUBLIC_STRING:[80,85,66,76,73,67],SYSTEM_STRING:[83,89,83,84,69,77]},D={128:8364,130:8218,131:402,132:8222,133:8230,134:8224,135:8225,136:710,137:8240,138:352,139:8249,140:338,142:381,145:8216,146:8217,147:8220,148:8221,149:8226,150:8211,151:8212,152:732,153:8482,154:353,155:8250,156:339,158:382,159:376},F="DATA_STATE",U="RCDATA_STATE",G="RAWTEXT_STATE",B="SCRIPT_DATA_STATE",K="PLAINTEXT_STATE",b="TAG_OPEN_STATE",x="END_TAG_OPEN_STATE",y="TAG_NAME_STATE",v="RCDATA_LESS_THAN_SIGN_STATE",Y="RCDATA_END_TAG_OPEN_STATE",w="RCDATA_END_TAG_NAME_STATE",Q="RAWTEXT_LESS_THAN_SIGN_STATE",X="RAWTEXT_END_TAG_OPEN_STATE",W="RAWTEXT_END_TAG_NAME_STATE",V="SCRIPT_DATA_LESS_THAN_SIGN_STATE",j="SCRIPT_DATA_END_TAG_OPEN_STATE",z="SCRIPT_DATA_END_TAG_NAME_STATE",q="SCRIPT_DATA_ESCAPE_START_STATE",J="SCRIPT_DATA_ESCAPE_START_DASH_STATE",Z="SCRIPT_DATA_ESCAPED_STATE",$="SCRIPT_DATA_ESCAPED_DASH_STATE",ee="SCRIPT_DATA_ESCAPED_DASH_DASH_STATE",te="SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE",ne="SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE",se="SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE",re="SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE",ie="SCRIPT_DATA_DOUBLE_ESCAPED_STATE",oe="SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE",ae="SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE",Te="SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE",Ee="SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE",he="BEFORE_ATTRIBUTE_NAME_STATE",ce="ATTRIBUTE_NAME_STATE",_e="AFTER_ATTRIBUTE_NAME_STATE",le="BEFORE_ATTRIBUTE_VALUE_STATE",me="ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE",pe="ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE",Ae="ATTRIBUTE_VALUE_UNQUOTED_STATE",ue="AFTER_ATTRIBUTE_VALUE_QUOTED_STATE",Ne="SELF_CLOSING_START_TAG_STATE",de="BOGUS_COMMENT_STATE",Ce="MARKUP_DECLARATION_OPEN_STATE",Oe="COMMENT_START_STATE",fe="COMMENT_START_DASH_STATE",Se="COMMENT_STATE",Re="COMMENT_LESS_THAN_SIGN_STATE",Ie="COMMENT_LESS_THAN_SIGN_BANG_STATE",Le="COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE",ke="COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE",Me="COMMENT_END_DASH_STATE",ge="COMMENT_END_STATE",Pe="COMMENT_END_BANG_STATE",He="DOCTYPE_STATE",De="BEFORE_DOCTYPE_NAME_STATE",Fe="DOCTYPE_NAME_STATE",Ue="AFTER_DOCTYPE_NAME_STATE",Ge="AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE",Be="BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE",Ke="DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE",be="DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE",xe="AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE",ye="BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE",ve="AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE",Ye="BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE",we="DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE",Qe="DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE",Xe="AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE",We="BOGUS_DOCTYPE_STATE",Ve="CDATA_SECTION_STATE",je="CDATA_SECTION_BRACKET_STATE",ze="CDATA_SECTION_END_STATE",qe="CHARACTER_REFERENCE_STATE",Je="NAMED_CHARACTER_REFERENCE_STATE",Ze="AMBIGUOS_AMPERSAND_STATE",$e="NUMERIC_CHARACTER_REFERENCE_STATE",et="HEXADEMICAL_CHARACTER_REFERENCE_START_STATE",tt="DECIMAL_CHARACTER_REFERENCE_START_STATE",nt="HEXADEMICAL_CHARACTER_REFERENCE_STATE",st="DECIMAL_CHARACTER_REFERENCE_STATE",rt="NUMERIC_CHARACTER_REFERENCE_END_STATE";function it(e){return e===P.SPACE||e===P.LINE_FEED||e===P.TABULATION||e===P.FORM_FEED}function ot(e){return e>=P.DIGIT_0&&e<=P.DIGIT_9}function at(e){return e>=P.LATIN_CAPITAL_A&&e<=P.LATIN_CAPITAL_Z}function Tt(e){return e>=P.LATIN_SMALL_A&&e<=P.LATIN_SMALL_Z}function Et(e){return Tt(e)||at(e)}function ht(e){return Et(e)||ot(e)}function ct(e){return e>=P.LATIN_CAPITAL_A&&e<=P.LATIN_CAPITAL_F}function _t(e){return e>=P.LATIN_SMALL_A&&e<=P.LATIN_SMALL_F}function lt(e){return e+32}function mt(e){return e<=65535?String.fromCharCode(e):(e-=65536,String.fromCharCode(e>>>10&1023|55296)+String.fromCharCode(56320|1023&e))}function pt(e){return String.fromCharCode(lt(e))}function At(e,t){const n=g[++e];let s=++e,r=s+n-1;for(;s<=r;){const e=s+r>>>1,i=g[e];if(i<t)s=e+1;else {if(!(i>t))return g[e+n];r=e-1;}}return -1}class ut{constructor(){this.preprocessor=new class{constructor(){this.html=null,this.pos=-1,this.lastGapPos=-1,this.lastCharPos=-1,this.gapStack=[],this.skipNextNewLine=!1,this.lastChunkWritten=!1,this.endOfChunkHit=!1,this.bufferWaterline=65536;}_err(){}_addGap(){this.gapStack.push(this.lastGapPos),this.lastGapPos=this.pos;}_processSurrogate(e){if(this.pos!==this.lastCharPos){const t=this.html.charCodeAt(this.pos+1);if(function(e){return e>=56320&&e<=57343}(t))return this.pos++,this._addGap(),1024*(e-55296)+9216+t}else if(!this.lastChunkWritten)return this.endOfChunkHit=!0,M.EOF;return this._err("surrogate-in-input-stream"),e}dropParsedChunk(){this.pos>this.bufferWaterline&&(this.lastCharPos-=this.pos,this.html=this.html.substring(this.pos),this.pos=0,this.lastGapPos=-1,this.gapStack=[]);}write(e,t){this.html?this.html+=e:this.html=e,this.lastCharPos=this.html.length-1,this.endOfChunkHit=!1,this.lastChunkWritten=t;}insertHtmlAtCurrentPos(e){this.html=this.html.substring(0,this.pos+1)+e+this.html.substring(this.pos+1,this.html.length),this.lastCharPos=this.html.length-1,this.endOfChunkHit=!1;}advance(){if(this.pos++,this.pos>this.lastCharPos)return this.endOfChunkHit=!this.lastChunkWritten,M.EOF;let e=this.html.charCodeAt(this.pos);return this.skipNextNewLine&&e===M.LINE_FEED?(this.skipNextNewLine=!1,this._addGap(),this.advance()):e===M.CARRIAGE_RETURN?(this.skipNextNewLine=!0,M.LINE_FEED):(this.skipNextNewLine=!1,r(e)&&(e=this._processSurrogate(e)),e>31&&e<127||e===M.LINE_FEED||e===M.CARRIAGE_RETURN||e>159&&e<64976||this._checkForProblematicCharacters(e),e)}_checkForProblematicCharacters(e){i(e)?this._err("control-character-in-input-stream"):o(e)&&this._err("noncharacter-in-input-stream");}retreat(){this.pos===this.lastGapPos&&(this.lastGapPos=this.gapStack.pop(),this.pos--),this.pos--;}},this.tokenQueue=[],this.allowCDATA=!1,this.state=F,this.returnState="",this.charRefCode=-1,this.tempBuff=[],this.lastStartTagName="",this.consumedAfterSnapshot=-1,this.active=!1,this.currentCharacterToken=null,this.currentToken=null,this.currentAttr=null;}_err(){}_errOnNextCodePoint(e){this._consume(),this._err(e),this._unconsume();}getNextToken(){for(;!this.tokenQueue.length&&this.active;){this.consumedAfterSnapshot=0;const e=this._consume();this._ensureHibernation()||this[this.state](e);}return this.tokenQueue.shift()}write(e,t){this.active=!0,this.preprocessor.write(e,t);}insertHtmlAtCurrentPos(e){this.active=!0,this.preprocessor.insertHtmlAtCurrentPos(e);}_ensureHibernation(){if(this.preprocessor.endOfChunkHit){for(;this.consumedAfterSnapshot>0;this.consumedAfterSnapshot--)this.preprocessor.retreat();return this.active=!1,this.tokenQueue.push({type:ut.HIBERNATION_TOKEN}),!0}return !1}_consume(){return this.consumedAfterSnapshot++,this.preprocessor.advance()}_unconsume(){this.consumedAfterSnapshot--,this.preprocessor.retreat();}_reconsumeInState(e){this.state=e,this._unconsume();}_consumeSequenceIfMatch(e,t,n){let s=0,r=!0;const i=e.length;let o,a=0,T=t;for(;a<i;a++){if(a>0&&(T=this._consume(),s++),T===P.EOF){r=!1;break}if(o=e[a],T!==o&&(n||T!==lt(o))){r=!1;break}}if(!r)for(;s--;)this._unconsume();return r}_isTempBufferEqualToScriptString(){if(this.tempBuff.length!==H.SCRIPT_STRING.length)return !1;for(let e=0;e<this.tempBuff.length;e++)if(this.tempBuff[e]!==H.SCRIPT_STRING[e])return !1;return !0}_createStartTagToken(){this.currentToken={type:ut.START_TAG_TOKEN,tagName:"",selfClosing:!1,ackSelfClosing:!1,attrs:[]};}_createEndTagToken(){this.currentToken={type:ut.END_TAG_TOKEN,tagName:"",selfClosing:!1,attrs:[]};}_createCommentToken(){this.currentToken={type:ut.COMMENT_TOKEN,data:""};}_createDoctypeToken(e){this.currentToken={type:ut.DOCTYPE_TOKEN,name:e,forceQuirks:!1,publicId:null,systemId:null};}_createCharacterToken(e,t){this.currentCharacterToken={type:e,chars:t};}_createEOFToken(){this.currentToken={type:ut.EOF_TOKEN};}_createAttr(e){this.currentAttr={name:e,value:""};}_leaveAttrName(e){null===ut.getTokenAttr(this.currentToken,this.currentAttr.name)?this.currentToken.attrs.push(this.currentAttr):this._err("duplicate-attribute"),this.state=e;}_leaveAttrValue(e){this.state=e;}_emitCurrentToken(){this._emitCurrentCharacterToken();const e=this.currentToken;this.currentToken=null,e.type===ut.START_TAG_TOKEN?this.lastStartTagName=e.tagName:e.type===ut.END_TAG_TOKEN&&(e.attrs.length>0&&this._err("end-tag-with-attributes"),e.selfClosing&&this._err("end-tag-with-trailing-solidus")),this.tokenQueue.push(e);}_emitCurrentCharacterToken(){this.currentCharacterToken&&(this.tokenQueue.push(this.currentCharacterToken),this.currentCharacterToken=null);}_emitEOFToken(){this._createEOFToken(),this._emitCurrentToken();}_appendCharToCurrentCharacterToken(e,t){this.currentCharacterToken&&this.currentCharacterToken.type!==e&&this._emitCurrentCharacterToken(),this.currentCharacterToken?this.currentCharacterToken.chars+=t:this._createCharacterToken(e,t);}_emitCodePoint(e){let t=ut.CHARACTER_TOKEN;it(e)?t=ut.WHITESPACE_CHARACTER_TOKEN:e===P.NULL&&(t=ut.NULL_CHARACTER_TOKEN),this._appendCharToCurrentCharacterToken(t,mt(e));}_emitSeveralCodePoints(e){for(let t=0;t<e.length;t++)this._emitCodePoint(e[t]);}_emitChars(e){this._appendCharToCurrentCharacterToken(ut.CHARACTER_TOKEN,e);}_matchNamedCharacterReference(e){let t=null,n=1,s=At(0,e);for(this.tempBuff.push(e);s>-1;){const e=g[s],r=e<7;r&&1&e&&(t=2&e?[g[++s],g[++s]]:[g[++s]],n=0);const i=this._consume();if(this.tempBuff.push(i),n++,i===P.EOF)break;s=r?4&e?At(s,i):-1:i===e?++s:-1;}for(;n--;)this.tempBuff.pop(),this._unconsume();return t}_isCharacterReferenceInAttribute(){return this.returnState===me||this.returnState===pe||this.returnState===Ae}_isCharacterReferenceAttributeQuirk(e){if(!e&&this._isCharacterReferenceInAttribute()){const e=this._consume();return this._unconsume(),e===P.EQUALS_SIGN||ht(e)}return !1}_flushCodePointsConsumedAsCharacterReference(){if(this._isCharacterReferenceInAttribute())for(let e=0;e<this.tempBuff.length;e++)this.currentAttr.value+=mt(this.tempBuff[e]);else this._emitSeveralCodePoints(this.tempBuff);this.tempBuff=[];}[F](e){this.preprocessor.dropParsedChunk(),e===P.LESS_THAN_SIGN?this.state=b:e===P.AMPERSAND?(this.returnState=F,this.state=qe):e===P.NULL?(this._err(a),this._emitCodePoint(e)):e===P.EOF?this._emitEOFToken():this._emitCodePoint(e);}[U](e){this.preprocessor.dropParsedChunk(),e===P.AMPERSAND?(this.returnState=U,this.state=qe):e===P.LESS_THAN_SIGN?this.state=v:e===P.NULL?(this._err(a),this._emitChars(n)):e===P.EOF?this._emitEOFToken():this._emitCodePoint(e);}[G](e){this.preprocessor.dropParsedChunk(),e===P.LESS_THAN_SIGN?this.state=Q:e===P.NULL?(this._err(a),this._emitChars(n)):e===P.EOF?this._emitEOFToken():this._emitCodePoint(e);}[B](e){this.preprocessor.dropParsedChunk(),e===P.LESS_THAN_SIGN?this.state=V:e===P.NULL?(this._err(a),this._emitChars(n)):e===P.EOF?this._emitEOFToken():this._emitCodePoint(e);}[K](e){this.preprocessor.dropParsedChunk(),e===P.NULL?(this._err(a),this._emitChars(n)):e===P.EOF?this._emitEOFToken():this._emitCodePoint(e);}[b](e){e===P.EXCLAMATION_MARK?this.state=Ce:e===P.SOLIDUS?this.state=x:Et(e)?(this._createStartTagToken(),this._reconsumeInState(y)):e===P.QUESTION_MARK?(this._err("unexpected-question-mark-instead-of-tag-name"),this._createCommentToken(),this._reconsumeInState(de)):e===P.EOF?(this._err(h),this._emitChars("<"),this._emitEOFToken()):(this._err(T),this._emitChars("<"),this._reconsumeInState(F));}[x](e){Et(e)?(this._createEndTagToken(),this._reconsumeInState(y)):e===P.GREATER_THAN_SIGN?(this._err("missing-end-tag-name"),this.state=F):e===P.EOF?(this._err(h),this._emitChars("</"),this._emitEOFToken()):(this._err(T),this._createCommentToken(),this._reconsumeInState(de));}[y](e){it(e)?this.state=he:e===P.SOLIDUS?this.state=Ne:e===P.GREATER_THAN_SIGN?(this.state=F,this._emitCurrentToken()):at(e)?this.currentToken.tagName+=pt(e):e===P.NULL?(this._err(a),this.currentToken.tagName+=n):e===P.EOF?(this._err(c),this._emitEOFToken()):this.currentToken.tagName+=mt(e);}[v](e){e===P.SOLIDUS?(this.tempBuff=[],this.state=Y):(this._emitChars("<"),this._reconsumeInState(U));}[Y](e){Et(e)?(this._createEndTagToken(),this._reconsumeInState(w)):(this._emitChars("</"),this._reconsumeInState(U));}[w](e){if(at(e))this.currentToken.tagName+=pt(e),this.tempBuff.push(e);else if(Tt(e))this.currentToken.tagName+=mt(e),this.tempBuff.push(e);else {if(this.lastStartTagName===this.currentToken.tagName){if(it(e))return void(this.state=he);if(e===P.SOLIDUS)return void(this.state=Ne);if(e===P.GREATER_THAN_SIGN)return this.state=F,void this._emitCurrentToken()}this._emitChars("</"),this._emitSeveralCodePoints(this.tempBuff),this._reconsumeInState(U);}}[Q](e){e===P.SOLIDUS?(this.tempBuff=[],this.state=X):(this._emitChars("<"),this._reconsumeInState(G));}[X](e){Et(e)?(this._createEndTagToken(),this._reconsumeInState(W)):(this._emitChars("</"),this._reconsumeInState(G));}[W](e){if(at(e))this.currentToken.tagName+=pt(e),this.tempBuff.push(e);else if(Tt(e))this.currentToken.tagName+=mt(e),this.tempBuff.push(e);else {if(this.lastStartTagName===this.currentToken.tagName){if(it(e))return void(this.state=he);if(e===P.SOLIDUS)return void(this.state=Ne);if(e===P.GREATER_THAN_SIGN)return this._emitCurrentToken(),void(this.state=F)}this._emitChars("</"),this._emitSeveralCodePoints(this.tempBuff),this._reconsumeInState(G);}}[V](e){e===P.SOLIDUS?(this.tempBuff=[],this.state=j):e===P.EXCLAMATION_MARK?(this.state=q,this._emitChars("<!")):(this._emitChars("<"),this._reconsumeInState(B));}[j](e){Et(e)?(this._createEndTagToken(),this._reconsumeInState(z)):(this._emitChars("</"),this._reconsumeInState(B));}[z](e){if(at(e))this.currentToken.tagName+=pt(e),this.tempBuff.push(e);else if(Tt(e))this.currentToken.tagName+=mt(e),this.tempBuff.push(e);else {if(this.lastStartTagName===this.currentToken.tagName){if(it(e))return void(this.state=he);if(e===P.SOLIDUS)return void(this.state=Ne);if(e===P.GREATER_THAN_SIGN)return this._emitCurrentToken(),void(this.state=F)}this._emitChars("</"),this._emitSeveralCodePoints(this.tempBuff),this._reconsumeInState(B);}}[q](e){e===P.HYPHEN_MINUS?(this.state=J,this._emitChars("-")):this._reconsumeInState(B);}[J](e){e===P.HYPHEN_MINUS?(this.state=ee,this._emitChars("-")):this._reconsumeInState(B);}[Z](e){e===P.HYPHEN_MINUS?(this.state=$,this._emitChars("-")):e===P.LESS_THAN_SIGN?this.state=te:e===P.NULL?(this._err(a),this._emitChars(n)):e===P.EOF?(this._err(O),this._emitEOFToken()):this._emitCodePoint(e);}[$](e){e===P.HYPHEN_MINUS?(this.state=ee,this._emitChars("-")):e===P.LESS_THAN_SIGN?this.state=te:e===P.NULL?(this._err(a),this.state=Z,this._emitChars(n)):e===P.EOF?(this._err(O),this._emitEOFToken()):(this.state=Z,this._emitCodePoint(e));}[ee](e){e===P.HYPHEN_MINUS?this._emitChars("-"):e===P.LESS_THAN_SIGN?this.state=te:e===P.GREATER_THAN_SIGN?(this.state=B,this._emitChars(">")):e===P.NULL?(this._err(a),this.state=Z,this._emitChars(n)):e===P.EOF?(this._err(O),this._emitEOFToken()):(this.state=Z,this._emitCodePoint(e));}[te](e){e===P.SOLIDUS?(this.tempBuff=[],this.state=ne):Et(e)?(this.tempBuff=[],this._emitChars("<"),this._reconsumeInState(re)):(this._emitChars("<"),this._reconsumeInState(Z));}[ne](e){Et(e)?(this._createEndTagToken(),this._reconsumeInState(se)):(this._emitChars("</"),this._reconsumeInState(Z));}[se](e){if(at(e))this.currentToken.tagName+=pt(e),this.tempBuff.push(e);else if(Tt(e))this.currentToken.tagName+=mt(e),this.tempBuff.push(e);else {if(this.lastStartTagName===this.currentToken.tagName){if(it(e))return void(this.state=he);if(e===P.SOLIDUS)return void(this.state=Ne);if(e===P.GREATER_THAN_SIGN)return this._emitCurrentToken(),void(this.state=F)}this._emitChars("</"),this._emitSeveralCodePoints(this.tempBuff),this._reconsumeInState(Z);}}[re](e){it(e)||e===P.SOLIDUS||e===P.GREATER_THAN_SIGN?(this.state=this._isTempBufferEqualToScriptString()?ie:Z,this._emitCodePoint(e)):at(e)?(this.tempBuff.push(lt(e)),this._emitCodePoint(e)):Tt(e)?(this.tempBuff.push(e),this._emitCodePoint(e)):this._reconsumeInState(Z);}[ie](e){e===P.HYPHEN_MINUS?(this.state=oe,this._emitChars("-")):e===P.LESS_THAN_SIGN?(this.state=Te,this._emitChars("<")):e===P.NULL?(this._err(a),this._emitChars(n)):e===P.EOF?(this._err(O),this._emitEOFToken()):this._emitCodePoint(e);}[oe](e){e===P.HYPHEN_MINUS?(this.state=ae,this._emitChars("-")):e===P.LESS_THAN_SIGN?(this.state=Te,this._emitChars("<")):e===P.NULL?(this._err(a),this.state=ie,this._emitChars(n)):e===P.EOF?(this._err(O),this._emitEOFToken()):(this.state=ie,this._emitCodePoint(e));}[ae](e){e===P.HYPHEN_MINUS?this._emitChars("-"):e===P.LESS_THAN_SIGN?(this.state=Te,this._emitChars("<")):e===P.GREATER_THAN_SIGN?(this.state=B,this._emitChars(">")):e===P.NULL?(this._err(a),this.state=ie,this._emitChars(n)):e===P.EOF?(this._err(O),this._emitEOFToken()):(this.state=ie,this._emitCodePoint(e));}[Te](e){e===P.SOLIDUS?(this.tempBuff=[],this.state=Ee,this._emitChars("/")):this._reconsumeInState(ie);}[Ee](e){it(e)||e===P.SOLIDUS||e===P.GREATER_THAN_SIGN?(this.state=this._isTempBufferEqualToScriptString()?Z:ie,this._emitCodePoint(e)):at(e)?(this.tempBuff.push(lt(e)),this._emitCodePoint(e)):Tt(e)?(this.tempBuff.push(e),this._emitCodePoint(e)):this._reconsumeInState(ie);}[he](e){it(e)||(e===P.SOLIDUS||e===P.GREATER_THAN_SIGN||e===P.EOF?this._reconsumeInState(_e):e===P.EQUALS_SIGN?(this._err("unexpected-equals-sign-before-attribute-name"),this._createAttr("="),this.state=ce):(this._createAttr(""),this._reconsumeInState(ce)));}[ce](e){it(e)||e===P.SOLIDUS||e===P.GREATER_THAN_SIGN||e===P.EOF?(this._leaveAttrName(_e),this._unconsume()):e===P.EQUALS_SIGN?this._leaveAttrName(le):at(e)?this.currentAttr.name+=pt(e):e===P.QUOTATION_MARK||e===P.APOSTROPHE||e===P.LESS_THAN_SIGN?(this._err("unexpected-character-in-attribute-name"),this.currentAttr.name+=mt(e)):e===P.NULL?(this._err(a),this.currentAttr.name+=n):this.currentAttr.name+=mt(e);}[_e](e){it(e)||(e===P.SOLIDUS?this.state=Ne:e===P.EQUALS_SIGN?this.state=le:e===P.GREATER_THAN_SIGN?(this.state=F,this._emitCurrentToken()):e===P.EOF?(this._err(c),this._emitEOFToken()):(this._createAttr(""),this._reconsumeInState(ce)));}[le](e){it(e)||(e===P.QUOTATION_MARK?this.state=me:e===P.APOSTROPHE?this.state=pe:e===P.GREATER_THAN_SIGN?(this._err("missing-attribute-value"),this.state=F,this._emitCurrentToken()):this._reconsumeInState(Ae));}[me](e){e===P.QUOTATION_MARK?this.state=ue:e===P.AMPERSAND?(this.returnState=me,this.state=qe):e===P.NULL?(this._err(a),this.currentAttr.value+=n):e===P.EOF?(this._err(c),this._emitEOFToken()):this.currentAttr.value+=mt(e);}[pe](e){e===P.APOSTROPHE?this.state=ue:e===P.AMPERSAND?(this.returnState=pe,this.state=qe):e===P.NULL?(this._err(a),this.currentAttr.value+=n):e===P.EOF?(this._err(c),this._emitEOFToken()):this.currentAttr.value+=mt(e);}[Ae](e){it(e)?this._leaveAttrValue(he):e===P.AMPERSAND?(this.returnState=Ae,this.state=qe):e===P.GREATER_THAN_SIGN?(this._leaveAttrValue(F),this._emitCurrentToken()):e===P.NULL?(this._err(a),this.currentAttr.value+=n):e===P.QUOTATION_MARK||e===P.APOSTROPHE||e===P.LESS_THAN_SIGN||e===P.EQUALS_SIGN||e===P.GRAVE_ACCENT?(this._err("unexpected-character-in-unquoted-attribute-value"),this.currentAttr.value+=mt(e)):e===P.EOF?(this._err(c),this._emitEOFToken()):this.currentAttr.value+=mt(e);}[ue](e){it(e)?this._leaveAttrValue(he):e===P.SOLIDUS?this._leaveAttrValue(Ne):e===P.GREATER_THAN_SIGN?(this._leaveAttrValue(F),this._emitCurrentToken()):e===P.EOF?(this._err(c),this._emitEOFToken()):(this._err("missing-whitespace-between-attributes"),this._reconsumeInState(he));}[Ne](e){e===P.GREATER_THAN_SIGN?(this.currentToken.selfClosing=!0,this.state=F,this._emitCurrentToken()):e===P.EOF?(this._err(c),this._emitEOFToken()):(this._err("unexpected-solidus-in-tag"),this._reconsumeInState(he));}[de](e){e===P.GREATER_THAN_SIGN?(this.state=F,this._emitCurrentToken()):e===P.EOF?(this._emitCurrentToken(),this._emitEOFToken()):e===P.NULL?(this._err(a),this.currentToken.data+=n):this.currentToken.data+=mt(e);}[Ce](e){this._consumeSequenceIfMatch(H.DASH_DASH_STRING,e,!0)?(this._createCommentToken(),this.state=Oe):this._consumeSequenceIfMatch(H.DOCTYPE_STRING,e,!1)?this.state=He:this._consumeSequenceIfMatch(H.CDATA_START_STRING,e,!0)?this.allowCDATA?this.state=Ve:(this._err("cdata-in-html-content"),this._createCommentToken(),this.currentToken.data="[CDATA[",this.state=de):this._ensureHibernation()||(this._err("incorrectly-opened-comment"),this._createCommentToken(),this._reconsumeInState(de));}[Oe](e){e===P.HYPHEN_MINUS?this.state=fe:e===P.GREATER_THAN_SIGN?(this._err(S),this.state=F,this._emitCurrentToken()):this._reconsumeInState(Se);}[fe](e){e===P.HYPHEN_MINUS?this.state=ge:e===P.GREATER_THAN_SIGN?(this._err(S),this.state=F,this._emitCurrentToken()):e===P.EOF?(this._err(R),this._emitCurrentToken(),this._emitEOFToken()):(this.currentToken.data+="-",this._reconsumeInState(Se));}[Se](e){e===P.HYPHEN_MINUS?this.state=Me:e===P.LESS_THAN_SIGN?(this.currentToken.data+="<",this.state=Re):e===P.NULL?(this._err(a),this.currentToken.data+=n):e===P.EOF?(this._err(R),this._emitCurrentToken(),this._emitEOFToken()):this.currentToken.data+=mt(e);}[Re](e){e===P.EXCLAMATION_MARK?(this.currentToken.data+="!",this.state=Ie):e===P.LESS_THAN_SIGN?this.currentToken.data+="!":this._reconsumeInState(Se);}[Ie](e){e===P.HYPHEN_MINUS?this.state=Le:this._reconsumeInState(Se);}[Le](e){e===P.HYPHEN_MINUS?this.state=ke:this._reconsumeInState(Me);}[ke](e){e!==P.GREATER_THAN_SIGN&&e!==P.EOF&&this._err("nested-comment"),this._reconsumeInState(ge);}[Me](e){e===P.HYPHEN_MINUS?this.state=ge:e===P.EOF?(this._err(R),this._emitCurrentToken(),this._emitEOFToken()):(this.currentToken.data+="-",this._reconsumeInState(Se));}[ge](e){e===P.GREATER_THAN_SIGN?(this.state=F,this._emitCurrentToken()):e===P.EXCLAMATION_MARK?this.state=Pe:e===P.HYPHEN_MINUS?this.currentToken.data+="-":e===P.EOF?(this._err(R),this._emitCurrentToken(),this._emitEOFToken()):(this.currentToken.data+="--",this._reconsumeInState(Se));}[Pe](e){e===P.HYPHEN_MINUS?(this.currentToken.data+="--!",this.state=Me):e===P.GREATER_THAN_SIGN?(this._err("incorrectly-closed-comment"),this.state=F,this._emitCurrentToken()):e===P.EOF?(this._err(R),this._emitCurrentToken(),this._emitEOFToken()):(this.currentToken.data+="--!",this._reconsumeInState(Se));}[He](e){it(e)?this.state=De:e===P.GREATER_THAN_SIGN?this._reconsumeInState(De):e===P.EOF?(this._err(f),this._createDoctypeToken(null),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err("missing-whitespace-before-doctype-name"),this._reconsumeInState(De));}[De](e){it(e)||(at(e)?(this._createDoctypeToken(pt(e)),this.state=Fe):e===P.NULL?(this._err(a),this._createDoctypeToken(n),this.state=Fe):e===P.GREATER_THAN_SIGN?(this._err("missing-doctype-name"),this._createDoctypeToken(null),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this.state=F):e===P.EOF?(this._err(f),this._createDoctypeToken(null),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._createDoctypeToken(mt(e)),this.state=Fe));}[Fe](e){it(e)?this.state=Ue:e===P.GREATER_THAN_SIGN?(this.state=F,this._emitCurrentToken()):at(e)?this.currentToken.name+=pt(e):e===P.NULL?(this._err(a),this.currentToken.name+=n):e===P.EOF?(this._err(f),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):this.currentToken.name+=mt(e);}[Ue](e){it(e)||(e===P.GREATER_THAN_SIGN?(this.state=F,this._emitCurrentToken()):e===P.EOF?(this._err(f),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):this._consumeSequenceIfMatch(H.PUBLIC_STRING,e,!1)?this.state=Ge:this._consumeSequenceIfMatch(H.SYSTEM_STRING,e,!1)?this.state=ve:this._ensureHibernation()||(this._err("invalid-character-sequence-after-doctype-name"),this.currentToken.forceQuirks=!0,this._reconsumeInState(We)));}[Ge](e){it(e)?this.state=Be:e===P.QUOTATION_MARK?(this._err(_),this.currentToken.publicId="",this.state=Ke):e===P.APOSTROPHE?(this._err(_),this.currentToken.publicId="",this.state=be):e===P.GREATER_THAN_SIGN?(this._err(u),this.currentToken.forceQuirks=!0,this.state=F,this._emitCurrentToken()):e===P.EOF?(this._err(f),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(p),this.currentToken.forceQuirks=!0,this._reconsumeInState(We));}[Be](e){it(e)||(e===P.QUOTATION_MARK?(this.currentToken.publicId="",this.state=Ke):e===P.APOSTROPHE?(this.currentToken.publicId="",this.state=be):e===P.GREATER_THAN_SIGN?(this._err(u),this.currentToken.forceQuirks=!0,this.state=F,this._emitCurrentToken()):e===P.EOF?(this._err(f),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(p),this.currentToken.forceQuirks=!0,this._reconsumeInState(We)));}[Ke](e){e===P.QUOTATION_MARK?this.state=xe:e===P.NULL?(this._err(a),this.currentToken.publicId+=n):e===P.GREATER_THAN_SIGN?(this._err(d),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this.state=F):e===P.EOF?(this._err(f),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):this.currentToken.publicId+=mt(e);}[be](e){e===P.APOSTROPHE?this.state=xe:e===P.NULL?(this._err(a),this.currentToken.publicId+=n):e===P.GREATER_THAN_SIGN?(this._err(d),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this.state=F):e===P.EOF?(this._err(f),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):this.currentToken.publicId+=mt(e);}[xe](e){it(e)?this.state=ye:e===P.GREATER_THAN_SIGN?(this.state=F,this._emitCurrentToken()):e===P.QUOTATION_MARK?(this._err(l),this.currentToken.systemId="",this.state=we):e===P.APOSTROPHE?(this._err(l),this.currentToken.systemId="",this.state=Qe):e===P.EOF?(this._err(f),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(A),this.currentToken.forceQuirks=!0,this._reconsumeInState(We));}[ye](e){it(e)||(e===P.GREATER_THAN_SIGN?(this._emitCurrentToken(),this.state=F):e===P.QUOTATION_MARK?(this.currentToken.systemId="",this.state=we):e===P.APOSTROPHE?(this.currentToken.systemId="",this.state=Qe):e===P.EOF?(this._err(f),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(A),this.currentToken.forceQuirks=!0,this._reconsumeInState(We)));}[ve](e){it(e)?this.state=Ye:e===P.QUOTATION_MARK?(this._err(m),this.currentToken.systemId="",this.state=we):e===P.APOSTROPHE?(this._err(m),this.currentToken.systemId="",this.state=Qe):e===P.GREATER_THAN_SIGN?(this._err(N),this.currentToken.forceQuirks=!0,this.state=F,this._emitCurrentToken()):e===P.EOF?(this._err(f),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(A),this.currentToken.forceQuirks=!0,this._reconsumeInState(We));}[Ye](e){it(e)||(e===P.QUOTATION_MARK?(this.currentToken.systemId="",this.state=we):e===P.APOSTROPHE?(this.currentToken.systemId="",this.state=Qe):e===P.GREATER_THAN_SIGN?(this._err(N),this.currentToken.forceQuirks=!0,this.state=F,this._emitCurrentToken()):e===P.EOF?(this._err(f),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(A),this.currentToken.forceQuirks=!0,this._reconsumeInState(We)));}[we](e){e===P.QUOTATION_MARK?this.state=Xe:e===P.NULL?(this._err(a),this.currentToken.systemId+=n):e===P.GREATER_THAN_SIGN?(this._err(C),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this.state=F):e===P.EOF?(this._err(f),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):this.currentToken.systemId+=mt(e);}[Qe](e){e===P.APOSTROPHE?this.state=Xe:e===P.NULL?(this._err(a),this.currentToken.systemId+=n):e===P.GREATER_THAN_SIGN?(this._err(C),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this.state=F):e===P.EOF?(this._err(f),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):this.currentToken.systemId+=mt(e);}[Xe](e){it(e)||(e===P.GREATER_THAN_SIGN?(this._emitCurrentToken(),this.state=F):e===P.EOF?(this._err(f),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err("unexpected-character-after-doctype-system-identifier"),this._reconsumeInState(We)));}[We](e){e===P.GREATER_THAN_SIGN?(this._emitCurrentToken(),this.state=F):e===P.NULL?this._err(a):e===P.EOF&&(this._emitCurrentToken(),this._emitEOFToken());}[Ve](e){e===P.RIGHT_SQUARE_BRACKET?this.state=je:e===P.EOF?(this._err("eof-in-cdata"),this._emitEOFToken()):this._emitCodePoint(e);}[je](e){e===P.RIGHT_SQUARE_BRACKET?this.state=ze:(this._emitChars("]"),this._reconsumeInState(Ve));}[ze](e){e===P.GREATER_THAN_SIGN?this.state=F:e===P.RIGHT_SQUARE_BRACKET?this._emitChars("]"):(this._emitChars("]]"),this._reconsumeInState(Ve));}[qe](e){this.tempBuff=[P.AMPERSAND],e===P.NUMBER_SIGN?(this.tempBuff.push(e),this.state=$e):ht(e)?this._reconsumeInState(Je):(this._flushCodePointsConsumedAsCharacterReference(),this._reconsumeInState(this.returnState));}[Je](e){const t=this._matchNamedCharacterReference(e);if(this._ensureHibernation())this.tempBuff=[P.AMPERSAND];else if(t){const e=this.tempBuff[this.tempBuff.length-1]===P.SEMICOLON;this._isCharacterReferenceAttributeQuirk(e)||(e||this._errOnNextCodePoint(E),this.tempBuff=t),this._flushCodePointsConsumedAsCharacterReference(),this.state=this.returnState;}else this._flushCodePointsConsumedAsCharacterReference(),this.state=Ze;}[Ze](e){ht(e)?this._isCharacterReferenceInAttribute()?this.currentAttr.value+=mt(e):this._emitCodePoint(e):(e===P.SEMICOLON&&this._err("unknown-named-character-reference"),this._reconsumeInState(this.returnState));}[$e](e){this.charRefCode=0,e===P.LATIN_SMALL_X||e===P.LATIN_CAPITAL_X?(this.tempBuff.push(e),this.state=et):this._reconsumeInState(tt);}[et](e){!function(e){return ot(e)||ct(e)||_t(e)}(e)?(this._err(I),this._flushCodePointsConsumedAsCharacterReference(),this._reconsumeInState(this.returnState)):this._reconsumeInState(nt);}[tt](e){ot(e)?this._reconsumeInState(st):(this._err(I),this._flushCodePointsConsumedAsCharacterReference(),this._reconsumeInState(this.returnState));}[nt](e){ct(e)?this.charRefCode=16*this.charRefCode+e-55:_t(e)?this.charRefCode=16*this.charRefCode+e-87:ot(e)?this.charRefCode=16*this.charRefCode+e-48:e===P.SEMICOLON?this.state=rt:(this._err(E),this._reconsumeInState(rt));}[st](e){ot(e)?this.charRefCode=10*this.charRefCode+e-48:e===P.SEMICOLON?this.state=rt:(this._err(E),this._reconsumeInState(rt));}[rt](){if(this.charRefCode===P.NULL)this._err("null-character-reference"),this.charRefCode=P.REPLACEMENT_CHARACTER;else if(this.charRefCode>1114111)this._err("character-reference-outside-unicode-range"),this.charRefCode=P.REPLACEMENT_CHARACTER;else if(r(this.charRefCode))this._err("surrogate-character-reference"),this.charRefCode=P.REPLACEMENT_CHARACTER;else if(o(this.charRefCode))this._err("noncharacter-character-reference");else if(i(this.charRefCode)||this.charRefCode===P.CARRIAGE_RETURN){this._err("control-character-reference");const e=D[this.charRefCode];e&&(this.charRefCode=e);}this.tempBuff=[this.charRefCode],this._flushCodePointsConsumedAsCharacterReference(),this._reconsumeInState(this.returnState);}}ut.CHARACTER_TOKEN="CHARACTER_TOKEN",ut.NULL_CHARACTER_TOKEN="NULL_CHARACTER_TOKEN",ut.WHITESPACE_CHARACTER_TOKEN="WHITESPACE_CHARACTER_TOKEN",ut.START_TAG_TOKEN="START_TAG_TOKEN",ut.END_TAG_TOKEN="END_TAG_TOKEN",ut.COMMENT_TOKEN="COMMENT_TOKEN",ut.DOCTYPE_TOKEN="DOCTYPE_TOKEN",ut.EOF_TOKEN="EOF_TOKEN",ut.HIBERNATION_TOKEN="HIBERNATION_TOKEN",ut.MODE={DATA:F,RCDATA:U,RAWTEXT:G,SCRIPT_DATA:B,PLAINTEXT:K},ut.getTokenAttr=function(e,t){for(let n=e.attrs.length-1;n>=0;n--)if(e.attrs[n].name===t)return e.attrs[n].value;return null};var Nt=ut;function dt(e,t,n){return e(n={path:t,exports:{},require:function(e,t){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==t&&n.path)}},n.exports),n.exports}var Ct=dt((function(e,t){const n=t.NAMESPACES={HTML:"http://www.w3.org/1999/xhtml",MATHML:"http://www.w3.org/1998/Math/MathML",SVG:"http://www.w3.org/2000/svg",XLINK:"http://www.w3.org/1999/xlink",XML:"http://www.w3.org/XML/1998/namespace",XMLNS:"http://www.w3.org/2000/xmlns/"};t.ATTRS={TYPE:"type",ACTION:"action",ENCODING:"encoding",PROMPT:"prompt",NAME:"name",COLOR:"color",FACE:"face",SIZE:"size"},t.DOCUMENT_MODE={NO_QUIRKS:"no-quirks",QUIRKS:"quirks",LIMITED_QUIRKS:"limited-quirks"};const s=t.TAG_NAMES={A:"a",ADDRESS:"address",ANNOTATION_XML:"annotation-xml",APPLET:"applet",AREA:"area",ARTICLE:"article",ASIDE:"aside",B:"b",BASE:"base",BASEFONT:"basefont",BGSOUND:"bgsound",BIG:"big",BLOCKQUOTE:"blockquote",BODY:"body",BR:"br",BUTTON:"button",CAPTION:"caption",CENTER:"center",CODE:"code",COL:"col",COLGROUP:"colgroup",DD:"dd",DESC:"desc",DETAILS:"details",DIALOG:"dialog",DIR:"dir",DIV:"div",DL:"dl",DT:"dt",EM:"em",EMBED:"embed",FIELDSET:"fieldset",FIGCAPTION:"figcaption",FIGURE:"figure",FONT:"font",FOOTER:"footer",FOREIGN_OBJECT:"foreignObject",FORM:"form",FRAME:"frame",FRAMESET:"frameset",H1:"h1",H2:"h2",H3:"h3",H4:"h4",H5:"h5",H6:"h6",HEAD:"head",HEADER:"header",HGROUP:"hgroup",HR:"hr",HTML:"html",I:"i",IMG:"img",IMAGE:"image",INPUT:"input",IFRAME:"iframe",KEYGEN:"keygen",LABEL:"label",LI:"li",LINK:"link",LISTING:"listing",MAIN:"main",MALIGNMARK:"malignmark",MARQUEE:"marquee",MATH:"math",MENU:"menu",META:"meta",MGLYPH:"mglyph",MI:"mi",MO:"mo",MN:"mn",MS:"ms",MTEXT:"mtext",NAV:"nav",NOBR:"nobr",NOFRAMES:"noframes",NOEMBED:"noembed",NOSCRIPT:"noscript",OBJECT:"object",OL:"ol",OPTGROUP:"optgroup",OPTION:"option",P:"p",PARAM:"param",PLAINTEXT:"plaintext",PRE:"pre",RB:"rb",RP:"rp",RT:"rt",RTC:"rtc",RUBY:"ruby",S:"s",SCRIPT:"script",SECTION:"section",SELECT:"select",SOURCE:"source",SMALL:"small",SPAN:"span",STRIKE:"strike",STRONG:"strong",STYLE:"style",SUB:"sub",SUMMARY:"summary",SUP:"sup",TABLE:"table",TBODY:"tbody",TEMPLATE:"template",TEXTAREA:"textarea",TFOOT:"tfoot",TD:"td",TH:"th",THEAD:"thead",TITLE:"title",TR:"tr",TRACK:"track",TT:"tt",U:"u",UL:"ul",SVG:"svg",VAR:"var",WBR:"wbr",XMP:"xmp"};t.SPECIAL_ELEMENTS={[n.HTML]:{[s.ADDRESS]:!0,[s.APPLET]:!0,[s.AREA]:!0,[s.ARTICLE]:!0,[s.ASIDE]:!0,[s.BASE]:!0,[s.BASEFONT]:!0,[s.BGSOUND]:!0,[s.BLOCKQUOTE]:!0,[s.BODY]:!0,[s.BR]:!0,[s.BUTTON]:!0,[s.CAPTION]:!0,[s.CENTER]:!0,[s.COL]:!0,[s.COLGROUP]:!0,[s.DD]:!0,[s.DETAILS]:!0,[s.DIR]:!0,[s.DIV]:!0,[s.DL]:!0,[s.DT]:!0,[s.EMBED]:!0,[s.FIELDSET]:!0,[s.FIGCAPTION]:!0,[s.FIGURE]:!0,[s.FOOTER]:!0,[s.FORM]:!0,[s.FRAME]:!0,[s.FRAMESET]:!0,[s.H1]:!0,[s.H2]:!0,[s.H3]:!0,[s.H4]:!0,[s.H5]:!0,[s.H6]:!0,[s.HEAD]:!0,[s.HEADER]:!0,[s.HGROUP]:!0,[s.HR]:!0,[s.HTML]:!0,[s.IFRAME]:!0,[s.IMG]:!0,[s.INPUT]:!0,[s.LI]:!0,[s.LINK]:!0,[s.LISTING]:!0,[s.MAIN]:!0,[s.MARQUEE]:!0,[s.MENU]:!0,[s.META]:!0,[s.NAV]:!0,[s.NOEMBED]:!0,[s.NOFRAMES]:!0,[s.NOSCRIPT]:!0,[s.OBJECT]:!0,[s.OL]:!0,[s.P]:!0,[s.PARAM]:!0,[s.PLAINTEXT]:!0,[s.PRE]:!0,[s.SCRIPT]:!0,[s.SECTION]:!0,[s.SELECT]:!0,[s.SOURCE]:!0,[s.STYLE]:!0,[s.SUMMARY]:!0,[s.TABLE]:!0,[s.TBODY]:!0,[s.TD]:!0,[s.TEMPLATE]:!0,[s.TEXTAREA]:!0,[s.TFOOT]:!0,[s.TH]:!0,[s.THEAD]:!0,[s.TITLE]:!0,[s.TR]:!0,[s.TRACK]:!0,[s.UL]:!0,[s.WBR]:!0,[s.XMP]:!0},[n.MATHML]:{[s.MI]:!0,[s.MO]:!0,[s.MN]:!0,[s.MS]:!0,[s.MTEXT]:!0,[s.ANNOTATION_XML]:!0},[n.SVG]:{[s.TITLE]:!0,[s.FOREIGN_OBJECT]:!0,[s.DESC]:!0}};}));const Ot=Ct.TAG_NAMES,ft=Ct.NAMESPACES;function St(e){switch(e.length){case 1:return e===Ot.P;case 2:return e===Ot.RB||e===Ot.RP||e===Ot.RT||e===Ot.DD||e===Ot.DT||e===Ot.LI;case 3:return e===Ot.RTC;case 6:return e===Ot.OPTION;case 8:return e===Ot.OPTGROUP}return !1}function Rt(e){switch(e.length){case 1:return e===Ot.P;case 2:return e===Ot.RB||e===Ot.RP||e===Ot.RT||e===Ot.DD||e===Ot.DT||e===Ot.LI||e===Ot.TD||e===Ot.TH||e===Ot.TR;case 3:return e===Ot.RTC;case 5:return e===Ot.TBODY||e===Ot.TFOOT||e===Ot.THEAD;case 6:return e===Ot.OPTION;case 7:return e===Ot.CAPTION;case 8:return e===Ot.OPTGROUP||e===Ot.COLGROUP}return !1}function It(e,t){switch(e.length){case 2:if(e===Ot.TD||e===Ot.TH)return t===ft.HTML;if(e===Ot.MI||e===Ot.MO||e===Ot.MN||e===Ot.MS)return t===ft.MATHML;break;case 4:if(e===Ot.HTML)return t===ft.HTML;if(e===Ot.DESC)return t===ft.SVG;break;case 5:if(e===Ot.TABLE)return t===ft.HTML;if(e===Ot.MTEXT)return t===ft.MATHML;if(e===Ot.TITLE)return t===ft.SVG;break;case 6:return (e===Ot.APPLET||e===Ot.OBJECT)&&t===ft.HTML;case 7:return (e===Ot.CAPTION||e===Ot.MARQUEE)&&t===ft.HTML;case 8:return e===Ot.TEMPLATE&&t===ft.HTML;case 13:return e===Ot.FOREIGN_OBJECT&&t===ft.SVG;case 14:return e===Ot.ANNOTATION_XML&&t===ft.MATHML}return !1}class Lt{constructor(e){this.length=0,this.entries=[],this.treeAdapter=e,this.bookmark=null;}_getNoahArkConditionCandidates(e){const t=[];if(this.length>=3){const n=this.treeAdapter.getAttrList(e).length,s=this.treeAdapter.getTagName(e),r=this.treeAdapter.getNamespaceURI(e);for(let e=this.length-1;e>=0;e--){const i=this.entries[e];if(i.type===Lt.MARKER_ENTRY)break;const o=i.element,a=this.treeAdapter.getAttrList(o);this.treeAdapter.getTagName(o)===s&&this.treeAdapter.getNamespaceURI(o)===r&&a.length===n&&t.push({idx:e,attrs:a});}}return t.length<3?[]:t}_ensureNoahArkCondition(e){const t=this._getNoahArkConditionCandidates(e);let n=t.length;if(n){const s=this.treeAdapter.getAttrList(e),r=s.length,i=Object.create(null);for(let e=0;e<r;e++){const t=s[e];i[t.name]=t.value;}for(let e=0;e<r;e++)for(let s=0;s<n;s++){const r=t[s].attrs[e];if(i[r.name]!==r.value&&(t.splice(s,1),n--),t.length<3)return}for(let e=n-1;e>=2;e--)this.entries.splice(t[e].idx,1),this.length--;}}insertMarker(){this.entries.push({type:Lt.MARKER_ENTRY}),this.length++;}pushElement(e,t){this._ensureNoahArkCondition(e),this.entries.push({type:Lt.ELEMENT_ENTRY,element:e,token:t}),this.length++;}insertElementAfterBookmark(e,t){let n=this.length-1;for(;n>=0&&this.entries[n]!==this.bookmark;n--);this.entries.splice(n+1,0,{type:Lt.ELEMENT_ENTRY,element:e,token:t}),this.length++;}removeEntry(e){for(let t=this.length-1;t>=0;t--)if(this.entries[t]===e){this.entries.splice(t,1),this.length--;break}}clearToLastMarker(){for(;this.length;){const e=this.entries.pop();if(this.length--,e.type===Lt.MARKER_ENTRY)break}}getElementEntryInScopeWithTagName(e){for(let t=this.length-1;t>=0;t--){const n=this.entries[t];if(n.type===Lt.MARKER_ENTRY)return null;if(this.treeAdapter.getTagName(n.element)===e)return n}return null}getElementEntry(e){for(let t=this.length-1;t>=0;t--){const n=this.entries[t];if(n.type===Lt.ELEMENT_ENTRY&&n.element===e)return n}return null}}Lt.MARKER_ENTRY="MARKER_ENTRY",Lt.ELEMENT_ENTRY="ELEMENT_ENTRY";var kt=Lt;class Mt{constructor(e){const t={},n=this._getOverriddenMethods(this,t);for(const s of Object.keys(n))"function"==typeof n[s]&&(t[s]=e[s],e[s]=n[s]);}_getOverriddenMethods(){throw new Error("Not implemented")}}Mt.install=function(e,t,n){e.__mixins||(e.__mixins=[]);for(let n=0;n<e.__mixins.length;n++)if(e.__mixins[n].constructor===t)return e.__mixins[n];const s=new t(e,n);return e.__mixins.push(s),s};var gt=Mt,Pt=class extends gt{constructor(e){super(e),this.preprocessor=e,this.isEol=!1,this.lineStartPos=0,this.droppedBufferSize=0,this.offset=0,this.col=0,this.line=1;}_getOverriddenMethods(e,t){return {advance(){const n=this.pos+1,s=this.html[n];return e.isEol&&(e.isEol=!1,e.line++,e.lineStartPos=n),("\n"===s||"\r"===s&&"\n"!==this.html[n+1])&&(e.isEol=!0),e.col=n-e.lineStartPos+1,e.offset=e.droppedBufferSize+n,t.advance.call(this)},retreat(){t.retreat.call(this),e.isEol=!1,e.col=this.pos-e.lineStartPos+1;},dropParsedChunk(){const n=this.pos;t.dropParsedChunk.call(this);const s=n-this.pos;e.lineStartPos-=s,e.droppedBufferSize+=s,e.offset=e.droppedBufferSize+this.pos;}}}},Ht=class extends gt{constructor(e){super(e),this.tokenizer=e,this.posTracker=gt.install(e.preprocessor,Pt),this.currentAttrLocation=null,this.ctLoc=null;}_getCurrentLocation(){return {startLine:this.posTracker.line,startCol:this.posTracker.col,startOffset:this.posTracker.offset,endLine:-1,endCol:-1,endOffset:-1}}_attachCurrentAttrLocationInfo(){this.currentAttrLocation.endLine=this.posTracker.line,this.currentAttrLocation.endCol=this.posTracker.col,this.currentAttrLocation.endOffset=this.posTracker.offset;const e=this.tokenizer.currentToken,t=this.tokenizer.currentAttr;e.location.attrs||(e.location.attrs=Object.create(null)),e.location.attrs[t.name]=this.currentAttrLocation;}_getOverriddenMethods(e,t){const n={_createStartTagToken(){t._createStartTagToken.call(this),this.currentToken.location=e.ctLoc;},_createEndTagToken(){t._createEndTagToken.call(this),this.currentToken.location=e.ctLoc;},_createCommentToken(){t._createCommentToken.call(this),this.currentToken.location=e.ctLoc;},_createDoctypeToken(n){t._createDoctypeToken.call(this,n),this.currentToken.location=e.ctLoc;},_createCharacterToken(n,s){t._createCharacterToken.call(this,n,s),this.currentCharacterToken.location=e.ctLoc;},_createEOFToken(){t._createEOFToken.call(this),this.currentToken.location=e._getCurrentLocation();},_createAttr(n){t._createAttr.call(this,n),e.currentAttrLocation=e._getCurrentLocation();},_leaveAttrName(n){t._leaveAttrName.call(this,n),e._attachCurrentAttrLocationInfo();},_leaveAttrValue(n){t._leaveAttrValue.call(this,n),e._attachCurrentAttrLocationInfo();},_emitCurrentToken(){const n=this.currentToken.location;this.currentCharacterToken&&(this.currentCharacterToken.location.endLine=n.startLine,this.currentCharacterToken.location.endCol=n.startCol,this.currentCharacterToken.location.endOffset=n.startOffset),this.currentToken.type===Nt.EOF_TOKEN?(n.endLine=n.startLine,n.endCol=n.startCol,n.endOffset=n.startOffset):(n.endLine=e.posTracker.line,n.endCol=e.posTracker.col+1,n.endOffset=e.posTracker.offset+1),t._emitCurrentToken.call(this);},_emitCurrentCharacterToken(){const n=this.currentCharacterToken&&this.currentCharacterToken.location;n&&-1===n.endOffset&&(n.endLine=e.posTracker.line,n.endCol=e.posTracker.col,n.endOffset=e.posTracker.offset),t._emitCurrentCharacterToken.call(this);}};return Object.keys(Nt.MODE).forEach((s=>{const r=Nt.MODE[s];n[r]=function(n){e.ctLoc=e._getCurrentLocation(),t[r].call(this,n);};})),n}},Dt=class extends gt{constructor(e,t){super(e),this.onItemPop=t.onItemPop;}_getOverriddenMethods(e,t){return {pop(){e.onItemPop(this.current),t.pop.call(this);},popAllUpToHtmlElement(){for(let t=this.stackTop;t>0;t--)e.onItemPop(this.items[t]);t.popAllUpToHtmlElement.call(this);},remove(n){e.onItemPop(this.current),t.remove.call(this,n);}}}};const Ft=Ct.TAG_NAMES;var Ut=class extends gt{constructor(e){super(e),this.parser=e,this.treeAdapter=this.parser.treeAdapter,this.posTracker=null,this.lastStartTagToken=null,this.lastFosterParentingLocation=null,this.currentToken=null;}_setStartLocation(e){let t=null;this.lastStartTagToken&&(t=Object.assign({},this.lastStartTagToken.location),t.startTag=this.lastStartTagToken.location),this.treeAdapter.setNodeSourceCodeLocation(e,t);}_setEndLocation(e,t){if(this.treeAdapter.getNodeSourceCodeLocation(e)&&t.location){const n=t.location,s=this.treeAdapter.getTagName(e),r={};t.type===Nt.END_TAG_TOKEN&&s===t.tagName?(r.endTag=Object.assign({},n),r.endLine=n.endLine,r.endCol=n.endCol,r.endOffset=n.endOffset):(r.endLine=n.startLine,r.endCol=n.startCol,r.endOffset=n.startOffset),this.treeAdapter.updateNodeSourceCodeLocation(e,r);}}_getOverriddenMethods(e,t){return {_bootstrap(n,s){t._bootstrap.call(this,n,s),e.lastStartTagToken=null,e.lastFosterParentingLocation=null,e.currentToken=null;const r=gt.install(this.tokenizer,Ht);e.posTracker=r.posTracker,gt.install(this.openElements,Dt,{onItemPop:function(t){e._setEndLocation(t,e.currentToken);}});},_runParsingLoop(n){t._runParsingLoop.call(this,n);for(let t=this.openElements.stackTop;t>=0;t--)e._setEndLocation(this.openElements.items[t],e.currentToken);},_processTokenInForeignContent(n){e.currentToken=n,t._processTokenInForeignContent.call(this,n);},_processToken(n){if(e.currentToken=n,t._processToken.call(this,n),n.type===Nt.END_TAG_TOKEN&&(n.tagName===Ft.HTML||n.tagName===Ft.BODY&&this.openElements.hasInScope(Ft.BODY)))for(let t=this.openElements.stackTop;t>=0;t--){const s=this.openElements.items[t];if(this.treeAdapter.getTagName(s)===n.tagName){e._setEndLocation(s,n);break}}},_setDocumentType(e){t._setDocumentType.call(this,e);const n=this.treeAdapter.getChildNodes(this.document),s=n.length;for(let t=0;t<s;t++){const s=n[t];if(this.treeAdapter.isDocumentTypeNode(s)){this.treeAdapter.setNodeSourceCodeLocation(s,e.location);break}}},_attachElementToTree(n){e._setStartLocation(n),e.lastStartTagToken=null,t._attachElementToTree.call(this,n);},_appendElement(n,s){e.lastStartTagToken=n,t._appendElement.call(this,n,s);},_insertElement(n,s){e.lastStartTagToken=n,t._insertElement.call(this,n,s);},_insertTemplate(n){e.lastStartTagToken=n,t._insertTemplate.call(this,n);const s=this.treeAdapter.getTemplateContent(this.openElements.current);this.treeAdapter.setNodeSourceCodeLocation(s,null);},_insertFakeRootElement(){t._insertFakeRootElement.call(this),this.treeAdapter.setNodeSourceCodeLocation(this.openElements.current,null);},_appendCommentNode(e,n){t._appendCommentNode.call(this,e,n);const s=this.treeAdapter.getChildNodes(n),r=s[s.length-1];this.treeAdapter.setNodeSourceCodeLocation(r,e.location);},_findFosterParentingLocation(){return e.lastFosterParentingLocation=t._findFosterParentingLocation.call(this),e.lastFosterParentingLocation},_insertCharacters(n){t._insertCharacters.call(this,n);const s=this._shouldFosterParentOnInsertion(),r=s&&e.lastFosterParentingLocation.parent||this.openElements.currentTmplContent||this.openElements.current,i=this.treeAdapter.getChildNodes(r),o=s&&e.lastFosterParentingLocation.beforeElement?i.indexOf(e.lastFosterParentingLocation.beforeElement)-1:i.length-1,a=i[o];if(this.treeAdapter.getNodeSourceCodeLocation(a)){const{endLine:e,endCol:t,endOffset:s}=n.location;this.treeAdapter.updateNodeSourceCodeLocation(a,{endLine:e,endCol:t,endOffset:s});}else this.treeAdapter.setNodeSourceCodeLocation(a,n.location);}}}},Gt=class extends gt{constructor(e,t){super(e),this.posTracker=null,this.onParseError=t.onParseError;}_setErrorLocation(e){e.startLine=e.endLine=this.posTracker.line,e.startCol=e.endCol=this.posTracker.col,e.startOffset=e.endOffset=this.posTracker.offset;}_reportError(e){const t={code:e,startLine:-1,startCol:-1,startOffset:-1,endLine:-1,endCol:-1,endOffset:-1};this._setErrorLocation(t),this.onParseError(t);}_getOverriddenMethods(e){return {_err(t){e._reportError(t);}}}},Bt=class extends Gt{constructor(e,t){super(e,t),this.posTracker=gt.install(e,Pt),this.lastErrOffset=-1;}_reportError(e){this.lastErrOffset!==this.posTracker.offset&&(this.lastErrOffset=this.posTracker.offset,super._reportError(e));}},Kt=class extends Gt{constructor(e,t){super(e,t);const n=gt.install(e.preprocessor,Bt,t);this.posTracker=n.posTracker;}},bt=class extends Gt{constructor(e,t){super(e,t),this.opts=t,this.ctLoc=null,this.locBeforeToken=!1;}_setErrorLocation(e){this.ctLoc&&(e.startLine=this.ctLoc.startLine,e.startCol=this.ctLoc.startCol,e.startOffset=this.ctLoc.startOffset,e.endLine=this.locBeforeToken?this.ctLoc.startLine:this.ctLoc.endLine,e.endCol=this.locBeforeToken?this.ctLoc.startCol:this.ctLoc.endCol,e.endOffset=this.locBeforeToken?this.ctLoc.startOffset:this.ctLoc.endOffset);}_getOverriddenMethods(e,t){return {_bootstrap(n,s){t._bootstrap.call(this,n,s),gt.install(this.tokenizer,Kt,e.opts),gt.install(this.tokenizer,Ht);},_processInputToken(n){e.ctLoc=n.location,t._processInputToken.call(this,n);},_err(t,n){e.locBeforeToken=n&&n.beforeToken,e._reportError(t);}}}},xt=dt((function(e,t){const{DOCUMENT_MODE:n}=Ct;t.createDocument=function(){return {nodeName:"#document",mode:n.NO_QUIRKS,childNodes:[]}},t.createDocumentFragment=function(){return {nodeName:"#document-fragment",childNodes:[]}},t.createElement=function(e,t,n){return {nodeName:e,tagName:e,attrs:n,namespaceURI:t,childNodes:[],parentNode:null}},t.createCommentNode=function(e){return {nodeName:"#comment",data:e,parentNode:null}};const s=function(e){return {nodeName:"#text",value:e,parentNode:null}},r=t.appendChild=function(e,t){e.childNodes.push(t),t.parentNode=e;},i=t.insertBefore=function(e,t,n){const s=e.childNodes.indexOf(n);e.childNodes.splice(s,0,t),t.parentNode=e;};t.setTemplateContent=function(e,t){e.content=t;},t.getTemplateContent=function(e){return e.content},t.setDocumentType=function(e,t,n,s){let i=null;for(let t=0;t<e.childNodes.length;t++)if("#documentType"===e.childNodes[t].nodeName){i=e.childNodes[t];break}i?(i.name=t,i.publicId=n,i.systemId=s):r(e,{nodeName:"#documentType",name:t,publicId:n,systemId:s});},t.setDocumentMode=function(e,t){e.mode=t;},t.getDocumentMode=function(e){return e.mode},t.detachNode=function(e){if(e.parentNode){const t=e.parentNode.childNodes.indexOf(e);e.parentNode.childNodes.splice(t,1),e.parentNode=null;}},t.insertText=function(e,t){if(e.childNodes.length){const n=e.childNodes[e.childNodes.length-1];if("#text"===n.nodeName)return void(n.value+=t)}r(e,s(t));},t.insertTextBefore=function(e,t,n){const r=e.childNodes[e.childNodes.indexOf(n)-1];r&&"#text"===r.nodeName?r.value+=t:i(e,s(t),n);},t.adoptAttributes=function(e,t){const n=[];for(let t=0;t<e.attrs.length;t++)n.push(e.attrs[t].name);for(let s=0;s<t.length;s++)-1===n.indexOf(t[s].name)&&e.attrs.push(t[s]);},t.getFirstChild=function(e){return e.childNodes[0]},t.getChildNodes=function(e){return e.childNodes},t.getParentNode=function(e){return e.parentNode},t.getAttrList=function(e){return e.attrs},t.getTagName=function(e){return e.tagName},t.getNamespaceURI=function(e){return e.namespaceURI},t.getTextNodeContent=function(e){return e.value},t.getCommentNodeContent=function(e){return e.data},t.getDocumentTypeNodeName=function(e){return e.name},t.getDocumentTypeNodePublicId=function(e){return e.publicId},t.getDocumentTypeNodeSystemId=function(e){return e.systemId},t.isTextNode=function(e){return "#text"===e.nodeName},t.isCommentNode=function(e){return "#comment"===e.nodeName},t.isDocumentTypeNode=function(e){return "#documentType"===e.nodeName},t.isElementNode=function(e){return !!e.tagName},t.setNodeSourceCodeLocation=function(e,t){e.sourceCodeLocation=t;},t.getNodeSourceCodeLocation=function(e){return e.sourceCodeLocation},t.updateNodeSourceCodeLocation=function(e,t){e.sourceCodeLocation=Object.assign(e.sourceCodeLocation,t);};}));const{DOCUMENT_MODE:yt}=Ct,vt="html",Yt=["+//silmaril//dtd html pro v0r11 19970101//","-//as//dtd html 3.0 aswedit + extensions//","-//advasoft ltd//dtd html 3.0 aswedit + extensions//","-//ietf//dtd html 2.0 level 1//","-//ietf//dtd html 2.0 level 2//","-//ietf//dtd html 2.0 strict level 1//","-//ietf//dtd html 2.0 strict level 2//","-//ietf//dtd html 2.0 strict//","-//ietf//dtd html 2.0//","-//ietf//dtd html 2.1e//","-//ietf//dtd html 3.0//","-//ietf//dtd html 3.2 final//","-//ietf//dtd html 3.2//","-//ietf//dtd html 3//","-//ietf//dtd html level 0//","-//ietf//dtd html level 1//","-//ietf//dtd html level 2//","-//ietf//dtd html level 3//","-//ietf//dtd html strict level 0//","-//ietf//dtd html strict level 1//","-//ietf//dtd html strict level 2//","-//ietf//dtd html strict level 3//","-//ietf//dtd html strict//","-//ietf//dtd html//","-//metrius//dtd metrius presentational//","-//microsoft//dtd internet explorer 2.0 html strict//","-//microsoft//dtd internet explorer 2.0 html//","-//microsoft//dtd internet explorer 2.0 tables//","-//microsoft//dtd internet explorer 3.0 html strict//","-//microsoft//dtd internet explorer 3.0 html//","-//microsoft//dtd internet explorer 3.0 tables//","-//netscape comm. corp.//dtd html//","-//netscape comm. corp.//dtd strict html//","-//o'reilly and associates//dtd html 2.0//","-//o'reilly and associates//dtd html extended 1.0//","-//o'reilly and associates//dtd html extended relaxed 1.0//","-//sq//dtd html 2.0 hotmetal + extensions//","-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//","-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//","-//spyglass//dtd html 2.0 extended//","-//sun microsystems corp.//dtd hotjava html//","-//sun microsystems corp.//dtd hotjava strict html//","-//w3c//dtd html 3 1995-03-24//","-//w3c//dtd html 3.2 draft//","-//w3c//dtd html 3.2 final//","-//w3c//dtd html 3.2//","-//w3c//dtd html 3.2s draft//","-//w3c//dtd html 4.0 frameset//","-//w3c//dtd html 4.0 transitional//","-//w3c//dtd html experimental 19960712//","-//w3c//dtd html experimental 970421//","-//w3c//dtd w3 html//","-//w3o//dtd w3 html 3.0//","-//webtechs//dtd mozilla html 2.0//","-//webtechs//dtd mozilla html//"],wt=Yt.concat(["-//w3c//dtd html 4.01 frameset//","-//w3c//dtd html 4.01 transitional//"]),Qt=["-//w3o//dtd w3 html strict 3.0//en//","-/w3c/dtd html 4.0 transitional/en","html"],Xt=["-//w3c//dtd xhtml 1.0 frameset//","-//w3c//dtd xhtml 1.0 transitional//"],Wt=Xt.concat(["-//w3c//dtd html 4.01 frameset//","-//w3c//dtd html 4.01 transitional//"]);function Vt(e,t){for(let n=0;n<t.length;n++)if(0===e.indexOf(t[n]))return !0;return !1}var jt=dt((function(e,t){const n=Ct.TAG_NAMES,s=Ct.NAMESPACES,r=Ct.ATTRS,i={attributename:"attributeName",attributetype:"attributeType",basefrequency:"baseFrequency",baseprofile:"baseProfile",calcmode:"calcMode",clippathunits:"clipPathUnits",diffuseconstant:"diffuseConstant",edgemode:"edgeMode",filterunits:"filterUnits",glyphref:"glyphRef",gradienttransform:"gradientTransform",gradientunits:"gradientUnits",kernelmatrix:"kernelMatrix",kernelunitlength:"kernelUnitLength",keypoints:"keyPoints",keysplines:"keySplines",keytimes:"keyTimes",lengthadjust:"lengthAdjust",limitingconeangle:"limitingConeAngle",markerheight:"markerHeight",markerunits:"markerUnits",markerwidth:"markerWidth",maskcontentunits:"maskContentUnits",maskunits:"maskUnits",numoctaves:"numOctaves",pathlength:"pathLength",patterncontentunits:"patternContentUnits",patterntransform:"patternTransform",patternunits:"patternUnits",pointsatx:"pointsAtX",pointsaty:"pointsAtY",pointsatz:"pointsAtZ",preservealpha:"preserveAlpha",preserveaspectratio:"preserveAspectRatio",primitiveunits:"primitiveUnits",refx:"refX",refy:"refY",repeatcount:"repeatCount",repeatdur:"repeatDur",requiredextensions:"requiredExtensions",requiredfeatures:"requiredFeatures",specularconstant:"specularConstant",specularexponent:"specularExponent",spreadmethod:"spreadMethod",startoffset:"startOffset",stddeviation:"stdDeviation",stitchtiles:"stitchTiles",surfacescale:"surfaceScale",systemlanguage:"systemLanguage",tablevalues:"tableValues",targetx:"targetX",targety:"targetY",textlength:"textLength",viewbox:"viewBox",viewtarget:"viewTarget",xchannelselector:"xChannelSelector",ychannelselector:"yChannelSelector",zoomandpan:"zoomAndPan"},o={"xlink:actuate":{prefix:"xlink",name:"actuate",namespace:s.XLINK},"xlink:arcrole":{prefix:"xlink",name:"arcrole",namespace:s.XLINK},"xlink:href":{prefix:"xlink",name:"href",namespace:s.XLINK},"xlink:role":{prefix:"xlink",name:"role",namespace:s.XLINK},"xlink:show":{prefix:"xlink",name:"show",namespace:s.XLINK},"xlink:title":{prefix:"xlink",name:"title",namespace:s.XLINK},"xlink:type":{prefix:"xlink",name:"type",namespace:s.XLINK},"xml:base":{prefix:"xml",name:"base",namespace:s.XML},"xml:lang":{prefix:"xml",name:"lang",namespace:s.XML},"xml:space":{prefix:"xml",name:"space",namespace:s.XML},xmlns:{prefix:"",name:"xmlns",namespace:s.XMLNS},"xmlns:xlink":{prefix:"xmlns",name:"xlink",namespace:s.XMLNS}},a=t.SVG_TAG_NAMES_ADJUSTMENT_MAP={altglyph:"altGlyph",altglyphdef:"altGlyphDef",altglyphitem:"altGlyphItem",animatecolor:"animateColor",animatemotion:"animateMotion",animatetransform:"animateTransform",clippath:"clipPath",feblend:"feBlend",fecolormatrix:"feColorMatrix",fecomponenttransfer:"feComponentTransfer",fecomposite:"feComposite",feconvolvematrix:"feConvolveMatrix",fediffuselighting:"feDiffuseLighting",fedisplacementmap:"feDisplacementMap",fedistantlight:"feDistantLight",feflood:"feFlood",fefunca:"feFuncA",fefuncb:"feFuncB",fefuncg:"feFuncG",fefuncr:"feFuncR",fegaussianblur:"feGaussianBlur",feimage:"feImage",femerge:"feMerge",femergenode:"feMergeNode",femorphology:"feMorphology",feoffset:"feOffset",fepointlight:"fePointLight",fespecularlighting:"feSpecularLighting",fespotlight:"feSpotLight",fetile:"feTile",feturbulence:"feTurbulence",foreignobject:"foreignObject",glyphref:"glyphRef",lineargradient:"linearGradient",radialgradient:"radialGradient",textpath:"textPath"},T={[n.B]:!0,[n.BIG]:!0,[n.BLOCKQUOTE]:!0,[n.BODY]:!0,[n.BR]:!0,[n.CENTER]:!0,[n.CODE]:!0,[n.DD]:!0,[n.DIV]:!0,[n.DL]:!0,[n.DT]:!0,[n.EM]:!0,[n.EMBED]:!0,[n.H1]:!0,[n.H2]:!0,[n.H3]:!0,[n.H4]:!0,[n.H5]:!0,[n.H6]:!0,[n.HEAD]:!0,[n.HR]:!0,[n.I]:!0,[n.IMG]:!0,[n.LI]:!0,[n.LISTING]:!0,[n.MENU]:!0,[n.META]:!0,[n.NOBR]:!0,[n.OL]:!0,[n.P]:!0,[n.PRE]:!0,[n.RUBY]:!0,[n.S]:!0,[n.SMALL]:!0,[n.SPAN]:!0,[n.STRONG]:!0,[n.STRIKE]:!0,[n.SUB]:!0,[n.SUP]:!0,[n.TABLE]:!0,[n.TT]:!0,[n.U]:!0,[n.UL]:!0,[n.VAR]:!0};t.causesExit=function(e){const t=e.tagName;return !(t!==n.FONT||null===Nt.getTokenAttr(e,r.COLOR)&&null===Nt.getTokenAttr(e,r.SIZE)&&null===Nt.getTokenAttr(e,r.FACE))||T[t]},t.adjustTokenMathMLAttrs=function(e){for(let t=0;t<e.attrs.length;t++)if("definitionurl"===e.attrs[t].name){e.attrs[t].name="definitionURL";break}},t.adjustTokenSVGAttrs=function(e){for(let t=0;t<e.attrs.length;t++){const n=i[e.attrs[t].name];n&&(e.attrs[t].name=n);}},t.adjustTokenXMLAttrs=function(e){for(let t=0;t<e.attrs.length;t++){const n=o[e.attrs[t].name];n&&(e.attrs[t].prefix=n.prefix,e.attrs[t].name=n.name,e.attrs[t].namespace=n.namespace);}},t.adjustTokenSVGTagName=function(e){const t=a[e.tagName];t&&(e.tagName=t);},t.isIntegrationPoint=function(e,t,i,o){return !(o&&o!==s.HTML||!function(e,t,i){if(t===s.MATHML&&e===n.ANNOTATION_XML)for(let e=0;e<i.length;e++)if(i[e].name===r.ENCODING){const t=i[e].value.toLowerCase();return "text/html"===t||"application/xhtml+xml"===t}return t===s.SVG&&(e===n.FOREIGN_OBJECT||e===n.DESC||e===n.TITLE)}(e,t,i))||!(o&&o!==s.MATHML||!function(e,t){return t===s.MATHML&&(e===n.MI||e===n.MO||e===n.MN||e===n.MS||e===n.MTEXT)}(e,t))};}));const zt=Ct.TAG_NAMES,qt=Ct.NAMESPACES,Jt=Ct.ATTRS,Zt={scriptingEnabled:!0,sourceCodeLocationInfo:!1,onParseError:null,treeAdapter:xt},$t="hidden",en="INITIAL_MODE",tn="BEFORE_HTML_MODE",nn="BEFORE_HEAD_MODE",sn="IN_HEAD_MODE",rn="IN_HEAD_NO_SCRIPT_MODE",on="AFTER_HEAD_MODE",an="IN_BODY_MODE",Tn="TEXT_MODE",En="IN_TABLE_MODE",hn="IN_TABLE_TEXT_MODE",cn="IN_CAPTION_MODE",_n="IN_COLUMN_GROUP_MODE",ln="IN_TABLE_BODY_MODE",mn="IN_ROW_MODE",pn="IN_CELL_MODE",An="IN_SELECT_MODE",un="IN_SELECT_IN_TABLE_MODE",Nn="IN_TEMPLATE_MODE",dn="AFTER_BODY_MODE",Cn="IN_FRAMESET_MODE",On="AFTER_FRAMESET_MODE",fn="AFTER_AFTER_BODY_MODE",Sn="AFTER_AFTER_FRAMESET_MODE",Rn={[zt.TR]:mn,[zt.TBODY]:ln,[zt.THEAD]:ln,[zt.TFOOT]:ln,[zt.CAPTION]:cn,[zt.COLGROUP]:_n,[zt.TABLE]:En,[zt.BODY]:an,[zt.FRAMESET]:Cn},In={[zt.CAPTION]:En,[zt.COLGROUP]:En,[zt.TBODY]:En,[zt.TFOOT]:En,[zt.THEAD]:En,[zt.COL]:_n,[zt.TR]:ln,[zt.TD]:mn,[zt.TH]:mn},Ln={[en]:{[Nt.CHARACTER_TOKEN]:vn,[Nt.NULL_CHARACTER_TOKEN]:vn,[Nt.WHITESPACE_CHARACTER_TOKEN]:Gn,[Nt.COMMENT_TOKEN]:Kn,[Nt.DOCTYPE_TOKEN]:function(e,t){e._setDocumentType(t);const n=t.forceQuirks?Ct.DOCUMENT_MODE.QUIRKS:function(e){if(e.name!==vt)return yt.QUIRKS;const t=e.systemId;if(t&&"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd"===t.toLowerCase())return yt.QUIRKS;let n=e.publicId;if(null!==n){if(n=n.toLowerCase(),Qt.indexOf(n)>-1)return yt.QUIRKS;let e=null===t?wt:Yt;if(Vt(n,e))return yt.QUIRKS;if(e=null===t?Xt:Wt,Vt(n,e))return yt.LIMITED_QUIRKS}return yt.NO_QUIRKS}(t);(function(e){return e.name===vt&&null===e.publicId&&(null===e.systemId||"about:legacy-compat"===e.systemId)})(t)||e._err("non-conforming-doctype"),e.treeAdapter.setDocumentMode(e.document,n),e.insertionMode=tn;},[Nt.START_TAG_TOKEN]:vn,[Nt.END_TAG_TOKEN]:vn,[Nt.EOF_TOKEN]:vn},[tn]:{[Nt.CHARACTER_TOKEN]:Yn,[Nt.NULL_CHARACTER_TOKEN]:Yn,[Nt.WHITESPACE_CHARACTER_TOKEN]:Gn,[Nt.COMMENT_TOKEN]:Kn,[Nt.DOCTYPE_TOKEN]:Gn,[Nt.START_TAG_TOKEN]:function(e,t){t.tagName===zt.HTML?(e._insertElement(t,qt.HTML),e.insertionMode=nn):Yn(e,t);},[Nt.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n!==zt.HTML&&n!==zt.HEAD&&n!==zt.BODY&&n!==zt.BR||Yn(e,t);},[Nt.EOF_TOKEN]:Yn},[nn]:{[Nt.CHARACTER_TOKEN]:wn,[Nt.NULL_CHARACTER_TOKEN]:wn,[Nt.WHITESPACE_CHARACTER_TOKEN]:Gn,[Nt.COMMENT_TOKEN]:Kn,[Nt.DOCTYPE_TOKEN]:Bn,[Nt.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.HTML?as(e,t):n===zt.HEAD?(e._insertElement(t,qt.HTML),e.headElement=e.openElements.current,e.insertionMode=sn):wn(e,t);},[Nt.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.HEAD||n===zt.BODY||n===zt.HTML||n===zt.BR?wn(e,t):e._err(L);},[Nt.EOF_TOKEN]:wn},[sn]:{[Nt.CHARACTER_TOKEN]:Wn,[Nt.NULL_CHARACTER_TOKEN]:Wn,[Nt.WHITESPACE_CHARACTER_TOKEN]:xn,[Nt.COMMENT_TOKEN]:Kn,[Nt.DOCTYPE_TOKEN]:Bn,[Nt.START_TAG_TOKEN]:Qn,[Nt.END_TAG_TOKEN]:Xn,[Nt.EOF_TOKEN]:Wn},[rn]:{[Nt.CHARACTER_TOKEN]:Vn,[Nt.NULL_CHARACTER_TOKEN]:Vn,[Nt.WHITESPACE_CHARACTER_TOKEN]:xn,[Nt.COMMENT_TOKEN]:Kn,[Nt.DOCTYPE_TOKEN]:Bn,[Nt.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.HTML?as(e,t):n===zt.BASEFONT||n===zt.BGSOUND||n===zt.HEAD||n===zt.LINK||n===zt.META||n===zt.NOFRAMES||n===zt.STYLE?Qn(e,t):n===zt.NOSCRIPT?e._err("nested-noscript-in-head"):Vn(e,t);},[Nt.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.NOSCRIPT?(e.openElements.pop(),e.insertionMode=sn):n===zt.BR?Vn(e,t):e._err(L);},[Nt.EOF_TOKEN]:Vn},[on]:{[Nt.CHARACTER_TOKEN]:jn,[Nt.NULL_CHARACTER_TOKEN]:jn,[Nt.WHITESPACE_CHARACTER_TOKEN]:xn,[Nt.COMMENT_TOKEN]:Kn,[Nt.DOCTYPE_TOKEN]:Bn,[Nt.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.HTML?as(e,t):n===zt.BODY?(e._insertElement(t,qt.HTML),e.framesetOk=!1,e.insertionMode=an):n===zt.FRAMESET?(e._insertElement(t,qt.HTML),e.insertionMode=Cn):n===zt.BASE||n===zt.BASEFONT||n===zt.BGSOUND||n===zt.LINK||n===zt.META||n===zt.NOFRAMES||n===zt.SCRIPT||n===zt.STYLE||n===zt.TEMPLATE||n===zt.TITLE?(e._err("abandoned-head-element-child"),e.openElements.push(e.headElement),Qn(e,t),e.openElements.remove(e.headElement)):n===zt.HEAD?e._err(k):jn(e,t);},[Nt.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.BODY||n===zt.HTML||n===zt.BR?jn(e,t):n===zt.TEMPLATE?Xn(e,t):e._err(L);},[Nt.EOF_TOKEN]:jn},[an]:{[Nt.CHARACTER_TOKEN]:qn,[Nt.NULL_CHARACTER_TOKEN]:Gn,[Nt.WHITESPACE_CHARACTER_TOKEN]:zn,[Nt.COMMENT_TOKEN]:Kn,[Nt.DOCTYPE_TOKEN]:Gn,[Nt.START_TAG_TOKEN]:as,[Nt.END_TAG_TOKEN]:cs,[Nt.EOF_TOKEN]:_s},[Tn]:{[Nt.CHARACTER_TOKEN]:xn,[Nt.NULL_CHARACTER_TOKEN]:xn,[Nt.WHITESPACE_CHARACTER_TOKEN]:xn,[Nt.COMMENT_TOKEN]:Gn,[Nt.DOCTYPE_TOKEN]:Gn,[Nt.START_TAG_TOKEN]:Gn,[Nt.END_TAG_TOKEN]:function(e,t){t.tagName===zt.SCRIPT&&(e.pendingScript=e.openElements.current),e.openElements.pop(),e.insertionMode=e.originalInsertionMode;},[Nt.EOF_TOKEN]:function(e,t){e._err("eof-in-element-that-can-contain-only-text"),e.openElements.pop(),e.insertionMode=e.originalInsertionMode,e._processToken(t);}},[En]:{[Nt.CHARACTER_TOKEN]:ls,[Nt.NULL_CHARACTER_TOKEN]:ls,[Nt.WHITESPACE_CHARACTER_TOKEN]:ls,[Nt.COMMENT_TOKEN]:Kn,[Nt.DOCTYPE_TOKEN]:Gn,[Nt.START_TAG_TOKEN]:ms,[Nt.END_TAG_TOKEN]:ps,[Nt.EOF_TOKEN]:_s},[hn]:{[Nt.CHARACTER_TOKEN]:function(e,t){e.pendingCharacterTokens.push(t),e.hasNonWhitespacePendingCharacterToken=!0;},[Nt.NULL_CHARACTER_TOKEN]:Gn,[Nt.WHITESPACE_CHARACTER_TOKEN]:function(e,t){e.pendingCharacterTokens.push(t);},[Nt.COMMENT_TOKEN]:us,[Nt.DOCTYPE_TOKEN]:us,[Nt.START_TAG_TOKEN]:us,[Nt.END_TAG_TOKEN]:us,[Nt.EOF_TOKEN]:us},[cn]:{[Nt.CHARACTER_TOKEN]:qn,[Nt.NULL_CHARACTER_TOKEN]:Gn,[Nt.WHITESPACE_CHARACTER_TOKEN]:zn,[Nt.COMMENT_TOKEN]:Kn,[Nt.DOCTYPE_TOKEN]:Gn,[Nt.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.CAPTION||n===zt.COL||n===zt.COLGROUP||n===zt.TBODY||n===zt.TD||n===zt.TFOOT||n===zt.TH||n===zt.THEAD||n===zt.TR?e.openElements.hasInTableScope(zt.CAPTION)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(zt.CAPTION),e.activeFormattingElements.clearToLastMarker(),e.insertionMode=En,e._processToken(t)):as(e,t);},[Nt.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.CAPTION||n===zt.TABLE?e.openElements.hasInTableScope(zt.CAPTION)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(zt.CAPTION),e.activeFormattingElements.clearToLastMarker(),e.insertionMode=En,n===zt.TABLE&&e._processToken(t)):n!==zt.BODY&&n!==zt.COL&&n!==zt.COLGROUP&&n!==zt.HTML&&n!==zt.TBODY&&n!==zt.TD&&n!==zt.TFOOT&&n!==zt.TH&&n!==zt.THEAD&&n!==zt.TR&&cs(e,t);},[Nt.EOF_TOKEN]:_s},[_n]:{[Nt.CHARACTER_TOKEN]:Ns,[Nt.NULL_CHARACTER_TOKEN]:Ns,[Nt.WHITESPACE_CHARACTER_TOKEN]:xn,[Nt.COMMENT_TOKEN]:Kn,[Nt.DOCTYPE_TOKEN]:Gn,[Nt.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.HTML?as(e,t):n===zt.COL?(e._appendElement(t,qt.HTML),t.ackSelfClosing=!0):n===zt.TEMPLATE?Qn(e,t):Ns(e,t);},[Nt.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.COLGROUP?e.openElements.currentTagName===zt.COLGROUP&&(e.openElements.pop(),e.insertionMode=En):n===zt.TEMPLATE?Xn(e,t):n!==zt.COL&&Ns(e,t);},[Nt.EOF_TOKEN]:_s},[ln]:{[Nt.CHARACTER_TOKEN]:ls,[Nt.NULL_CHARACTER_TOKEN]:ls,[Nt.WHITESPACE_CHARACTER_TOKEN]:ls,[Nt.COMMENT_TOKEN]:Kn,[Nt.DOCTYPE_TOKEN]:Gn,[Nt.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.TR?(e.openElements.clearBackToTableBodyContext(),e._insertElement(t,qt.HTML),e.insertionMode=mn):n===zt.TH||n===zt.TD?(e.openElements.clearBackToTableBodyContext(),e._insertFakeElement(zt.TR),e.insertionMode=mn,e._processToken(t)):n===zt.CAPTION||n===zt.COL||n===zt.COLGROUP||n===zt.TBODY||n===zt.TFOOT||n===zt.THEAD?e.openElements.hasTableBodyContextInTableScope()&&(e.openElements.clearBackToTableBodyContext(),e.openElements.pop(),e.insertionMode=En,e._processToken(t)):ms(e,t);},[Nt.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.TBODY||n===zt.TFOOT||n===zt.THEAD?e.openElements.hasInTableScope(n)&&(e.openElements.clearBackToTableBodyContext(),e.openElements.pop(),e.insertionMode=En):n===zt.TABLE?e.openElements.hasTableBodyContextInTableScope()&&(e.openElements.clearBackToTableBodyContext(),e.openElements.pop(),e.insertionMode=En,e._processToken(t)):(n!==zt.BODY&&n!==zt.CAPTION&&n!==zt.COL&&n!==zt.COLGROUP||n!==zt.HTML&&n!==zt.TD&&n!==zt.TH&&n!==zt.TR)&&ps(e,t);},[Nt.EOF_TOKEN]:_s},[mn]:{[Nt.CHARACTER_TOKEN]:ls,[Nt.NULL_CHARACTER_TOKEN]:ls,[Nt.WHITESPACE_CHARACTER_TOKEN]:ls,[Nt.COMMENT_TOKEN]:Kn,[Nt.DOCTYPE_TOKEN]:Gn,[Nt.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.TH||n===zt.TD?(e.openElements.clearBackToTableRowContext(),e._insertElement(t,qt.HTML),e.insertionMode=pn,e.activeFormattingElements.insertMarker()):n===zt.CAPTION||n===zt.COL||n===zt.COLGROUP||n===zt.TBODY||n===zt.TFOOT||n===zt.THEAD||n===zt.TR?e.openElements.hasInTableScope(zt.TR)&&(e.openElements.clearBackToTableRowContext(),e.openElements.pop(),e.insertionMode=ln,e._processToken(t)):ms(e,t);},[Nt.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.TR?e.openElements.hasInTableScope(zt.TR)&&(e.openElements.clearBackToTableRowContext(),e.openElements.pop(),e.insertionMode=ln):n===zt.TABLE?e.openElements.hasInTableScope(zt.TR)&&(e.openElements.clearBackToTableRowContext(),e.openElements.pop(),e.insertionMode=ln,e._processToken(t)):n===zt.TBODY||n===zt.TFOOT||n===zt.THEAD?(e.openElements.hasInTableScope(n)||e.openElements.hasInTableScope(zt.TR))&&(e.openElements.clearBackToTableRowContext(),e.openElements.pop(),e.insertionMode=ln,e._processToken(t)):(n!==zt.BODY&&n!==zt.CAPTION&&n!==zt.COL&&n!==zt.COLGROUP||n!==zt.HTML&&n!==zt.TD&&n!==zt.TH)&&ps(e,t);},[Nt.EOF_TOKEN]:_s},[pn]:{[Nt.CHARACTER_TOKEN]:qn,[Nt.NULL_CHARACTER_TOKEN]:Gn,[Nt.WHITESPACE_CHARACTER_TOKEN]:zn,[Nt.COMMENT_TOKEN]:Kn,[Nt.DOCTYPE_TOKEN]:Gn,[Nt.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.CAPTION||n===zt.COL||n===zt.COLGROUP||n===zt.TBODY||n===zt.TD||n===zt.TFOOT||n===zt.TH||n===zt.THEAD||n===zt.TR?(e.openElements.hasInTableScope(zt.TD)||e.openElements.hasInTableScope(zt.TH))&&(e._closeTableCell(),e._processToken(t)):as(e,t);},[Nt.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.TD||n===zt.TH?e.openElements.hasInTableScope(n)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(n),e.activeFormattingElements.clearToLastMarker(),e.insertionMode=mn):n===zt.TABLE||n===zt.TBODY||n===zt.TFOOT||n===zt.THEAD||n===zt.TR?e.openElements.hasInTableScope(n)&&(e._closeTableCell(),e._processToken(t)):n!==zt.BODY&&n!==zt.CAPTION&&n!==zt.COL&&n!==zt.COLGROUP&&n!==zt.HTML&&cs(e,t);},[Nt.EOF_TOKEN]:_s},[An]:{[Nt.CHARACTER_TOKEN]:xn,[Nt.NULL_CHARACTER_TOKEN]:Gn,[Nt.WHITESPACE_CHARACTER_TOKEN]:xn,[Nt.COMMENT_TOKEN]:Kn,[Nt.DOCTYPE_TOKEN]:Gn,[Nt.START_TAG_TOKEN]:ds,[Nt.END_TAG_TOKEN]:Cs,[Nt.EOF_TOKEN]:_s},[un]:{[Nt.CHARACTER_TOKEN]:xn,[Nt.NULL_CHARACTER_TOKEN]:Gn,[Nt.WHITESPACE_CHARACTER_TOKEN]:xn,[Nt.COMMENT_TOKEN]:Kn,[Nt.DOCTYPE_TOKEN]:Gn,[Nt.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.CAPTION||n===zt.TABLE||n===zt.TBODY||n===zt.TFOOT||n===zt.THEAD||n===zt.TR||n===zt.TD||n===zt.TH?(e.openElements.popUntilTagNamePopped(zt.SELECT),e._resetInsertionMode(),e._processToken(t)):ds(e,t);},[Nt.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.CAPTION||n===zt.TABLE||n===zt.TBODY||n===zt.TFOOT||n===zt.THEAD||n===zt.TR||n===zt.TD||n===zt.TH?e.openElements.hasInTableScope(n)&&(e.openElements.popUntilTagNamePopped(zt.SELECT),e._resetInsertionMode(),e._processToken(t)):Cs(e,t);},[Nt.EOF_TOKEN]:_s},[Nn]:{[Nt.CHARACTER_TOKEN]:qn,[Nt.NULL_CHARACTER_TOKEN]:Gn,[Nt.WHITESPACE_CHARACTER_TOKEN]:zn,[Nt.COMMENT_TOKEN]:Kn,[Nt.DOCTYPE_TOKEN]:Gn,[Nt.START_TAG_TOKEN]:function(e,t){const n=t.tagName;if(n===zt.BASE||n===zt.BASEFONT||n===zt.BGSOUND||n===zt.LINK||n===zt.META||n===zt.NOFRAMES||n===zt.SCRIPT||n===zt.STYLE||n===zt.TEMPLATE||n===zt.TITLE)Qn(e,t);else {const s=In[n]||an;e._popTmplInsertionMode(),e._pushTmplInsertionMode(s),e.insertionMode=s,e._processToken(t);}},[Nt.END_TAG_TOKEN]:function(e,t){t.tagName===zt.TEMPLATE&&Xn(e,t);},[Nt.EOF_TOKEN]:Os},[dn]:{[Nt.CHARACTER_TOKEN]:fs,[Nt.NULL_CHARACTER_TOKEN]:fs,[Nt.WHITESPACE_CHARACTER_TOKEN]:zn,[Nt.COMMENT_TOKEN]:function(e,t){e._appendCommentNode(t,e.openElements.items[0]);},[Nt.DOCTYPE_TOKEN]:Gn,[Nt.START_TAG_TOKEN]:function(e,t){t.tagName===zt.HTML?as(e,t):fs(e,t);},[Nt.END_TAG_TOKEN]:function(e,t){t.tagName===zt.HTML?e.fragmentContext||(e.insertionMode=fn):fs(e,t);},[Nt.EOF_TOKEN]:yn},[Cn]:{[Nt.CHARACTER_TOKEN]:Gn,[Nt.NULL_CHARACTER_TOKEN]:Gn,[Nt.WHITESPACE_CHARACTER_TOKEN]:xn,[Nt.COMMENT_TOKEN]:Kn,[Nt.DOCTYPE_TOKEN]:Gn,[Nt.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.HTML?as(e,t):n===zt.FRAMESET?e._insertElement(t,qt.HTML):n===zt.FRAME?(e._appendElement(t,qt.HTML),t.ackSelfClosing=!0):n===zt.NOFRAMES&&Qn(e,t);},[Nt.END_TAG_TOKEN]:function(e,t){t.tagName!==zt.FRAMESET||e.openElements.isRootHtmlElementCurrent()||(e.openElements.pop(),e.fragmentContext||e.openElements.currentTagName===zt.FRAMESET||(e.insertionMode=On));},[Nt.EOF_TOKEN]:yn},[On]:{[Nt.CHARACTER_TOKEN]:Gn,[Nt.NULL_CHARACTER_TOKEN]:Gn,[Nt.WHITESPACE_CHARACTER_TOKEN]:xn,[Nt.COMMENT_TOKEN]:Kn,[Nt.DOCTYPE_TOKEN]:Gn,[Nt.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.HTML?as(e,t):n===zt.NOFRAMES&&Qn(e,t);},[Nt.END_TAG_TOKEN]:function(e,t){t.tagName===zt.HTML&&(e.insertionMode=Sn);},[Nt.EOF_TOKEN]:yn},[fn]:{[Nt.CHARACTER_TOKEN]:Ss,[Nt.NULL_CHARACTER_TOKEN]:Ss,[Nt.WHITESPACE_CHARACTER_TOKEN]:zn,[Nt.COMMENT_TOKEN]:bn,[Nt.DOCTYPE_TOKEN]:Gn,[Nt.START_TAG_TOKEN]:function(e,t){t.tagName===zt.HTML?as(e,t):Ss(e,t);},[Nt.END_TAG_TOKEN]:Ss,[Nt.EOF_TOKEN]:yn},[Sn]:{[Nt.CHARACTER_TOKEN]:Gn,[Nt.NULL_CHARACTER_TOKEN]:Gn,[Nt.WHITESPACE_CHARACTER_TOKEN]:zn,[Nt.COMMENT_TOKEN]:bn,[Nt.DOCTYPE_TOKEN]:Gn,[Nt.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.HTML?as(e,t):n===zt.NOFRAMES&&Qn(e,t);},[Nt.END_TAG_TOKEN]:Gn,[Nt.EOF_TOKEN]:yn}};var kn=class{constructor(e){this.options=function(e,t){return [e,t=t||Object.create(null)].reduce(((e,t)=>(Object.keys(t).forEach((n=>{e[n]=t[n];})),e)),Object.create(null))}(Zt,e),this.treeAdapter=this.options.treeAdapter,this.pendingScript=null,this.options.sourceCodeLocationInfo&&gt.install(this,Ut),this.options.onParseError&&gt.install(this,bt,{onParseError:this.options.onParseError});}parse(e){const t=this.treeAdapter.createDocument();return this._bootstrap(t,null),this.tokenizer.write(e,!0),this._runParsingLoop(null),t}parseFragment(e,t){t||(t=this.treeAdapter.createElement(zt.TEMPLATE,qt.HTML,[]));const n=this.treeAdapter.createElement("documentmock",qt.HTML,[]);this._bootstrap(n,t),this.treeAdapter.getTagName(t)===zt.TEMPLATE&&this._pushTmplInsertionMode(Nn),this._initTokenizerForFragmentParsing(),this._insertFakeRootElement(),this._resetInsertionMode(),this._findFormInFragmentContext(),this.tokenizer.write(e,!0),this._runParsingLoop(null);const s=this.treeAdapter.getFirstChild(n),r=this.treeAdapter.createDocumentFragment();return this._adoptNodes(s,r),r}_bootstrap(e,t){this.tokenizer=new Nt(this.options),this.stopped=!1,this.insertionMode=en,this.originalInsertionMode="",this.document=e,this.fragmentContext=t,this.headElement=null,this.formElement=null,this.openElements=new class{constructor(e,t){this.stackTop=-1,this.items=[],this.current=e,this.currentTagName=null,this.currentTmplContent=null,this.tmplCount=0,this.treeAdapter=t;}_indexOf(e){let t=-1;for(let n=this.stackTop;n>=0;n--)if(this.items[n]===e){t=n;break}return t}_isInTemplate(){return this.currentTagName===Ot.TEMPLATE&&this.treeAdapter.getNamespaceURI(this.current)===ft.HTML}_updateCurrentElement(){this.current=this.items[this.stackTop],this.currentTagName=this.current&&this.treeAdapter.getTagName(this.current),this.currentTmplContent=this._isInTemplate()?this.treeAdapter.getTemplateContent(this.current):null;}push(e){this.items[++this.stackTop]=e,this._updateCurrentElement(),this._isInTemplate()&&this.tmplCount++;}pop(){this.stackTop--,this.tmplCount>0&&this._isInTemplate()&&this.tmplCount--,this._updateCurrentElement();}replace(e,t){const n=this._indexOf(e);this.items[n]=t,n===this.stackTop&&this._updateCurrentElement();}insertAfter(e,t){const n=this._indexOf(e)+1;this.items.splice(n,0,t),n===++this.stackTop&&this._updateCurrentElement();}popUntilTagNamePopped(e){for(;this.stackTop>-1;){const t=this.currentTagName,n=this.treeAdapter.getNamespaceURI(this.current);if(this.pop(),t===e&&n===ft.HTML)break}}popUntilElementPopped(e){for(;this.stackTop>-1;){const t=this.current;if(this.pop(),t===e)break}}popUntilNumberedHeaderPopped(){for(;this.stackTop>-1;){const e=this.currentTagName,t=this.treeAdapter.getNamespaceURI(this.current);if(this.pop(),e===Ot.H1||e===Ot.H2||e===Ot.H3||e===Ot.H4||e===Ot.H5||e===Ot.H6&&t===ft.HTML)break}}popUntilTableCellPopped(){for(;this.stackTop>-1;){const e=this.currentTagName,t=this.treeAdapter.getNamespaceURI(this.current);if(this.pop(),e===Ot.TD||e===Ot.TH&&t===ft.HTML)break}}popAllUpToHtmlElement(){this.stackTop=0,this._updateCurrentElement();}clearBackToTableContext(){for(;this.currentTagName!==Ot.TABLE&&this.currentTagName!==Ot.TEMPLATE&&this.currentTagName!==Ot.HTML||this.treeAdapter.getNamespaceURI(this.current)!==ft.HTML;)this.pop();}clearBackToTableBodyContext(){for(;this.currentTagName!==Ot.TBODY&&this.currentTagName!==Ot.TFOOT&&this.currentTagName!==Ot.THEAD&&this.currentTagName!==Ot.TEMPLATE&&this.currentTagName!==Ot.HTML||this.treeAdapter.getNamespaceURI(this.current)!==ft.HTML;)this.pop();}clearBackToTableRowContext(){for(;this.currentTagName!==Ot.TR&&this.currentTagName!==Ot.TEMPLATE&&this.currentTagName!==Ot.HTML||this.treeAdapter.getNamespaceURI(this.current)!==ft.HTML;)this.pop();}remove(e){for(let t=this.stackTop;t>=0;t--)if(this.items[t]===e){this.items.splice(t,1),this.stackTop--,this._updateCurrentElement();break}}tryPeekProperlyNestedBodyElement(){const e=this.items[1];return e&&this.treeAdapter.getTagName(e)===Ot.BODY?e:null}contains(e){return this._indexOf(e)>-1}getCommonAncestor(e){let t=this._indexOf(e);return --t>=0?this.items[t]:null}isRootHtmlElementCurrent(){return 0===this.stackTop&&this.currentTagName===Ot.HTML}hasInScope(e){for(let t=this.stackTop;t>=0;t--){const n=this.treeAdapter.getTagName(this.items[t]),s=this.treeAdapter.getNamespaceURI(this.items[t]);if(n===e&&s===ft.HTML)return !0;if(It(n,s))return !1}return !0}hasNumberedHeaderInScope(){for(let e=this.stackTop;e>=0;e--){const t=this.treeAdapter.getTagName(this.items[e]),n=this.treeAdapter.getNamespaceURI(this.items[e]);if((t===Ot.H1||t===Ot.H2||t===Ot.H3||t===Ot.H4||t===Ot.H5||t===Ot.H6)&&n===ft.HTML)return !0;if(It(t,n))return !1}return !0}hasInListItemScope(e){for(let t=this.stackTop;t>=0;t--){const n=this.treeAdapter.getTagName(this.items[t]),s=this.treeAdapter.getNamespaceURI(this.items[t]);if(n===e&&s===ft.HTML)return !0;if((n===Ot.UL||n===Ot.OL)&&s===ft.HTML||It(n,s))return !1}return !0}hasInButtonScope(e){for(let t=this.stackTop;t>=0;t--){const n=this.treeAdapter.getTagName(this.items[t]),s=this.treeAdapter.getNamespaceURI(this.items[t]);if(n===e&&s===ft.HTML)return !0;if(n===Ot.BUTTON&&s===ft.HTML||It(n,s))return !1}return !0}hasInTableScope(e){for(let t=this.stackTop;t>=0;t--){const n=this.treeAdapter.getTagName(this.items[t]);if(this.treeAdapter.getNamespaceURI(this.items[t])===ft.HTML){if(n===e)return !0;if(n===Ot.TABLE||n===Ot.TEMPLATE||n===Ot.HTML)return !1}}return !0}hasTableBodyContextInTableScope(){for(let e=this.stackTop;e>=0;e--){const t=this.treeAdapter.getTagName(this.items[e]);if(this.treeAdapter.getNamespaceURI(this.items[e])===ft.HTML){if(t===Ot.TBODY||t===Ot.THEAD||t===Ot.TFOOT)return !0;if(t===Ot.TABLE||t===Ot.HTML)return !1}}return !0}hasInSelectScope(e){for(let t=this.stackTop;t>=0;t--){const n=this.treeAdapter.getTagName(this.items[t]);if(this.treeAdapter.getNamespaceURI(this.items[t])===ft.HTML){if(n===e)return !0;if(n!==Ot.OPTION&&n!==Ot.OPTGROUP)return !1}}return !0}generateImpliedEndTags(){for(;St(this.currentTagName);)this.pop();}generateImpliedEndTagsThoroughly(){for(;Rt(this.currentTagName);)this.pop();}generateImpliedEndTagsWithExclusion(e){for(;St(this.currentTagName)&&this.currentTagName!==e;)this.pop();}}(this.document,this.treeAdapter),this.activeFormattingElements=new kt(this.treeAdapter),this.tmplInsertionModeStack=[],this.tmplInsertionModeStackTop=-1,this.currentTmplInsertionMode=null,this.pendingCharacterTokens=[],this.hasNonWhitespacePendingCharacterToken=!1,this.framesetOk=!0,this.skipNextNewLine=!1,this.fosterParentingEnabled=!1;}_err(){}_runParsingLoop(e){for(;!this.stopped;){this._setupTokenizerCDATAMode();const t=this.tokenizer.getNextToken();if(t.type===Nt.HIBERNATION_TOKEN)break;if(this.skipNextNewLine&&(this.skipNextNewLine=!1,t.type===Nt.WHITESPACE_CHARACTER_TOKEN&&"\n"===t.chars[0])){if(1===t.chars.length)continue;t.chars=t.chars.substr(1);}if(this._processInputToken(t),e&&this.pendingScript)break}}runParsingLoopForCurrentChunk(e,t){if(this._runParsingLoop(t),t&&this.pendingScript){const e=this.pendingScript;return this.pendingScript=null,void t(e)}e&&e();}_setupTokenizerCDATAMode(){const e=this._getAdjustedCurrentElement();this.tokenizer.allowCDATA=e&&e!==this.document&&this.treeAdapter.getNamespaceURI(e)!==qt.HTML&&!this._isIntegrationPoint(e);}_switchToTextParsing(e,t){this._insertElement(e,qt.HTML),this.tokenizer.state=t,this.originalInsertionMode=this.insertionMode,this.insertionMode=Tn;}switchToPlaintextParsing(){this.insertionMode=Tn,this.originalInsertionMode=an,this.tokenizer.state=Nt.MODE.PLAINTEXT;}_getAdjustedCurrentElement(){return 0===this.openElements.stackTop&&this.fragmentContext?this.fragmentContext:this.openElements.current}_findFormInFragmentContext(){let e=this.fragmentContext;do{if(this.treeAdapter.getTagName(e)===zt.FORM){this.formElement=e;break}e=this.treeAdapter.getParentNode(e);}while(e)}_initTokenizerForFragmentParsing(){if(this.treeAdapter.getNamespaceURI(this.fragmentContext)===qt.HTML){const e=this.treeAdapter.getTagName(this.fragmentContext);e===zt.TITLE||e===zt.TEXTAREA?this.tokenizer.state=Nt.MODE.RCDATA:e===zt.STYLE||e===zt.XMP||e===zt.IFRAME||e===zt.NOEMBED||e===zt.NOFRAMES||e===zt.NOSCRIPT?this.tokenizer.state=Nt.MODE.RAWTEXT:e===zt.SCRIPT?this.tokenizer.state=Nt.MODE.SCRIPT_DATA:e===zt.PLAINTEXT&&(this.tokenizer.state=Nt.MODE.PLAINTEXT);}}_setDocumentType(e){const t=e.name||"",n=e.publicId||"",s=e.systemId||"";this.treeAdapter.setDocumentType(this.document,t,n,s);}_attachElementToTree(e){if(this._shouldFosterParentOnInsertion())this._fosterParentElement(e);else {const t=this.openElements.currentTmplContent||this.openElements.current;this.treeAdapter.appendChild(t,e);}}_appendElement(e,t){const n=this.treeAdapter.createElement(e.tagName,t,e.attrs);this._attachElementToTree(n);}_insertElement(e,t){const n=this.treeAdapter.createElement(e.tagName,t,e.attrs);this._attachElementToTree(n),this.openElements.push(n);}_insertFakeElement(e){const t=this.treeAdapter.createElement(e,qt.HTML,[]);this._attachElementToTree(t),this.openElements.push(t);}_insertTemplate(e){const t=this.treeAdapter.createElement(e.tagName,qt.HTML,e.attrs),n=this.treeAdapter.createDocumentFragment();this.treeAdapter.setTemplateContent(t,n),this._attachElementToTree(t),this.openElements.push(t);}_insertFakeRootElement(){const e=this.treeAdapter.createElement(zt.HTML,qt.HTML,[]);this.treeAdapter.appendChild(this.openElements.current,e),this.openElements.push(e);}_appendCommentNode(e,t){const n=this.treeAdapter.createCommentNode(e.data);this.treeAdapter.appendChild(t,n);}_insertCharacters(e){if(this._shouldFosterParentOnInsertion())this._fosterParentText(e.chars);else {const t=this.openElements.currentTmplContent||this.openElements.current;this.treeAdapter.insertText(t,e.chars);}}_adoptNodes(e,t){for(let n=this.treeAdapter.getFirstChild(e);n;n=this.treeAdapter.getFirstChild(e))this.treeAdapter.detachNode(n),this.treeAdapter.appendChild(t,n);}_shouldProcessTokenInForeignContent(e){const t=this._getAdjustedCurrentElement();if(!t||t===this.document)return !1;const n=this.treeAdapter.getNamespaceURI(t);if(n===qt.HTML)return !1;if(this.treeAdapter.getTagName(t)===zt.ANNOTATION_XML&&n===qt.MATHML&&e.type===Nt.START_TAG_TOKEN&&e.tagName===zt.SVG)return !1;const s=e.type===Nt.CHARACTER_TOKEN||e.type===Nt.NULL_CHARACTER_TOKEN||e.type===Nt.WHITESPACE_CHARACTER_TOKEN;return !((e.type===Nt.START_TAG_TOKEN&&e.tagName!==zt.MGLYPH&&e.tagName!==zt.MALIGNMARK||s)&&this._isIntegrationPoint(t,qt.MATHML)||(e.type===Nt.START_TAG_TOKEN||s)&&this._isIntegrationPoint(t,qt.HTML)||e.type===Nt.EOF_TOKEN)}_processToken(e){Ln[this.insertionMode][e.type](this,e);}_processTokenInBodyMode(e){Ln.IN_BODY_MODE[e.type](this,e);}_processTokenInForeignContent(e){e.type===Nt.CHARACTER_TOKEN?function(e,t){e._insertCharacters(t),e.framesetOk=!1;}(this,e):e.type===Nt.NULL_CHARACTER_TOKEN?function(e,t){t.chars=n,e._insertCharacters(t);}(this,e):e.type===Nt.WHITESPACE_CHARACTER_TOKEN?xn(this,e):e.type===Nt.COMMENT_TOKEN?Kn(this,e):e.type===Nt.START_TAG_TOKEN?function(e,t){if(jt.causesExit(t)&&!e.fragmentContext){for(;e.treeAdapter.getNamespaceURI(e.openElements.current)!==qt.HTML&&!e._isIntegrationPoint(e.openElements.current);)e.openElements.pop();e._processToken(t);}else {const n=e._getAdjustedCurrentElement(),s=e.treeAdapter.getNamespaceURI(n);s===qt.MATHML?jt.adjustTokenMathMLAttrs(t):s===qt.SVG&&(jt.adjustTokenSVGTagName(t),jt.adjustTokenSVGAttrs(t)),jt.adjustTokenXMLAttrs(t),t.selfClosing?e._appendElement(t,s):e._insertElement(t,s),t.ackSelfClosing=!0;}}(this,e):e.type===Nt.END_TAG_TOKEN&&function(e,t){for(let n=e.openElements.stackTop;n>0;n--){const s=e.openElements.items[n];if(e.treeAdapter.getNamespaceURI(s)===qt.HTML){e._processToken(t);break}if(e.treeAdapter.getTagName(s).toLowerCase()===t.tagName){e.openElements.popUntilElementPopped(s);break}}}(this,e);}_processInputToken(e){this._shouldProcessTokenInForeignContent(e)?this._processTokenInForeignContent(e):this._processToken(e),e.type===Nt.START_TAG_TOKEN&&e.selfClosing&&!e.ackSelfClosing&&this._err("non-void-html-element-start-tag-with-trailing-solidus");}_isIntegrationPoint(e,t){const n=this.treeAdapter.getTagName(e),s=this.treeAdapter.getNamespaceURI(e),r=this.treeAdapter.getAttrList(e);return jt.isIntegrationPoint(n,s,r,t)}_reconstructActiveFormattingElements(){const e=this.activeFormattingElements.length;if(e){let t=e,n=null;do{if(t--,n=this.activeFormattingElements.entries[t],n.type===kt.MARKER_ENTRY||this.openElements.contains(n.element)){t++;break}}while(t>0);for(let s=t;s<e;s++)n=this.activeFormattingElements.entries[s],this._insertElement(n.token,this.treeAdapter.getNamespaceURI(n.element)),n.element=this.openElements.current;}}_closeTableCell(){this.openElements.generateImpliedEndTags(),this.openElements.popUntilTableCellPopped(),this.activeFormattingElements.clearToLastMarker(),this.insertionMode=mn;}_closePElement(){this.openElements.generateImpliedEndTagsWithExclusion(zt.P),this.openElements.popUntilTagNamePopped(zt.P);}_resetInsertionMode(){for(let e=this.openElements.stackTop,t=!1;e>=0;e--){let n=this.openElements.items[e];0===e&&(t=!0,this.fragmentContext&&(n=this.fragmentContext));const s=this.treeAdapter.getTagName(n),r=Rn[s];if(r){this.insertionMode=r;break}if(!(t||s!==zt.TD&&s!==zt.TH)){this.insertionMode=pn;break}if(!t&&s===zt.HEAD){this.insertionMode=sn;break}if(s===zt.SELECT){this._resetInsertionModeForSelect(e);break}if(s===zt.TEMPLATE){this.insertionMode=this.currentTmplInsertionMode;break}if(s===zt.HTML){this.insertionMode=this.headElement?on:nn;break}if(t){this.insertionMode=an;break}}}_resetInsertionModeForSelect(e){if(e>0)for(let t=e-1;t>0;t--){const e=this.openElements.items[t],n=this.treeAdapter.getTagName(e);if(n===zt.TEMPLATE)break;if(n===zt.TABLE)return void(this.insertionMode=un)}this.insertionMode=An;}_pushTmplInsertionMode(e){this.tmplInsertionModeStack.push(e),this.tmplInsertionModeStackTop++,this.currentTmplInsertionMode=e;}_popTmplInsertionMode(){this.tmplInsertionModeStack.pop(),this.tmplInsertionModeStackTop--,this.currentTmplInsertionMode=this.tmplInsertionModeStack[this.tmplInsertionModeStackTop];}_isElementCausesFosterParenting(e){const t=this.treeAdapter.getTagName(e);return t===zt.TABLE||t===zt.TBODY||t===zt.TFOOT||t===zt.THEAD||t===zt.TR}_shouldFosterParentOnInsertion(){return this.fosterParentingEnabled&&this._isElementCausesFosterParenting(this.openElements.current)}_findFosterParentingLocation(){const e={parent:null,beforeElement:null};for(let t=this.openElements.stackTop;t>=0;t--){const n=this.openElements.items[t],s=this.treeAdapter.getTagName(n),r=this.treeAdapter.getNamespaceURI(n);if(s===zt.TEMPLATE&&r===qt.HTML){e.parent=this.treeAdapter.getTemplateContent(n);break}if(s===zt.TABLE){e.parent=this.treeAdapter.getParentNode(n),e.parent?e.beforeElement=n:e.parent=this.openElements.items[t-1];break}}return e.parent||(e.parent=this.openElements.items[0]),e}_fosterParentElement(e){const t=this._findFosterParentingLocation();t.beforeElement?this.treeAdapter.insertBefore(t.parent,e,t.beforeElement):this.treeAdapter.appendChild(t.parent,e);}_fosterParentText(e){const t=this._findFosterParentingLocation();t.beforeElement?this.treeAdapter.insertTextBefore(t.parent,e,t.beforeElement):this.treeAdapter.insertText(t.parent,e);}_isSpecialElement(e){const t=this.treeAdapter.getTagName(e),n=this.treeAdapter.getNamespaceURI(e);return Ct.SPECIAL_ELEMENTS[n][t]}};function Mn(e,t){let n=e.activeFormattingElements.getElementEntryInScopeWithTagName(t.tagName);return n?e.openElements.contains(n.element)?e.openElements.hasInScope(t.tagName)||(n=null):(e.activeFormattingElements.removeEntry(n),n=null):hs(e,t),n}function gn(e,t){let n=null;for(let s=e.openElements.stackTop;s>=0;s--){const r=e.openElements.items[s];if(r===t.element)break;e._isSpecialElement(r)&&(n=r);}return n||(e.openElements.popUntilElementPopped(t.element),e.activeFormattingElements.removeEntry(t)),n}function Pn(e,t,n){let s=t,r=e.openElements.getCommonAncestor(t);for(let i=0,o=r;o!==n;i++,o=r){r=e.openElements.getCommonAncestor(o);const n=e.activeFormattingElements.getElementEntry(o),a=n&&i>=3;!n||a?(a&&e.activeFormattingElements.removeEntry(n),e.openElements.remove(o)):(o=Hn(e,n),s===t&&(e.activeFormattingElements.bookmark=n),e.treeAdapter.detachNode(s),e.treeAdapter.appendChild(o,s),s=o);}return s}function Hn(e,t){const n=e.treeAdapter.getNamespaceURI(t.element),s=e.treeAdapter.createElement(t.token.tagName,n,t.token.attrs);return e.openElements.replace(t.element,s),t.element=s,s}function Dn(e,t,n){if(e._isElementCausesFosterParenting(t))e._fosterParentElement(n);else {const s=e.treeAdapter.getTagName(t),r=e.treeAdapter.getNamespaceURI(t);s===zt.TEMPLATE&&r===qt.HTML&&(t=e.treeAdapter.getTemplateContent(t)),e.treeAdapter.appendChild(t,n);}}function Fn(e,t,n){const s=e.treeAdapter.getNamespaceURI(n.element),r=n.token,i=e.treeAdapter.createElement(r.tagName,s,r.attrs);e._adoptNodes(t,i),e.treeAdapter.appendChild(t,i),e.activeFormattingElements.insertElementAfterBookmark(i,n.token),e.activeFormattingElements.removeEntry(n),e.openElements.remove(n.element),e.openElements.insertAfter(t,i);}function Un(e,t){let n;for(let s=0;s<8&&(n=Mn(e,t),n);s++){const t=gn(e,n);if(!t)break;e.activeFormattingElements.bookmark=n;const s=Pn(e,t,n.element),r=e.openElements.getCommonAncestor(n.element);e.treeAdapter.detachNode(s),Dn(e,r,s),Fn(e,t,n);}}function Gn(){}function Bn(e){e._err("misplaced-doctype");}function Kn(e,t){e._appendCommentNode(t,e.openElements.currentTmplContent||e.openElements.current);}function bn(e,t){e._appendCommentNode(t,e.document);}function xn(e,t){e._insertCharacters(t);}function yn(e){e.stopped=!0;}function vn(e,t){e._err("missing-doctype",{beforeToken:!0}),e.treeAdapter.setDocumentMode(e.document,Ct.DOCUMENT_MODE.QUIRKS),e.insertionMode=tn,e._processToken(t);}function Yn(e,t){e._insertFakeRootElement(),e.insertionMode=nn,e._processToken(t);}function wn(e,t){e._insertFakeElement(zt.HEAD),e.headElement=e.openElements.current,e.insertionMode=sn,e._processToken(t);}function Qn(e,t){const n=t.tagName;n===zt.HTML?as(e,t):n===zt.BASE||n===zt.BASEFONT||n===zt.BGSOUND||n===zt.LINK||n===zt.META?(e._appendElement(t,qt.HTML),t.ackSelfClosing=!0):n===zt.TITLE?e._switchToTextParsing(t,Nt.MODE.RCDATA):n===zt.NOSCRIPT?e.options.scriptingEnabled?e._switchToTextParsing(t,Nt.MODE.RAWTEXT):(e._insertElement(t,qt.HTML),e.insertionMode=rn):n===zt.NOFRAMES||n===zt.STYLE?e._switchToTextParsing(t,Nt.MODE.RAWTEXT):n===zt.SCRIPT?e._switchToTextParsing(t,Nt.MODE.SCRIPT_DATA):n===zt.TEMPLATE?(e._insertTemplate(t,qt.HTML),e.activeFormattingElements.insertMarker(),e.framesetOk=!1,e.insertionMode=Nn,e._pushTmplInsertionMode(Nn)):n===zt.HEAD?e._err(k):Wn(e,t);}function Xn(e,t){const n=t.tagName;n===zt.HEAD?(e.openElements.pop(),e.insertionMode=on):n===zt.BODY||n===zt.BR||n===zt.HTML?Wn(e,t):n===zt.TEMPLATE&&e.openElements.tmplCount>0?(e.openElements.generateImpliedEndTagsThoroughly(),e.openElements.currentTagName!==zt.TEMPLATE&&e._err("closing-of-element-with-open-child-elements"),e.openElements.popUntilTagNamePopped(zt.TEMPLATE),e.activeFormattingElements.clearToLastMarker(),e._popTmplInsertionMode(),e._resetInsertionMode()):e._err(L);}function Wn(e,t){e.openElements.pop(),e.insertionMode=on,e._processToken(t);}function Vn(e,t){const n=t.type===Nt.EOF_TOKEN?"open-elements-left-after-eof":"disallowed-content-in-noscript-in-head";e._err(n),e.openElements.pop(),e.insertionMode=sn,e._processToken(t);}function jn(e,t){e._insertFakeElement(zt.BODY),e.insertionMode=an,e._processToken(t);}function zn(e,t){e._reconstructActiveFormattingElements(),e._insertCharacters(t);}function qn(e,t){e._reconstructActiveFormattingElements(),e._insertCharacters(t),e.framesetOk=!1;}function Jn(e,t){e.openElements.hasInButtonScope(zt.P)&&e._closePElement(),e._insertElement(t,qt.HTML);}function Zn(e,t){e.openElements.hasInButtonScope(zt.P)&&e._closePElement(),e._insertElement(t,qt.HTML),e.skipNextNewLine=!0,e.framesetOk=!1;}function $n(e,t){e._reconstructActiveFormattingElements(),e._insertElement(t,qt.HTML),e.activeFormattingElements.pushElement(e.openElements.current,t);}function es(e,t){e._reconstructActiveFormattingElements(),e._insertElement(t,qt.HTML),e.activeFormattingElements.insertMarker(),e.framesetOk=!1;}function ts(e,t){e._reconstructActiveFormattingElements(),e._appendElement(t,qt.HTML),e.framesetOk=!1,t.ackSelfClosing=!0;}function ns(e,t){e._appendElement(t,qt.HTML),t.ackSelfClosing=!0;}function ss(e,t){e._switchToTextParsing(t,Nt.MODE.RAWTEXT);}function rs(e,t){e.openElements.currentTagName===zt.OPTION&&e.openElements.pop(),e._reconstructActiveFormattingElements(),e._insertElement(t,qt.HTML);}function is(e,t){e.openElements.hasInScope(zt.RUBY)&&e.openElements.generateImpliedEndTags(),e._insertElement(t,qt.HTML);}function os(e,t){e._reconstructActiveFormattingElements(),e._insertElement(t,qt.HTML);}function as(e,t){const n=t.tagName;switch(n.length){case 1:n===zt.I||n===zt.S||n===zt.B||n===zt.U?$n(e,t):n===zt.P?Jn(e,t):n===zt.A?function(e,t){const n=e.activeFormattingElements.getElementEntryInScopeWithTagName(zt.A);n&&(Un(e,t),e.openElements.remove(n.element),e.activeFormattingElements.removeEntry(n)),e._reconstructActiveFormattingElements(),e._insertElement(t,qt.HTML),e.activeFormattingElements.pushElement(e.openElements.current,t);}(e,t):os(e,t);break;case 2:n===zt.DL||n===zt.OL||n===zt.UL?Jn(e,t):n===zt.H1||n===zt.H2||n===zt.H3||n===zt.H4||n===zt.H5||n===zt.H6?function(e,t){e.openElements.hasInButtonScope(zt.P)&&e._closePElement();const n=e.openElements.currentTagName;n!==zt.H1&&n!==zt.H2&&n!==zt.H3&&n!==zt.H4&&n!==zt.H5&&n!==zt.H6||e.openElements.pop(),e._insertElement(t,qt.HTML);}(e,t):n===zt.LI||n===zt.DD||n===zt.DT?function(e,t){e.framesetOk=!1;const n=t.tagName;for(let t=e.openElements.stackTop;t>=0;t--){const s=e.openElements.items[t],r=e.treeAdapter.getTagName(s);let i=null;if(n===zt.LI&&r===zt.LI?i=zt.LI:n!==zt.DD&&n!==zt.DT||r!==zt.DD&&r!==zt.DT||(i=r),i){e.openElements.generateImpliedEndTagsWithExclusion(i),e.openElements.popUntilTagNamePopped(i);break}if(r!==zt.ADDRESS&&r!==zt.DIV&&r!==zt.P&&e._isSpecialElement(s))break}e.openElements.hasInButtonScope(zt.P)&&e._closePElement(),e._insertElement(t,qt.HTML);}(e,t):n===zt.EM||n===zt.TT?$n(e,t):n===zt.BR?ts(e,t):n===zt.HR?function(e,t){e.openElements.hasInButtonScope(zt.P)&&e._closePElement(),e._appendElement(t,qt.HTML),e.framesetOk=!1,t.ackSelfClosing=!0;}(e,t):n===zt.RB?is(e,t):n===zt.RT||n===zt.RP?function(e,t){e.openElements.hasInScope(zt.RUBY)&&e.openElements.generateImpliedEndTagsWithExclusion(zt.RTC),e._insertElement(t,qt.HTML);}(e,t):n!==zt.TH&&n!==zt.TD&&n!==zt.TR&&os(e,t);break;case 3:n===zt.DIV||n===zt.DIR||n===zt.NAV?Jn(e,t):n===zt.PRE?Zn(e,t):n===zt.BIG?$n(e,t):n===zt.IMG||n===zt.WBR?ts(e,t):n===zt.XMP?function(e,t){e.openElements.hasInButtonScope(zt.P)&&e._closePElement(),e._reconstructActiveFormattingElements(),e.framesetOk=!1,e._switchToTextParsing(t,Nt.MODE.RAWTEXT);}(e,t):n===zt.SVG?function(e,t){e._reconstructActiveFormattingElements(),jt.adjustTokenSVGAttrs(t),jt.adjustTokenXMLAttrs(t),t.selfClosing?e._appendElement(t,qt.SVG):e._insertElement(t,qt.SVG),t.ackSelfClosing=!0;}(e,t):n===zt.RTC?is(e,t):n!==zt.COL&&os(e,t);break;case 4:n===zt.HTML?function(e,t){0===e.openElements.tmplCount&&e.treeAdapter.adoptAttributes(e.openElements.items[0],t.attrs);}(e,t):n===zt.BASE||n===zt.LINK||n===zt.META?Qn(e,t):n===zt.BODY?function(e,t){const n=e.openElements.tryPeekProperlyNestedBodyElement();n&&0===e.openElements.tmplCount&&(e.framesetOk=!1,e.treeAdapter.adoptAttributes(n,t.attrs));}(e,t):n===zt.MAIN||n===zt.MENU?Jn(e,t):n===zt.FORM?function(e,t){const n=e.openElements.tmplCount>0;e.formElement&&!n||(e.openElements.hasInButtonScope(zt.P)&&e._closePElement(),e._insertElement(t,qt.HTML),n||(e.formElement=e.openElements.current));}(e,t):n===zt.CODE||n===zt.FONT?$n(e,t):n===zt.NOBR?function(e,t){e._reconstructActiveFormattingElements(),e.openElements.hasInScope(zt.NOBR)&&(Un(e,t),e._reconstructActiveFormattingElements()),e._insertElement(t,qt.HTML),e.activeFormattingElements.pushElement(e.openElements.current,t);}(e,t):n===zt.AREA?ts(e,t):n===zt.MATH?function(e,t){e._reconstructActiveFormattingElements(),jt.adjustTokenMathMLAttrs(t),jt.adjustTokenXMLAttrs(t),t.selfClosing?e._appendElement(t,qt.MATHML):e._insertElement(t,qt.MATHML),t.ackSelfClosing=!0;}(e,t):n===zt.MENU?function(e,t){e.openElements.hasInButtonScope(zt.P)&&e._closePElement(),e._insertElement(t,qt.HTML);}(e,t):n!==zt.HEAD&&os(e,t);break;case 5:n===zt.STYLE||n===zt.TITLE?Qn(e,t):n===zt.ASIDE?Jn(e,t):n===zt.SMALL?$n(e,t):n===zt.TABLE?function(e,t){e.treeAdapter.getDocumentMode(e.document)!==Ct.DOCUMENT_MODE.QUIRKS&&e.openElements.hasInButtonScope(zt.P)&&e._closePElement(),e._insertElement(t,qt.HTML),e.framesetOk=!1,e.insertionMode=En;}(e,t):n===zt.EMBED?ts(e,t):n===zt.INPUT?function(e,t){e._reconstructActiveFormattingElements(),e._appendElement(t,qt.HTML);const n=Nt.getTokenAttr(t,Jt.TYPE);n&&n.toLowerCase()===$t||(e.framesetOk=!1),t.ackSelfClosing=!0;}(e,t):n===zt.PARAM||n===zt.TRACK?ns(e,t):n===zt.IMAGE?function(e,t){t.tagName=zt.IMG,ts(e,t);}(e,t):n!==zt.FRAME&&n!==zt.TBODY&&n!==zt.TFOOT&&n!==zt.THEAD&&os(e,t);break;case 6:n===zt.SCRIPT?Qn(e,t):n===zt.CENTER||n===zt.FIGURE||n===zt.FOOTER||n===zt.HEADER||n===zt.HGROUP||n===zt.DIALOG?Jn(e,t):n===zt.BUTTON?function(e,t){e.openElements.hasInScope(zt.BUTTON)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(zt.BUTTON)),e._reconstructActiveFormattingElements(),e._insertElement(t,qt.HTML),e.framesetOk=!1;}(e,t):n===zt.STRIKE||n===zt.STRONG?$n(e,t):n===zt.APPLET||n===zt.OBJECT?es(e,t):n===zt.KEYGEN?ts(e,t):n===zt.SOURCE?ns(e,t):n===zt.IFRAME?function(e,t){e.framesetOk=!1,e._switchToTextParsing(t,Nt.MODE.RAWTEXT);}(e,t):n===zt.SELECT?function(e,t){e._reconstructActiveFormattingElements(),e._insertElement(t,qt.HTML),e.framesetOk=!1,e.insertionMode===En||e.insertionMode===cn||e.insertionMode===ln||e.insertionMode===mn||e.insertionMode===pn?e.insertionMode=un:e.insertionMode=An;}(e,t):n===zt.OPTION?rs(e,t):os(e,t);break;case 7:n===zt.BGSOUND?Qn(e,t):n===zt.DETAILS||n===zt.ADDRESS||n===zt.ARTICLE||n===zt.SECTION||n===zt.SUMMARY?Jn(e,t):n===zt.LISTING?Zn(e,t):n===zt.MARQUEE?es(e,t):n===zt.NOEMBED?ss(e,t):n!==zt.CAPTION&&os(e,t);break;case 8:n===zt.BASEFONT?Qn(e,t):n===zt.FRAMESET?function(e,t){const n=e.openElements.tryPeekProperlyNestedBodyElement();e.framesetOk&&n&&(e.treeAdapter.detachNode(n),e.openElements.popAllUpToHtmlElement(),e._insertElement(t,qt.HTML),e.insertionMode=Cn);}(e,t):n===zt.FIELDSET?Jn(e,t):n===zt.TEXTAREA?function(e,t){e._insertElement(t,qt.HTML),e.skipNextNewLine=!0,e.tokenizer.state=Nt.MODE.RCDATA,e.originalInsertionMode=e.insertionMode,e.framesetOk=!1,e.insertionMode=Tn;}(e,t):n===zt.TEMPLATE?Qn(e,t):n===zt.NOSCRIPT?e.options.scriptingEnabled?ss(e,t):os(e,t):n===zt.OPTGROUP?rs(e,t):n!==zt.COLGROUP&&os(e,t);break;case 9:n===zt.PLAINTEXT?function(e,t){e.openElements.hasInButtonScope(zt.P)&&e._closePElement(),e._insertElement(t,qt.HTML),e.tokenizer.state=Nt.MODE.PLAINTEXT;}(e,t):os(e,t);break;case 10:n===zt.BLOCKQUOTE||n===zt.FIGCAPTION?Jn(e,t):os(e,t);break;default:os(e,t);}}function Ts(e,t){const n=t.tagName;e.openElements.hasInScope(n)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(n));}function Es(e,t){const n=t.tagName;e.openElements.hasInScope(n)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(n),e.activeFormattingElements.clearToLastMarker());}function hs(e,t){const n=t.tagName;for(let t=e.openElements.stackTop;t>0;t--){const s=e.openElements.items[t];if(e.treeAdapter.getTagName(s)===n){e.openElements.generateImpliedEndTagsWithExclusion(n),e.openElements.popUntilElementPopped(s);break}if(e._isSpecialElement(s))break}}function cs(e,t){const n=t.tagName;switch(n.length){case 1:n===zt.A||n===zt.B||n===zt.I||n===zt.S||n===zt.U?Un(e,t):n===zt.P?function(e){e.openElements.hasInButtonScope(zt.P)||e._insertFakeElement(zt.P),e._closePElement();}(e):hs(e,t);break;case 2:n===zt.DL||n===zt.UL||n===zt.OL?Ts(e,t):n===zt.LI?function(e){e.openElements.hasInListItemScope(zt.LI)&&(e.openElements.generateImpliedEndTagsWithExclusion(zt.LI),e.openElements.popUntilTagNamePopped(zt.LI));}(e):n===zt.DD||n===zt.DT?function(e,t){const n=t.tagName;e.openElements.hasInScope(n)&&(e.openElements.generateImpliedEndTagsWithExclusion(n),e.openElements.popUntilTagNamePopped(n));}(e,t):n===zt.H1||n===zt.H2||n===zt.H3||n===zt.H4||n===zt.H5||n===zt.H6?function(e){e.openElements.hasNumberedHeaderInScope()&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilNumberedHeaderPopped());}(e):n===zt.BR?function(e){e._reconstructActiveFormattingElements(),e._insertFakeElement(zt.BR),e.openElements.pop(),e.framesetOk=!1;}(e):n===zt.EM||n===zt.TT?Un(e,t):hs(e,t);break;case 3:n===zt.BIG?Un(e,t):n===zt.DIR||n===zt.DIV||n===zt.NAV||n===zt.PRE?Ts(e,t):hs(e,t);break;case 4:n===zt.BODY?function(e){e.openElements.hasInScope(zt.BODY)&&(e.insertionMode=dn);}(e):n===zt.HTML?function(e,t){e.openElements.hasInScope(zt.BODY)&&(e.insertionMode=dn,e._processToken(t));}(e,t):n===zt.FORM?function(e){const t=e.openElements.tmplCount>0,n=e.formElement;t||(e.formElement=null),(n||t)&&e.openElements.hasInScope(zt.FORM)&&(e.openElements.generateImpliedEndTags(),t?e.openElements.popUntilTagNamePopped(zt.FORM):e.openElements.remove(n));}(e):n===zt.CODE||n===zt.FONT||n===zt.NOBR?Un(e,t):n===zt.MAIN||n===zt.MENU?Ts(e,t):hs(e,t);break;case 5:n===zt.ASIDE?Ts(e,t):n===zt.SMALL?Un(e,t):hs(e,t);break;case 6:n===zt.CENTER||n===zt.FIGURE||n===zt.FOOTER||n===zt.HEADER||n===zt.HGROUP||n===zt.DIALOG?Ts(e,t):n===zt.APPLET||n===zt.OBJECT?Es(e,t):n===zt.STRIKE||n===zt.STRONG?Un(e,t):hs(e,t);break;case 7:n===zt.ADDRESS||n===zt.ARTICLE||n===zt.DETAILS||n===zt.SECTION||n===zt.SUMMARY||n===zt.LISTING?Ts(e,t):n===zt.MARQUEE?Es(e,t):hs(e,t);break;case 8:n===zt.FIELDSET?Ts(e,t):n===zt.TEMPLATE?Xn(e,t):hs(e,t);break;case 10:n===zt.BLOCKQUOTE||n===zt.FIGCAPTION?Ts(e,t):hs(e,t);break;default:hs(e,t);}}function _s(e,t){e.tmplInsertionModeStackTop>-1?Os(e,t):e.stopped=!0;}function ls(e,t){const n=e.openElements.currentTagName;n===zt.TABLE||n===zt.TBODY||n===zt.TFOOT||n===zt.THEAD||n===zt.TR?(e.pendingCharacterTokens=[],e.hasNonWhitespacePendingCharacterToken=!1,e.originalInsertionMode=e.insertionMode,e.insertionMode=hn,e._processToken(t)):As(e,t);}function ms(e,t){const n=t.tagName;switch(n.length){case 2:n===zt.TD||n===zt.TH||n===zt.TR?function(e,t){e.openElements.clearBackToTableContext(),e._insertFakeElement(zt.TBODY),e.insertionMode=ln,e._processToken(t);}(e,t):As(e,t);break;case 3:n===zt.COL?function(e,t){e.openElements.clearBackToTableContext(),e._insertFakeElement(zt.COLGROUP),e.insertionMode=_n,e._processToken(t);}(e,t):As(e,t);break;case 4:n===zt.FORM?function(e,t){e.formElement||0!==e.openElements.tmplCount||(e._insertElement(t,qt.HTML),e.formElement=e.openElements.current,e.openElements.pop());}(e,t):As(e,t);break;case 5:n===zt.TABLE?function(e,t){e.openElements.hasInTableScope(zt.TABLE)&&(e.openElements.popUntilTagNamePopped(zt.TABLE),e._resetInsertionMode(),e._processToken(t));}(e,t):n===zt.STYLE?Qn(e,t):n===zt.TBODY||n===zt.TFOOT||n===zt.THEAD?function(e,t){e.openElements.clearBackToTableContext(),e._insertElement(t,qt.HTML),e.insertionMode=ln;}(e,t):n===zt.INPUT?function(e,t){const n=Nt.getTokenAttr(t,Jt.TYPE);n&&n.toLowerCase()===$t?e._appendElement(t,qt.HTML):As(e,t),t.ackSelfClosing=!0;}(e,t):As(e,t);break;case 6:n===zt.SCRIPT?Qn(e,t):As(e,t);break;case 7:n===zt.CAPTION?function(e,t){e.openElements.clearBackToTableContext(),e.activeFormattingElements.insertMarker(),e._insertElement(t,qt.HTML),e.insertionMode=cn;}(e,t):As(e,t);break;case 8:n===zt.COLGROUP?function(e,t){e.openElements.clearBackToTableContext(),e._insertElement(t,qt.HTML),e.insertionMode=_n;}(e,t):n===zt.TEMPLATE?Qn(e,t):As(e,t);break;default:As(e,t);}}function ps(e,t){const n=t.tagName;n===zt.TABLE?e.openElements.hasInTableScope(zt.TABLE)&&(e.openElements.popUntilTagNamePopped(zt.TABLE),e._resetInsertionMode()):n===zt.TEMPLATE?Xn(e,t):n!==zt.BODY&&n!==zt.CAPTION&&n!==zt.COL&&n!==zt.COLGROUP&&n!==zt.HTML&&n!==zt.TBODY&&n!==zt.TD&&n!==zt.TFOOT&&n!==zt.TH&&n!==zt.THEAD&&n!==zt.TR&&As(e,t);}function As(e,t){const n=e.fosterParentingEnabled;e.fosterParentingEnabled=!0,e._processTokenInBodyMode(t),e.fosterParentingEnabled=n;}function us(e,t){let n=0;if(e.hasNonWhitespacePendingCharacterToken)for(;n<e.pendingCharacterTokens.length;n++)As(e,e.pendingCharacterTokens[n]);else for(;n<e.pendingCharacterTokens.length;n++)e._insertCharacters(e.pendingCharacterTokens[n]);e.insertionMode=e.originalInsertionMode,e._processToken(t);}function Ns(e,t){e.openElements.currentTagName===zt.COLGROUP&&(e.openElements.pop(),e.insertionMode=En,e._processToken(t));}function ds(e,t){const n=t.tagName;n===zt.HTML?as(e,t):n===zt.OPTION?(e.openElements.currentTagName===zt.OPTION&&e.openElements.pop(),e._insertElement(t,qt.HTML)):n===zt.OPTGROUP?(e.openElements.currentTagName===zt.OPTION&&e.openElements.pop(),e.openElements.currentTagName===zt.OPTGROUP&&e.openElements.pop(),e._insertElement(t,qt.HTML)):n===zt.INPUT||n===zt.KEYGEN||n===zt.TEXTAREA||n===zt.SELECT?e.openElements.hasInSelectScope(zt.SELECT)&&(e.openElements.popUntilTagNamePopped(zt.SELECT),e._resetInsertionMode(),n!==zt.SELECT&&e._processToken(t)):n!==zt.SCRIPT&&n!==zt.TEMPLATE||Qn(e,t);}function Cs(e,t){const n=t.tagName;if(n===zt.OPTGROUP){const t=e.openElements.items[e.openElements.stackTop-1],n=t&&e.treeAdapter.getTagName(t);e.openElements.currentTagName===zt.OPTION&&n===zt.OPTGROUP&&e.openElements.pop(),e.openElements.currentTagName===zt.OPTGROUP&&e.openElements.pop();}else n===zt.OPTION?e.openElements.currentTagName===zt.OPTION&&e.openElements.pop():n===zt.SELECT&&e.openElements.hasInSelectScope(zt.SELECT)?(e.openElements.popUntilTagNamePopped(zt.SELECT),e._resetInsertionMode()):n===zt.TEMPLATE&&Xn(e,t);}function Os(e,t){e.openElements.tmplCount>0?(e.openElements.popUntilTagNamePopped(zt.TEMPLATE),e.activeFormattingElements.clearToLastMarker(),e._popTmplInsertionMode(),e._resetInsertionMode(),e._processToken(t)):e.stopped=!0;}function fs(e,t){e.insertionMode=an,e._processToken(t);}function Ss(e,t){e.insertionMode=an,e._processToken(t);}return Ct.TAG_NAMES,Ct.NAMESPACES,e.parse=function(e,t){return new kn(t).parse(e)},e.parseFragment=function(e,t,n){return "string"==typeof e&&(n=t,t=e,e=null),new kn(n).parseFragment(t,e)},Object.defineProperty(e,"__esModule",{value:!0}),e}({});const parse=e.parse;const parseFragment=e.parseFragment;

const docParser = new WeakMap();
function parseDocumentUtil(ownerDocument, html) {
  const doc = parse(html.trim(), getParser(ownerDocument));
  doc.documentElement = doc.firstElementChild;
  doc.head = doc.documentElement.firstElementChild;
  doc.body = doc.head.nextElementSibling;
  return doc;
}
function parseFragmentUtil(ownerDocument, html) {
  if (typeof html === 'string') {
    html = html.trim();
  }
  else {
    html = '';
  }
  const frag = parseFragment(html, getParser(ownerDocument));
  return frag;
}
function getParser(ownerDocument) {
  let parseOptions = docParser.get(ownerDocument);
  if (parseOptions != null) {
    return parseOptions;
  }
  const treeAdapter = {
    createDocument() {
      const doc = ownerDocument.createElement("#document" /* DOCUMENT_NODE */);
      doc['x-mode'] = 'no-quirks';
      return doc;
    },
    setNodeSourceCodeLocation(node, location) {
      node.sourceCodeLocation = location;
    },
    getNodeSourceCodeLocation(node) {
      return node.sourceCodeLocation;
    },
    createDocumentFragment() {
      return ownerDocument.createDocumentFragment();
    },
    createElement(tagName, namespaceURI, attrs) {
      const elm = ownerDocument.createElementNS(namespaceURI, tagName);
      for (let i = 0; i < attrs.length; i++) {
        const attr = attrs[i];
        if (attr.namespace == null || attr.namespace === 'http://www.w3.org/1999/xhtml') {
          elm.setAttribute(attr.name, attr.value);
        }
        else {
          elm.setAttributeNS(attr.namespace, attr.name, attr.value);
        }
      }
      return elm;
    },
    createCommentNode(data) {
      return ownerDocument.createComment(data);
    },
    appendChild(parentNode, newNode) {
      parentNode.appendChild(newNode);
    },
    insertBefore(parentNode, newNode, referenceNode) {
      parentNode.insertBefore(newNode, referenceNode);
    },
    setTemplateContent(templateElement, contentElement) {
      templateElement.content = contentElement;
    },
    getTemplateContent(templateElement) {
      return templateElement.content;
    },
    setDocumentType(doc, name, publicId, systemId) {
      let doctypeNode = doc.childNodes.find((n) => n.nodeType === 10 /* DOCUMENT_TYPE_NODE */);
      if (doctypeNode == null) {
        doctypeNode = ownerDocument.createDocumentTypeNode();
        doc.insertBefore(doctypeNode, doc.firstChild);
      }
      doctypeNode.nodeValue = '!DOCTYPE';
      doctypeNode['x-name'] = name;
      doctypeNode['x-publicId'] = publicId;
      doctypeNode['x-systemId'] = systemId;
    },
    setDocumentMode(doc, mode) {
      doc['x-mode'] = mode;
    },
    getDocumentMode(doc) {
      return doc['x-mode'];
    },
    detachNode(node) {
      node.remove();
    },
    insertText(parentNode, text) {
      const lastChild = parentNode.lastChild;
      if (lastChild != null && lastChild.nodeType === 3 /* TEXT_NODE */) {
        lastChild.nodeValue += text;
      }
      else {
        parentNode.appendChild(ownerDocument.createTextNode(text));
      }
    },
    insertTextBefore(parentNode, text, referenceNode) {
      const prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];
      if (prevNode != null && prevNode.nodeType === 3 /* TEXT_NODE */) {
        prevNode.nodeValue += text;
      }
      else {
        parentNode.insertBefore(ownerDocument.createTextNode(text), referenceNode);
      }
    },
    adoptAttributes(recipient, attrs) {
      for (let i = 0; i < attrs.length; i++) {
        const attr = attrs[i];
        if (recipient.hasAttributeNS(attr.namespace, attr.name) === false) {
          recipient.setAttributeNS(attr.namespace, attr.name, attr.value);
        }
      }
    },
    getFirstChild(node) {
      return node.childNodes[0];
    },
    getChildNodes(node) {
      return node.childNodes;
    },
    getParentNode(node) {
      return node.parentNode;
    },
    getAttrList(element) {
      const attrs = element.attributes.__items.map((attr) => {
        return {
          name: attr.name,
          value: attr.value,
          namespace: attr.namespaceURI,
          prefix: null,
        };
      });
      return attrs;
    },
    getTagName(element) {
      if (element.namespaceURI === 'http://www.w3.org/1999/xhtml') {
        return element.nodeName.toLowerCase();
      }
      else {
        return element.nodeName;
      }
    },
    getNamespaceURI(element) {
      return element.namespaceURI;
    },
    getTextNodeContent(textNode) {
      return textNode.nodeValue;
    },
    getCommentNodeContent(commentNode) {
      return commentNode.nodeValue;
    },
    getDocumentTypeNodeName(doctypeNode) {
      return doctypeNode['x-name'];
    },
    getDocumentTypeNodePublicId(doctypeNode) {
      return doctypeNode['x-publicId'];
    },
    getDocumentTypeNodeSystemId(doctypeNode) {
      return doctypeNode['x-systemId'];
    },
    isTextNode(node) {
      return node.nodeType === 3 /* TEXT_NODE */;
    },
    isCommentNode(node) {
      return node.nodeType === 8 /* COMMENT_NODE */;
    },
    isDocumentTypeNode(node) {
      return node.nodeType === 10 /* DOCUMENT_TYPE_NODE */;
    },
    isElementNode(node) {
      return node.nodeType === 1 /* ELEMENT_NODE */;
    },
  };
  parseOptions = {
    treeAdapter: treeAdapter,
  };
  docParser.set(ownerDocument, parseOptions);
  return parseOptions;
}

class MockNode {
  constructor(ownerDocument, nodeType, nodeName, nodeValue) {
    this.ownerDocument = ownerDocument;
    this.nodeType = nodeType;
    this.nodeName = nodeName;
    this._nodeValue = nodeValue;
    this.parentNode = null;
    this.childNodes = [];
  }
  appendChild(newNode) {
    if (newNode.nodeType === 11 /* DOCUMENT_FRAGMENT_NODE */) {
      const nodes = newNode.childNodes.slice();
      for (const child of nodes) {
        this.appendChild(child);
      }
    }
    else {
      newNode.remove();
      newNode.parentNode = this;
      this.childNodes.push(newNode);
      connectNode(this.ownerDocument, newNode);
    }
    return newNode;
  }
  append(...items) {
    items.forEach((item) => {
      const isNode = typeof item === 'object' && item !== null && 'nodeType' in item;
      this.appendChild(isNode ? item : this.ownerDocument.createTextNode(String(item)));
    });
  }
  prepend(...items) {
    const firstChild = this.firstChild;
    items.forEach((item) => {
      const isNode = typeof item === 'object' && item !== null && 'nodeType' in item;
      this.insertBefore(isNode ? item : this.ownerDocument.createTextNode(String(item)), firstChild);
    });
  }
  cloneNode(deep) {
    throw new Error(`invalid node type to clone: ${this.nodeType}, deep: ${deep}`);
  }
  compareDocumentPosition(_other) {
    // unimplemented
    // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition
    return -1;
  }
  get firstChild() {
    return this.childNodes[0] || null;
  }
  insertBefore(newNode, referenceNode) {
    if (newNode.nodeType === 11 /* DOCUMENT_FRAGMENT_NODE */) {
      for (let i = 0, ii = newNode.childNodes.length; i < ii; i++) {
        insertBefore(this, newNode.childNodes[i], referenceNode);
      }
    }
    else {
      insertBefore(this, newNode, referenceNode);
    }
    return newNode;
  }
  get isConnected() {
    let node = this;
    while (node != null) {
      if (node.nodeType === 9 /* DOCUMENT_NODE */) {
        return true;
      }
      node = node.parentNode;
      if (node != null && node.nodeType === 11 /* DOCUMENT_FRAGMENT_NODE */) {
        node = node.host;
      }
    }
    return false;
  }
  isSameNode(node) {
    return this === node;
  }
  get lastChild() {
    return this.childNodes[this.childNodes.length - 1] || null;
  }
  get nextSibling() {
    if (this.parentNode != null) {
      const index = this.parentNode.childNodes.indexOf(this) + 1;
      return this.parentNode.childNodes[index] || null;
    }
    return null;
  }
  get nodeValue() {
    return this._nodeValue;
  }
  set nodeValue(value) {
    this._nodeValue = value;
  }
  get parentElement() {
    return this.parentNode || null;
  }
  set parentElement(value) {
    this.parentNode = value;
  }
  get previousSibling() {
    if (this.parentNode != null) {
      const index = this.parentNode.childNodes.indexOf(this) - 1;
      return this.parentNode.childNodes[index] || null;
    }
    return null;
  }
  contains(otherNode) {
    if (otherNode === this) {
      return true;
    }
    const childNodes = Array.from(this.childNodes);
    if (childNodes.includes(otherNode)) {
      return true;
    }
    return childNodes.some((node) => this.contains.bind(node)(otherNode));
  }
  removeChild(childNode) {
    const index = this.childNodes.indexOf(childNode);
    if (index > -1) {
      this.childNodes.splice(index, 1);
      if (this.nodeType === 1 /* ELEMENT_NODE */) {
        const wasConnected = this.isConnected;
        childNode.parentNode = null;
        if (wasConnected === true) {
          disconnectNode(childNode);
        }
      }
      else {
        childNode.parentNode = null;
      }
    }
    else {
      throw new Error(`node not found within childNodes during removeChild`);
    }
    return childNode;
  }
  remove() {
    if (this.parentNode != null) {
      this.parentNode.removeChild(this);
    }
  }
  replaceChild(newChild, oldChild) {
    if (oldChild.parentNode === this) {
      this.insertBefore(newChild, oldChild);
      oldChild.remove();
      return newChild;
    }
    return null;
  }
  get textContent() {
    return this._nodeValue;
  }
  set textContent(value) {
    this._nodeValue = String(value);
  }
}
MockNode.ELEMENT_NODE = 1;
MockNode.TEXT_NODE = 3;
MockNode.PROCESSING_INSTRUCTION_NODE = 7;
MockNode.COMMENT_NODE = 8;
MockNode.DOCUMENT_NODE = 9;
MockNode.DOCUMENT_TYPE_NODE = 10;
MockNode.DOCUMENT_FRAGMENT_NODE = 11;
class MockNodeList {
  constructor(ownerDocument, childNodes, length) {
    this.ownerDocument = ownerDocument;
    this.childNodes = childNodes;
    this.length = length;
  }
}
class MockElement extends MockNode {
  constructor(ownerDocument, nodeName) {
    super(ownerDocument, 1 /* ELEMENT_NODE */, typeof nodeName === 'string' ? nodeName : null, null);
    this.namespaceURI = null;
  }
  addEventListener(type, handler) {
    addEventListener(this, type, handler);
  }
  attachShadow(_opts) {
    const shadowRoot = this.ownerDocument.createDocumentFragment();
    this.shadowRoot = shadowRoot;
    return shadowRoot;
  }
  blur() {
    /**/
  }
  get shadowRoot() {
    return this.__shadowRoot || null;
  }
  set shadowRoot(shadowRoot) {
    if (shadowRoot != null) {
      shadowRoot.host = this;
      this.__shadowRoot = shadowRoot;
    }
    else {
      delete this.__shadowRoot;
    }
  }
  get attributes() {
    if (this.__attributeMap == null) {
      this.__attributeMap = createAttributeProxy(false);
    }
    return this.__attributeMap;
  }
  set attributes(attrs) {
    this.__attributeMap = attrs;
  }
  get children() {
    return this.childNodes.filter((n) => n.nodeType === 1 /* ELEMENT_NODE */);
  }
  get childElementCount() {
    return this.childNodes.filter((n) => n.nodeType === 1 /* ELEMENT_NODE */).length;
  }
  get className() {
    return this.getAttributeNS(null, 'class') || '';
  }
  set className(value) {
    this.setAttributeNS(null, 'class', value);
  }
  get classList() {
    return new MockClassList(this);
  }
  click() {
    dispatchEvent(this, new MockEvent('click', { bubbles: true, cancelable: true, composed: true }));
  }
  cloneNode(_deep) {
    // implemented on MockElement.prototype from within element.ts
    return null;
  }
  closest(selector) {
    let elm = this;
    while (elm != null) {
      if (elm.matches(selector)) {
        return elm;
      }
      elm = elm.parentNode;
    }
    return null;
  }
  get dataset() {
    return dataset(this);
  }
  get dir() {
    return this.getAttributeNS(null, 'dir') || '';
  }
  set dir(value) {
    this.setAttributeNS(null, 'dir', value);
  }
  dispatchEvent(ev) {
    return dispatchEvent(this, ev);
  }
  get firstElementChild() {
    return this.children[0] || null;
  }
  focus(_options) { }
  getAttribute(attrName) {
    if (attrName === 'style') {
      if (this.__style != null && this.__style.length > 0) {
        return this.style.cssText;
      }
      return null;
    }
    const attr = this.attributes.getNamedItem(attrName);
    if (attr != null) {
      return attr.value;
    }
    return null;
  }
  getAttributeNS(namespaceURI, attrName) {
    const attr = this.attributes.getNamedItemNS(namespaceURI, attrName);
    if (attr != null) {
      return attr.value;
    }
    return null;
  }
  getBoundingClientRect() {
    return { bottom: 0, height: 0, left: 0, right: 0, top: 0, width: 0, x: 0, y: 0 };
  }
  getRootNode(opts) {
    const isComposed = opts != null && opts.composed === true;
    let node = this;
    while (node.parentNode != null) {
      node = node.parentNode;
      if (isComposed === true && node.parentNode == null && node.host != null) {
        node = node.host;
      }
    }
    return node;
  }
  get draggable() {
    return this.getAttributeNS(null, 'draggable') === 'true';
  }
  set draggable(value) {
    this.setAttributeNS(null, 'draggable', value);
  }
  hasChildNodes() {
    return this.childNodes.length > 0;
  }
  get id() {
    return this.getAttributeNS(null, 'id') || '';
  }
  set id(value) {
    this.setAttributeNS(null, 'id', value);
  }
  get innerHTML() {
    if (this.childNodes.length === 0) {
      return '';
    }
    return serializeNodeToHtml(this, {
      newLines: false,
      indentSpaces: 0,
    });
  }
  set innerHTML(html) {
    if (NON_ESCAPABLE_CONTENT.has(this.nodeName) === true) {
      setTextContent(this, html);
    }
    else {
      for (let i = this.childNodes.length - 1; i >= 0; i--) {
        this.removeChild(this.childNodes[i]);
      }
      if (typeof html === 'string') {
        const frag = parseFragmentUtil(this.ownerDocument, html);
        while (frag.childNodes.length > 0) {
          this.appendChild(frag.childNodes[0]);
        }
      }
    }
  }
  get innerText() {
    const text = [];
    getTextContent(this.childNodes, text);
    return text.join('');
  }
  set innerText(value) {
    setTextContent(this, value);
  }
  insertAdjacentElement(position, elm) {
    if (position === 'beforebegin') {
      insertBefore(this.parentNode, elm, this);
    }
    else if (position === 'afterbegin') {
      this.prepend(elm);
    }
    else if (position === 'beforeend') {
      this.appendChild(elm);
    }
    else if (position === 'afterend') {
      insertBefore(this.parentNode, elm, this.nextSibling);
    }
    return elm;
  }
  insertAdjacentHTML(position, html) {
    const frag = parseFragmentUtil(this.ownerDocument, html);
    if (position === 'beforebegin') {
      while (frag.childNodes.length > 0) {
        insertBefore(this.parentNode, frag.childNodes[0], this);
      }
    }
    else if (position === 'afterbegin') {
      while (frag.childNodes.length > 0) {
        this.prepend(frag.childNodes[frag.childNodes.length - 1]);
      }
    }
    else if (position === 'beforeend') {
      while (frag.childNodes.length > 0) {
        this.appendChild(frag.childNodes[0]);
      }
    }
    else if (position === 'afterend') {
      while (frag.childNodes.length > 0) {
        insertBefore(this.parentNode, frag.childNodes[frag.childNodes.length - 1], this.nextSibling);
      }
    }
  }
  insertAdjacentText(position, text) {
    const elm = this.ownerDocument.createTextNode(text);
    if (position === 'beforebegin') {
      insertBefore(this.parentNode, elm, this);
    }
    else if (position === 'afterbegin') {
      this.prepend(elm);
    }
    else if (position === 'beforeend') {
      this.appendChild(elm);
    }
    else if (position === 'afterend') {
      insertBefore(this.parentNode, elm, this.nextSibling);
    }
  }
  hasAttribute(attrName) {
    if (attrName === 'style') {
      return this.__style != null && this.__style.length > 0;
    }
    return this.getAttribute(attrName) !== null;
  }
  hasAttributeNS(namespaceURI, name) {
    return this.getAttributeNS(namespaceURI, name) !== null;
  }
  get hidden() {
    return this.hasAttributeNS(null, 'hidden');
  }
  set hidden(isHidden) {
    if (isHidden === true) {
      this.setAttributeNS(null, 'hidden', '');
    }
    else {
      this.removeAttributeNS(null, 'hidden');
    }
  }
  get lang() {
    return this.getAttributeNS(null, 'lang') || '';
  }
  set lang(value) {
    this.setAttributeNS(null, 'lang', value);
  }
  get lastElementChild() {
    const children = this.children;
    return children[children.length - 1] || null;
  }
  matches(selector) {
    return matches(selector, this);
  }
  get nextElementSibling() {
    const parentElement = this.parentElement;
    if (parentElement != null &&
      (parentElement.nodeType === 1 /* ELEMENT_NODE */ ||
        parentElement.nodeType === 11 /* DOCUMENT_FRAGMENT_NODE */ ||
        parentElement.nodeType === 9 /* DOCUMENT_NODE */)) {
      const children = parentElement.children;
      const index = children.indexOf(this) + 1;
      return parentElement.children[index] || null;
    }
    return null;
  }
  get outerHTML() {
    return serializeNodeToHtml(this, {
      newLines: false,
      outerHtml: true,
      indentSpaces: 0,
    });
  }
  get previousElementSibling() {
    const parentElement = this.parentElement;
    if (parentElement != null &&
      (parentElement.nodeType === 1 /* ELEMENT_NODE */ ||
        parentElement.nodeType === 11 /* DOCUMENT_FRAGMENT_NODE */ ||
        parentElement.nodeType === 9 /* DOCUMENT_NODE */)) {
      const children = parentElement.children;
      const index = children.indexOf(this) - 1;
      return parentElement.children[index] || null;
    }
    return null;
  }
  getElementsByClassName(classNames) {
    const classes = classNames
      .trim()
      .split(' ')
      .filter((c) => c.length > 0);
    const results = [];
    getElementsByClassName(this, classes, results);
    return results;
  }
  getElementsByTagName(tagName) {
    const results = [];
    getElementsByTagName(this, tagName.toLowerCase(), results);
    return results;
  }
  querySelector(selector) {
    return selectOne(selector, this);
  }
  querySelectorAll(selector) {
    return selectAll(selector, this);
  }
  removeAttribute(attrName) {
    if (attrName === 'style') {
      delete this.__style;
    }
    else {
      const attr = this.attributes.getNamedItem(attrName);
      if (attr != null) {
        this.attributes.removeNamedItemNS(attr);
        if (checkAttributeChanged(this) === true) {
          attributeChanged(this, attrName, attr.value, null);
        }
      }
    }
  }
  removeAttributeNS(namespaceURI, attrName) {
    const attr = this.attributes.getNamedItemNS(namespaceURI, attrName);
    if (attr != null) {
      this.attributes.removeNamedItemNS(attr);
      if (checkAttributeChanged(this) === true) {
        attributeChanged(this, attrName, attr.value, null);
      }
    }
  }
  removeEventListener(type, handler) {
    removeEventListener(this, type, handler);
  }
  setAttribute(attrName, value) {
    if (attrName === 'style') {
      this.style = value;
    }
    else {
      const attributes = this.attributes;
      let attr = attributes.getNamedItem(attrName);
      const checkAttrChanged = checkAttributeChanged(this);
      if (attr != null) {
        if (checkAttrChanged === true) {
          const oldValue = attr.value;
          attr.value = value;
          if (oldValue !== attr.value) {
            attributeChanged(this, attr.name, oldValue, attr.value);
          }
        }
        else {
          attr.value = value;
        }
      }
      else {
        if (attributes.caseInsensitive) {
          attrName = attrName.toLowerCase();
        }
        attr = new MockAttr(attrName, value);
        attributes.__items.push(attr);
        if (checkAttrChanged === true) {
          attributeChanged(this, attrName, null, attr.value);
        }
      }
    }
  }
  setAttributeNS(namespaceURI, attrName, value) {
    const attributes = this.attributes;
    let attr = attributes.getNamedItemNS(namespaceURI, attrName);
    const checkAttrChanged = checkAttributeChanged(this);
    if (attr != null) {
      if (checkAttrChanged === true) {
        const oldValue = attr.value;
        attr.value = value;
        if (oldValue !== attr.value) {
          attributeChanged(this, attr.name, oldValue, attr.value);
        }
      }
      else {
        attr.value = value;
      }
    }
    else {
      attr = new MockAttr(attrName, value, namespaceURI);
      attributes.__items.push(attr);
      if (checkAttrChanged === true) {
        attributeChanged(this, attrName, null, attr.value);
      }
    }
  }
  get style() {
    if (this.__style == null) {
      this.__style = createCSSStyleDeclaration();
    }
    return this.__style;
  }
  set style(val) {
    if (typeof val === 'string') {
      if (this.__style == null) {
        this.__style = createCSSStyleDeclaration();
      }
      this.__style.cssText = val;
    }
    else {
      this.__style = val;
    }
  }
  get tabIndex() {
    return parseInt(this.getAttributeNS(null, 'tabindex') || '-1', 10);
  }
  set tabIndex(value) {
    this.setAttributeNS(null, 'tabindex', value);
  }
  get tagName() {
    return this.nodeName;
  }
  set tagName(value) {
    this.nodeName = value;
  }
  get textContent() {
    const text = [];
    getTextContent(this.childNodes, text);
    return text.join('');
  }
  set textContent(value) {
    setTextContent(this, value);
  }
  get title() {
    return this.getAttributeNS(null, 'title') || '';
  }
  set title(value) {
    this.setAttributeNS(null, 'title', value);
  }
  onanimationstart() {
    /**/
  }
  onanimationend() {
    /**/
  }
  onanimationiteration() {
    /**/
  }
  onabort() {
    /**/
  }
  onauxclick() {
    /**/
  }
  onbeforecopy() {
    /**/
  }
  onbeforecut() {
    /**/
  }
  onbeforepaste() {
    /**/
  }
  onblur() {
    /**/
  }
  oncancel() {
    /**/
  }
  oncanplay() {
    /**/
  }
  oncanplaythrough() {
    /**/
  }
  onchange() {
    /**/
  }
  onclick() {
    /**/
  }
  onclose() {
    /**/
  }
  oncontextmenu() {
    /**/
  }
  oncopy() {
    /**/
  }
  oncuechange() {
    /**/
  }
  oncut() {
    /**/
  }
  ondblclick() {
    /**/
  }
  ondrag() {
    /**/
  }
  ondragend() {
    /**/
  }
  ondragenter() {
    /**/
  }
  ondragleave() {
    /**/
  }
  ondragover() {
    /**/
  }
  ondragstart() {
    /**/
  }
  ondrop() {
    /**/
  }
  ondurationchange() {
    /**/
  }
  onemptied() {
    /**/
  }
  onended() {
    /**/
  }
  onerror() {
    /**/
  }
  onfocus() {
    /**/
  }
  onfocusin() {
    /**/
  }
  onfocusout() {
    /**/
  }
  onformdata() {
    /**/
  }
  onfullscreenchange() {
    /**/
  }
  onfullscreenerror() {
    /**/
  }
  ongotpointercapture() {
    /**/
  }
  oninput() {
    /**/
  }
  oninvalid() {
    /**/
  }
  onkeydown() {
    /**/
  }
  onkeypress() {
    /**/
  }
  onkeyup() {
    /**/
  }
  onload() {
    /**/
  }
  onloadeddata() {
    /**/
  }
  onloadedmetadata() {
    /**/
  }
  onloadstart() {
    /**/
  }
  onlostpointercapture() {
    /**/
  }
  onmousedown() {
    /**/
  }
  onmouseenter() {
    /**/
  }
  onmouseleave() {
    /**/
  }
  onmousemove() {
    /**/
  }
  onmouseout() {
    /**/
  }
  onmouseover() {
    /**/
  }
  onmouseup() {
    /**/
  }
  onmousewheel() {
    /**/
  }
  onpaste() {
    /**/
  }
  onpause() {
    /**/
  }
  onplay() {
    /**/
  }
  onplaying() {
    /**/
  }
  onpointercancel() {
    /**/
  }
  onpointerdown() {
    /**/
  }
  onpointerenter() {
    /**/
  }
  onpointerleave() {
    /**/
  }
  onpointermove() {
    /**/
  }
  onpointerout() {
    /**/
  }
  onpointerover() {
    /**/
  }
  onpointerup() {
    /**/
  }
  onprogress() {
    /**/
  }
  onratechange() {
    /**/
  }
  onreset() {
    /**/
  }
  onresize() {
    /**/
  }
  onscroll() {
    /**/
  }
  onsearch() {
    /**/
  }
  onseeked() {
    /**/
  }
  onseeking() {
    /**/
  }
  onselect() {
    /**/
  }
  onselectstart() {
    /**/
  }
  onstalled() {
    /**/
  }
  onsubmit() {
    /**/
  }
  onsuspend() {
    /**/
  }
  ontimeupdate() {
    /**/
  }
  ontoggle() {
    /**/
  }
  onvolumechange() {
    /**/
  }
  onwaiting() {
    /**/
  }
  onwebkitfullscreenchange() {
    /**/
  }
  onwebkitfullscreenerror() {
    /**/
  }
  onwheel() {
    /**/
  }
  toString(opts) {
    return serializeNodeToHtml(this, opts);
  }
}
function getElementsByClassName(elm, classNames, foundElms) {
  const children = elm.children;
  for (let i = 0, ii = children.length; i < ii; i++) {
    const childElm = children[i];
    for (let j = 0, jj = classNames.length; j < jj; j++) {
      if (childElm.classList.contains(classNames[j])) {
        foundElms.push(childElm);
      }
    }
    getElementsByClassName(childElm, classNames, foundElms);
  }
}
function getElementsByTagName(elm, tagName, foundElms) {
  const children = elm.children;
  for (let i = 0, ii = children.length; i < ii; i++) {
    const childElm = children[i];
    if (tagName === '*' || childElm.nodeName.toLowerCase() === tagName) {
      foundElms.push(childElm);
    }
    getElementsByTagName(childElm, tagName, foundElms);
  }
}
function resetElement(elm) {
  resetEventListeners(elm);
  delete elm.__attributeMap;
  delete elm.__shadowRoot;
  delete elm.__style;
}
function insertBefore(parentNode, newNode, referenceNode) {
  if (newNode !== referenceNode) {
    newNode.remove();
    newNode.parentNode = parentNode;
    newNode.ownerDocument = parentNode.ownerDocument;
    if (referenceNode != null) {
      const index = parentNode.childNodes.indexOf(referenceNode);
      if (index > -1) {
        parentNode.childNodes.splice(index, 0, newNode);
      }
      else {
        throw new Error(`referenceNode not found in parentNode.childNodes`);
      }
    }
    else {
      parentNode.childNodes.push(newNode);
    }
    connectNode(parentNode.ownerDocument, newNode);
  }
  return newNode;
}
class MockHTMLElement extends MockElement {
  constructor(ownerDocument, nodeName) {
    super(ownerDocument, typeof nodeName === 'string' ? nodeName.toUpperCase() : null);
    this.namespaceURI = 'http://www.w3.org/1999/xhtml';
  }
  get tagName() {
    return this.nodeName;
  }
  set tagName(value) {
    this.nodeName = value;
  }
  get attributes() {
    if (this.__attributeMap == null) {
      this.__attributeMap = createAttributeProxy(true);
    }
    return this.__attributeMap;
  }
  set attributes(attrs) {
    this.__attributeMap = attrs;
  }
}
class MockTextNode extends MockNode {
  constructor(ownerDocument, text) {
    super(ownerDocument, 3 /* TEXT_NODE */, "#text" /* TEXT_NODE */, text);
  }
  cloneNode(_deep) {
    return new MockTextNode(null, this.nodeValue);
  }
  get textContent() {
    return this.nodeValue;
  }
  set textContent(text) {
    this.nodeValue = text;
  }
  get data() {
    return this.nodeValue;
  }
  set data(text) {
    this.nodeValue = text;
  }
  get wholeText() {
    if (this.parentNode != null) {
      const text = [];
      for (let i = 0, ii = this.parentNode.childNodes.length; i < ii; i++) {
        const childNode = this.parentNode.childNodes[i];
        if (childNode.nodeType === 3 /* TEXT_NODE */) {
          text.push(childNode.nodeValue);
        }
      }
      return text.join('');
    }
    return this.nodeValue;
  }
}
function getTextContent(childNodes, text) {
  for (let i = 0, ii = childNodes.length; i < ii; i++) {
    const childNode = childNodes[i];
    if (childNode.nodeType === 3 /* TEXT_NODE */) {
      text.push(childNode.nodeValue);
    }
    else if (childNode.nodeType === 1 /* ELEMENT_NODE */) {
      getTextContent(childNode.childNodes, text);
    }
  }
}
function setTextContent(elm, text) {
  for (let i = elm.childNodes.length - 1; i >= 0; i--) {
    elm.removeChild(elm.childNodes[i]);
  }
  const textNode = new MockTextNode(elm.ownerDocument, text);
  elm.appendChild(textNode);
}

class MockComment extends MockNode {
  constructor(ownerDocument, data) {
    super(ownerDocument, 8 /* COMMENT_NODE */, "#comment" /* COMMENT_NODE */, data);
  }
  cloneNode(_deep) {
    return new MockComment(null, this.nodeValue);
  }
  get textContent() {
    return this.nodeValue;
  }
  set textContent(text) {
    this.nodeValue = text;
  }
}

class MockDocumentFragment extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, null);
    this.nodeName = "#document-fragment" /* DOCUMENT_FRAGMENT_NODE */;
    this.nodeType = 11 /* DOCUMENT_FRAGMENT_NODE */;
  }
  getElementById(id) {
    return getElementById(this, id);
  }
  cloneNode(deep) {
    const cloned = new MockDocumentFragment(null);
    if (deep) {
      for (let i = 0, ii = this.childNodes.length; i < ii; i++) {
        const childNode = this.childNodes[i];
        if (childNode.nodeType === 1 /* ELEMENT_NODE */ ||
          childNode.nodeType === 3 /* TEXT_NODE */ ||
          childNode.nodeType === 8 /* COMMENT_NODE */) {
          const clonedChildNode = this.childNodes[i].cloneNode(true);
          cloned.appendChild(clonedChildNode);
        }
      }
    }
    return cloned;
  }
}

class MockDocumentTypeNode extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, '!DOCTYPE');
    this.nodeType = 10 /* DOCUMENT_TYPE_NODE */;
    this.setAttribute('html', '');
  }
}

class MockCSSRule {
  constructor(parentStyleSheet) {
    this.parentStyleSheet = parentStyleSheet;
    this.cssText = '';
    this.type = 0;
  }
}
class MockCSSStyleSheet {
  constructor(ownerNode) {
    this.type = 'text/css';
    this.parentStyleSheet = null;
    this.cssRules = [];
    this.ownerNode = ownerNode;
  }
  get rules() {
    return this.cssRules;
  }
  set rules(rules) {
    this.cssRules = rules;
  }
  deleteRule(index) {
    if (index >= 0 && index < this.cssRules.length) {
      this.cssRules.splice(index, 1);
      updateStyleTextNode(this.ownerNode);
    }
  }
  insertRule(rule, index = 0) {
    if (typeof index !== 'number') {
      index = 0;
    }
    if (index < 0) {
      index = 0;
    }
    if (index > this.cssRules.length) {
      index = this.cssRules.length;
    }
    const cssRule = new MockCSSRule(this);
    cssRule.cssText = rule;
    this.cssRules.splice(index, 0, cssRule);
    updateStyleTextNode(this.ownerNode);
    return index;
  }
}
function getStyleElementText(styleElm) {
  const output = [];
  for (let i = 0; i < styleElm.childNodes.length; i++) {
    output.push(styleElm.childNodes[i].nodeValue);
  }
  return output.join('');
}
function setStyleElementText(styleElm, text) {
  // keeping the innerHTML and the sheet.cssRules connected
  // is not technically correct, but since we're doing
  // SSR we'll need to turn any assigned cssRules into
  // real text, not just properties that aren't rendered
  const sheet = styleElm.sheet;
  sheet.cssRules.length = 0;
  sheet.insertRule(text);
  updateStyleTextNode(styleElm);
}
function updateStyleTextNode(styleElm) {
  const childNodeLen = styleElm.childNodes.length;
  if (childNodeLen > 1) {
    for (let i = childNodeLen - 1; i >= 1; i--) {
      styleElm.removeChild(styleElm.childNodes[i]);
    }
  }
  else if (childNodeLen < 1) {
    styleElm.appendChild(styleElm.ownerDocument.createTextNode(''));
  }
  const textNode = styleElm.childNodes[0];
  textNode.nodeValue = styleElm.sheet.cssRules.map((r) => r.cssText).join('\n');
}

function createElement(ownerDocument, tagName) {
  if (typeof tagName !== 'string' || tagName === '' || !/^[a-z0-9-_:]+$/i.test(tagName)) {
    throw new Error(`The tag name provided (${tagName}) is not a valid name.`);
  }
  tagName = tagName.toLowerCase();
  switch (tagName) {
    case 'a':
      return new MockAnchorElement(ownerDocument);
    case 'base':
      return new MockBaseElement(ownerDocument);
    case 'button':
      return new MockButtonElement(ownerDocument);
    case 'canvas':
      return new MockCanvasElement(ownerDocument);
    case 'form':
      return new MockFormElement(ownerDocument);
    case 'img':
      return new MockImageElement(ownerDocument);
    case 'input':
      return new MockInputElement(ownerDocument);
    case 'link':
      return new MockLinkElement(ownerDocument);
    case 'meta':
      return new MockMetaElement(ownerDocument);
    case 'script':
      return new MockScriptElement(ownerDocument);
    case 'style':
      return new MockStyleElement(ownerDocument);
    case 'template':
      return new MockTemplateElement(ownerDocument);
    case 'title':
      return new MockTitleElement(ownerDocument);
  }
  if (ownerDocument != null && tagName.includes('-')) {
    const win = ownerDocument.defaultView;
    if (win != null && win.customElements != null) {
      return createCustomElement(win.customElements, ownerDocument, tagName);
    }
  }
  return new MockHTMLElement(ownerDocument, tagName);
}
function createElementNS(ownerDocument, namespaceURI, tagName) {
  if (namespaceURI === 'http://www.w3.org/1999/xhtml') {
    return createElement(ownerDocument, tagName);
  }
  else if (namespaceURI === 'http://www.w3.org/2000/svg') {
    switch (tagName.toLowerCase()) {
      case 'text':
      case 'tspan':
      case 'tref':
      case 'altglyph':
      case 'textpath':
        return new MockSVGTextContentElement(ownerDocument, tagName);
      case 'circle':
      case 'ellipse':
      case 'image':
      case 'line':
      case 'path':
      case 'polygon':
      case 'polyline':
      case 'rect':
      case 'use':
        return new MockSVGGraphicsElement(ownerDocument, tagName);
      case 'svg':
        return new MockSVGSVGElement(ownerDocument, tagName);
      default:
        return new MockSVGElement(ownerDocument, tagName);
    }
  }
  else {
    return new MockElement(ownerDocument, tagName);
  }
}
class MockAnchorElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'a');
  }
  get href() {
    return fullUrl(this, 'href');
  }
  set href(value) {
    this.setAttribute('href', value);
  }
  get pathname() {
    return new URL(this.href).pathname;
  }
}
class MockButtonElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'button');
  }
}
patchPropAttributes(MockButtonElement.prototype, {
  type: String,
}, {
  type: 'submit',
});
class MockImageElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'img');
  }
  get draggable() {
    return this.getAttributeNS(null, 'draggable') !== 'false';
  }
  set draggable(value) {
    this.setAttributeNS(null, 'draggable', value);
  }
  get src() {
    return fullUrl(this, 'src');
  }
  set src(value) {
    this.setAttribute('src', value);
  }
}
patchPropAttributes(MockImageElement.prototype, {
  height: Number,
  width: Number,
});
class MockInputElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'input');
  }
  get list() {
    const listId = this.getAttribute('list');
    if (listId) {
      return this.ownerDocument.getElementById(listId);
    }
    return null;
  }
}
patchPropAttributes(MockInputElement.prototype, {
  accept: String,
  autocomplete: String,
  autofocus: Boolean,
  capture: String,
  checked: Boolean,
  disabled: Boolean,
  form: String,
  formaction: String,
  formenctype: String,
  formmethod: String,
  formnovalidate: String,
  formtarget: String,
  height: Number,
  inputmode: String,
  max: String,
  maxLength: Number,
  min: String,
  minLength: Number,
  multiple: Boolean,
  name: String,
  pattern: String,
  placeholder: String,
  required: Boolean,
  readOnly: Boolean,
  size: Number,
  spellCheck: Boolean,
  src: String,
  step: String,
  type: String,
  value: String,
  width: Number,
}, {
  type: 'text',
});
class MockFormElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'form');
  }
}
patchPropAttributes(MockFormElement.prototype, {
  name: String,
});
class MockLinkElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'link');
  }
  get href() {
    return fullUrl(this, 'href');
  }
  set href(value) {
    this.setAttribute('href', value);
  }
}
patchPropAttributes(MockLinkElement.prototype, {
  crossorigin: String,
  media: String,
  rel: String,
  type: String,
});
class MockMetaElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'meta');
  }
}
patchPropAttributes(MockMetaElement.prototype, {
  charset: String,
  content: String,
  name: String,
});
class MockScriptElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'script');
  }
  get src() {
    return fullUrl(this, 'src');
  }
  set src(value) {
    this.setAttribute('src', value);
  }
}
patchPropAttributes(MockScriptElement.prototype, {
  type: String,
});
class MockDOMMatrix {
  constructor() {
    this.a = 1;
    this.b = 0;
    this.c = 0;
    this.d = 1;
    this.e = 0;
    this.f = 0;
    this.m11 = 1;
    this.m12 = 0;
    this.m13 = 0;
    this.m14 = 0;
    this.m21 = 0;
    this.m22 = 1;
    this.m23 = 0;
    this.m24 = 0;
    this.m31 = 0;
    this.m32 = 0;
    this.m33 = 1;
    this.m34 = 0;
    this.m41 = 0;
    this.m42 = 0;
    this.m43 = 0;
    this.m44 = 1;
    this.is2D = true;
    this.isIdentity = true;
  }
  static fromMatrix() {
    return new MockDOMMatrix();
  }
  inverse() {
    return new MockDOMMatrix();
  }
  flipX() {
    return new MockDOMMatrix();
  }
  flipY() {
    return new MockDOMMatrix();
  }
  multiply() {
    return new MockDOMMatrix();
  }
  rotate() {
    return new MockDOMMatrix();
  }
  rotateAxisAngle() {
    return new MockDOMMatrix();
  }
  rotateFromVector() {
    return new MockDOMMatrix();
  }
  scale() {
    return new MockDOMMatrix();
  }
  scaleNonUniform() {
    return new MockDOMMatrix();
  }
  skewX() {
    return new MockDOMMatrix();
  }
  skewY() {
    return new MockDOMMatrix();
  }
  toJSON() { }
  toString() { }
  transformPoint() {
    return new MockDOMPoint();
  }
  translate() {
    return new MockDOMMatrix();
  }
}
class MockDOMPoint {
  constructor() {
    this.w = 1;
    this.x = 0;
    this.y = 0;
    this.z = 0;
  }
  toJSON() { }
  matrixTransform() {
    return new MockDOMMatrix();
  }
}
class MockSVGRect {
  constructor() {
    this.height = 10;
    this.width = 10;
    this.x = 0;
    this.y = 0;
  }
}
class MockStyleElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'style');
    this.sheet = new MockCSSStyleSheet(this);
  }
  get innerHTML() {
    return getStyleElementText(this);
  }
  set innerHTML(value) {
    setStyleElementText(this, value);
  }
  get innerText() {
    return getStyleElementText(this);
  }
  set innerText(value) {
    setStyleElementText(this, value);
  }
  get textContent() {
    return getStyleElementText(this);
  }
  set textContent(value) {
    setStyleElementText(this, value);
  }
}
class MockSVGElement extends MockElement {
  // SVGElement properties and methods
  get ownerSVGElement() {
    return null;
  }
  get viewportElement() {
    return null;
  }
  onunload() {
    /**/
  }
  // SVGGeometryElement properties and methods
  get pathLength() {
    return 0;
  }
  isPointInFill(_pt) {
    return false;
  }
  isPointInStroke(_pt) {
    return false;
  }
  getTotalLength() {
    return 0;
  }
}
class MockSVGGraphicsElement extends MockSVGElement {
  getBBox(_options) {
    return new MockSVGRect();
  }
  getCTM() {
    return new MockDOMMatrix();
  }
  getScreenCTM() {
    return new MockDOMMatrix();
  }
}
class MockSVGSVGElement extends MockSVGGraphicsElement {
  createSVGPoint() {
    return new MockDOMPoint();
  }
}
class MockSVGTextContentElement extends MockSVGGraphicsElement {
  getComputedTextLength() {
    return 0;
  }
}
class MockBaseElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'base');
  }
  get href() {
    return fullUrl(this, 'href');
  }
  set href(value) {
    this.setAttribute('href', value);
  }
}
class MockTemplateElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'template');
    this.content = new MockDocumentFragment(ownerDocument);
  }
  get innerHTML() {
    return this.content.innerHTML;
  }
  set innerHTML(html) {
    this.content.innerHTML = html;
  }
  cloneNode(deep) {
    const cloned = new MockTemplateElement(null);
    cloned.attributes = cloneAttributes(this.attributes);
    const styleCssText = this.getAttribute('style');
    if (styleCssText != null && styleCssText.length > 0) {
      cloned.setAttribute('style', styleCssText);
    }
    cloned.content = this.content.cloneNode(deep);
    if (deep) {
      for (let i = 0, ii = this.childNodes.length; i < ii; i++) {
        const clonedChildNode = this.childNodes[i].cloneNode(true);
        cloned.appendChild(clonedChildNode);
      }
    }
    return cloned;
  }
}
class MockTitleElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'title');
  }
  get text() {
    return this.textContent;
  }
  set text(value) {
    this.textContent = value;
  }
}
class MockCanvasElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'canvas');
  }
  getContext() {
    return {
      fillRect() {
        return;
      },
      clearRect() { },
      getImageData: function (_, __, w, h) {
        return {
          data: new Array(w * h * 4),
        };
      },
      putImageData() { },
      createImageData: function () {
        return [];
      },
      setTransform() { },
      drawImage() { },
      save() { },
      fillText() { },
      restore() { },
      beginPath() { },
      moveTo() { },
      lineTo() { },
      closePath() { },
      stroke() { },
      translate() { },
      scale() { },
      rotate() { },
      arc() { },
      fill() { },
      measureText() {
        return { width: 0 };
      },
      transform() { },
      rect() { },
      clip() { },
    };
  }
}
function fullUrl(elm, attrName) {
  const val = elm.getAttribute(attrName) || '';
  if (elm.ownerDocument != null) {
    const win = elm.ownerDocument.defaultView;
    if (win != null) {
      const loc = win.location;
      if (loc != null) {
        try {
          const url = new URL(val, loc.href);
          return url.href;
        }
        catch (e) { }
      }
    }
  }
  return val.replace(/\'|\"/g, '').trim();
}
function patchPropAttributes(prototype, attrs, defaults = {}) {
  Object.keys(attrs).forEach((propName) => {
    const attr = attrs[propName];
    const defaultValue = defaults[propName];
    if (attr === Boolean) {
      Object.defineProperty(prototype, propName, {
        get() {
          return this.hasAttribute(propName);
        },
        set(value) {
          if (value) {
            this.setAttribute(propName, '');
          }
          else {
            this.removeAttribute(propName);
          }
        },
      });
    }
    else if (attr === Number) {
      Object.defineProperty(prototype, propName, {
        get() {
          const value = this.getAttribute(propName);
          return value ? parseInt(value, 10) : defaultValue === undefined ? 0 : defaultValue;
        },
        set(value) {
          this.setAttribute(propName, value);
        },
      });
    }
    else {
      Object.defineProperty(prototype, propName, {
        get() {
          return this.hasAttribute(propName) ? this.getAttribute(propName) : defaultValue || '';
        },
        set(value) {
          this.setAttribute(propName, value);
        },
      });
    }
  });
}
MockElement.prototype.cloneNode = function (deep) {
  // because we're creating elements, which extending specific HTML base classes there
  // is a MockElement circular reference that bundling has trouble dealing with so
  // the fix is to add cloneNode() to MockElement's prototype after the HTML classes
  const cloned = createElement(this.ownerDocument, this.nodeName);
  cloned.attributes = cloneAttributes(this.attributes);
  const styleCssText = this.getAttribute('style');
  if (styleCssText != null && styleCssText.length > 0) {
    cloned.setAttribute('style', styleCssText);
  }
  if (deep) {
    for (let i = 0, ii = this.childNodes.length; i < ii; i++) {
      const clonedChildNode = this.childNodes[i].cloneNode(true);
      cloned.appendChild(clonedChildNode);
    }
  }
  return cloned;
};

let sharedDocument;
function parseHtmlToDocument(html, ownerDocument = null) {
  if (ownerDocument == null) {
    if (sharedDocument == null) {
      sharedDocument = new MockDocument();
    }
    ownerDocument = sharedDocument;
  }
  return parseDocumentUtil(ownerDocument, html);
}
function parseHtmlToFragment(html, ownerDocument = null) {
  if (ownerDocument == null) {
    if (sharedDocument == null) {
      sharedDocument = new MockDocument();
    }
    ownerDocument = sharedDocument;
  }
  return parseFragmentUtil(ownerDocument, html);
}

class MockHeaders {
  constructor(init) {
    this._values = [];
    if (typeof init === 'object') {
      if (typeof init[Symbol.iterator] === 'function') {
        const kvs = [];
        for (const kv of init) {
          if (typeof kv[Symbol.iterator] === 'function') {
            kvs.push([...kv]);
          }
        }
        for (const kv of kvs) {
          this.append(kv[0], kv[1]);
        }
      }
      else {
        for (const key in init) {
          this.append(key, init[key]);
        }
      }
    }
  }
  append(key, value) {
    this._values.push([key, value + '']);
  }
  delete(key) {
    key = key.toLowerCase();
    for (let i = this._values.length - 1; i >= 0; i--) {
      if (this._values[i][0].toLowerCase() === key) {
        this._values.splice(i, 1);
      }
    }
  }
  entries() {
    const entries = [];
    for (const kv of this.keys()) {
      entries.push([kv, this.get(kv)]);
    }
    let index = -1;
    return {
      next() {
        index++;
        return {
          value: entries[index],
          done: !entries[index],
        };
      },
      [Symbol.iterator]() {
        return this;
      },
    };
  }
  forEach(cb) {
    for (const kv of this.entries()) {
      cb(kv[1], kv[0]);
    }
  }
  get(key) {
    const rtn = [];
    key = key.toLowerCase();
    for (const kv of this._values) {
      if (kv[0].toLowerCase() === key) {
        rtn.push(kv[1]);
      }
    }
    return rtn.length > 0 ? rtn.join(', ') : null;
  }
  has(key) {
    key = key.toLowerCase();
    for (const kv of this._values) {
      if (kv[0].toLowerCase() === key) {
        return true;
      }
    }
    return false;
  }
  keys() {
    const keys = [];
    for (const kv of this._values) {
      const key = kv[0].toLowerCase();
      if (!keys.includes(key)) {
        keys.push(key);
      }
    }
    let index = -1;
    return {
      next() {
        index++;
        return {
          value: keys[index],
          done: !keys[index],
        };
      },
      [Symbol.iterator]() {
        return this;
      },
    };
  }
  set(key, value) {
    for (const kv of this._values) {
      if (kv[0].toLowerCase() === key.toLowerCase()) {
        kv[1] = value + '';
        return;
      }
    }
    this.append(key, value);
  }
  values() {
    const values = this._values;
    let index = -1;
    return {
      next() {
        index++;
        const done = !values[index];
        return {
          value: done ? undefined : values[index][1],
          done,
        };
      },
      [Symbol.iterator]() {
        return this;
      },
    };
  }
  [Symbol.iterator]() {
    return this.entries();
  }
}

class MockRequest {
  constructor(input, init = {}) {
    this._method = 'GET';
    this._url = '/';
    this.bodyUsed = false;
    this.cache = 'default';
    this.credentials = 'same-origin';
    this.integrity = '';
    this.keepalive = false;
    this.mode = 'cors';
    this.redirect = 'follow';
    this.referrer = 'about:client';
    this.referrerPolicy = '';
    if (typeof input === 'string') {
      this.url = input;
    }
    else if (input) {
      Object.assign(this, input);
      this.headers = new MockHeaders(input.headers);
    }
    Object.assign(this, init);
    if (init.headers) {
      this.headers = new MockHeaders(init.headers);
    }
    if (!this.headers) {
      this.headers = new MockHeaders();
    }
  }
  get url() {
    if (typeof this._url === 'string') {
      return new URL(this._url, location.href).href;
    }
    return new URL('/', location.href).href;
  }
  set url(value) {
    this._url = value;
  }
  get method() {
    if (typeof this._method === 'string') {
      return this._method.toUpperCase();
    }
    return 'GET';
  }
  set method(value) {
    this._method = value;
  }
  clone() {
    const clone = { ...this };
    clone.headers = new MockHeaders(this.headers);
    return new MockRequest(clone);
  }
}
class MockResponse {
  constructor(body, init = {}) {
    this.ok = true;
    this.status = 200;
    this.statusText = '';
    this.type = 'default';
    this.url = '';
    this._body = body;
    if (init) {
      Object.assign(this, init);
    }
    this.headers = new MockHeaders(init.headers);
  }
  async json() {
    return JSON.parse(this._body);
  }
  async text() {
    return this._body;
  }
  clone() {
    const initClone = { ...this };
    initClone.headers = new MockHeaders(this.headers);
    return new MockResponse(this._body, initClone);
  }
}

class MockDOMParser {
  parseFromString(htmlToParse, mimeType) {
    if (mimeType !== 'text/html') {
      console.error('XML parsing not implemented yet, continuing as html');
    }
    return parseHtmlToDocument(htmlToParse);
  }
}

function setupGlobal(gbl) {
  if (gbl.window == null) {
    const win = (gbl.window = new MockWindow());
    WINDOW_FUNCTIONS.forEach((fnName) => {
      if (!(fnName in gbl)) {
        gbl[fnName] = win[fnName].bind(win);
      }
    });
    WINDOW_PROPS.forEach((propName) => {
      if (!(propName in gbl)) {
        Object.defineProperty(gbl, propName, {
          get() {
            return win[propName];
          },
          set(val) {
            win[propName] = val;
          },
          configurable: true,
          enumerable: true,
        });
      }
    });
    GLOBAL_CONSTRUCTORS.forEach(([cstrName]) => {
      gbl[cstrName] = win[cstrName];
    });
  }
  return gbl.window;
}
function teardownGlobal(gbl) {
  const win = gbl.window;
  if (win && typeof win.close === 'function') {
    win.close();
  }
}
function patchWindow(winToBePatched) {
  const mockWin = new MockWindow(false);
  WINDOW_FUNCTIONS.forEach((fnName) => {
    if (typeof winToBePatched[fnName] !== 'function') {
      winToBePatched[fnName] = mockWin[fnName].bind(mockWin);
    }
  });
  WINDOW_PROPS.forEach((propName) => {
    if (winToBePatched === undefined) {
      Object.defineProperty(winToBePatched, propName, {
        get() {
          return mockWin[propName];
        },
        set(val) {
          mockWin[propName] = val;
        },
        configurable: true,
        enumerable: true,
      });
    }
  });
}
function addGlobalsToWindowPrototype(mockWinPrototype) {
  GLOBAL_CONSTRUCTORS.forEach(([cstrName, Cstr]) => {
    Object.defineProperty(mockWinPrototype, cstrName, {
      get() {
        return this['__' + cstrName] || Cstr;
      },
      set(cstr) {
        this['__' + cstrName] = cstr;
      },
      configurable: true,
      enumerable: true,
    });
  });
}
const WINDOW_FUNCTIONS = [
  'addEventListener',
  'alert',
  'blur',
  'cancelAnimationFrame',
  'cancelIdleCallback',
  'clearInterval',
  'clearTimeout',
  'close',
  'confirm',
  'dispatchEvent',
  'focus',
  'getComputedStyle',
  'matchMedia',
  'open',
  'prompt',
  'removeEventListener',
  'requestAnimationFrame',
  'requestIdleCallback',
  'URL',
];
const WINDOW_PROPS = [
  'customElements',
  'devicePixelRatio',
  'document',
  'history',
  'innerHeight',
  'innerWidth',
  'localStorage',
  'location',
  'navigator',
  'pageXOffset',
  'pageYOffset',
  'performance',
  'screenLeft',
  'screenTop',
  'screenX',
  'screenY',
  'scrollX',
  'scrollY',
  'sessionStorage',
  'CSS',
  'CustomEvent',
  'Event',
  'Element',
  'HTMLElement',
  'Node',
  'NodeList',
  'KeyboardEvent',
  'MouseEvent',
];
const GLOBAL_CONSTRUCTORS = [
  ['CustomEvent', MockCustomEvent],
  ['Event', MockEvent],
  ['Headers', MockHeaders],
  ['KeyboardEvent', MockKeyboardEvent],
  ['MouseEvent', MockMouseEvent],
  ['Request', MockRequest],
  ['Response', MockResponse],
  ['DOMParser', MockDOMParser],
  ['HTMLAnchorElement', MockAnchorElement],
  ['HTMLBaseElement', MockBaseElement],
  ['HTMLButtonElement', MockButtonElement],
  ['HTMLCanvasElement', MockCanvasElement],
  ['HTMLFormElement', MockFormElement],
  ['HTMLImageElement', MockImageElement],
  ['HTMLInputElement', MockInputElement],
  ['HTMLLinkElement', MockLinkElement],
  ['HTMLMetaElement', MockMetaElement],
  ['HTMLScriptElement', MockScriptElement],
  ['HTMLStyleElement', MockStyleElement],
  ['HTMLTemplateElement', MockTemplateElement],
  ['HTMLTitleElement', MockTitleElement],
];

const consoleNoop = () => {
  /**/
};
function createConsole() {
  return {
    debug: consoleNoop,
    error: consoleNoop,
    info: consoleNoop,
    log: consoleNoop,
    warn: consoleNoop,
    dir: consoleNoop,
    dirxml: consoleNoop,
    table: consoleNoop,
    trace: consoleNoop,
    group: consoleNoop,
    groupCollapsed: consoleNoop,
    groupEnd: consoleNoop,
    clear: consoleNoop,
    count: consoleNoop,
    countReset: consoleNoop,
    assert: consoleNoop,
    profile: consoleNoop,
    profileEnd: consoleNoop,
    time: consoleNoop,
    timeLog: consoleNoop,
    timeEnd: consoleNoop,
    timeStamp: consoleNoop,
    context: consoleNoop,
    memory: consoleNoop,
  };
}

class MockHistory {
  constructor() {
    this.items = [];
  }
  get length() {
    return this.items.length;
  }
  back() {
    this.go(-1);
  }
  forward() {
    this.go(1);
  }
  go(_value) {
    //
  }
  pushState(_state, _title, _url) {
    //
  }
  replaceState(_state, _title, _url) {
    //
  }
}

class MockIntersectionObserver {
  constructor() {
    /**/
  }
  disconnect() {
    /**/
  }
  observe() {
    /**/
  }
  takeRecords() {
    return [];
  }
  unobserve() {
    /**/
  }
}

class MockLocation {
  constructor() {
    this.ancestorOrigins = null;
    this.protocol = '';
    this.host = '';
    this.hostname = '';
    this.port = '';
    this.pathname = '';
    this.search = '';
    this.hash = '';
    this.username = '';
    this.password = '';
    this.origin = '';
    this._href = '';
  }
  get href() {
    return this._href;
  }
  set href(value) {
    const url = new URL(value, 'http://mockdoc.stenciljs.com');
    this._href = url.href;
    this.protocol = url.protocol;
    this.host = url.host;
    this.hostname = url.hostname;
    this.port = url.port;
    this.pathname = url.pathname;
    this.search = url.search;
    this.hash = url.hash;
    this.username = url.username;
    this.password = url.password;
    this.origin = url.origin;
  }
  assign(_url) {
    //
  }
  reload(_forcedReload) {
    //
  }
  replace(_url) {
    //
  }
  toString() {
    return this.href;
  }
}

class MockNavigator {
  constructor() {
    this.appCodeName = 'MockNavigator';
    this.appName = 'MockNavigator';
    this.appVersion = 'MockNavigator';
    this.platform = 'MockNavigator';
    this.userAgent = 'MockNavigator';
  }
}

/**
 * https://developer.mozilla.org/en-US/docs/Web/API/Performance
 */
class MockPerformance {
  constructor() {
    this.timeOrigin = Date.now();
  }
  addEventListener() {
    //
  }
  clearMarks() {
    //
  }
  clearMeasures() {
    //
  }
  clearResourceTimings() {
    //
  }
  dispatchEvent() {
    return true;
  }
  getEntries() {
    return [];
  }
  getEntriesByName() {
    return [];
  }
  getEntriesByType() {
    return [];
  }
  // Stencil's implementation of `mark` is non-compliant with the `Performance` interface. Because Stencil will
  // instantiate an instance of this class and may attempt to assign it to a variable of type `Performance`, the return
  // type must match the `Performance` interface (rather than typing this function as returning `void` and ignoring the
  // associated errors returned by the type checker)
  // @ts-ignore
  mark() {
    //
  }
  // Stencil's implementation of `measure` is non-compliant with the `Performance` interface. Because Stencil will
  // instantiate an instance of this class and may attempt to assign it to a variable of type `Performance`, the return
  // type must match the `Performance` interface (rather than typing this function as returning `void` and ignoring the
  // associated errors returned by the type checker)
  // @ts-ignore
  measure() {
    //
  }
  get navigation() {
    return {};
  }
  now() {
    return Date.now() - this.timeOrigin;
  }
  get onresourcetimingbufferfull() {
    return null;
  }
  removeEventListener() {
    //
  }
  setResourceTimingBufferSize() {
    //
  }
  get timing() {
    return {};
  }
  toJSON() {
    //
  }
}
function resetPerformance(perf) {
  if (perf != null) {
    try {
      perf.timeOrigin = Date.now();
    }
    catch (e) { }
  }
}

class MockStorage {
  constructor() {
    this.items = new Map();
  }
  key(_value) {
    //
  }
  getItem(key) {
    key = String(key);
    if (this.items.has(key)) {
      return this.items.get(key);
    }
    return null;
  }
  setItem(key, value) {
    if (value == null) {
      value = 'null';
    }
    this.items.set(String(key), String(value));
  }
  removeItem(key) {
    this.items.delete(String(key));
  }
  clear() {
    this.items.clear();
  }
}

const nativeClearInterval = clearInterval;
const nativeClearTimeout = clearTimeout;
const nativeSetInterval = setInterval;
const nativeSetTimeout = setTimeout;
const nativeURL = URL;
class MockWindow {
  constructor(html = null) {
    if (html !== false) {
      this.document = new MockDocument(html, this);
    }
    else {
      this.document = null;
    }
    this.performance = new MockPerformance();
    this.customElements = new MockCustomElementRegistry(this);
    this.console = createConsole();
    resetWindowDefaults(this);
    resetWindowDimensions(this);
  }
  addEventListener(type, handler) {
    addEventListener(this, type, handler);
  }
  alert(msg) {
    if (this.console) {
      this.console.debug(msg);
    }
    else {
      console.debug(msg);
    }
  }
  blur() {
    /**/
  }
  cancelAnimationFrame(id) {
    this.__clearTimeout(id);
  }
  cancelIdleCallback(id) {
    this.__clearTimeout(id);
  }
  get CharacterData() {
    if (this.__charDataCstr == null) {
      const ownerDocument = this.document;
      this.__charDataCstr = class extends MockNode {
        constructor() {
          super(ownerDocument, 0, 'test', '');
          throw new Error('Illegal constructor: cannot construct CharacterData');
        }
      };
    }
    return this.__charDataCstr;
  }
  set CharacterData(charDataCstr) {
    this.__charDataCstr = charDataCstr;
  }
  clearInterval(id) {
    this.__clearInterval(id);
  }
  clearTimeout(id) {
    this.__clearTimeout(id);
  }
  close() {
    resetWindow(this);
  }
  confirm() {
    return false;
  }
  get CSS() {
    return {
      supports: () => true,
    };
  }
  get Document() {
    if (this.__docCstr == null) {
      const win = this;
      this.__docCstr = class extends MockDocument {
        constructor() {
          super(false, win);
          throw new Error('Illegal constructor: cannot construct Document');
        }
      };
    }
    return this.__docCstr;
  }
  set Document(docCstr) {
    this.__docCstr = docCstr;
  }
  get DocumentFragment() {
    if (this.__docFragCstr == null) {
      const ownerDocument = this.document;
      this.__docFragCstr = class extends MockDocumentFragment {
        constructor() {
          super(ownerDocument);
          throw new Error('Illegal constructor: cannot construct DocumentFragment');
        }
      };
    }
    return this.__docFragCstr;
  }
  set DocumentFragment(docFragCstr) {
    this.__docFragCstr = docFragCstr;
  }
  get DocumentType() {
    if (this.__docTypeCstr == null) {
      const ownerDocument = this.document;
      this.__docTypeCstr = class extends MockNode {
        constructor() {
          super(ownerDocument, 0, 'test', '');
          throw new Error('Illegal constructor: cannot construct DocumentType');
        }
      };
    }
    return this.__docTypeCstr;
  }
  set DocumentType(docTypeCstr) {
    this.__docTypeCstr = docTypeCstr;
  }
  get DOMTokenList() {
    if (this.__domTokenListCstr == null) {
      this.__domTokenListCstr = class MockDOMTokenList {
      };
    }
    return this.__domTokenListCstr;
  }
  set DOMTokenList(domTokenListCstr) {
    this.__domTokenListCstr = domTokenListCstr;
  }
  dispatchEvent(ev) {
    return dispatchEvent(this, ev);
  }
  get Element() {
    if (this.__elementCstr == null) {
      const ownerDocument = this.document;
      this.__elementCstr = class extends MockElement {
        constructor() {
          super(ownerDocument, '');
          throw new Error('Illegal constructor: cannot construct Element');
        }
      };
    }
    return this.__elementCstr;
  }
  fetch(input, init) {
    if (typeof fetch === 'function') {
      return fetch(input, init);
    }
    throw new Error(`fetch() not implemented`);
  }
  focus() {
    /**/
  }
  getComputedStyle(_) {
    return {
      cssText: '',
      length: 0,
      parentRule: null,
      getPropertyPriority() {
        return null;
      },
      getPropertyValue() {
        return '';
      },
      item() {
        return null;
      },
      removeProperty() {
        return null;
      },
      setProperty() {
        return null;
      },
    };
  }
  get globalThis() {
    return this;
  }
  get history() {
    if (this.__history == null) {
      this.__history = new MockHistory();
    }
    return this.__history;
  }
  set history(hsty) {
    this.__history = hsty;
  }
  get JSON() {
    return JSON;
  }
  get HTMLElement() {
    if (this.__htmlElementCstr == null) {
      const ownerDocument = this.document;
      this.__htmlElementCstr = class extends MockHTMLElement {
        constructor() {
          super(ownerDocument, '');
          const observedAttributes = this.constructor.observedAttributes;
          if (Array.isArray(observedAttributes) && typeof this.attributeChangedCallback === 'function') {
            observedAttributes.forEach((attrName) => {
              const attrValue = this.getAttribute(attrName);
              if (attrValue != null) {
                this.attributeChangedCallback(attrName, null, attrValue);
              }
            });
          }
        }
      };
    }
    return this.__htmlElementCstr;
  }
  set HTMLElement(htmlElementCstr) {
    this.__htmlElementCstr = htmlElementCstr;
  }
  get IntersectionObserver() {
    return MockIntersectionObserver;
  }
  get localStorage() {
    if (this.__localStorage == null) {
      this.__localStorage = new MockStorage();
    }
    return this.__localStorage;
  }
  set localStorage(locStorage) {
    this.__localStorage = locStorage;
  }
  get location() {
    if (this.__location == null) {
      this.__location = new MockLocation();
    }
    return this.__location;
  }
  set location(val) {
    if (typeof val === 'string') {
      if (this.__location == null) {
        this.__location = new MockLocation();
      }
      this.__location.href = val;
    }
    else {
      this.__location = val;
    }
  }
  matchMedia() {
    return {
      matches: false,
    };
  }
  get Node() {
    if (this.__nodeCstr == null) {
      const ownerDocument = this.document;
      this.__nodeCstr = class extends MockNode {
        constructor() {
          super(ownerDocument, 0, 'test', '');
          throw new Error('Illegal constructor: cannot construct Node');
        }
      };
    }
    return this.__nodeCstr;
  }
  get NodeList() {
    if (this.__nodeListCstr == null) {
      const ownerDocument = this.document;
      this.__nodeListCstr = class extends MockNodeList {
        constructor() {
          super(ownerDocument, [], 0);
          throw new Error('Illegal constructor: cannot construct NodeList');
        }
      };
    }
    return this.__nodeListCstr;
  }
  get navigator() {
    if (this.__navigator == null) {
      this.__navigator = new MockNavigator();
    }
    return this.__navigator;
  }
  set navigator(nav) {
    this.__navigator = nav;
  }
  get parent() {
    return null;
  }
  prompt() {
    return '';
  }
  open() {
    return null;
  }
  get origin() {
    return this.location.origin;
  }
  removeEventListener(type, handler) {
    removeEventListener(this, type, handler);
  }
  requestAnimationFrame(callback) {
    return this.setTimeout(() => {
      callback(Date.now());
    }, 0);
  }
  requestIdleCallback(callback) {
    return this.setTimeout(() => {
      callback({
        didTimeout: false,
        timeRemaining: () => 0,
      });
    }, 0);
  }
  scroll(_x, _y) {
    /**/
  }
  scrollBy(_x, _y) {
    /**/
  }
  scrollTo(_x, _y) {
    /**/
  }
  get self() {
    return this;
  }
  get sessionStorage() {
    if (this.__sessionStorage == null) {
      this.__sessionStorage = new MockStorage();
    }
    return this.__sessionStorage;
  }
  set sessionStorage(locStorage) {
    this.__sessionStorage = locStorage;
  }
  setInterval(callback, ms, ...args) {
    if (this.__timeouts == null) {
      this.__timeouts = new Set();
    }
    ms = Math.min(ms, this.__maxTimeout);
    if (this.__allowInterval) {
      const intervalId = this.__setInterval(() => {
        if (this.__timeouts) {
          this.__timeouts.delete(intervalId);
          try {
            callback(...args);
          }
          catch (e) {
            if (this.console) {
              this.console.error(e);
            }
            else {
              console.error(e);
            }
          }
        }
      }, ms);
      if (this.__timeouts) {
        this.__timeouts.add(intervalId);
      }
      return intervalId;
    }
    const timeoutId = this.__setTimeout(() => {
      if (this.__timeouts) {
        this.__timeouts.delete(timeoutId);
        try {
          callback(...args);
        }
        catch (e) {
          if (this.console) {
            this.console.error(e);
          }
          else {
            console.error(e);
          }
        }
      }
    }, ms);
    if (this.__timeouts) {
      this.__timeouts.add(timeoutId);
    }
    return timeoutId;
  }
  setTimeout(callback, ms, ...args) {
    if (this.__timeouts == null) {
      this.__timeouts = new Set();
    }
    ms = Math.min(ms, this.__maxTimeout);
    const timeoutId = this.__setTimeout(() => {
      if (this.__timeouts) {
        this.__timeouts.delete(timeoutId);
        try {
          callback(...args);
        }
        catch (e) {
          if (this.console) {
            this.console.error(e);
          }
          else {
            console.error(e);
          }
        }
      }
    }, ms);
    if (this.__timeouts) {
      this.__timeouts.add(timeoutId);
    }
    return timeoutId;
  }
  get top() {
    return this;
  }
  get window() {
    return this;
  }
  onanimationstart() {
    /**/
  }
  onanimationend() {
    /**/
  }
  onanimationiteration() {
    /**/
  }
  onabort() {
    /**/
  }
  onauxclick() {
    /**/
  }
  onbeforecopy() {
    /**/
  }
  onbeforecut() {
    /**/
  }
  onbeforepaste() {
    /**/
  }
  onblur() {
    /**/
  }
  oncancel() {
    /**/
  }
  oncanplay() {
    /**/
  }
  oncanplaythrough() {
    /**/
  }
  onchange() {
    /**/
  }
  onclick() {
    /**/
  }
  onclose() {
    /**/
  }
  oncontextmenu() {
    /**/
  }
  oncopy() {
    /**/
  }
  oncuechange() {
    /**/
  }
  oncut() {
    /**/
  }
  ondblclick() {
    /**/
  }
  ondrag() {
    /**/
  }
  ondragend() {
    /**/
  }
  ondragenter() {
    /**/
  }
  ondragleave() {
    /**/
  }
  ondragover() {
    /**/
  }
  ondragstart() {
    /**/
  }
  ondrop() {
    /**/
  }
  ondurationchange() {
    /**/
  }
  onemptied() {
    /**/
  }
  onended() {
    /**/
  }
  onerror() {
    /**/
  }
  onfocus() {
    /**/
  }
  onfocusin() {
    /**/
  }
  onfocusout() {
    /**/
  }
  onformdata() {
    /**/
  }
  onfullscreenchange() {
    /**/
  }
  onfullscreenerror() {
    /**/
  }
  ongotpointercapture() {
    /**/
  }
  oninput() {
    /**/
  }
  oninvalid() {
    /**/
  }
  onkeydown() {
    /**/
  }
  onkeypress() {
    /**/
  }
  onkeyup() {
    /**/
  }
  onload() {
    /**/
  }
  onloadeddata() {
    /**/
  }
  onloadedmetadata() {
    /**/
  }
  onloadstart() {
    /**/
  }
  onlostpointercapture() {
    /**/
  }
  onmousedown() {
    /**/
  }
  onmouseenter() {
    /**/
  }
  onmouseleave() {
    /**/
  }
  onmousemove() {
    /**/
  }
  onmouseout() {
    /**/
  }
  onmouseover() {
    /**/
  }
  onmouseup() {
    /**/
  }
  onmousewheel() {
    /**/
  }
  onpaste() {
    /**/
  }
  onpause() {
    /**/
  }
  onplay() {
    /**/
  }
  onplaying() {
    /**/
  }
  onpointercancel() {
    /**/
  }
  onpointerdown() {
    /**/
  }
  onpointerenter() {
    /**/
  }
  onpointerleave() {
    /**/
  }
  onpointermove() {
    /**/
  }
  onpointerout() {
    /**/
  }
  onpointerover() {
    /**/
  }
  onpointerup() {
    /**/
  }
  onprogress() {
    /**/
  }
  onratechange() {
    /**/
  }
  onreset() {
    /**/
  }
  onresize() {
    /**/
  }
  onscroll() {
    /**/
  }
  onsearch() {
    /**/
  }
  onseeked() {
    /**/
  }
  onseeking() {
    /**/
  }
  onselect() {
    /**/
  }
  onselectstart() {
    /**/
  }
  onstalled() {
    /**/
  }
  onsubmit() {
    /**/
  }
  onsuspend() {
    /**/
  }
  ontimeupdate() {
    /**/
  }
  ontoggle() {
    /**/
  }
  onvolumechange() {
    /**/
  }
  onwaiting() {
    /**/
  }
  onwebkitfullscreenchange() {
    /**/
  }
  onwebkitfullscreenerror() {
    /**/
  }
  onwheel() {
    /**/
  }
}
addGlobalsToWindowPrototype(MockWindow.prototype);
function resetWindowDefaults(win) {
  win.__clearInterval = nativeClearInterval;
  win.__clearTimeout = nativeClearTimeout;
  win.__setInterval = nativeSetInterval;
  win.__setTimeout = nativeSetTimeout;
  win.__maxTimeout = 30000;
  win.__allowInterval = true;
  win.URL = nativeURL;
}
function cloneWindow(srcWin, opts = {}) {
  if (srcWin == null) {
    return null;
  }
  const clonedWin = new MockWindow(false);
  if (!opts.customElementProxy) {
    // TODO(STENCIL-345) - Evaluate reconciling MockWindow, Window differences
    // @ts-ignore
    srcWin.customElements = null;
  }
  if (srcWin.document != null) {
    const clonedDoc = new MockDocument(false, clonedWin);
    clonedWin.document = clonedDoc;
    clonedDoc.documentElement = srcWin.document.documentElement.cloneNode(true);
  }
  else {
    clonedWin.document = new MockDocument(null, clonedWin);
  }
  return clonedWin;
}
function cloneDocument(srcDoc) {
  if (srcDoc == null) {
    return null;
  }
  const dstWin = cloneWindow(srcDoc.defaultView);
  return dstWin.document;
}
// TODO(STENCIL-345) - Evaluate reconciling MockWindow, Window differences
/**
 * Constrain setTimeout() to 1ms, but still async. Also
 * only allow setInterval() to fire once, also constrained to 1ms.
 * @param win the mock window instance to update
 */
function constrainTimeouts(win) {
  win.__allowInterval = false;
  win.__maxTimeout = 0;
}
function resetWindow(win) {
  if (win != null) {
    if (win.__timeouts) {
      win.__timeouts.forEach((timeoutId) => {
        nativeClearInterval(timeoutId);
        nativeClearTimeout(timeoutId);
      });
      win.__timeouts.clear();
    }
    if (win.customElements && win.customElements.clear) {
      win.customElements.clear();
    }
    resetDocument(win.document);
    resetPerformance(win.performance);
    for (const key in win) {
      if (win.hasOwnProperty(key) && key !== 'document' && key !== 'performance' && key !== 'customElements') {
        delete win[key];
      }
    }
    resetWindowDefaults(win);
    resetWindowDimensions(win);
    resetEventListeners(win);
    if (win.document != null) {
      try {
        win.document.defaultView = win;
      }
      catch (e) { }
    }
    // ensure we don't hold onto nodeFetch values
    win.fetch = null;
    win.Headers = null;
    win.Request = null;
    win.Response = null;
    win.FetchError = null;
  }
}
function resetWindowDimensions(win) {
  try {
    win.devicePixelRatio = 1;
    win.innerHeight = 768;
    win.innerWidth = 1366;
    win.pageXOffset = 0;
    win.pageYOffset = 0;
    win.screenLeft = 0;
    win.screenTop = 0;
    win.screenX = 0;
    win.screenY = 0;
    win.scrollX = 0;
    win.scrollY = 0;
    win.screen = {
      availHeight: win.innerHeight,
      availLeft: 0,
      availTop: 0,
      availWidth: win.innerWidth,
      colorDepth: 24,
      height: win.innerHeight,
      keepAwake: false,
      orientation: {
        angle: 0,
        type: 'portrait-primary',
      },
      pixelDepth: 24,
      width: win.innerWidth,
    };
  }
  catch (e) { }
}

class MockDocument extends MockHTMLElement {
  constructor(html = null, win = null) {
    super(null, null);
    this.nodeName = "#document" /* DOCUMENT_NODE */;
    this.nodeType = 9 /* DOCUMENT_NODE */;
    this.defaultView = win;
    this.cookie = '';
    this.referrer = '';
    this.appendChild(this.createDocumentTypeNode());
    if (typeof html === 'string') {
      const parsedDoc = parseDocumentUtil(this, html);
      const documentElement = parsedDoc.children.find((elm) => elm.nodeName === 'HTML');
      if (documentElement != null) {
        this.appendChild(documentElement);
        setOwnerDocument(documentElement, this);
      }
    }
    else if (html !== false) {
      const documentElement = new MockHTMLElement(this, 'html');
      this.appendChild(documentElement);
      documentElement.appendChild(new MockHTMLElement(this, 'head'));
      documentElement.appendChild(new MockHTMLElement(this, 'body'));
    }
  }
  get dir() {
    return this.documentElement.dir;
  }
  set dir(value) {
    this.documentElement.dir = value;
  }
  get location() {
    if (this.defaultView != null) {
      return this.defaultView.location;
    }
    return null;
  }
  set location(val) {
    if (this.defaultView != null) {
      this.defaultView.location = val;
    }
  }
  get baseURI() {
    const baseNode = this.head.childNodes.find((node) => node.nodeName === 'BASE');
    if (baseNode) {
      return baseNode.href;
    }
    return this.URL;
  }
  get URL() {
    return this.location.href;
  }
  get styleSheets() {
    return this.querySelectorAll('style');
  }
  get scripts() {
    return this.querySelectorAll('script');
  }
  get forms() {
    return this.querySelectorAll('form');
  }
  get images() {
    return this.querySelectorAll('img');
  }
  get scrollingElement() {
    return this.documentElement;
  }
  get documentElement() {
    for (let i = this.childNodes.length - 1; i >= 0; i--) {
      if (this.childNodes[i].nodeName === 'HTML') {
        return this.childNodes[i];
      }
    }
    const documentElement = new MockHTMLElement(this, 'html');
    this.appendChild(documentElement);
    return documentElement;
  }
  set documentElement(documentElement) {
    for (let i = this.childNodes.length - 1; i >= 0; i--) {
      if (this.childNodes[i].nodeType !== 10 /* DOCUMENT_TYPE_NODE */) {
        this.childNodes[i].remove();
      }
    }
    if (documentElement != null) {
      this.appendChild(documentElement);
      setOwnerDocument(documentElement, this);
    }
  }
  get head() {
    const documentElement = this.documentElement;
    for (let i = 0; i < documentElement.childNodes.length; i++) {
      if (documentElement.childNodes[i].nodeName === 'HEAD') {
        return documentElement.childNodes[i];
      }
    }
    const head = new MockHTMLElement(this, 'head');
    documentElement.insertBefore(head, documentElement.firstChild);
    return head;
  }
  set head(head) {
    const documentElement = this.documentElement;
    for (let i = documentElement.childNodes.length - 1; i >= 0; i--) {
      if (documentElement.childNodes[i].nodeName === 'HEAD') {
        documentElement.childNodes[i].remove();
      }
    }
    if (head != null) {
      documentElement.insertBefore(head, documentElement.firstChild);
      setOwnerDocument(head, this);
    }
  }
  get body() {
    const documentElement = this.documentElement;
    for (let i = documentElement.childNodes.length - 1; i >= 0; i--) {
      if (documentElement.childNodes[i].nodeName === 'BODY') {
        return documentElement.childNodes[i];
      }
    }
    const body = new MockHTMLElement(this, 'body');
    documentElement.appendChild(body);
    return body;
  }
  set body(body) {
    const documentElement = this.documentElement;
    for (let i = documentElement.childNodes.length - 1; i >= 0; i--) {
      if (documentElement.childNodes[i].nodeName === 'BODY') {
        documentElement.childNodes[i].remove();
      }
    }
    if (body != null) {
      documentElement.appendChild(body);
      setOwnerDocument(body, this);
    }
  }
  appendChild(newNode) {
    newNode.remove();
    newNode.parentNode = this;
    this.childNodes.push(newNode);
    return newNode;
  }
  createComment(data) {
    return new MockComment(this, data);
  }
  createAttribute(attrName) {
    return new MockAttr(attrName.toLowerCase(), '');
  }
  createAttributeNS(namespaceURI, attrName) {
    return new MockAttr(attrName, '', namespaceURI);
  }
  createElement(tagName) {
    if (tagName === "#document" /* DOCUMENT_NODE */) {
      const doc = new MockDocument(false);
      doc.nodeName = tagName;
      doc.parentNode = null;
      return doc;
    }
    return createElement(this, tagName);
  }
  createElementNS(namespaceURI, tagName) {
    const elmNs = createElementNS(this, namespaceURI, tagName);
    elmNs.namespaceURI = namespaceURI;
    return elmNs;
  }
  createTextNode(text) {
    return new MockTextNode(this, text);
  }
  createDocumentFragment() {
    return new MockDocumentFragment(this);
  }
  createDocumentTypeNode() {
    return new MockDocumentTypeNode(this);
  }
  getElementById(id) {
    return getElementById(this, id);
  }
  getElementsByName(elmName) {
    return getElementsByName(this, elmName.toLowerCase());
  }
  get title() {
    const title = this.head.childNodes.find((elm) => elm.nodeName === 'TITLE');
    if (title != null && typeof title.textContent === 'string') {
      return title.textContent.trim();
    }
    return '';
  }
  set title(value) {
    const head = this.head;
    let title = head.childNodes.find((elm) => elm.nodeName === 'TITLE');
    if (title == null) {
      title = this.createElement('title');
      head.appendChild(title);
    }
    title.textContent = value;
  }
}
function createDocument(html = null) {
  return new MockWindow(html).document;
}
function createFragment(html) {
  return parseHtmlToFragment(html, null);
}
function resetDocument(doc) {
  if (doc != null) {
    resetEventListeners(doc);
    const documentElement = doc.documentElement;
    if (documentElement != null) {
      resetElement(documentElement);
      for (let i = 0, ii = documentElement.childNodes.length; i < ii; i++) {
        const childNode = documentElement.childNodes[i];
        resetElement(childNode);
        childNode.childNodes.length = 0;
      }
    }
    for (const key in doc) {
      if (doc.hasOwnProperty(key) && !DOC_KEY_KEEPERS.has(key)) {
        delete doc[key];
      }
    }
    try {
      doc.nodeName = "#document" /* DOCUMENT_NODE */;
    }
    catch (e) { }
    try {
      doc.nodeType = 9 /* DOCUMENT_NODE */;
    }
    catch (e) { }
    try {
      doc.cookie = '';
    }
    catch (e) { }
    try {
      doc.referrer = '';
    }
    catch (e) { }
  }
}
const DOC_KEY_KEEPERS = new Set([
  'nodeName',
  'nodeType',
  'nodeValue',
  'ownerDocument',
  'parentNode',
  'childNodes',
  '_shadowRoot',
]);
function getElementById(elm, id) {
  const children = elm.children;
  for (let i = 0, ii = children.length; i < ii; i++) {
    const childElm = children[i];
    if (childElm.id === id) {
      return childElm;
    }
    const childElmFound = getElementById(childElm, id);
    if (childElmFound != null) {
      return childElmFound;
    }
  }
  return null;
}
function getElementsByName(elm, elmName, foundElms = []) {
  const children = elm.children;
  for (let i = 0, ii = children.length; i < ii; i++) {
    const childElm = children[i];
    if (childElm.name && childElm.name.toLowerCase() === elmName) {
      foundElms.push(childElm);
    }
    getElementsByName(childElm, elmName, foundElms);
  }
  return foundElms;
}
function setOwnerDocument(elm, ownerDocument) {
  for (let i = 0, ii = elm.childNodes.length; i < ii; i++) {
    elm.childNodes[i].ownerDocument = ownerDocument;
    if (elm.childNodes[i].nodeType === 1 /* ELEMENT_NODE */) {
      setOwnerDocument(elm.childNodes[i], ownerDocument);
    }
  }
}

function hydrateFactory($stencilWindow, $stencilHydrateOpts, $stencilHydrateResults, $stencilAfterHydrate, $stencilHydrateResolve) {
  var globalThis = $stencilWindow;
  var self = $stencilWindow;
  var top = $stencilWindow;
  var parent = $stencilWindow;

  var addEventListener = $stencilWindow.addEventListener.bind($stencilWindow);
  var alert = $stencilWindow.alert.bind($stencilWindow);
  var blur = $stencilWindow.blur.bind($stencilWindow);
  var cancelAnimationFrame = $stencilWindow.cancelAnimationFrame.bind($stencilWindow);
  var cancelIdleCallback = $stencilWindow.cancelIdleCallback.bind($stencilWindow);
  var clearInterval = $stencilWindow.clearInterval.bind($stencilWindow);
  var clearTimeout = $stencilWindow.clearTimeout.bind($stencilWindow);
  var close = () => {};
  var confirm = $stencilWindow.confirm.bind($stencilWindow);
  var dispatchEvent = $stencilWindow.dispatchEvent.bind($stencilWindow);
  var focus = $stencilWindow.focus.bind($stencilWindow);
  var getComputedStyle = $stencilWindow.getComputedStyle.bind($stencilWindow);
  var matchMedia = $stencilWindow.matchMedia.bind($stencilWindow);
  var open = $stencilWindow.open.bind($stencilWindow);
  var prompt = $stencilWindow.prompt.bind($stencilWindow);
  var removeEventListener = $stencilWindow.removeEventListener.bind($stencilWindow);
  var requestAnimationFrame = $stencilWindow.requestAnimationFrame.bind($stencilWindow);
  var requestIdleCallback = $stencilWindow.requestIdleCallback.bind($stencilWindow);
  var setInterval = $stencilWindow.setInterval.bind($stencilWindow);
  var setTimeout = $stencilWindow.setTimeout.bind($stencilWindow);

  var CharacterData = $stencilWindow.CharacterData;
  var CSS = $stencilWindow.CSS;
  var CustomEvent = $stencilWindow.CustomEvent;
  var Document = $stencilWindow.Document;
  var DocumentFragment = $stencilWindow.DocumentFragment;
  var DocumentType = $stencilWindow.DocumentType;
  var DOMTokenList = $stencilWindow.DOMTokenList;
  var Element = $stencilWindow.Element;
  var Event = $stencilWindow.Event;
  var HTMLAnchorElement = $stencilWindow.HTMLAnchorElement;
  var HTMLBaseElement = $stencilWindow.HTMLBaseElement;
  var HTMLButtonElement = $stencilWindow.HTMLButtonElement;
  var HTMLCanvasElement = $stencilWindow.HTMLCanvasElement;
  var HTMLElement = $stencilWindow.HTMLElement;
  var HTMLFormElement = $stencilWindow.HTMLFormElement;
  var HTMLImageElement = $stencilWindow.HTMLImageElement;
  var HTMLInputElement = $stencilWindow.HTMLInputElement;
  var HTMLLinkElement = $stencilWindow.HTMLLinkElement;
  var HTMLMetaElement = $stencilWindow.HTMLMetaElement;
  var HTMLScriptElement = $stencilWindow.HTMLScriptElement;
  var HTMLStyleElement = $stencilWindow.HTMLStyleElement;
  var HTMLTemplateElement = $stencilWindow.HTMLTemplateElement;
  var HTMLTitleElement = $stencilWindow.HTMLTitleElement;
  var IntersectionObserver = $stencilWindow.IntersectionObserver;
  var KeyboardEvent = $stencilWindow.KeyboardEvent;
  var MouseEvent = $stencilWindow.MouseEvent;
  var Node = $stencilWindow.Node;
  var NodeList = $stencilWindow.NodeList;
  var URL = $stencilWindow.URL;

  var console = $stencilWindow.console;
  var customElements = $stencilWindow.customElements;
  var history = $stencilWindow.history;
  var localStorage = $stencilWindow.localStorage;
  var location = $stencilWindow.location;
  var navigator = $stencilWindow.navigator;
  var performance = $stencilWindow.performance;
  var sessionStorage = $stencilWindow.sessionStorage;

  var devicePixelRatio = $stencilWindow.devicePixelRatio;
  var innerHeight = $stencilWindow.innerHeight;
  var innerWidth = $stencilWindow.innerWidth;
  var origin = $stencilWindow.origin;
  var pageXOffset = $stencilWindow.pageXOffset;
  var pageYOffset = $stencilWindow.pageYOffset;
  var screen = $stencilWindow.screen;
  var screenLeft = $stencilWindow.screenLeft;
  var screenTop = $stencilWindow.screenTop;
  var screenX = $stencilWindow.screenX;
  var screenY = $stencilWindow.screenY;
  var scrollX = $stencilWindow.scrollX;
  var scrollY = $stencilWindow.scrollY;
  var exports = {};

  var fetch, FetchError, Headers, Request, Response;

  if (typeof $stencilWindow.fetch === 'function') {
  fetch = $stencilWindow.fetch;
  } else {
  fetch = $stencilWindow.fetch = function() { throw new Error('fetch() is not implemented'); };
  }

  if (typeof $stencilWindow.FetchError === 'function') {
  FetchError = $stencilWindow.FetchError;
  } else {
  FetchError = $stencilWindow.FetchError = class FetchError { constructor() { throw new Error('FetchError is not implemented'); } };
  }

  if (typeof $stencilWindow.Headers === 'function') {
  Headers = $stencilWindow.Headers;
  } else {
  Headers = $stencilWindow.Headers = class Headers { constructor() { throw new Error('Headers is not implemented'); } };
  }

  if (typeof $stencilWindow.Request === 'function') {
  Request = $stencilWindow.Request;
  } else {
  Request = $stencilWindow.Request = class Request { constructor() { throw new Error('Request is not implemented'); } };
  }

  if (typeof $stencilWindow.Response === 'function') {
  Response = $stencilWindow.Response;
  } else {
  Response = $stencilWindow.Response = class Response { constructor() { throw new Error('Response is not implemented'); } };
  }

  function hydrateAppClosure($stencilWindow) {
  const window = $stencilWindow;
  const document = $stencilWindow.document;
  /*hydrateAppClosure start*/


function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () {
            return e[k];
          }
        });
      }
    });
  }
  n['default'] = e;
  return Object.freeze(n);
}

const NAMESPACE = 'scale-components';
const BUILD = /* scale-components */ { allRenderFn: true, appendChildSlotFix: false, asyncLoading: true, attachStyles: true, cloneNodeFix: false, cmpDidLoad: true, cmpDidRender: true, cmpDidUnload: false, cmpDidUpdate: true, cmpShouldUpdate: false, cmpWillLoad: true, cmpWillRender: true, cmpWillUpdate: true, connectedCallback: true, constructableCSS: false, cssAnnotations: true, cssVarShim: false, devTools: false, disconnectedCallback: true, dynamicImportShim: false, element: false, event: true, hasRenderFn: true, hostListener: true, hostListenerTarget: true, hostListenerTargetBody: false, hostListenerTargetDocument: true, hostListenerTargetParent: false, hostListenerTargetWindow: true, hotModuleReplacement: false, hydrateClientSide: true, hydrateServerSide: true, hydratedAttribute: false, hydratedClass: true, isDebug: false, isDev: false, isTesting: false, lazyLoad: true, lifecycle: true, lifecycleDOMEvents: false, member: true, method: true, mode: false, observeAttribute: true, profile: false, prop: true, propBoolean: true, propMutable: true, propNumber: true, propString: true, reflect: true, safari10: false, scoped: false, scriptDataOpts: false, shadowDelegatesFocus: false, shadowDom: true, shadowDomShim: true, slot: true, slotChildNodesFix: false, slotRelocation: true, state: true, style: true, svg: true, taskQueue: true, updatable: true, vdomAttribute: true, vdomClass: true, vdomFunctional: true, vdomKey: true, vdomListener: true, vdomPropOrAttr: true, vdomRef: true, vdomRender: true, vdomStyle: true, vdomText: true, vdomXlink: true, watchCallback: true };

function componentOnReady() {
 return getHostRef$1(this).$onReadyPromise$;
}

function forceUpdate() {}

function hydrateApp(e, t, o, n, s) {
 function l() {
  if (global.clearTimeout(p), i.clear(), r.clear(), !h) {
   h = !0;
   try {
    t.clientHydrateAnnotations && insertVdomAnnotations(e.document, t.staticComponents), 
    e.dispatchEvent(new e.Event("DOMContentLoaded")), e.document.createElement = c, 
    e.document.createElementNS = $;
   } catch (e) {
    renderCatchError(t, o, e);
   }
  }
  n(e, t, o, s);
 }
 function a(e) {
  renderCatchError(t, o, e), l();
 }
 const r = new Set, i = new Set, d = new Set, c = e.document.createElement, $ = e.document.createElementNS, m = Promise.resolve();
 let p, h = !1;
 try {
  function u() {
   return g(this);
  }
  function f(e) {
   if (isValidComponent(e, t) && !getHostRef$1(e)) {
    const t = loadModule$1({
     $tagName$: e.nodeName.toLowerCase(),
     $flags$: null
    });
    null != t && null != t.cmpMeta && (i.add(e), e.connectedCallback = u, registerHost$1(e, t.cmpMeta), 
    function o(e, t) {
     if ("function" != typeof e.componentOnReady && (e.componentOnReady = componentOnReady), 
     "function" != typeof e.forceUpdate && (e.forceUpdate = forceUpdate), 1 & t.$flags$ && (e.shadowRoot = e), 
     null != t.$members$) {
      const o = getHostRef$1(e);
      Object.entries(t.$members$).forEach((([n, s]) => {
       const l = s[0];
       if (31 & l) {
        const a = s[1] || n, r = e.getAttribute(a);
        if (null != r) {
         const e = parsePropertyValue$1(r, l);
         o.$instanceValues$.set(n, e);
        }
        const i = e[n];
        void 0 !== i && (o.$instanceValues$.set(n, i), delete e[n]), Object.defineProperty(e, n, {
         get() {
          return getValue$1(this, n);
         },
         set(e) {
          setValue$1(this, n, e, t);
         },
         configurable: !0,
         enumerable: !0
        });
       } else 64 & l && Object.defineProperty(e, n, {
        value(...e) {
         const t = getHostRef$1(this);
         return t.$onInstancePromise$.then((() => t.$lazyInstance$[n](...e))).catch(consoleError$1);
        }
       });
      }));
     }
    }(e, t.cmpMeta));
   }
  }
  function g(n) {
   return i.delete(n), isValidComponent(n, t) && o.hydratedCount < t.maxHydrateCount && !r.has(n) && shouldHydrate(n) ? (r.add(n), 
   async function s(e, t, o, n, l) {
    o = o.toLowerCase();
    const a = loadModule$1({
     $tagName$: o,
     $flags$: null
    });
    if (null != a && null != a.cmpMeta) {
     l.add(n);
     try {
      connectedCallback$1(n), await n.componentOnReady(), t.hydratedCount++;
      const e = getHostRef$1(n), s = e.$modeName$ ? e.$modeName$ : "$";
      t.components.some((e => e.tag === o && e.mode === s)) || t.components.push({
       tag: o,
       mode: s,
       count: 0,
       depth: -1
      });
     } catch (t) {
      e.console.error(t);
     }
     l.delete(n);
    }
   }(e, o, n.nodeName, n, d)) : m;
  }
  e.document.createElement = function t(o) {
   const n = c.call(e.document, o);
   return f(n), n;
  }, e.document.createElementNS = function t(o, n) {
   const s = $.call(e.document, o, n);
   return f(s), s;
  }, p = global.setTimeout((function L() {
   a(`Hydrate exceeded timeout${function e(t) {
    return Array.from(t).map(waitingOnElementMsg);
   }(d)}`);
  }), t.timeout), plt$1.$resourcesUrl$ = new URL(t.resourcesUrl || "./", doc$1.baseURI).href, 
  function e(t) {
   if (null != t && 1 === t.nodeType) {
    f(t);
    const o = t.children;
    for (let t = 0, n = o.length; t < n; t++) e(o[t]);
   }
  }(e.document.body), function e() {
   const t = Array.from(i).filter((e => e.parentElement));
   return t.length > 0 ? Promise.all(t.map(g)).then(e) : m;
  }().then(l).catch(a);
 } catch (e) {
  a(e);
 }
}

function isValidComponent(e, t) {
 if (null != e && 1 === e.nodeType) {
  const o = e.nodeName;
  if ("string" == typeof o && o.includes("-")) return !t.excludeComponents.includes(o.toLowerCase());
 }
 return !1;
}

function shouldHydrate(e) {
 if (9 === e.nodeType) return !0;
 if (NO_HYDRATE_TAGS.has(e.nodeName)) return !1;
 if (e.hasAttribute("no-prerender")) return !1;
 const t = e.parentNode;
 return null == t || shouldHydrate(t);
}

function renderCatchError(e, t, o) {
 const n = {
  level: "error",
  type: "build",
  header: "Hydrate Error",
  messageText: "",
  relFilePath: null,
  absFilePath: null,
  lines: []
 };
 if (e.url) try {
  const t = new URL(e.url);
  "/" !== t.pathname && (n.header += ": " + t.pathname);
 } catch (e) {}
 null != o && (null != o.stack ? n.messageText = o.stack.toString() : null != o.message ? n.messageText = o.message.toString() : n.messageText = o.toString()), 
 t.diagnostics.push(n);
}

function printTag(e) {
 let t = `<${e.nodeName.toLowerCase()}`;
 if (Array.isArray(e.attributes)) for (let o = 0; o < e.attributes.length; o++) {
  const n = e.attributes[o];
  t += ` ${n.name}`, "" !== n.value && (t += `="${n.value}"`);
 }
 return t += ">", t;
}

function waitingOnElementMsg(e) {
 let t = "";
 if (e) {
  const o = [];
  t = " - waiting on:";
  let n = e;
  for (;n && 9 !== n.nodeType && "BODY" !== n.nodeName; ) o.unshift(printTag(n)), 
  n = n.parentElement;
  let s = "";
  for (const e of o) s += "  ", t += `\n${s}${e}`;
 }
 return t;
}

const addHostEventListeners$1 = (e, t, o, n) => {
 o && (o.map((([o, n, s]) => {
  const l = getHostListenerTarget$1(e, o) , a = hostListenerProxy$1(t, s), r = hostListenerOpts$1(o);
  plt$1.ael(l, n, a, r), (t.$rmListeners$ = t.$rmListeners$ || []).push((() => plt$1.rel(l, n, a, r)));
 })));
}, hostListenerProxy$1 = (e, t) => o => {
 try {
  256 & e.$flags$ ? e.$lazyInstance$[t](o) : (e.$queuedListeners$ = e.$queuedListeners$ || []).push([ t, o ]) ;
 } catch (e) {
  consoleError$1(e);
 }
}, getHostListenerTarget$1 = (e, t) => 4 & t ? doc$1 : 8 & t ? win$1 : e, hostListenerOpts$1 = e => 0 != (2 & e), XLINK_NS$1 = "http://www.w3.org/1999/xlink";

const createTime$1 = (e, t = "") => {
 return () => {};
}, rootAppliedStyles$1 = new WeakMap, registerStyle$1 = (e, t, o) => {
 let n = styles$1.get(e);
 n = t, styles$1.set(e, n);
}, addStyle$1 = (e, t, o, n) => {
 let s = getScopeId$1(t);
 const l = styles$1.get(s);
 if (e = 11 === e.nodeType ? e : doc$1, l) if ("string" == typeof l) {
  e = e.head || e;
  let o, a = rootAppliedStyles$1.get(e);
  if (a || rootAppliedStyles$1.set(e, a = new Set), !a.has(s)) {
   if (e.host && (o = e.querySelector(`[sty-id="${s}"]`))) o.innerHTML = l; else {
    o = doc$1.createElement("style"), o.innerHTML = l;
    o.setAttribute("sty-id", s), 
    e.insertBefore(o, e.querySelector("link"));
   }
   a && a.add(s);
  }
 }
 return s;
}, attachStyles$1 = e => {
 const t = e.$cmpMeta$, o = e.$hostElement$, n = t.$flags$, s = createTime$1("attachStyles", t.$tagName$), l = addStyle$1(o.getRootNode(), t);
 10 & n && (o["s-sc"] = l, 
 o.classList.add(l + "-h"), BUILD.scoped  ), 
 s();
}, getScopeId$1 = (e, t) => "sc-" + (e.$tagName$), EMPTY_OBJ$1 = {}, isComplexType$1 = e => "object" == (e = typeof e) || "function" === e, isPromise = e => !!e && ("object" == typeof e || "function" == typeof e) && "function" == typeof e.then, h$1 = (e, t, ...o) => {
 let n = null, s = null, l = null, a = !1, r = !1;
 const i = [], d = t => {
  for (let o = 0; o < t.length; o++) n = t[o], Array.isArray(n) ? d(n) : null != n && "boolean" != typeof n && ((a = "function" != typeof e && !isComplexType$1(n)) ? n = String(n) : BUILD.isDev  , 
  a && r ? i[i.length - 1].$text$ += n : i.push(a ? newVNode$1(null, n) : n), r = a);
 };
 if (d(o), t && (t.key && (s = t.key), 
 t.name && (l = t.name), BUILD.vdomClass)) {
  const e = t.className || t.class;
  e && (t.class = "object" != typeof e ? e : Object.keys(e).filter((t => e[t])).join(" "));
 }
 if ("function" == typeof e) return e(null === t ? {} : t, i, vdomFnUtils$1);
 const c = newVNode$1(e, null);
 return c.$attrs$ = t, i.length > 0 && (c.$children$ = i), (c.$key$ = s), 
 (c.$name$ = l), c;
}, newVNode$1 = (e, t) => {
 const o = {
  $flags$: 0,
  $tag$: e,
  $text$: t,
  $elm$: null,
  $children$: null
 };
 return (o.$attrs$ = null), (o.$key$ = null), 
 (o.$name$ = null), o;
}, Host$1 = {}, isHost$1 = e => e && e.$tag$ === Host$1, vdomFnUtils$1 = {
 forEach: (e, t) => e.map(convertToPublic$1).forEach(t),
 map: (e, t) => e.map(convertToPublic$1).map(t).map(convertToPrivate$1)
}, convertToPublic$1 = e => ({
 vattrs: e.$attrs$,
 vchildren: e.$children$,
 vkey: e.$key$,
 vname: e.$name$,
 vtag: e.$tag$,
 vtext: e.$text$
}), convertToPrivate$1 = e => {
 if ("function" == typeof e.vtag) {
  const t = {
   ...e.vattrs
  };
  return e.vkey && (t.key = e.vkey), e.vname && (t.name = e.vname), h$1(e.vtag, t, ...e.vchildren || []);
 }
 const t = newVNode$1(e.vtag, e.vtext);
 return t.$attrs$ = e.vattrs, t.$children$ = e.vchildren, t.$key$ = e.vkey, t.$name$ = e.vname, 
 t;
}, setAccessor$1 = (e, t, o, n, s, l) => {
 if (o !== n) {
  let a = isMemberInElement$1(e, t), r = t.toLowerCase();
  if ("class" === t) {
   const t = e.classList, s = parseClassList$1(o), l = parseClassList$1(n);
   t.remove(...s.filter((e => e && !l.includes(e)))), t.add(...l.filter((e => e && !s.includes(e))));
  } else if ("style" === t) {
   for (const t in o) n && null != n[t] || (e.style[t] = "");
   for (const t in n) o && n[t] === o[t] || (e.style[t] = n[t]);
  } else if ("key" === t) ; else if ("ref" === t) n && n(e); else if ((a ) || "o" !== t[0] || "n" !== t[1]) {
   {
    const i = isComplexType$1(n);
    if ((a || i && null !== n) && !s) try {
     if (e.tagName.includes("-")) e[t] = n; else {
      const s = null == n ? "" : n;
      "list" === t ? a = !1 : null != o && e[t] == s || (e[t] = s);
     }
    } catch (e) {}
    let d = !1;
    r !== (r = r.replace(/^xlink\:?/, "")) && (t = r, d = !0), null == n || !1 === n ? !1 === n && "" !== e.getAttribute(t) || (d ? e.removeAttributeNS(XLINK_NS$1, t) : e.removeAttribute(t)) : (!a || 4 & l || s) && !i && (n = !0 === n ? "" : n, 
    d ? e.setAttributeNS(XLINK_NS$1, t, n) : e.setAttribute(t, n));
   }
  } else t = "-" === t[2] ? t.slice(3) : isMemberInElement$1(win$1, r) ? r.slice(2) : r[2] + t.slice(3), 
  o && plt$1.rel(e, t, o, !1), n && plt$1.ael(e, t, n, !1);
 }
}, parseClassListRegex$1 = /\s/, parseClassList$1 = e => e ? e.split(parseClassListRegex$1) : [], updateElement$1 = (e, t, o, n) => {
 const s = 11 === t.$elm$.nodeType && t.$elm$.host ? t.$elm$.host : t.$elm$, l = e && e.$attrs$ || EMPTY_OBJ$1, a = t.$attrs$ || EMPTY_OBJ$1;
 for (n in l) n in a || setAccessor$1(s, n, l[n], void 0, o, t.$flags$);
 for (n in a) setAccessor$1(s, n, l[n], a[n], o, t.$flags$);
};

let scopeId$1, contentRef$1, hostTagName$1, useNativeShadowDom$1 = !1, checkSlotFallbackVisibility$1 = !1, checkSlotRelocate$1 = !1, isSvgMode$1 = !1;

const createElm$1 = (e, t, o, n) => {
 const s = t.$children$[o];
 let l, a, r, i = 0;
 if (!useNativeShadowDom$1 && (checkSlotRelocate$1 = !0, "slot" === s.$tag$ && (scopeId$1 && n.classList.add(scopeId$1 + "-s"), 
 s.$flags$ |= s.$children$ ? 2 : 1)), null !== s.$text$) l = s.$elm$ = doc$1.createTextNode(s.$text$); else if (1 & s.$flags$) l = s.$elm$ = slotReferenceDebugNode$1(s) ; else {
  if (!isSvgMode$1 && (isSvgMode$1 = "svg" === s.$tag$), l = s.$elm$ = doc$1.createElementNS(isSvgMode$1 ? "http://www.w3.org/2000/svg" : "http://www.w3.org/1999/xhtml", 2 & s.$flags$ ? "slot-fb" : s.$tag$) , 
  isSvgMode$1 && "foreignObject" === s.$tag$ && (isSvgMode$1 = !1), updateElement$1(null, s, isSvgMode$1), 
  null != scopeId$1 && l["s-si"] !== scopeId$1 && l.classList.add(l["s-si"] = scopeId$1), 
  s.$children$) for (i = 0; i < s.$children$.length; ++i) a = createElm$1(e, s, i, l), 
  a && l.appendChild(a);
  ("svg" === s.$tag$ ? isSvgMode$1 = !1 : "foreignObject" === l.tagName && (isSvgMode$1 = !0));
 }
 return (l["s-hn"] = hostTagName$1, 3 & s.$flags$ && (l["s-sr"] = !0, 
 l["s-cr"] = contentRef$1, l["s-sn"] = s.$name$ || "", r = e && e.$children$ && e.$children$[o], 
 r && r.$tag$ === s.$tag$ && e.$elm$ && putBackInOriginalLocation$1(e.$elm$, !1))), 
 l;
}, putBackInOriginalLocation$1 = (e, t) => {
 plt$1.$flags$ |= 1;
 const o = e.childNodes;
 for (let e = o.length - 1; e >= 0; e--) {
  const n = o[e];
  n["s-hn"] !== hostTagName$1 && n["s-ol"] && (parentReferenceNode$1(n).insertBefore(n, referenceNode$1(n)), 
  n["s-ol"].remove(), n["s-ol"] = void 0, checkSlotRelocate$1 = !0), t && putBackInOriginalLocation$1(n, t);
 }
 plt$1.$flags$ &= -2;
}, addVnodes$1 = (e, t, o, n, s, l) => {
 let a, r = e["s-cr"] && e["s-cr"].parentNode || e;
 for (r.shadowRoot && r.tagName === hostTagName$1 && (r = r.shadowRoot); s <= l; ++s) n[s] && (a = createElm$1(null, o, s, e), 
 a && (n[s].$elm$ = a, r.insertBefore(a, referenceNode$1(t) )));
}, removeVnodes$1 = (e, t, o, n, s) => {
 for (;t <= o; ++t) (n = e[t]) && (s = n.$elm$, callNodeRefs$1(n), (checkSlotFallbackVisibility$1 = !0, 
 s["s-ol"] ? s["s-ol"].remove() : putBackInOriginalLocation$1(s, !0)), s.remove());
}, isSameVnode$1 = (e, t) => e.$tag$ === t.$tag$ && ("slot" === e.$tag$ ? e.$name$ === t.$name$ : e.$key$ === t.$key$), referenceNode$1 = e => e && e["s-ol"] || e, parentReferenceNode$1 = e => (e["s-ol"] ? e["s-ol"] : e).parentNode, patch$1 = (e, t) => {
 const o = t.$elm$ = e.$elm$, n = e.$children$, s = t.$children$, l = t.$tag$, a = t.$text$;
 let r;
 null !== a ? (r = o["s-cr"]) ? r.parentNode.textContent = a : e.$text$ !== a && (o.data = a) : ((isSvgMode$1 = "svg" === l || "foreignObject" !== l && isSvgMode$1), 
 ("slot" === l || updateElement$1(e, t, isSvgMode$1)), 
 null !== n && null !== s ? ((e, t, o, n) => {
  let s, l, a = 0, r = 0, i = 0, d = 0, c = t.length - 1, $ = t[0], m = t[c], p = n.length - 1, h = n[0], u = n[p];
  for (;a <= c && r <= p; ) if (null == $) $ = t[++a]; else if (null == m) m = t[--c]; else if (null == h) h = n[++r]; else if (null == u) u = n[--p]; else if (isSameVnode$1($, h)) patch$1($, h), 
  $ = t[++a], h = n[++r]; else if (isSameVnode$1(m, u)) patch$1(m, u), m = t[--c], u = n[--p]; else if (isSameVnode$1($, u)) "slot" !== $.$tag$ && "slot" !== u.$tag$ || putBackInOriginalLocation$1($.$elm$.parentNode, !1), 
  patch$1($, u), e.insertBefore($.$elm$, m.$elm$.nextSibling), $ = t[++a], u = n[--p]; else if (isSameVnode$1(m, h)) "slot" !== $.$tag$ && "slot" !== u.$tag$ || putBackInOriginalLocation$1(m.$elm$.parentNode, !1), 
  patch$1(m, h), e.insertBefore(m.$elm$, $.$elm$), m = t[--c], h = n[++r]; else {
   if (i = -1, BUILD.vdomKey) for (d = a; d <= c; ++d) if (t[d] && null !== t[d].$key$ && t[d].$key$ === h.$key$) {
    i = d;
    break;
   }
   i >= 0 ? (l = t[i], l.$tag$ !== h.$tag$ ? s = createElm$1(t && t[r], o, i, e) : (patch$1(l, h), 
   t[i] = void 0, s = l.$elm$), h = n[++r]) : (s = createElm$1(t && t[r], o, r, e), h = n[++r]), 
   s && (parentReferenceNode$1($.$elm$).insertBefore(s, referenceNode$1($.$elm$)) );
  }
  a > c ? addVnodes$1(e, null == n[p + 1] ? null : n[p + 1].$elm$, o, n, r, p) : r > p && removeVnodes$1(t, a, c);
 })(o, n, t, s) : null !== s ? (null !== e.$text$ && (o.textContent = ""), 
 addVnodes$1(o, null, t, s, 0, s.length - 1)) : null !== n && removeVnodes$1(n, 0, n.length - 1), 
 isSvgMode$1 && "svg" === l && (isSvgMode$1 = !1));
}, updateFallbackSlotVisibility$1 = e => {
 const t = e.childNodes;
 let o, n, s, l, a, r;
 for (n = 0, s = t.length; n < s; n++) if (o = t[n], 1 === o.nodeType) {
  if (o["s-sr"]) for (a = o["s-sn"], o.hidden = !1, l = 0; l < s; l++) if (r = t[l].nodeType, 
  t[l]["s-hn"] !== o["s-hn"] || "" !== a) {
   if (1 === r && a === t[l].getAttribute("slot")) {
    o.hidden = !0;
    break;
   }
  } else if (1 === r || 3 === r && "" !== t[l].textContent.trim()) {
   o.hidden = !0;
   break;
  }
  updateFallbackSlotVisibility$1(o);
 }
}, relocateNodes$1 = [], relocateSlotContent$1 = e => {
 let t, o, n, s, l, a, r = 0;
 const i = e.childNodes, d = i.length;
 for (;r < d; r++) {
  if (t = i[r], t["s-sr"] && (o = t["s-cr"]) && o.parentNode) for (n = o.parentNode.childNodes, 
  s = t["s-sn"], a = n.length - 1; a >= 0; a--) o = n[a], o["s-cn"] || o["s-nr"] || o["s-hn"] === t["s-hn"] || (isNodeLocatedInSlot$1(o, s) ? (l = relocateNodes$1.find((e => e.$nodeToRelocate$ === o)), 
  checkSlotFallbackVisibility$1 = !0, o["s-sn"] = o["s-sn"] || s, l ? l.$slotRefNode$ = t : relocateNodes$1.push({
   $slotRefNode$: t,
   $nodeToRelocate$: o
  }), o["s-sr"] && relocateNodes$1.map((e => {
   isNodeLocatedInSlot$1(e.$nodeToRelocate$, o["s-sn"]) && (l = relocateNodes$1.find((e => e.$nodeToRelocate$ === o)), 
   l && !e.$slotRefNode$ && (e.$slotRefNode$ = l.$slotRefNode$));
  }))) : relocateNodes$1.some((e => e.$nodeToRelocate$ === o)) || relocateNodes$1.push({
   $nodeToRelocate$: o
  }));
  1 === t.nodeType && relocateSlotContent$1(t);
 }
}, isNodeLocatedInSlot$1 = (e, t) => 1 === e.nodeType ? null === e.getAttribute("slot") && "" === t || e.getAttribute("slot") === t : e["s-sn"] === t || "" === t, callNodeRefs$1 = e => {
 (e.$attrs$ && e.$attrs$.ref && e.$attrs$.ref(null), e.$children$ && e.$children$.map(callNodeRefs$1));
}, renderVdom$1 = (e, t) => {
 const o = e.$hostElement$, n = e.$cmpMeta$, s = e.$vnode$ || newVNode$1(null, null), l = isHost$1(t) ? t : h$1(null, null, t);
 if (hostTagName$1 = o.tagName, BUILD.isDev  ) ;
 if (n.$attrsToReflect$ && (l.$attrs$ = l.$attrs$ || {}, n.$attrsToReflect$.map((([e, t]) => l.$attrs$[t] = o[e]))), 
 l.$tag$ = null, l.$flags$ |= 4, e.$vnode$ = l, l.$elm$ = s.$elm$ = o.shadowRoot || o, 
 (scopeId$1 = o["s-sc"]), (contentRef$1 = o["s-cr"], 
 useNativeShadowDom$1 = supportsShadow$1, checkSlotFallbackVisibility$1 = !1), patch$1(s, l), 
 BUILD.slotRelocation) {
  if (plt$1.$flags$ |= 1, checkSlotRelocate$1) {
   let e, t, o, n, s, a;
   relocateSlotContent$1(l.$elm$);
   let r = 0;
   for (;r < relocateNodes$1.length; r++) e = relocateNodes$1[r], t = e.$nodeToRelocate$, 
   t["s-ol"] || (o = originalLocationDebugNode$1(t) , 
   o["s-nr"] = t, t.parentNode.insertBefore(t["s-ol"] = o, t));
   for (r = 0; r < relocateNodes$1.length; r++) if (e = relocateNodes$1[r], t = e.$nodeToRelocate$, 
   e.$slotRefNode$) {
    for (n = e.$slotRefNode$.parentNode, s = e.$slotRefNode$.nextSibling, o = t["s-ol"]; o = o.previousSibling; ) if (a = o["s-nr"], 
    a && a["s-sn"] === t["s-sn"] && n === a.parentNode && (a = a.nextSibling, !a || !a["s-nr"])) {
     s = a;
     break;
    }
    (!s && n !== t.parentNode || t.nextSibling !== s) && t !== s && (!t["s-hn"] && t["s-ol"] && (t["s-hn"] = t["s-ol"].parentNode.nodeName), 
    n.insertBefore(t, s));
   } else 1 === t.nodeType && (t.hidden = !0);
  }
  checkSlotFallbackVisibility$1 && updateFallbackSlotVisibility$1(l.$elm$), plt$1.$flags$ &= -2, 
  relocateNodes$1.length = 0;
 }
}, slotReferenceDebugNode$1 = e => doc$1.createComment(`<slot${e.$name$ ? ' name="' + e.$name$ + '"' : ""}> (host=${hostTagName$1.toLowerCase()})`), originalLocationDebugNode$1 = e => doc$1.createComment("org-location for " + (e.localName ? `<${e.localName}> (host=${e["s-hn"]})` : `[${e.textContent}]`)), getElement$1 = e => getHostRef$1(e).$hostElement$ , createEvent$1 = (e, t, o) => {
 const n = getElement$1(e);
 return {
  emit: e => (emitEvent$2(n, t, {
   bubbles: !!(4 & o),
   composed: !!(2 & o),
   cancelable: !!(1 & o),
   detail: e
  }))
 };
}, emitEvent$2 = (e, t, o) => {
 const n = plt$1.ce(t, o);
 return e.dispatchEvent(n), n;
}, attachToAncestor$1 = (e, t) => {
 t && !e.$onRenderResolve$ && t["s-p"] && t["s-p"].push(new Promise((t => e.$onRenderResolve$ = t)));
}, scheduleUpdate$1 = (e, t) => {
 if ((e.$flags$ |= 16), 4 & e.$flags$) return void (e.$flags$ |= 512);
 attachToAncestor$1(e, e.$ancestorComponent$);
 const o = () => dispatchHooks$1(e, t);
 return writeTask$1(o) ;
}, dispatchHooks$1 = (e, t) => {
 const n = createTime$1("scheduleUpdate", e.$cmpMeta$.$tagName$), s = e.$lazyInstance$ ;
 let l;
 return t ? ((e.$flags$ |= 256, e.$queuedListeners$ && (e.$queuedListeners$.map((([e, t]) => safeCall$1(s, e, t))), 
 e.$queuedListeners$ = null)), (l = safeCall$1(s, "componentWillLoad"))) : ((l = safeCall$1(s, "componentWillUpdate"))), (l = then$1(l, (() => safeCall$1(s, "componentWillRender")))), 
 n(), then$1(l, (() => updateComponent$1(e, s, t)));
}, updateComponent$1 = async (e, t, o) => {
 const n = e.$hostElement$, s = createTime$1("update", e.$cmpMeta$.$tagName$), l = n["s-rc"];
 o && attachStyles$1(e);
 const a = createTime$1("render", e.$cmpMeta$.$tagName$);
 if (await callRender$1(e, t) , 
 BUILD.hydrateServerSide) try {
  serverSideConnected$1(n), o && (1 & e.$cmpMeta$.$flags$ ? n["s-en"] = "" : 2 & e.$cmpMeta$.$flags$ && (n["s-en"] = "c"));
 } catch (e) {
  consoleError$1(e, n);
 }
 if (l && (l.map((e => e())), n["s-rc"] = void 0), a(), s(), 
 BUILD.asyncLoading) {
  const t = n["s-p"], o = () => postUpdateComponent$1(e);
  0 === t.length ? o() : (Promise.all(t).then(o), e.$flags$ |= 4, t.length = 0);
 }
};

const callRender$1 = (e, t, o) => {
 try {
  if (t = t.render(), (e.$flags$ &= -17), 
  (e.$flags$ |= 2), BUILD.hasRenderFn ) {
   return Promise.resolve(t).then((t => renderVdom$1(e, t)));
  }
 } catch (t) {
  consoleError$1(t, e.$hostElement$);
 }
 return null;
}, postUpdateComponent$1 = e => {
 const t = e.$cmpMeta$.$tagName$, o = e.$hostElement$, n = createTime$1("postUpdate", t), s = e.$lazyInstance$ , l = e.$ancestorComponent$;
 (safeCall$1(s, "componentDidRender"), 
 BUILD.isDev ), 64 & e.$flags$ ? ((safeCall$1(s, "componentDidUpdate"), 
 BUILD.isDev ), n()) : (e.$flags$ |= 64, addHydratedFlag$1(o), 
 (safeCall$1(s, "componentDidLoad"), 
 BUILD.isDev ), n(), (e.$onReadyResolve$(o), l || appDidLoad$1())), e.$onInstanceResolve$(o), (e.$onRenderResolve$ && (e.$onRenderResolve$(), 
 e.$onRenderResolve$ = void 0), 512 & e.$flags$ && nextTick$1((() => scheduleUpdate$1(e, !1))), 
 e.$flags$ &= -517);
}, appDidLoad$1 = e => {
 addHydratedFlag$1(doc$1.documentElement), nextTick$1((() => emitEvent$2(win$1, "appload", {
  detail: {
   namespace: NAMESPACE
  }
 }))), BUILD.profile  ;
}, safeCall$1 = (e, t, o) => {
 if (e && e[t]) try {
  return e[t](o);
 } catch (e) {
  consoleError$1(e);
 }
}, then$1 = (e, t) => e && e.then ? e.then(t) : t(), addHydratedFlag$1 = e => e.classList.add("hydrated") , serverSideConnected$1 = e => {
 const t = e.children;
 if (null != t) for (let e = 0, o = t.length; e < o; e++) {
  const o = t[e];
  "function" == typeof o.connectedCallback && o.connectedCallback(), serverSideConnected$1(o);
 }
}, clientHydrate$1 = (e, t, o, n, s, l, a) => {
 let r, i, d, c;
 if (1 === l.nodeType) {
  for (r = l.getAttribute("c-id"), r && (i = r.split("."), i[0] !== a && "0" !== i[0] || (d = {
   $flags$: 0,
   $hostId$: i[0],
   $nodeId$: i[1],
   $depth$: i[2],
   $index$: i[3],
   $tag$: l.tagName.toLowerCase(),
   $elm$: l,
   $attrs$: null,
   $children$: null,
   $key$: null,
   $name$: null,
   $text$: null
  }, t.push(d), l.removeAttribute("c-id"), e.$children$ || (e.$children$ = []), e.$children$[d.$index$] = d, 
  e = d, n && "0" === d.$depth$ && (n[d.$index$] = d.$elm$))), c = l.childNodes.length - 1; c >= 0; c--) clientHydrate$1(e, t, o, n, s, l.childNodes[c], a);
  if (l.shadowRoot) for (c = l.shadowRoot.childNodes.length - 1; c >= 0; c--) clientHydrate$1(e, t, o, n, s, l.shadowRoot.childNodes[c], a);
 } else if (8 === l.nodeType) i = l.nodeValue.split("."), i[1] !== a && "0" !== i[1] || (r = i[0], 
 d = {
  $flags$: 0,
  $hostId$: i[1],
  $nodeId$: i[2],
  $depth$: i[3],
  $index$: i[4],
  $elm$: l,
  $attrs$: null,
  $children$: null,
  $key$: null,
  $name$: null,
  $tag$: null,
  $text$: null
 }, "t" === r ? (d.$elm$ = l.nextSibling, d.$elm$ && 3 === d.$elm$.nodeType && (d.$text$ = d.$elm$.textContent, 
 t.push(d), l.remove(), e.$children$ || (e.$children$ = []), e.$children$[d.$index$] = d, 
 n && "0" === d.$depth$ && (n[d.$index$] = d.$elm$))) : d.$hostId$ === a && ("s" === r ? (d.$tag$ = "slot", 
 i[5] ? l["s-sn"] = d.$name$ = i[5] : l["s-sn"] = "", l["s-sr"] = !0, n && (d.$elm$ = doc$1.createElement(d.$tag$), 
 d.$name$ && d.$elm$.setAttribute("name", d.$name$), l.parentNode.insertBefore(d.$elm$, l), 
 l.remove(), "0" === d.$depth$ && (n[d.$index$] = d.$elm$)), o.push(d), e.$children$ || (e.$children$ = []), 
 e.$children$[d.$index$] = d) : "r" === r && (n ? l.remove() : (s["s-cr"] = l, 
 l["s-cn"] = !0)))); else if (e && "style" === e.$tag$) {
  const t = newVNode$1(null, l.textContent);
  t.$elm$ = l, t.$index$ = "0", e.$children$ = [ t ];
 }
}, initializeDocumentHydrate$1 = (e, t) => {
 if (1 === e.nodeType) {
  let o = 0;
  for (;o < e.childNodes.length; o++) initializeDocumentHydrate$1(e.childNodes[o], t);
  if (e.shadowRoot) for (o = 0; o < e.shadowRoot.childNodes.length; o++) initializeDocumentHydrate$1(e.shadowRoot.childNodes[o], t);
 } else if (8 === e.nodeType) {
  const o = e.nodeValue.split(".");
  "o" === o[0] && (t.set(o[1] + "." + o[2], e), e.nodeValue = "", e["s-en"] = o[3]);
 }
}, parsePropertyValue$1 = (e, t) => null == e || isComplexType$1(e) ? e : 4 & t ? "false" !== e && ("" === e || !!e) : 2 & t ? parseFloat(e) : 1 & t ? String(e) : e, getValue$1 = (e, t) => getHostRef$1(e).$instanceValues$.get(t), setValue$1 = (e, t, o, n) => {
 const s = getHostRef$1(e), l = s.$hostElement$ , a = s.$instanceValues$.get(t), r = s.$flags$, i = s.$lazyInstance$ ;
 o = parsePropertyValue$1(o, n.$members$[t][0]);
 const d = Number.isNaN(a) && Number.isNaN(o), c = o !== a && !d;
 if ((!(8 & r) || void 0 === a) && c && (s.$instanceValues$.set(t, o), 
 i)) {
  if (n.$watchers$ && 128 & r) {
   const e = n.$watchers$[t];
   e && e.map((e => {
    try {
     i[e](o, a, t);
    } catch (e) {
     consoleError$1(e, l);
    }
   }));
  }
  if (2 == (18 & r)) {
   scheduleUpdate$1(s, !1);
  }
 }
}, proxyComponent$1 = (e, t, o) => {
 if (t.$members$) {
  e.watchers && (t.$watchers$ = e.watchers);
  const n = Object.entries(t.$members$), s = e.prototype;
  if (n.map((([e, [n]]) => {
   (31 & n || (2 & o) && 32 & n) ? Object.defineProperty(s, e, {
    get() {
     return getValue$1(this, e);
    },
    set(s) {
     setValue$1(this, e, s, t);
    },
    configurable: !0,
    enumerable: !0
   }) : 1 & o && 64 & n && Object.defineProperty(s, e, {
    value(...t) {
     const o = getHostRef$1(this);
     return o.$onInstancePromise$.then((() => o.$lazyInstance$[e](...t)));
    }
   });
  })), (1 & o)) {
   const o = new Map;
   s.attributeChangedCallback = function(e, t, n) {
    plt$1.jmp((() => {
     const t = o.get(e);
     if (this.hasOwnProperty(t)) n = this[t], delete this[t]; else if (s.hasOwnProperty(t) && "number" == typeof this[t] && this[t] == n) return;
     this[t] = (null !== n || "boolean" != typeof this[t]) && n;
    }));
   }, e.observedAttributes = n.filter((([e, t]) => 15 & t[0])).map((([e, n]) => {
    const s = n[1] || e;
    return o.set(s, e), 512 & n[0] && t.$attrsToReflect$.push([ e, s ]), 
    s;
   }));
  }
 }
 return e;
}, initializeComponent$1 = async (e, t, o, n, s) => {
 if (0 == (32 & t.$flags$)) {
  {
   if (t.$flags$ |= 32, (s = loadModule$1(o)).then) {
    const e = (() => {});
    s = await s, e();
   }
   !s.isProxied && ((o.$watchers$ = s.watchers), 
   proxyComponent$1(s, o, 2), s.isProxied = !0);
   const e = createTime$1("createInstance", o.$tagName$);
   (t.$flags$ |= 8);
   try {
    new s(t);
   } catch (e) {
    consoleError$1(e);
   }
   (t.$flags$ &= -9), (t.$flags$ |= 128), e(), 
   fireConnectedCallback$1(t.$lazyInstance$);
  }
  if (s.style) {
   let n = s.style;
   const l = getScopeId$1(o);
   if (!styles$1.has(l)) {
    const e = createTime$1("registerStyles", o.$tagName$);
    registerStyle$1(l, n), e();
   }
  }
 }
 const r = t.$ancestorComponent$, i = () => scheduleUpdate$1(t, !0);
 r && r["s-rc"] ? r["s-rc"].push(i) : i();
}, fireConnectedCallback$1 = e => {
 safeCall$1(e, "connectedCallback");
}, connectedCallback$1 = e => {
 if (0 == (1 & plt$1.$flags$)) {
  const t = getHostRef$1(e), o = t.$cmpMeta$, n = createTime$1("connectedCallback", o.$tagName$);
  if (1 & t.$flags$) addHostEventListeners$1(e, t, o.$listeners$), fireConnectedCallback$1(t.$lazyInstance$); else {
   let n;
   if (t.$flags$ |= 1, (n = e.getAttribute("s-id"), n)) {
    ((e, t, o, n) => {
     const s = createTime$1("hydrateClient", t), l = e.shadowRoot, a = [], r = l ? [] : null, i = n.$vnode$ = newVNode$1(t, null);
     plt$1.$orgLocNodes$ || initializeDocumentHydrate$1(doc$1.body, plt$1.$orgLocNodes$ = new Map), 
     e["s-id"] = o, e.removeAttribute("s-id"), clientHydrate$1(i, a, [], r, e, e, o), a.map((e => {
      const o = e.$hostId$ + "." + e.$nodeId$, n = plt$1.$orgLocNodes$.get(o), s = e.$elm$;
      n && supportsShadow$1 && "" === n["s-en"] && n.parentNode.insertBefore(s, n.nextSibling), 
      l || (s["s-hn"] = t, n && (s["s-ol"] = n, s["s-ol"]["s-nr"] = s)), plt$1.$orgLocNodes$.delete(o);
     })), l && r.map((e => {
      e && l.appendChild(e);
     })), s();
    })(e, o.$tagName$, n, t);
   }
   if (!n && (BUILD.hydrateServerSide ) && setContentReference$1(e), 
   BUILD.asyncLoading) {
    let o = e;
    for (;o = o.parentNode || o.host; ) if (1 === o.nodeType && o.hasAttribute("s-id") && o["s-p"] || o["s-p"]) {
     attachToAncestor$1(t, t.$ancestorComponent$ = o);
     break;
    }
   }
   initializeComponent$1(e, t, o);
  }
  n();
 }
}, setContentReference$1 = e => {
 const t = e["s-cr"] = doc$1.createComment("");
 t["s-cn"] = !0, e.insertBefore(t, e.firstChild);
}, insertVdomAnnotations = (e, t) => {
 if (null != e) {
  const o = {
   hostIds: 0,
   rootLevelIds: 0,
   staticComponents: new Set(t)
  }, n = [];
  parseVNodeAnnotations(e, e.body, o, n), n.forEach((t => {
   if (null != t) {
    const n = t["s-nr"];
    let s = n["s-host-id"], l = n["s-node-id"], a = `${s}.${l}`;
    if (null == s) if (s = 0, o.rootLevelIds++, l = o.rootLevelIds, a = `${s}.${l}`, 
    1 === n.nodeType) n.setAttribute("c-id", a); else if (3 === n.nodeType) {
     if (0 === s && "" === n.nodeValue.trim()) return void t.remove();
     const o = e.createComment(a);
     o.nodeValue = `t.${a}`, n.parentNode.insertBefore(o, n);
    }
    let r = `o.${a}`;
    const i = t.parentElement;
    i && ("" === i["s-en"] ? r += "." : "c" === i["s-en"] && (r += ".c")), t.nodeValue = r;
   }
  }));
 }
}, parseVNodeAnnotations = (e, t, o, n) => {
 null != t && (null != t["s-nr"] && n.push(t), 1 === t.nodeType && t.childNodes.forEach((t => {
  const s = getHostRef$1(t);
  if (null != s && !o.staticComponents.has(t.nodeName.toLowerCase())) {
   const n = {
    nodeIds: 0
   };
   insertVNodeAnnotations(e, t, s.$vnode$, o, n);
  }
  parseVNodeAnnotations(e, t, o, n);
 })));
}, insertVNodeAnnotations = (e, t, o, n, s) => {
 if (null != o) {
  const l = ++n.hostIds;
  if (t.setAttribute("s-id", l), null != t["s-cr"] && (t["s-cr"].nodeValue = `r.${l}`), 
  null != o.$children$) {
   const t = 0;
   o.$children$.forEach(((o, n) => {
    insertChildVNodeAnnotations(e, o, s, l, t, n);
   }));
  }
  if (t && o && o.$elm$ && !t.hasAttribute("c-id")) {
   const e = t.parentElement;
   if (e && e.childNodes) {
    const n = Array.from(e.childNodes), s = n.find((e => 8 === e.nodeType && e["s-sr"]));
    if (s) {
     const e = n.indexOf(t) - 1;
     o.$elm$.setAttribute("c-id", `${s["s-host-id"]}.${s["s-node-id"]}.0.${e}`);
    }
   }
  }
 }
}, insertChildVNodeAnnotations = (e, t, o, n, s, l) => {
 const a = t.$elm$;
 if (null == a) return;
 const r = o.nodeIds++, i = `${n}.${r}.${s}.${l}`;
 if (a["s-host-id"] = n, a["s-node-id"] = r, 1 === a.nodeType) a.setAttribute("c-id", i); else if (3 === a.nodeType) {
  const t = a.parentNode, o = t.nodeName;
  if ("STYLE" !== o && "SCRIPT" !== o) {
   const o = `t.${i}`, n = e.createComment(o);
   t.insertBefore(n, a);
  }
 } else if (8 === a.nodeType && a["s-sr"]) {
  const e = `s.${i}.${a["s-sn"] || ""}`;
  a.nodeValue = e;
 }
 if (null != t.$children$) {
  const l = s + 1;
  t.$children$.forEach(((t, s) => {
   insertChildVNodeAnnotations(e, t, o, n, l, s);
  }));
 }
}, Fragment = (e, t) => t, NO_HYDRATE_TAGS = new Set([ "CODE", "HEAD", "IFRAME", "INPUT", "OBJECT", "OUTPUT", "NOSCRIPT", "PRE", "SCRIPT", "SELECT", "STYLE", "TEMPLATE", "TEXTAREA" ]), hAsync = (e, t, ...o) => {
 if (Array.isArray(o) && o.length > 0) {
  const n = o.flat(1 / 0);
  return n.some(isPromise) ? Promise.all(n).then((o => h$1(e, t, ...o))).catch((o => h$1(e, t))) : h$1(e, t, ...o);
 }
 return h$1(e, t);
};

const cmpModules$1 = new Map, getModule = e => {
 if ("string" == typeof e) {
  e = e.toLowerCase();
  const t = cmpModules$1.get(e);
  if (null != t) return t[e];
 }
 return null;
}, loadModule$1 = (e, t, o) => getModule(e.$tagName$), isMemberInElement$1 = (e, t) => {
 if (null != e) {
  if (t in e) return !0;
  const o = getModule(e.nodeName);
  if (null != o) {
   const e = o;
   if (null != e && null != e.cmpMeta && null != e.cmpMeta.$members$) return t in e.cmpMeta.$members$;
  }
 }
 return !1;
}, registerComponents = e => {
 for (const t of e) {
  const e = t.cmpMeta.$tagName$;
  cmpModules$1.set(e, {
   [e]: t
  });
 }
}, win$1 = window, doc$1 = win$1.document, writeTask$1 = e => {
 process.nextTick((() => {
  try {
   e();
  } catch (e) {
   consoleError$1(e);
  }
 }));
}, resolved = Promise.resolve(), nextTick$1 = e => resolved.then(e), defaultConsoleError = e => {
 null != e && console.error(e.stack || e.message || e);
}, consoleError$1 = (e, t) => (defaultConsoleError)(e, t), plt$1 = {
 $flags$: 0,
 $resourcesUrl$: "",
 jmp: e => e(),
 raf: e => requestAnimationFrame(e),
 ael: (e, t, o, n) => e.addEventListener(t, o, n),
 rel: (e, t, o, n) => e.removeEventListener(t, o, n),
 ce: (e, t) => new win$1.CustomEvent(e, t)
}, supportsShadow$1 = !1, hostRefs$1 = new WeakMap, getHostRef$1 = e => hostRefs$1.get(e), registerInstance = (e, t) => hostRefs$1.set(t.$lazyInstance$ = e, t), registerHost$1 = (e, t) => {
 const o = {
  $flags$: 0,
  $cmpMeta$: t,
  $hostElement$: e,
  $instanceValues$: new Map,
  $renderCount$: 0
 };
 return o.$onInstancePromise$ = new Promise((e => o.$onInstanceResolve$ = e)), o.$onReadyPromise$ = new Promise((e => o.$onReadyResolve$ = e)), 
 e["s-p"] = [], e["s-rc"] = [], addHostEventListeners$1(e, o, t.$listeners$), hostRefs$1.set(e, o);
}, styles$1 = new Map;

function createCommonjsModule(fn, basedir, module) {
	return module = {
		path: basedir,
		exports: {},
		require: function (path, base) {
			return commonjsRequire();
		}
	}, fn(module, module.exports), module.exports;
}

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
}

var classnames = createCommonjsModule(function (module) {
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg) && arg.length) {
				var inner = classNames.apply(null, arg);
				if (inner) {
					classes.push(inner);
				}
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if (module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else {
		window.classNames = classNames;
	}
}());
});

class Accordion {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** If `true`, only one scale-collapsible within the accordion can be open at a time */
    this.dependent = false;
    /** If `true`, scale-collapsibles within the accordion will all be open initially, unless this is dependant */
    this.expanded = false;
    /** Heading level for scale-collapsible descendants */
    this.headingLevel = null;
    this.iconLocation = 'left';
  }
  /**
   * Handle `dependent`
   */
  collapsibleHandler(event) {
    event.stopPropagation();
    const { expanded } = event.detail;
    if (!this.dependent || expanded === false) {
      return;
    }
    this.getCollapsibleChildren().forEach((child) => {
      if (child !== event.target && child.hasAttribute('expanded')) {
        child.expanded = false;
      }
    });
  }
  headingLevelChanged(newValue) {
    this.propagatePropsToChildren(newValue, this.iconLocation);
  }
  iconLocationChanged(newValue) {
    this.propagatePropsToChildren(this.headingLevel, newValue);
  }
  connectedCallback() {
    /**
     * Handle `expanded`
     */
    if (!this.dependent) {
      this.getCollapsibleChildren().forEach((child) => {
        child.expanded = this.expanded;
      });
    }
  }
  componentDidLoad() {
    if (this.headingLevel !== null || this.iconLocation !== 'left') {
      this.propagatePropsToChildren(this.headingLevel, this.iconLocation);
    }
  }
  getCollapsibleChildren() {
    return Array.from(this.el.children).filter((el) => el.tagName === 'SCALE-COLLAPSIBLE');
  }
  propagatePropsToChildren(headingLevel, iconLocation) {
    this.getCollapsibleChildren().forEach((item) => {
      item.headingLevel = headingLevel;
      item.iconLocation = iconLocation;
    });
  }
  render() {
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { class: this.getCssClassMap(), part: "base" }, hAsync("slot", null))));
  }
  getCssClassMap() {
    return classnames('accordion');
  }
  get el() { return getElement$1(this); }
  static get watchers() { return {
    "headingLevel": ["headingLevelChanged"],
    "iconLocation": ["iconLocationChanged"]
  }; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-accordion",
    "$members$": {
      "styles": [1],
      "dependent": [4],
      "expanded": [4],
      "headingLevel": [2, "heading-level"],
      "iconLocation": [1, "icon-location"]
    },
    "$listeners$": [[0, "scale-expand", "collapsibleHandler"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const iconCss$5t = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionAdd {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M18.5 10.75h-5.25V5.5a1.25 1.25 0 00-2.5 0v5.25H5.5a1.25 1.25 0 000 2.5h5.25v5.25a1.25 1.25 0 002.5 0v-5.25h5.25a1.25 1.25 0 000-2.5", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M18.5 11.25h-5.75V5.5a.75.75 0 00-1.5 0v5.75H5.5a.75.75 0 000 1.5h5.75v5.75a.75.75 0 001.5 0v-5.75h5.75a.75.75 0 000-1.5", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$5t; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-add",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$5s = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionAddCard {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M17.5 10a6.5 6.5 0 110 13 6.5 6.5 0 010-13zm0 1.5a5 5 0 100 10 5 5 0 000-10zm0 1.75a.75.75 0 01.743.648l.007.102v1.75H20a.75.75 0 01.102 1.493L20 17.25h-1.75V19a.75.75 0 01-1.493.102L16.75 19v-1.75H15a.75.75 0 01-.102-1.493L15 15.75h1.75V14a.75.75 0 01.75-.75zM21 7.5v1.815a8 8 0 00-3.5-.815 8 8 0 00-7.671 5.75l-.069.25H4a3 3 0 01-2.995-2.824L1 11.5v-4h20zM18 1a3 3 0 012.995 2.824L21 4v1H1V4a3 3 0 012.824-2.995L4 1h14z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M17.5 10c3.6 0 6.5 2.9 6.5 6.5S21.1 23 17.5 23 11 20.1 11 16.5s2.9-6.5 6.5-6.5zm0 3.25a.772.772 0 00-.743.651L16.75 14v1.75H15c-.4 0-.75.35-.75.75 0 .367.294.691.651.743l.099.007h1.75V19c0 .4.35.75.75.75a.772.772 0 00.743-.651L18.25 19v-1.75H20c.4 0 .75-.35.75-.75a.772.772 0 00-.651-.743L20 15.75h-1.75V14c0-.4-.35-.75-.75-.75zM18 1a3.01 3.01 0 012.995 2.824L21 4v5.3c-.4-.2-.8-.336-1.2-.46l-.3-.09V7.5h-17v4c0 .8.576 1.423 1.352 1.493L4 13h6.3c-.2.4-.336.8-.46 1.2l-.09.3H4a3.01 3.01 0 01-2.995-2.824L1 11.5V4a3.01 3.01 0 012.824-2.995L4 1h14zm0 1.5H4c-.8 0-1.423.576-1.493 1.352L2.5 4v1h17V4c0-.8-.576-1.423-1.352-1.493L18 2.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$5s; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-add-card",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$5r = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionArrange {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M5.25 1l3.6 5.5H6.5V17h2.35l-3.6 5.5-3.6-5.5H4V6.5H1.65L5.25 1zm15.499 15.52a1.25 1.25 0 01.128 2.494l-.128.007H11v-2.5h9.749zM11 10.477l9.753.034a1.25 1.25 0 01.123 2.494l-.132.006L11 12.976v-2.5zM20.749 4.5a1.25 1.25 0 01.128 2.493L20.749 7H11V4.5h9.749z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M22 5.75a.75.75 0 00-.75-.75H11v1.5h10.25a.75.75 0 00.75-.75zM8.85 6.5L5.25 1l-3.6 5.5H4.5V17H1.65l3.6 5.5 3.6-5.5H6V6.5h2.85zm12.4 4.5H11v1.5h10.25a.75.75 0 100-1.5zm0 6H11v1.5h10.25a.75.75 0 100-1.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$5r; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-arrange",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$5q = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionArrowDown {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M13.67 14V4.75a1.25 1.25 0 10-2.5 0V14H8l4.42 6.75L16.84 14h-3.17z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("defs", null, hAsync("path", { d: "M13.15 14V4.75c0-.4-.35-.75-.75-.75s-.75.35-.75.75V14H8l4.4 6.75L16.8 14h-3.65z", id: "a" })), hAsync("use", { xlinkHref: "#a", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$5q; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-arrow-down",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$5p = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionArrowLeft {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M21.092 10.75H6.099l4.83-3.81a1.249 1.249 0 10-1.547-1.962l-8.91 7.025 8.91 7.026a1.248 1.248 0 001.755-.208 1.249 1.249 0 00-.207-1.755L6.092 13.25h15a1.25 1.25 0 000-2.5", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M21.5 11.25H5.16l5.905-4.661a.751.751 0 00-.93-1.178L1.79 12l8.346 6.589a.75.75 0 00.93-1.178L5.16 12.75H21.5a.75.75 0 000-1.5", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$5p; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-arrow-left",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$5o = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionArrowRight {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M14.625 4.977a1.249 1.249 0 10-1.548 1.963l4.83 3.81H2.915a1.25 1.25 0 000 2.5h15l-4.838 3.815a1.25 1.25 0 001.548 1.963l8.909-7.026-8.91-7.025z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M14.366 5.411a.75.75 0 10-.93 1.178l5.905 4.661H3a.75.75 0 000 1.5h16.34l-5.906 4.661a.75.75 0 00.93 1.178L22.712 12l-8.345-6.589z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$5o; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-arrow-right",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$5n = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionArrowUp {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12.42 3.5L8 10.25h3.17v9.25a1.25 1.25 0 102.5 0v-9.25h3.17L12.42 3.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("defs", null, hAsync("path", { d: "M12.4 4L8 10.75h3.65V20c0 .4.35.75.75.75s.75-.35.75-.75v-9.25h3.65L12.4 4z", id: "a" })), hAsync("use", { xlinkHref: "#a", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$5n; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-arrow-up",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$5m = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionAutoLogin {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 .75c.65 0 1.257.388 1.54.964l.06.136 1.5 3.65 3.9.25c.75.05 1.35.5 1.55 1.2.185.646.028 1.335-.43 1.791L20 8.85l-3 2.55.95 3.8c.2.7-.05 1.45-.65 1.85a1.827 1.827 0 01-1.809.125l-.141-.075-2.6-1.6v7.2c0 .4-.35.75-.75.75a.772.772 0 01-.743-.651l-.007-.099v-7.2l-2.6 1.6c-.6.4-1.35.35-1.95-.05a1.862 1.862 0 01-.678-1.689l.028-.161.95-3.8-3-2.55c-.55-.5-.8-1.2-.55-1.9a1.773 1.773 0 011.402-1.183L5 5.75l3.9-.25 1.5-3.65c.25-.65.9-1.1 1.6-1.1zm8.427 10.954l2.473.804-.463 1.426-2.473-.803.463-1.427zm-16.88-.019l.464 1.427-2.473.803-.463-1.426 2.473-.804zM5.99.213l1.528 2.104-1.214.881-1.528-2.103L5.99.213zM17.998.205l1.214.882-1.529 2.103-1.213-.882L17.998.205z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 .75c.65 0 1.257.388 1.54.964l.06.136 1.5 3.65 3.9.25c.75.05 1.35.5 1.55 1.2.185.646.028 1.335-.43 1.791L20 8.85l-3 2.55.95 3.8c.2.7-.05 1.45-.65 1.85a1.827 1.827 0 01-1.809.125l-.141-.075-2.6-1.6v7.2c0 .4-.35.75-.75.75a.772.772 0 01-.743-.651l-.007-.099v-7.2l-2.6 1.6c-.6.4-1.35.35-1.95-.05a1.862 1.862 0 01-.678-1.689l.028-.161.95-3.8-3-2.55c-.55-.5-.8-1.2-.55-1.9a1.773 1.773 0 011.402-1.183L5 5.75l3.9-.25 1.5-3.65c.25-.65.9-1.1 1.6-1.1zm0 1.55h-.1c-.066.003-.128.017-.171.087l-.029.063-1.85 4.5L5 7.3c-.15 0-.2.1-.2.15 0 .04 0 .112.051.19l.049.06 3.7 3.15-1.15 4.7c-.05.1.05.2.1.25a.236.236 0 00.247.038l.053-.038L12 13.25l4.1 2.55c.125.083.215.063.27.024l.08-.07c.033-.032.059-.075.031-.146l-.031-.058-1.15-4.7L19 7.7c.107-.071.112-.143.106-.196L19.1 7.45c0-.042-.035-.118-.133-.142L18.9 7.3l-4.85-.35-1.85-4.5c-.042-.125-.118-.146-.2-.15zm8.427 9.404l2.473.804-.463 1.426-2.473-.803.463-1.427zm-16.88-.019l.464 1.427-2.473.803-.463-1.426 2.473-.804zM5.99.213l1.528 2.104-1.214.881-1.528-2.103L5.99.213zM17.998.205l1.214.882-1.529 2.103-1.213-.882L17.998.205z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$5m; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-auto-login",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$5l = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionBackspace {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M20 3.5H8L.5 12 8 20.5h12a3 3 0 003-3v-11a3 3 0 00-3-3zm-2 10.925a.745.745 0 010 1.075.75.75 0 01-1.06 0l-2.44-2.44-2.425 2.44a.75.75 0 01-1.075 0 .745.745 0 010-1.06L13.44 12 11 9.575A.76.76 0 0112.075 8.5l2.425 2.44 2.425-2.44A.76.76 0 0118 9.575L15.56 12 18 14.425z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M20 3.5a3.01 3.01 0 012.995 2.824L23 6.5v11a3.01 3.01 0 01-2.824 2.995L20 20.5H8L.5 12 8 3.5h12zM20 5H8.7l-6.2 7 6.2 7H20c.8 0 1.423-.576 1.493-1.352l.007-.148v-11c0-.8-.576-1.423-1.352-1.493L20 5zm-8.95 3.5a.722.722 0 01.965-.074l.085.074 2.4 2.45 2.45-2.45c.3-.3.75-.3 1.05 0a.742.742 0 01.03 1.021L15.55 12l2.35 2.4c.3.3.3.75 0 1.05a.722.722 0 01-.965.074l-.085-.074-2.4-2.4-2.4 2.4c-.3.3-.75.3-1.05 0a.722.722 0 01-.074-.965L11 14.4l2.45-2.45-2.4-2.4c-.3-.3-.3-.75 0-1.05z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$5l; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-backspace",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$5k = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionBackward {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M16.75 8.5H9.5V5.33L2.75 9.75l6.75 4.42V11h7.25a2.75 2.75 0 110 5.5h-4a1.25 1.25 0 000 2.5h4a5.25 5.25 0 000-10.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M16.75 9H9.5V5.332L2.75 9.75l6.75 4.418V10.5h7.25A3.254 3.254 0 0120 13.75 3.254 3.254 0 0116.75 17h-4a.75.75 0 100 1.5h4a4.756 4.756 0 004.75-4.75A4.756 4.756 0 0016.75 9z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$5k; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-backward",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$5j = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionChangelog {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M2 15.5l3.44 2.25L2 20v-4.5zm19.25 1a1.25 1.25 0 01.128 2.494L21.25 19h-13a1.25 1.25 0 01-.128-2.494l.128-.006h13zM2 9.5l3.44 2.25L2 14V9.5zm19.25 1a1.25 1.25 0 01.128 2.494L21.25 13h-13a1.25 1.25 0 01-.128-2.494l.128-.006h13zM2 3.5l3.44 2.25L2 8V3.5zm19.25 1a1.25 1.25 0 01.128 2.494L21.25 7h-13a1.25 1.25 0 01-.128-2.494L8.25 4.5h13z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M2 15.5l3.45 2.25L2 20v-4.5zM21.25 17c.4 0 .75.35.75.75a.772.772 0 01-.651.743l-.099.007H7.5V17h13.75zM2 9.5l3.45 2.25L2 14V9.5zM21.25 11c.4 0 .75.35.75.75a.772.772 0 01-.651.743l-.099.007H7.5V11h13.75zM2 3.5l3.45 2.25L2 8V3.5zM21.25 5c.4 0 .75.35.75.75a.772.772 0 01-.651.743l-.099.007H7.5V5h13.75z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$5j; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-changelog",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$5i = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionCheckmark {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M9.215 19.78l-6.898-6.866a1.25 1.25 0 111.764-1.771l5.13 5.106L20.3 5.159a1.25 1.25 0 011.768 1.767L9.215 19.78z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M21.756 5.48a.75.75 0 00-1.061 0L9.219 16.956l-5.463-5.463a.749.749 0 10-1.06 1.06l6.523 6.523L21.756 6.54a.75.75 0 000-1.06", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$5i; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-checkmark",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$5h = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionCircleAdd {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 1C5.925 1 1 5.925 1 12s4.925 11 11 11 11-4.925 11-11A11 11 0 0012 1zm5 11.75h-4.25V17a.75.75 0 11-1.5 0v-4.25H7a.75.75 0 110-1.5h4.25V7a.75.75 0 111.5 0v4.25H17a.75.75 0 110 1.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 1c6.1 0 11 4.9 11 11s-4.9 11-11 11S1 18.1 1 12 5.9 1 12 1zm0 1.5c-5.25 0-9.5 4.25-9.5 9.5s4.25 9.5 9.5 9.5 9.5-4.25 9.5-9.5-4.25-9.5-9.5-9.5zm0 3.75c.367 0 .691.294.743.651L12.75 7v4.25H17c.4 0 .75.35.75.75a.772.772 0 01-.651.743L17 12.75h-4.25V17c0 .4-.35.75-.75.75a.772.772 0 01-.743-.651L11.25 17v-4.25H7c-.4 0-.75-.35-.75-.75 0-.367.294-.691.651-.743L7 11.25h4.25V7c0-.4.35-.75.75-.75z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$5h; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-circle-add",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$5g = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionCircleClose {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 1C5.925 1 1 5.925 1 12s4.925 11 11 11 11-4.925 11-11A11 11 0 0012 1zm4.065 14a.745.745 0 010 1.06.75.75 0 01-1.06 0l-3-3-3 3a.755.755 0 01-.53.22.75.75 0 01-.54-1.28l3-3-3-3A.753.753 0 019 7.935l3 3 3-3A.753.753 0 0116.065 9l-3 3 3 3z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 1c6.1 0 11 4.9 11 11s-4.9 11-11 11S1 18.1 1 12 5.9 1 12 1zm0 1.5c-5.25 0-9.5 4.25-9.5 9.5s4.25 9.5 9.5 9.5 9.5-4.25 9.5-9.5-4.25-9.5-9.5-9.5zM7.95 7.95a.722.722 0 01.965-.074L9 7.95l3 3 3-3c.3-.3.75-.3 1.05 0 .273.273.298.67.074.965L16.05 9l-3 3 3 3c.3.3.3.75 0 1.05a.722.722 0 01-.965.074L15 16.05l-3-3-3 3c-.3.3-.75.3-1.05 0a.722.722 0 01-.074-.965L7.95 15l3-3-3-3c-.3-.3-.3-.75 0-1.05z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$5g; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-circle-close",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$5f = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionClose {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M13.768 12l4.116-4.116a1.25 1.25 0 00-1.767-1.768L12 10.232 7.884 6.116a1.25 1.25 0 10-1.767 1.768L10.233 12l-4.116 4.116a1.249 1.249 0 101.767 1.768L12 13.768l4.117 4.116a1.246 1.246 0 001.767 0 1.25 1.25 0 000-1.768L13.768 12z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12.93 12.402l4.47-4.47a.749.749 0 10-1.062-1.06l-4.47 4.47L7.4 6.871a.749.749 0 10-1.06 1.06l4.47 4.47-4.47 4.47a.75.75 0 001.06 1.061l4.47-4.47 4.47 4.47a.747.747 0 001.06 0 .75.75 0 000-1.06l-4.47-4.47z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$5f; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-close",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$5e = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionCompare {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 2a.75.75 0 01.743.648l.007.102v18.5a.75.75 0 01-1.493.102l-.007-.102V2.75A.75.75 0 0112 2zM2 7.582L8.75 12 2 16.418V7.582zm20 0v8.836L15.25 12 22 7.582z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 2a.75.75 0 01.743.648l.007.102v18.5a.75.75 0 01-1.493.102l-.007-.102V2.75A.75.75 0 0112 2zM2 7.582L8.75 12 2 16.418V7.582zm20 0v8.836L15.25 12 22 7.582z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$5e; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-compare",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$5d = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionCopyPaste {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M17 7v12.5a3 3 0 01-2.824 2.995L14 22.5H4.5a3 3 0 01-2.995-2.824L1.5 19.5V7H17zm5.5-5.5V14a3 3 0 01-2.824 2.995L19.5 17h-1v-1.5h1a1.5 1.5 0 001.493-1.356L21 14V3H8.5v2.5H7v-4h15.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M17 7v12.5a3.003 3.003 0 01-2.824 2.995L14 22.5H4.5a3.003 3.003 0 01-2.995-2.824L1.5 19.5V7H17zm-1.5 1.5H3v11c0 .776.598 1.42 1.356 1.493L4.5 21H14c.776 0 1.42-.598 1.493-1.356l.007-.144v-11zm7-7V14a3.003 3.003 0 01-2.824 2.995L19.5 17h-1v-1.5h1c.776 0 1.42-.598 1.493-1.356L21 14V3H8.5v2.5H7v-4h15.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$5d; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-copy-paste",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$5c = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionCutPaste {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M8.5 21v1.5H6V21h2.5zM3 19.5a1.5 1.5 0 001.356 1.493L4.5 21v1.5a3 3 0 01-2.995-2.824L1.5 19.5H3zm14 0a3 3 0 01-2.824 2.995L14 22.5V21a1.5 1.5 0 001.493-1.356l.007-.144H17zM12.5 21v1.5H10V21h2.5zm4.5-5.5V18h-1.5v-2.5H17zm-14 0V18H1.5v-2.5H3zm19.5-14V14a3 3 0 01-2.824 2.995L19.5 17h-1V5.5H7v-4h15.5zm-5.5 10V14h-1.5v-2.5H17zm-14 0V14H1.5v-2.5H3zM17 7v3h-1.5V8.5H14V7h3zM4.5 7v1.5H3V10H1.5V7h3zm8 0v1.5H10V7h2.5zm-4 0v1.5H6V7h2.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M8.5 21v1.5H6V21h2.5zM3 19.5c0 .776.598 1.42 1.356 1.493L4.5 21v1.5a3.003 3.003 0 01-2.995-2.824L1.5 19.5H3zm14 0a3.003 3.003 0 01-2.824 2.995L14 22.5V21c.776 0 1.42-.598 1.493-1.356l.007-.144H17zM12.5 21v1.5H10V21h2.5zM3 15.5V18H1.5v-2.5H3zm14 0V18h-1.5v-2.5H17zm5.5-14V14a3.003 3.003 0 01-2.824 2.995L19.5 17h-1v-1.5h1c.776 0 1.42-.598 1.493-1.356L21 14V3H8.5v2.5H7v-4h15.5zM3 11.5V14H1.5v-2.5H3zm14 0V14h-1.5v-2.5H17zM17 7v3h-1.5V8.5H14V7h3zM4.5 7v1.5H3V10H1.5V7h3zm8 0v1.5H10V7h2.5zm-4 0v1.5H6V7h2.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$5c; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-cut-paste",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$5b = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionDisabledMicrophone {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M5.25 9.5a.75.75 0 01.743.648L6 10.25V12a6 6 0 008.097 5.622l.243-.097 1.125 1.12a7.5 7.5 0 01-2.36.77l-.355.045v4.04h-1.5v-4.04a7.5 7.5 0 01-6.746-7.21L4.5 12v-1.75a.75.75 0 01.75-.75zM2.863 2.863a.75.75 0 01.949-.092l.093.074 17.25 17.25a.745.745 0 010 1.06.75.75 0 01-.976.073l-.084-.073-17.25-17.25a.75.75 0 01.018-1.042zM7.5 10.68l5.66 5.665A4.67 4.67 0 0112 16.5a4.5 4.5 0 01-4.495-4.288L7.5 12v-1.32zM18.75 9.5a.75.75 0 01.743.648l.007.102V12a7.435 7.435 0 01-.731 3.171l-.149.294-1.12-1.125a6 6 0 00.49-2.038L18 12v-1.75a.75.75 0 01.75-.75zM12.104.539l.212.01a4.5 4.5 0 014.177 4.239L16.5 5v7a4.67 4.67 0 01-.089.874l-.066.286L7.55 4.37A4.5 4.5 0 0112.104.539z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M5.25 9.5c.367 0 .691.294.743.651L6 10.25V12c0 3.3 2.7 6 6 6 .744 0 1.41-.115 2.069-.378l.281-.122 1.1 1.15c-.7.35-1.515.623-2.344.753l-.356.047v4.05h-1.5v-4.05c-3.72-.343-6.624-3.415-6.746-7.202L4.5 12v-1.75c0-.4.35-.75.75-.75zm-2.4-6.65a.722.722 0 01.965-.074l.085.074L21.15 20.1c.3.3.3.75 0 1.05a.722.722 0 01-.965.074l-.085-.074L2.85 3.9c-.3-.3-.3-.75 0-1.05zM7.5 10.7L9 12.2a3.012 3.012 0 002.621 2.783L11.8 15l1.35 1.35c-.35.1-.75.15-1.15.15a4.48 4.48 0 01-4.495-4.287L7.5 12v-1.3zm11.25-1.2c.367 0 .691.294.743.651l.007.099V12c0 1.146-.252 2.25-.756 3.196l-.144.254-1.1-1.1a5.26 5.26 0 00.493-2.036L18 12v-1.75c0-.4.35-.75.75-.75zM12 .5a4.48 4.48 0 014.495 4.287L16.5 5v7c0 .32-.032.64-.096.934l-.054.216L15 11.8V5c0-1.65-1.35-3-3-3a3.01 3.01 0 00-2.995 2.824L9 5v.8L7.55 4.35C7.85 2.2 9.75.5 12 .5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$5b; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-disabled-microphone",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$5a = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionDownload {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M21.25 20.185a1.065 1.065 0 01.116 2.124l-.116.006H2.75a1.065 1.065 0 01-.116-2.124l.116-.006h18.5zM12 1.5c.647 0 1.18.492 1.244 1.122l.006.128V9.5h3.33l-4.58 7-4.58-7h3.33V2.75c0-.69.56-1.25 1.25-1.25z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M21.25 20.5c.4 0 .75.35.75.75a.772.772 0 01-.651.743L21.25 22H2.75c-.4 0-.75-.35-.75-.75 0-.367.294-.691.651-.743l.099-.007h18.5zM12 2c.367 0 .691.294.743.651l.007.099V9.5h3.85l-4.6 7-4.6-7h3.85V2.75c0-.4.35-.75.75-.75z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$5a; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-download",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$59 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionDownloadFromCloud {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 9.995a.75.75 0 01.743.648l.007.102v5.25h3.67L12 22.745l-2.25-3.44-2.17-3.31h3.67v-5.25a.75.75 0 01.75-.75zm-3.28-4.62A7.6 7.6 0 0120.65 8.65a5.745 5.745 0 013.1 5.095c0 2.915-2.165 5.485-5 5.695l-.359.02-.717.019-1.411.015h-.343l1.775-2.68 1.5-2.32H14.25v-3.75a2.25 2.25 0 00-4.495-.154l-.005.155v3.75H4.805l3.275 5-1.476-.01-1.042-.017-.648-.023a8.398 8.398 0 01-.164-.01c-2.56-.19-4.5-2.55-4.5-5.19a5.25 5.25 0 012.675-4.57 4.685 4.685 0 015.795-4.3z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 10a.75.75 0 01.743.648l.007.102V16h3.669L12 22.75 7.582 16h3.668v-5.25A.75.75 0 0112 10zm1.511-6.326a7.593 7.593 0 017.149 4.982 5.76 5.76 0 013.09 5.093c0 3.097-2.46 5.63-5.53 5.746L18 19.5h-2.08l.98-1.5H18a4.255 4.255 0 004.25-4.25c0-2.023-1.227-3.112-2.06-3.626l-.216-.126a5.097 5.097 0 00-.099-.053l-.173-.087-.251-.112a.071.071 0 01-.012-.006l-.049-.15-.085-.265-.083-.23-.11-.267a6.099 6.099 0 00-5.601-3.654 6.082 6.082 0 00-3.975 1.478l-.457.411-.084-.027-.333-.117a3.205 3.205 0 00-3.41.87 3.177 3.177 0 00-.84 2.113v.213l.009.182.023.294c0 .011 0 .02-.002.027l-.087.04-.194.082-.177.082-.206.106-.227.133c-.784.486-1.801 1.44-1.801 3.189a3.754 3.754 0 003.551 3.745L5.5 18h1.598l.982 1.5H5.5a5.256 5.256 0 01-5.25-5.25c0-1.9 1.032-3.643 2.667-4.568a4.718 4.718 0 014.704-4.438c.37 0 .738.045 1.101.133a7.593 7.593 0 014.79-1.703z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$59; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-download-from-cloud",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$58 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionDragAndDrop {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M15.5 8.5V21a3 3 0 01-2.824 2.995L12.5 24H3a3 3 0 01-2.995-2.824L0 21V8.5h15.5zM5.27 11.66v6.385l1.415-1.73.895 2.125.92-.39-.905-2.12 2.225.19-4.55-4.46zM19.5 14v1.5H17V14h2.5zm4.5-1.5a3 3 0 01-2.824 2.995L21 15.5V14a1.5 1.5 0 001.493-1.356l.007-.144H24zm0-4V11h-1.5V8.5H24zm0-4V7h-1.5V4.5H24zm-14 0V7H8.5V4.5H10zM21 0a3 3 0 012.995 2.824L24 3h-1.5a1.5 1.5 0 00-1.356-1.493L21 1.5V0zm-9.5 0v1.5a1.5 1.5 0 00-1.493 1.356L10 3H8.5A3 3 0 0111.324.005L11.5 0zm4 0v1.5H13V0h2.5zm4 0v1.5H17V0h2.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M17.538 9.052c.827 0 1.578.458 1.964 1.169l.159-.048c.174-.045.35-.068.525-.068.887 0 1.637.58 1.966 1.5l.672 1.985.641 1.946.14.43c1.093 3.388-.116 6.286-3.157 7.565a5.773 5.773 0 01-2.245.469c-1.648 0-3.002-.75-4.121-1.456l-1.145-.738-.378-.251-.51-.353-.696-.494a2.25 2.25 0 01-.654-2.927c.36-.631 1.017-1.024 1.774-1.07l-1.42-2.142a2.222 2.222 0 01-.32-1.68 2.215 2.215 0 01.962-1.413c.289-.19.614-.31.954-.35a2.231 2.231 0 013.414-1.52 2.247 2.247 0 011.475-.554zm0 1.499a.734.734 0 00-.693.979l1.304 3.699-.39.143-2.257-4.23a.736.736 0 00-.993-.306.734.734 0 00-.305.992l2.16 4.233-.13.075-.272.163-2.427-3.36a.732.732 0 00-1.017-.21.734.734 0 00-.211 1.016l2.867 4.328c.504.693.125 1.09-.224 1.09a.418.418 0 01-.17-.034l-.143-.065-.987-.476-.45-.21a16.365 16.365 0 00-.221-.1.895.895 0 00-.355-.073c-.251 0-.5.104-.622.32-.206.36-.045.774.218.96l.984.694.349.237.413.271.926.596c.995.628 2.067 1.218 3.31 1.218.524 0 1.076-.103 1.665-.351 2.46-1.036 3.126-3.193 2.31-5.723l-.706-2.154-.694-2.045c-.09-.342-.285-.624-.591-.624a.643.643 0 00-.146.019c-.392.103-.546.507-.443.899l.49 2.235c-.132.022-.294.008-.44.037l-1.416-3.753a.736.736 0 00-.693-.49zm-4.04-7.553v1.499h6.5v3.988a3.727 3.727 0 00-1.264-.73l-.236-.072V5.996H6v10.993c0 .778.596 1.42 1.356 1.493l.144.007h1.438a3.8 3.8 0 00.082 1.255l.067.244H7.5a3 3 0 01-2.995-2.823L4.5 16.99v-3.5H3v-1.5h1.5V4.498h7.499v-1.5h1.5zM1.5 11.992v1.499H0v-1.5h1.5zm0-2.998v1.499H0v-1.5h1.5zm0-2.998v1.499H0v-1.5h1.5zm0-2.998v1.499H0v-1.5h1.5zM7.5 0v1.499H6v-1.5h1.5zm-6 0v1.499H0v-1.5h1.5zm3 0v1.499H3v-1.5h1.5zm5.999 0v1.499h-1.5v-1.5h1.5zm3 0v1.499h-1.5v-1.5h1.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$58; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-drag-and-drop",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$57 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionEdit {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M21.25 19.5a.75.75 0 01.102 1.493L21.25 21H8.045l1.05-1.5H21.25zM3.355 17.15l3.14 2.205L3 20.995l.35-3.84.005-.005zM15.46 1.29v.02a1.915 1.915 0 011.656 2.862l-.086.138-9.675 13.815-3.14-2.2 9.67-13.815a1.92 1.92 0 011.405-.813l.17-.007z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M21.25 19.5c.4 0 .75.35.75.75a.772.772 0 01-.651.743L21.25 21H8.05l1.05-1.5h12.15zm-17.9-2.35l3.15 2.2L3 21l.35-3.85zM13.9 2.1c.522-.76 1.677-1.024 2.52-.534l.13.084.136.1a1.88 1.88 0 01.452 2.413l-.088.137-9.7 13.8-3.15-2.2 9.7-13.8z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$57; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-edit",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$56 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionExport {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M9.75 10v6.75a2.25 2.25 0 004.5 0V10h6.25v10.5a3 3 0 01-3 3h-11a3 3 0 01-3-3V10h6.25zM12 1l4.58 7h-3.83v8.75a.75.75 0 01-1.5 0V8H7.42L12 1z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M8.5 10v1.5H5v9c0 .778.596 1.42 1.356 1.493L6.5 22h11c.778 0 1.42-.596 1.493-1.356L19 20.5v-9h-3.5V10h5v10.5a3 3 0 01-2.824 2.995l-.176.005h-11a3 3 0 01-2.995-2.824L3.5 20.5V10h5zM12 1l4.582 7H12.75v8.75a.75.75 0 01-1.493.102l-.007-.102V8H7.418l4.583-7z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$56; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-export",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$55 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionFastForward {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 1C5.925 1 1 5.925 1 12s4.925 11 11 11 11-4.925 11-11A11 11 0 0012 1zm.5 15v-3.6L7 16V8l5.5 3.6V8l6.11 4-6.11 4z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 1c6.075 0 11 4.925 11 11s-4.925 11-11 11S1 18.075 1 12 5.925 1 12 1zm0 1.5c-5.24 0-9.5 4.26-9.5 9.5s4.26 9.5 9.5 9.5 9.5-4.26 9.5-9.5-4.26-9.5-9.5-9.5zm.5 5.5l6.11 4-6.11 4v-3.6L7 16V8l5.5 3.6V8z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$55; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-fast-forward",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$54 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionFastForwardNb {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M11.475 11.3L2 5v14l9.475-6.3V19L22 12 11.475 5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M11.475 11.3L2 5v14l9.475-6.3V19L22 12 11.475 5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$54; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-fast-forward-nb",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$53 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionFavorite {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M22.614 9.215a1.713 1.713 0 00-1.51-1.184l-5.451-.399-2.065-5.061a1.713 1.713 0 00-1.592-1.07c-.702 0-1.327.42-1.592 1.07L8.339 7.633l-5.451.398c-.7.052-1.293.516-1.51 1.184a1.712 1.712 0 00.526 1.845l4.176 3.527-1.305 5.308a1.715 1.715 0 00.659 1.802c.567.413 1.32.44 1.917.07l4.645-2.881 4.646 2.881a1.716 1.716 0 002.575-1.871l-1.305-5.309 4.175-3.527a1.714 1.714 0 00.527-1.845", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M22.613 9.215a1.713 1.713 0 00-1.51-1.184l-5.451-.399-2.064-5.061a1.713 1.713 0 00-1.592-1.07c-.703 0-1.327.42-1.593 1.07L8.34 7.633l-5.452.398c-.7.052-1.292.516-1.51 1.184a1.712 1.712 0 00.526 1.845l4.176 3.527-1.304 5.308a1.715 1.715 0 00.658 1.802c.568.413 1.321.44 1.918.07l4.644-2.881 4.646 2.881a1.716 1.716 0 002.575-1.871l-1.305-5.309 4.176-3.527a1.714 1.714 0 00.526-1.845zm-1.494.699l-4.886 4.127 1.527 6.212c.03.119-.03.19-.084.23a.203.203 0 01-.244.009l-5.436-3.372-5.436 3.372a.206.206 0 01-.245-.009.206.206 0 01-.084-.23l1.527-6.211-4.886-4.128a.205.205 0 01-.067-.235.206.206 0 01.192-.151l6.38-.468 2.416-5.923a.205.205 0 01.203-.136c.067 0 .156.024.203.137l2.416 5.922 6.38.468a.206.206 0 01.192.151.206.206 0 01-.068.235z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$53; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-favorite",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$52 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionFilter {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12.25 16.5a2.75 2.75 0 110 5.5 2.75 2.75 0 010-5.5zM8.19 18a4.205 4.205 0 00-.068 2.254l.068.246H2V18h6.19zM22 18v2.5h-5.685a4.295 4.295 0 00.066-2.255L16.315 18H22zM4.75 9.5a2.75 2.75 0 110 5.5 2.75 2.75 0 010-5.5zM22 11v2.5H8.815a4.295 4.295 0 00.066-2.255L8.815 11H22zm-7.25-8.5a2.75 2.75 0 110 5.5 2.75 2.75 0 010-5.5zM10.69 4a4.135 4.135 0 00-.19 1.25c0 .34.04.677.121 1.005l.069.245H2V4h8.69zM22 4v2.5h-3.185c.22-.725.244-1.492.073-2.226L18.815 4H22z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12.25 16.5a2.75 2.75 0 110 5.5 2.75 2.75 0 010-5.5zm-4.18 2a4.144 4.144 0 00-.038 1.253L8.07 20H2v-1.5h6.07zm13.93 0V20h-5.57a4.144 4.144 0 00.038-1.253l-.038-.247H22zm-17.25-9a2.75 2.75 0 110 5.5 2.75 2.75 0 010-5.5zm17.25 2V13H8.93a4.144 4.144 0 00.038-1.253L8.93 11.5H22zm-7.25-9a2.75 2.75 0 110 5.5 2.75 2.75 0 010-5.5zm-4.18 2a4.144 4.144 0 00-.038 1.253L10.57 6H2V4.5h8.57zM22 4.5V6h-3.07a4.144 4.144 0 00.038-1.253L18.93 4.5H22z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$52; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-filter",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$51 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionFilter2 {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M22 2H2v3.568c0 1.233.507 2.413 1.4 3.263L9 14.15v9.35l6-3v-6.35l5.6-5.319c.893-.85 1.4-2.03 1.4-3.263V2z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M22 2H2v3.568c0 1.233.507 2.413 1.4 3.263L9 14.15v9.35l6-3v-6.35l5.6-5.319c.893-.85 1.4-2.03 1.4-3.263V2zm-1.5 1.5v2.068c0 .819-.34 1.612-.934 2.175l-5.598 5.32-.468.443v6.067l-3 1.5v-7.567l-.467-.443-5.599-5.32A3.009 3.009 0 013.5 5.568V3.5h17z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$51; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-filter-2",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$50 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionForward {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M20.25 7.752l-6.75-4.4v2.861h-2.264c-4.687 0-8.5 3.813-8.5 8.5V19a1.5 1.5 0 103 0v-4.287c0-3.032 2.468-5.5 5.5-5.5H13.5v2.938l6.75-4.399z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M13.5 12.151l6.75-4.399-6.75-4.4V7h-2.25C6.979 7 3.5 10.476 3.5 14.75v4.987a.75.75 0 101.5 0V14.75a6.257 6.257 0 016.25-6.25h2.25v3.651z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$50; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-forward",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4$ = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionFullScreen {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M9.5 12.735a1.25 1.25 0 011.765 1.765L7.5 18.29l2.43 2.45L1.5 22.5l1.76-8.45 2.45 2.45zM22.5 1.5l-1.76 8.45-2.45-2.45-3.785 3.77c-.49.487-1.28.487-1.77 0a1.26 1.26 0 010-1.77l3.785-3.79-2.45-2.45L22.5 1.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M10.22 12.72a.745.745 0 011.06 0c.268.264.293.68.073.975l-.073.085-4.155 4.155L9.93 20.74 1.5 22.5l1.76-8.43 2.805 2.805 4.155-4.155zM22.5 1.5l-1.76 8.43-2.805-2.805-4.155 4.155a.754.754 0 01-.53.22.754.754 0 01-.53-.22.744.744 0 01-.073-.975l.073-.085 4.155-4.155L14.07 3.26 22.5 1.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4$; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-full-screen",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4_ = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionHidePassword {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M3.815 2.776l.085.074L21.15 20.1c.3.3.3.75 0 1.05a.722.722 0 01-.965.074l-.085-.074L2.85 3.9c-.3-.3-.3-.75 0-1.05a.722.722 0 01.965-.074zM4.2 7.35L5.25 8.4l-.018.017 2.423 2.423A4.67 4.67 0 007.5 12a4.5 4.5 0 004.5 4.5 4.67 4.67 0 00.874-.089l.286-.066 2.285 2.28-.015.005.57.57c-1.2.5-2.5.8-4 .8-4.108 0-6.987-2.283-9.1-4.68l-.364-.425-.35-.423-.334-.421-.476-.62-.726-.981L.3 12l.35-.45.595-.806C1.969 9.776 2.8 8.73 3.774 7.76l.426-.41zM12 4c4.108 0 6.987 2.283 9.1 4.68l.364.425.35.423.334.421.476.62.726.981.35.45-.35.45-.595.806c-.724.968-1.555 2.014-2.529 2.983l-.426.411-1.05-1.05.018-.017-2.423-2.423c.1-.379.152-.768.155-1.16A4.5 4.5 0 0012 7.5a4.67 4.67 0 00-.874.089l-.286.066-2.285-2.28.015-.005L8 4.8c1.2-.5 2.5-.8 4-.8zm-3 8.19l2.8 2.8a3 3 0 01-2.783-2.621L9 12.19zm3.2-3.18a3 3 0 012.783 2.621l.017.179-2.8-2.8z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M2.85 2.85a.722.722 0 01.965-.074l.085.074L21.15 20.1c.3.3.3.75 0 1.05a.722.722 0 01-.965.074l-.085-.074L2.85 3.9c-.3-.3-.3-.75 0-1.05zm1.35 4.5L5.25 8.4c-1.1 1.05-2.1 2.3-3.05 3.6l.578.778.39.506.397.494C5.766 16.458 8.287 18.5 12 18.5c.919 0 1.76-.115 2.527-.345l.323-.105L16 19.2c-1.2.5-2.5.8-4 .8-4.108 0-6.987-2.283-9.1-4.68l-.364-.425-.35-.423-.334-.421-.476-.62-.726-.981L.3 12l.35-.45.595-.806C1.969 9.776 2.8 8.73 3.774 7.76l.426-.41zM12 4c4.108 0 6.987 2.283 9.1 4.68l.364.425.35.423.334.421.476.62.726.981.35.45-.35.45-.595.806c-.724.968-1.555 2.014-2.529 2.983l-.426.411-1.05-1.05c1.1-1.05 2.1-2.3 3.05-3.6l-.578-.778-.39-.506-.397-.494C18.234 7.542 15.713 5.5 12 5.5c-.919 0-1.76.115-2.527.345l-.323.105L8 4.8c1.2-.5 2.5-.8 4-.8zm-4.35 6.85l5.5 5.5c-.35.1-.75.15-1.15.15-2.5 0-4.5-2-4.5-4.5 0-.32.032-.64.096-.934l.054-.216zM12 7.5c2.5 0 4.5 2 4.5 4.5 0 .32-.032.64-.096.934l-.054.216-5.5-5.5c.35-.1.75-.15 1.15-.15z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4_; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-hide-password",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4Z = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionImport {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M21 7v13a3 3 0 01-2.824 2.995L18 23H6a3 3 0 01-2.995-2.824L3 20V7h7.25v3.5H5.568L12 20.326l6.432-9.826h-4.683L13.746 7H21zm-9-5a.75.75 0 01.743.648l.007.102v8.75h3.832L12 18.5l-4.582-7h3.832V2.75A.75.75 0 0112 2z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M8.5 7v1.5h-4V20c0 .778.596 1.42 1.356 1.493L6 21.5h12c.778 0 1.42-.596 1.493-1.356L19.5 20V8.5h-4V7H21v13a3 3 0 01-2.824 2.995L18 23H6a3 3 0 01-2.995-2.824L3 20V7h5.5zM12 2a.75.75 0 01.743.648l.007.102v8.75h3.832L12 18.5l-4.582-7h3.832V2.75A.75.75 0 0112 2z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4Z; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-import",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4Y = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionInstall {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M7.745 14l3 4.57a1.5 1.5 0 002.411.12l.089-.12 3-4.57H23.5v5a3 3 0 01-2.824 2.995L20.5 22h-17a3 3 0 01-2.995-2.824L.5 19v-5h7.245zM19 17h-2v2h2v-2zM12 .5c.647 0 1.18.492 1.244 1.122l.006.128V11h3.17L12 17.75 7.58 11h3.17V1.75c0-.69.56-1.25 1.25-1.25z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M7.755 14l.98 1.5H2V19c0 .776.598 1.42 1.356 1.493l.144.007h17c.776 0 1.42-.598 1.493-1.356L22 19v-3.5h-6.735l.98-1.5H23.5v5a3.003 3.003 0 01-2.824 2.995L20.5 22h-17a3.003 3.003 0 01-2.995-2.824L.5 19v-5h7.255zM19 17v2h-2v-2h2zM12 1c.38 0 .694.281.743.648l.007.102V11h3.67L12 17.75 7.58 11h3.67V1.75c0-.415.335-.75.75-.75z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4Y; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-install",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4X = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionLaunch {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12.96 3.968c2.485-2.485 6.36-3.125 9.88-2.808.317 3.517-.322 7.393-2.808 9.879-.882.882-1.915 1.785-2.953 2.632l-.52.42.241 1.538a5.225 5.225 0 01-1.538 4.585l-.18.166-3.026 2.663a.75.75 0 01-1.17-.235l-.04-.1-1.596-4.977-.886.379-2.475-2.475.38-.886-4.978-1.596a.75.75 0 01-.398-1.123l.064-.086L3.62 8.919a5.224 5.224 0 014.508-1.75l.243.032 1.538.24c.965-1.209 2.022-2.443 3.051-3.473zM4.814 16.571l.044-.019.009.12.03.234.037.218.057.262c.08.331.207.745.409 1.214.469.202.883.329 1.213.408l.263.057.217.038.286.034.068.004-.076.17-.1.19-.09.157-.113.176-.134.189-.158.2c-.733.88-2.14 1.924-4.569 1.57-.395-2.71.949-4.148 1.866-4.797l.183-.124.166-.101.146-.081.246-.12zm10.502-.71l-.111-.715-.75.563-.702.515-.842.605-1.08.752-.399.27-.469.313.962 2.996 2.164-1.905a3.731 3.731 0 001.256-3.17l-.029-.225zM8.14 8.683A3.731 3.731 0 004.9 9.745l-.155.165-1.905 2.165 2.996.962.689-1.022.769-1.098.791-1.092.451-.608.319-.422-.716-.112zM16.5 6a1.5 1.5 0 110 3 1.5 1.5 0 010-3z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12.96 3.968c2.485-2.485 6.36-3.125 9.88-2.808.317 3.517-.322 7.393-2.808 9.879-.882.882-1.915 1.785-2.953 2.632l-.52.42.241 1.538a5.225 5.225 0 01-1.538 4.585l-.18.166-3.026 2.663a.75.75 0 01-1.17-.235l-.04-.1-1.596-4.977-.886.379-2.475-2.475.38-.886-4.978-1.596a.75.75 0 01-.398-1.123l.064-.086L3.62 8.919a5.224 5.224 0 014.508-1.75l.243.032 1.538.24c.965-1.209 2.022-2.443 3.051-3.473zM4.814 16.571l.044-.019.009.12.03.234.037.218.057.262c.08.331.207.745.409 1.214.469.202.883.329 1.213.408l.263.057.217.038.286.034.068.004-.076.17-.1.19-.09.157-.113.176-.134.189-.158.2c-.733.88-2.14 1.924-4.569 1.57-.395-2.71.949-4.148 1.866-4.797l.183-.124.166-.101.146-.081.246-.12zm10.502-.71l-.111-.715-.75.563-.702.515-.842.605-1.08.752-.399.27-.469.313.962 2.996 2.164-1.905a3.731 3.731 0 001.256-3.17l-.029-.225zm6.117-12.982v-.312l-.488.005-.384.014a15.29 15.29 0 00-.207.012l-.442.035c-1.756.164-4.204.709-5.891 2.396a35.533 35.533 0 00-2.037 2.247l-.5.604-.487.606-.472.602-.672.879-.418.56-.573.782-.779 1.093-.34.491 3.364 3.364.684-.477.657-.468.756-.549.546-.404.572-.43.59-.454.602-.472.303-.243.605-.494.6-.503a33.947 33.947 0 001.949-1.784c1.687-1.688 2.235-4.138 2.399-5.894l.034-.44.02-.405.009-.36zM8.139 8.683A3.731 3.731 0 004.9 9.745l-.155.165-1.905 2.165 2.996.962.689-1.022.769-1.098.791-1.092.451-.608.319-.422-.716-.112zM16.5 6a1.5 1.5 0 110 3 1.5 1.5 0 010-3z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4X; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-launch",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4W = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionLightDarkMode {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("defs", null, hAsync("path", { id: "a", d: "M0 0h23.995v22.496H0z" })), hAsync("g", { transform: "translate(.005 .75)", fill: "none", "fill-rule": "evenodd" }, hAsync("mask", { id: "b", fill: "#fff" }, hAsync("use", { xlinkHref: "#a" })), hAsync("path", { d: "M12.671 17.339a6.241 6.241 0 01-1.423.169A6.248 6.248 0 1113.12 5.297a7.732 7.732 0 00-3.122 6.201 7.726 7.726 0 002.673 5.841zm5.075-12.09a6.248 6.248 0 00-6.248 6.249 6.248 6.248 0 1012.497 0 6.249 6.249 0 00-6.249-6.249zM4.708 16.727l-1.414 1.414a.749.749 0 101.061 1.06l1.414-1.414a.749.749 0 10-1.061-1.06zm6.54 2.269a.75.75 0 00-.75.75v2a.75.75 0 001.499 0v-2a.75.75 0 00-.749-.75zm-7.749-7.748a.75.75 0 00-.75-.75H.75a.75.75 0 000 1.5h1.999a.75.75 0 00.75-.75zM11.248 3.5a.75.75 0 00.749-.75v-2a.75.75 0 00-1.499 0v2c0 .414.336.75.75.75zm-6.54 2.269a.748.748 0 001.061 0 .749.749 0 000-1.06L4.355 3.295a.75.75 0 00-1.061 1.06l1.414 1.414z", fill: "#000", mask: "url(#b)" })))) : (hAsync("g", null, hAsync("path", { d: "M4.71 17.48l-1.414 1.413a.75.75 0 101.06 1.061l1.415-1.415a.749.749 0 10-1.061-1.06zm6.54 2.27a.75.75 0 00-.75.75v2a.75.75 0 001.5 0v-2a.75.75 0 00-.75-.75zm.195-3.01c-.065.002-.13.01-.195.01A4.756 4.756 0 016.5 12a4.756 4.756 0 014.75-4.75c.189 0 .374.013.556.035a7.833 7.833 0 011.327-1.246 6.25 6.25 0 10-1.883 12.21c.487 0 .959-.06 1.414-.167a7.815 7.815 0 01-1.22-1.343zM3.5 12a.75.75 0 00-.75-.75h-2a.75.75 0 000 1.5h2A.75.75 0 003.5 12zm7.749-7.75A.75.75 0 0012 3.5v-2a.75.75 0 00-1.5 0v2c0 .413.336.75.75.75zM17.75 6a6.25 6.25 0 100 12.499 6.25 6.25 0 000-12.5zm-13.04.52a.746.746 0 001.06 0 .749.749 0 000-1.06L4.357 4.043a.749.749 0 10-1.06 1.061L4.71 6.52z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4W; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-light-dark-mode",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4V = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionLink {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12.225 8.37a5.75 5.75 0 012.068 9.21l-.173.18-3.711 3.711a5.75 5.75 0 01-8.13-8.13L5.99 9.65a5.71 5.71 0 011.31-1 6.845 6.845 0 00-.105 1.155c0 .532.064 1.06.188 1.577l.082.308-3.245 3.24a3.255 3.255 0 004.449 4.732l.151-.132 3.535-3.535a3.26 3.26 0 00.135-4.456l-.259-.277a2.23 2.23 0 01-.118-2.748l.112-.144zm1.19-6.165a5.75 5.75 0 018.13 0 5.75 5.75 0 01.174 7.89l-.174.185-3.535 3.535a5.66 5.66 0 01-1.305 1c.02-.1.044-.211.059-.326l.011-.174a6.72 6.72 0 00-.163-2.194l-.082-.306 3.25-3.245a3.255 3.255 0 10-4.453-4.749l-3.682 3.684a3.26 3.26 0 00-.135 4.456l.259.278a2.25 2.25 0 01.016 2.896A5.64 5.64 0 019.88 13.87a5.745 5.745 0 01-.197-7.924l.197-.206 3.535-3.535z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M11.94 8.8c.665.255 1.29.645 1.82 1.18a5.245 5.245 0 01.18 7.235l-.18.19-3.535 3.535a5.215 5.215 0 01-3.71 1.535c-1.34 0-2.685-.51-3.71-1.535a5.26 5.26 0 01-.17-7.247l.17-.178L6.34 9.98c.27-.275.565-.505.875-.705a6.149 6.149 0 00.049 1.52l.056.325-3.455 3.455a3.76 3.76 0 000 5.305 3.76 3.76 0 005.15.146l.155-.146 3.535-3.535a3.755 3.755 0 000-5.305 3.857 3.857 0 00-.935-.68c-.05-.18-.08-.365-.08-.555 0-.355.095-.695.25-1.005zm1.825-6.24a5.26 5.26 0 017.425 0 5.242 5.242 0 01.162 7.246l-.172.179-3.535 3.535c-.27.275-.565.505-.875.705.04-.496.022-.989-.048-1.473l-.062-.362 3.465-3.465a3.76 3.76 0 000-5.305 3.736 3.736 0 00-2.65-1.095 3.74 3.74 0 00-2.478.933l-.172.162-3.535 3.535c-.71.705-1.1 1.65-1.1 2.65s.39 1.94 1.1 2.65c.28.28.595.505.93.68.065.25.1.505.075.77-.02.22-.085.5-.23.795a5.188 5.188 0 01-1.835-1.185 5.2 5.2 0 01-1.54-3.71c0-1.313.483-2.555 1.36-3.52l.18-.19 3.535-3.535z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4V; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-link",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4U = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionLogout {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M13.25 2.75v7.5h-6a1.5 1.5 0 00-.144 2.993l.144.007h6v7.5h-7.5a3 3 0 01-2.995-2.824l-.005-.176v-12a3 3 0 012.824-2.995l.176-.005h7.5zm3.25 4.58l6.75 4.42-6.75 4.42V12.5H7.25a.75.75 0 01-.102-1.493L7.25 11h9.25V7.33z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M14 2v5h-1.5V3.5H5.75a2.24 2.24 0 00-2.245 2.095L3.5 5.75v12a2.24 2.24 0 002.095 2.245L5.75 20h6.75v-3.5H14v5H5.75c-1.984 0-3.64-1.592-3.745-3.553L2 17.75v-12c0-1.984 1.592-3.64 3.553-3.745L5.75 2H14zm2.5 5.35l6.75 4.4-6.75 4.4V12.5H7.25c-.4 0-.75-.35-.75-.75 0-.367.294-.691.651-.743L7.25 11h9.25V7.35z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4U; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-logout",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4T = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionLoop {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M8.265 6.612h5.211v2.302l5.388-3.526-5.388-3.527v2.302H8.285A7.998 7.998 0 00.28 11.29a7.807 7.807 0 001.582 5.451 1.22 1.22 0 001.66.28c.269-.188.446-.48.49-.804a1.234 1.234 0 00-.24-.98A5.358 5.358 0 012.702 12a5.554 5.554 0 015.564-5.388zm13.886.647a1.224 1.224 0 00-1.656-.27 1.176 1.176 0 00-.49.804 1.24 1.24 0 00.24.98A5.358 5.358 0 0121.313 12a5.554 5.554 0 01-5.564 5.388h-5.211v-2.302L5.15 18.612l5.388 3.527v-2.302h5.191a7.998 7.998 0 008.004-7.127 7.807 7.807 0 00-1.583-5.45z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M20.945 7.3a.747.747 0 011.015.165 7.442 7.442 0 011.51 5.215c-.343 3.817-3.611 6.695-7.42 6.816l-.25.004h-5.3v2.85L5 18.75l5.5-3.6V18h5.32c3.295 0 6.175-2.695 6.18-5.99 0-1.36-.45-2.62-1.215-3.625-.265-.35-.2-.84.16-1.085zM13.5 1.65l5.5 3.6-5.5 3.6V6H8.18C4.885 6 2.005 8.695 2 11.99c0 1.36.45 2.62 1.215 3.625.265.35.2.84-.16 1.085a.747.747 0 01-1.015-.165A7.45 7.45 0 01.53 11.32c.343-3.817 3.611-6.695 7.42-6.816L8.2 4.5h5.3V1.65z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4T; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-loop",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4S = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionMenu {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M14.335 16.055a1.25 1.25 0 01.128 2.494l-.128.006H4.75a1.25 1.25 0 01-.128-2.494l.128-.006h9.585zM19.25 10.5a1.25 1.25 0 01.128 2.494L19.25 13H4.75a1.25 1.25 0 01-.128-2.494l.128-.006h14.5zm0-5.5a1.25 1.25 0 01.128 2.494l-.128.006H4.75a1.25 1.25 0 01-.128-2.494L4.75 5h14.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M14.75 16.5c.4 0 .75.35.75.75a.772.772 0 01-.651.743L14.75 18H4.25c-.4 0-.75-.35-.75-.75 0-.367.294-.691.651-.743l.099-.007h10.5zm5-5.5c.4 0 .75.35.75.75a.772.772 0 01-.651.743l-.099.007H4.25c-.4 0-.75-.35-.75-.75 0-.367.294-.691.651-.743L4.25 11h15.5zm0-5.5c.4 0 .75.35.75.75a.772.772 0 01-.651.743L19.75 7H4.25c-.4 0-.75-.35-.75-.75 0-.367.294-.691.651-.743L4.25 5.5h15.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4S; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-menu",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4R = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionMicrophone {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M18.75 9.5a.75.75 0 01.743.648l.007.102V12a7.5 7.5 0 01-6.501 7.43l-.249.03v4.04h-1.5v-4.04a7.5 7.5 0 01-6.746-7.21L4.5 12v-1.75a.75.75 0 011.493-.102L6 10.25V12a6 6 0 0011.996.225L18 12v-1.75a.75.75 0 01.75-.75zM12 .5l.212.005a4.5 4.5 0 014.283 4.277L16.5 5v7a4.5 4.5 0 01-4.288 4.495L12 16.5l-.212-.005a4.5 4.5 0 01-4.283-4.277L7.5 12V5A4.5 4.5 0 0111.788.505L12 .5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M18.75 9.5c.367 0 .691.294.743.651l.007.099V12c0 3.817-2.826 6.964-6.509 7.424l-.241.026v4.05h-1.5v-4.05c-3.72-.343-6.624-3.415-6.746-7.202L4.5 12v-1.75c0-.4.35-.75.75-.75.367 0 .691.294.743.651L6 10.25V12c0 3.3 2.7 6 6 6 3.225 0 5.877-2.579 5.996-5.776L18 12v-1.75c0-.4.35-.75.75-.75zM12 .5a4.48 4.48 0 014.495 4.287L16.5 5v7c0 2.5-2 4.5-4.5 4.5a4.48 4.48 0 01-4.495-4.287L7.5 12V5c0-2.5 2-4.5 4.5-4.5zM12 2a3.01 3.01 0 00-2.995 2.824L9 5v7c0 1.65 1.35 3 3 3a3.01 3.01 0 002.995-2.824L15 12V5c0-1.65-1.35-3-3-3z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4R; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-microphone",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4Q = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionMinimizeScreen {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M11.245 12.755l-1.76 8.43-2.45-2.45L2.88 22.89a1.252 1.252 0 01-1.868-1.66l.098-.11 4.155-4.155-2.45-2.465 8.43-1.745zM22.005.743c.332 0 .65.132.885.367a1.25 1.25 0 01.096 1.68l-.096.105-4.155 4.155 2.45 2.45-8.43 1.745 1.745-8.43 2.465 2.45L21.12 1.11a1.25 1.25 0 01.885-.367z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M11.245 12.755l-1.76 8.43L6.68 18.38l-4.155 4.155a.754.754 0 01-.53.22.754.754 0 01-.53-.22.744.744 0 01-.073-.975l.073-.085L5.62 17.32l-2.805-2.805 8.43-1.76zm10.23-11.29a.745.745 0 011.06 0c.268.264.293.68.073.975l-.073.085L18.38 6.68l2.805 2.805-8.43 1.76 1.76-8.43L17.32 5.62l4.155-4.155z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4Q; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-minimize-screen",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4P = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionMinus {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M19.5 10.75h-15a1.25 1.25 0 000 2.5h15a1.25 1.25 0 100-2.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M19.5 12.75h-15a.75.75 0 110-1.5h15a.75.75 0 110 1.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4P; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-minus",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4O = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionMinusCircle {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 1C5.925 1 1 5.925 1 12s4.925 11 11 11 11-4.925 11-11A11 11 0 0012 1zm5 11.75H7a.75.75 0 110-1.5h10a.75.75 0 110 1.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 1c6.075 0 11 4.925 11 11s-4.925 11-11 11S1 18.075 1 12 5.925 1 12 1zm0 1.5c-5.239 0-9.5 4.261-9.5 9.5 0 5.238 4.261 9.5 9.5 9.5 5.238 0 9.5-4.262 9.5-9.5 0-5.239-4.262-9.5-9.5-9.5zm5 8.75a.75.75 0 01.102 1.493L17 12.75H7a.75.75 0 01-.102-1.493L7 11.25h10z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4O; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-minus-circle",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4N = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionMore {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 9.5a2.5 2.5 0 110 5 2.5 2.5 0 010-5zm7 0a2.5 2.5 0 110 5 2.5 2.5 0 010-5zm-14 0a2.5 2.5 0 110 5 2.5 2.5 0 010-5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 10.5a1.5 1.5 0 110 3 1.5 1.5 0 010-3zm7 0a1.5 1.5 0 110 3 1.5 1.5 0 010-3zm-14 0a1.5 1.5 0 110 3 1.5 1.5 0 010-3z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4N; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-more",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4M = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionMove {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M23.5 12L18 8.4v2.35h-4.75V6h2.35L12 .5 8.4 6h2.35v4.75H6V8.4L.5 12 6 15.6v-2.35h4.75V18H8.4l3.6 5.5 3.6-5.5h-2.35v-4.75H18v2.35z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M23.5 12L18 8.4v2.85h-5.25V6h2.85L12 .5 8.4 6h2.85v5.25H6V8.4L.5 12 6 15.6v-2.85h5.25V18H8.4l3.6 5.5 3.6-5.5h-2.85v-5.25H18v2.85z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4M; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-move",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4L = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionMute {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M4.76 3.349c.2 0 .39.08.53.221l15.74 15.74a.745.745 0 010 1.06.75.75 0 01-1.06 0L4.23 4.63a.755.755 0 010-1.06.745.745 0 01.53-.221zM5.87 8.39L16 18.5v2h-2l-4.5-4H8a3 3 0 01-3-3v-3a2.97 2.97 0 01.87-2.11zM16 3.5v8.655l-5.525-5.52L14 3.5h2z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M4.23 3.57a.744.744 0 01.975-.073l.085.073 15.74 15.74a.745.745 0 010 1.06.754.754 0 01-.53.22.755.755 0 01-.437-.141l-.093-.079L4.23 4.63a.75.75 0 010-1.06zm1.64 4.82l1.06 1.06c-.232.236-.387.55-.422.898L6.5 10.5v3c0 .776.598 1.42 1.356 1.493L8 15h2.07l4.43 3.94v-1.92l1.5 1.5v1.98h-2l-4.5-4H8a3.003 3.003 0 01-2.995-2.824L5 13.5v-3c0-.756.277-1.445.74-1.97l.13-.14zM16 3.5v8.655l-1.5-1.5V5.06l-2.96 2.635-1.065-1.06L14 3.5h2z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4L; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-mute",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4K = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionNotification {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M22 16.95c-2.35-2.35-2.7-4.65-2.8-5.8L19 9.4c-.25-3.15-2.55-5.6-5.5-6.25V3c0-.85-.65-1.5-1.5-1.5s-1.5.65-1.5 1.5v.15C7.55 3.8 5.25 6.25 5 9.4l-.15 1.75c-.15 1.1-.5 3.4-2.85 5.8v3.55h7.05C9.3 21.9 10.5 23 12 23c1.5 0 2.7-1.1 2.95-2.5H22v-3.55z" }))) : (hAsync("g", null, hAsync("path", { d: "M22 16.95c-2.35-2.35-2.7-4.65-2.8-5.8L19 9.4c-.25-3.15-2.55-5.6-5.5-6.25V3c0-.85-.65-1.5-1.5-1.5s-1.5.65-1.5 1.5v.15C7.55 3.8 5.25 6.25 5 9.4l-.15 1.75c-.15 1.1-.5 3.4-2.85 5.8v3.55h7.05C9.3 21.9 10.5 23 12 23c1.5 0 2.7-1.1 2.95-2.5H22v-3.55zM20.5 19h-17v-1.45c1.6-1.7 2.6-3.9 2.8-6.25l.15-1.75C6.75 6.65 9.1 4.5 12 4.5s5.25 2.15 5.5 5.05l.15 1.75c.2 2.35 1.2 4.55 2.8 6.25V19h.05z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4K; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-notification",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4J = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionPause {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 1C5.925 1 1 5.925 1 12s4.925 11 11 11 11-4.925 11-11A11 11 0 0012 1zm-1 15H9V8h2v8zm4 0h-2V8h2v8z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 1c6.075 0 11 4.925 11 11s-4.925 11-11 11S1 18.075 1 12 5.925 1 12 1zm0 1.5c-5.24 0-9.5 4.26-9.5 9.5s4.26 9.5 9.5 9.5 9.5-4.26 9.5-9.5-4.26-9.5-9.5-9.5zM11 8v8H9V8h2zm4 0v8h-2V8h2z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4J; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-pause",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4I = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionPauseNb {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M11 5v14H6V5h5zm7 0v14h-5V5h5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M11 5v14H6V5h5zm7 0v14h-5V5h5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4I; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-pause-nb",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4H = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionPin {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M13.065 6.11L18 11.06l-3.5 3.5a7 7 0 01-1.6 6.555l-.19.2-.355.355-4.42-4.42-5.83 5.815a.755.755 0 01-1.135-.971L1.04 22l5.835-5.81-4.42-4.42.355-.355a7 7 0 016.486-1.871l.269.066 3.5-3.5zm1.536-4.646a2.25 2.25 0 012.048.465l.126.116L22.08 7.35a2.245 2.245 0 01.134 3.034l-.134.146-.146.134a2.25 2.25 0 01-2.893 0l-.146-.134-5.3-5.3a2.25 2.25 0 011.006-3.766z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M22.08 7.35l-5.305-5.305a2.242 2.242 0 00-3.18 0c-.88.88-.88 2.305 0 3.18l.175.175-4.205 4.205a6.988 6.988 0 00-1.815-.24c-1.79 0-3.575.68-4.94 2.045l-.355.355 4.42 4.42L1.04 22.02a.745.745 0 000 1.06c.145.145.34.22.53.22s.385-.075.53-.22l5.835-5.83 4.42 4.42.355-.355a6.984 6.984 0 001.805-6.755l4.205-4.205.175.175a2.242 2.242 0 003.18 0 2.24 2.24 0 00.005-3.18zm-9.235 6.76l.225.835a5.535 5.535 0 01-.775 4.535l-7.65-7.65a5.446 5.446 0 013.11-.96c.485 0 .965.065 1.43.185l.835.225 4.815-4.815 2.83 2.83-4.82 4.815zm8.175-4.64a.752.752 0 01-1.06 0l-5.305-5.305a.754.754 0 010-1.06.752.752 0 011.06 0L21.02 8.41a.752.752 0 010 1.06z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4H; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-pin",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4G = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionPlay {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 1C5.925 1 1 5.925 1 12s4.925 11 11 11 11-4.925 11-11A11 11 0 0012 1zM9.5 16.5v-9l6.875 4.5L9.5 16.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 1c6.075 0 11 4.925 11 11s-4.925 11-11 11S1 18.075 1 12 5.925 1 12 1zm0 1.5c-5.24 0-9.5 4.26-9.5 9.5s4.26 9.5 9.5 9.5 9.5-4.26 9.5-9.5-4.26-9.5-9.5-9.5zm-2.5 5l6.875 4.5L9.5 16.5v-9z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4G; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-play",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4F = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionPlayNb {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M6 20l14-8L6 4z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M6 20l14-8L6 4z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4F; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-play-nb",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4E = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionPopUpWindow {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M23.5 10v9a3 3 0 01-2.824 2.995L20.5 22h-9a3 3 0 01-2.995-2.824L8.5 19v-9h15zM22 13H10v6a1.5 1.5 0 001.356 1.493l.144.007h9a1.5 1.5 0 001.493-1.356L22 19v-6zM18.5 2v6.5H7v9H3.5a3 3 0 01-2.995-2.824L.5 14.5V2h18zm-16 .875a.625.625 0 100 1.25.625.625 0 000-1.25zm2 0a.625.625 0 100 1.25.625.625 0 000-1.25zm2 0a.625.625 0 100 1.25.625.625 0 000-1.25z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M23.5 10v9a3.01 3.01 0 01-2.824 2.995L20.5 22h-9a3.01 3.01 0 01-2.995-2.824L8.5 19v-9h15zM22 13H10v6c0 .8.576 1.423 1.352 1.493l.148.007h9c.8 0 1.423-.576 1.493-1.352L22 19v-6zM18.5 2v6.5H17V5H2v9.5c0 .8.576 1.423 1.352 1.493L3.5 16H7v1.5H3.5a3.01 3.01 0 01-2.995-2.824L.5 14.5V2h18zm-12 .9c-.35 0-.6.25-.6.6s.25.65.6.65.6-.35.6-.65c0-.3-.25-.6-.6-.6zm-2 0c-.35 0-.6.25-.6.6s.25.65.6.65.6-.35.6-.65c0-.3-.25-.6-.6-.6zm-2 0c-.35 0-.6.25-.6.6s.25.65.6.65.6-.35.6-.65c0-.3-.25-.6-.6-.6z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4E; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-pop-up-window",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4D = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionPower {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M9.286 4.4v2.648A7.01 7.01 0 005 13.5c0 3.86 3.14 7 7 7s7-3.14 7-7a7.004 7.004 0 00-3.977-6.31l-.237-.108V4.419C18.67 5.612 21.5 9.23 21.5 13.499c0 5.239-4.262 9.5-9.5 9.5s-9.5-4.261-9.5-9.5c0-4.199 2.741-7.766 6.526-9.017l.26-.082zm2.75-2.9c.647 0 1.18.492 1.244 1.122l.006.128v9.5a1.25 1.25 0 01-2.493.128l-.007-.128v-9.5c0-.69.56-1.25 1.25-1.25z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M14.25 4.796C18.125 5.8 21 9.315 21 13.5c0 4.963-4.038 9-9 9-4.963 0-9-4.037-9-9 0-4.092 2.75-7.544 6.493-8.633l.257-.071v1.55C6.71 7.304 4.5 10.148 4.5 13.5c0 4.136 3.364 7.5 7.5 7.5 4.135 0 7.5-3.364 7.5-7.5 0-3.261-2.092-6.042-5.005-7.072l-.245-.082v-1.55zM12 1.5a.75.75 0 01.743.648l.007.102v10.5a.75.75 0 01-1.493.102l-.007-.102V2.25A.75.75 0 0112 1.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4D; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-power",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4C = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionPreviousNb {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12.525 12.7L22 19V5l-9.475 6.3V5L2 12l10.525 7z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12.525 12.7L22 19V5l-9.475 6.3V5L2 12l10.525 7z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4C; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-previous-nb",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4B = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionPrint {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M18.5 13.5V22h-13v-8.5h13zM17 15H7v5.5h10V15zm1.5-13v4h5v9.5a3 3 0 01-2.824 2.995l-.176.005H20V12H4v6.5h-.5a3 3 0 01-2.995-2.824L.5 15.5V6h5V2h13zm1 7a1 1 0 100 2 1 1 0 000-2zM17 3.5H7V6h10V3.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M18.5 13.5V22h-13v-8.5h13zM17 15H7v5.5h10V15zm1.5-13v4h5v9.5a3.003 3.003 0 01-2.824 2.995l-.176.005H20V17h.5c.776 0 1.42-.598 1.493-1.356L22 15.5v-8H2v8c0 .776.598 1.42 1.356 1.493L3.5 17H4v1.5h-.5a3.003 3.003 0 01-2.995-2.824L.5 15.5V6h5V2h13zm1 7a1 1 0 110 2 1 1 0 010-2zM17 3.5H7V6h10V3.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4B; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-print",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4A = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionPublish {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 9.125l3.275 5H12.73v7.625a.75.75 0 01-1.493.102l-.007-.102v-7.625h-2.5l3.27-5zM21 3.5V16a3 3 0 01-2.698 2.987l-.177.013H14.25v-3.375h1.035a1.5 1.5 0 001.337-2.178l-.082-.142-3.275-5a1.5 1.5 0 00-2.411-.12l-.089.12-3.275 5a1.5 1.5 0 001.11 2.313l.15.007h1V19H6a3 3 0 01-2.995-2.824L3 16V3.5h18zM5 4.375a.625.625 0 100 1.25.625.625 0 000-1.25zm2 0a.625.625 0 100 1.25.625.625 0 000-1.25zm2 0a.625.625 0 100 1.25.625.625 0 000-1.25z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 8.25L16.42 15h-3.67v6.75a.75.75 0 01-1.493.102l-.007-.102V15H7.582l4.419-6.75zm9-4.75V16a3 3 0 01-2.824 2.995L18 19h-2v-1.5h2c.778 0 1.42-.596 1.493-1.356L19.5 16V6.5h-15V16c0 .778.596 1.42 1.356 1.493L6 17.5h2V19H6a3 3 0 01-2.995-2.824L3 16V3.5h18zM5 4.375a.625.625 0 100 1.25.625.625 0 000-1.25zm2 0a.625.625 0 100 1.25.625.625 0 000-1.25zm2 0a.625.625 0 100 1.25.625.625 0 000-1.25z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4A; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-publish",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4z = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionRandom {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M2.674 4.163A6.147 6.147 0 017.45 6.451l.161.21 6.858 9.257c.65.867 1.648 1.4 2.722 1.463l.216.007h.715v-2.302l5.388 3.526-5.388 3.527v-2.302h-.715a6.147 6.147 0 01-4.775-2.288l-.162-.21-6.857-9.257A3.678 3.678 0 002.89 6.619l-.216-.007h-.98A1.224 1.224 0 011.57 4.17l.126-.007h.98zm5.246 8.66l1.528 2.057-1.837 2.478a6.147 6.147 0 01-4.658 2.473l-.264.006h-.98a1.224 1.224 0 01-.125-2.443l.125-.006h.98a3.684 3.684 0 002.804-1.3l.135-.17 2.292-3.095zM18.122 1.86l5.388 3.527-5.388 3.526V6.612h-.73a3.681 3.681 0 00-2.803 1.3l-.135.17-2.253 3.095-1.528-2.057 1.836-2.478a6.147 6.147 0 014.636-2.472l.262-.007h.715V1.861z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M2.23 4.5c1.729 0 3.376.79 4.466 2.125l.159.205 7 9.45a4.28 4.28 0 003.18 1.713l.235.007H18v-2.85l5.5 3.6-5.5 3.6V19.5h-.735a5.768 5.768 0 01-4.461-2.125l-.159-.205-7-9.45a4.28 4.28 0 00-3.18-1.713L2.23 6h-.98a.749.749 0 01-.102-1.493L1.25 4.5h.98zm5.65 8.76l.935 1.26-1.965 2.65a5.768 5.768 0 01-4.361 2.324l-.259.006h-.98a.749.749 0 01-.102-1.493L1.25 18h.98c1.261 0 2.47-.571 3.27-1.535l.145-.185 2.235-3.02zM18 1.65l5.5 3.6-5.5 3.6V6h-.73a4.277 4.277 0 00-3.269 1.535l-.146.185-2.235 3.02-.935-1.26 1.965-2.65a5.768 5.768 0 014.361-2.324l.259-.006H18V1.65z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4z; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-random",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4y = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionRecordNb {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("circle", { cx: "12", cy: "12", r: "7", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("circle", { cx: "12", cy: "12", r: "7", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4y; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-record-nb",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4x = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionRefresh {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M14.191 1.677l.119.013A10.635 10.635 0 0122.565 12a10.615 10.615 0 01-3.804 8.123l-.261.212 1.39 2.165h-6.675l2.68-6.13 1.42 2.175a8.435 8.435 0 00-3.47-14.78 1.065 1.065 0 01.346-2.088zM10.785 1.5l-2.68 6.13L6.68 5.45a8.44 8.44 0 003.19 14.716l.285.069h-.02a1.065 1.065 0 01-.235 2.1 1.245 1.245 0 01-.23-.025A10.56 10.56 0 015.255 3.861l.245-.196L4.11 1.5h6.675z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M13.35 2.55c.1-.4.5-.65.9-.55 4.65 1.05 8 5.25 8 10 0 3.041-1.398 5.943-3.745 7.895l-.255.205 1.6 2.4H13.2l2.7-6.15 1.6 2.45c2-1.65 3.25-4.15 3.25-6.8 0-4.05-2.9-7.65-6.85-8.55-.4-.1-.65-.5-.55-.9zM10.8 1.5L8.1 7.65 6.5 5.2c-2 1.6-3.25 4.1-3.25 6.8 0 4.05 2.9 7.65 6.85 8.55A.745.745 0 119.75 22c-4.65-1.05-8-5.25-8-10 0-3.09 1.398-5.946 3.7-7.895L5.7 3.9 4.1 1.5h6.7z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4x; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-refresh",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4w = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionRemove {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M16 .5v3h5.5c.4 0 .75.35.75.75a.772.772 0 01-.651.743L21.5 5h-1.05l-.8 15.65c-.096 1.54-1.305 2.757-2.824 2.845l-.176.005H7.4c-1.54 0-2.803-1.16-2.984-2.674L4.4 20.65 3.55 5H2.5c-.4 0-.75-.35-.75-.75 0-.367.294-.691.651-.743L2.5 3.5H8v-3h8zm-4 7.25c.367 0 .691.294.743.651l.007.099v10c0 .4-.35.75-.75.75a.772.772 0 01-.743-.651l-.007-.099v-10c0-.4.35-.75.75-.75zm3.5 0c.367 0 .691.294.743.651l.007.099v10c0 .4-.35.75-.75.75a.772.772 0 01-.743-.651l-.007-.099v-10c0-.4.35-.75.75-.75zm-7 0c.367 0 .691.294.743.651l.007.099v10c0 .4-.35.75-.75.75a.772.772 0 01-.743-.651L7.75 18.5v-10c0-.4.35-.75.75-.75zm6-5.75h-5v1.5h5V2z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M16 .5v3h5.5c.4 0 .75.35.75.75a.772.772 0 01-.651.743L21.5 5h-1.05l-.8 15.65c-.096 1.54-1.305 2.757-2.824 2.845l-.176.005H7.4c-1.54 0-2.803-1.16-2.984-2.674L4.4 20.65 3.55 5H2.5c-.4 0-.75-.35-.75-.75 0-.367.294-.691.651-.743L2.5 3.5H8v-3h8zM18.95 5H5.05l.85 15.6a1.482 1.482 0 001.36 1.394L7.4 22h9.2c.753 0 1.373-.531 1.485-1.261l.015-.139.85-15.6zM12 7.75c.367 0 .691.294.743.651l.007.099v10c0 .4-.35.75-.75.75a.772.772 0 01-.743-.651l-.007-.099v-10c0-.4.35-.75.75-.75zm3.5 0c.367 0 .691.294.743.651l.007.099v10c0 .4-.35.75-.75.75a.772.772 0 01-.743-.651l-.007-.099v-10c0-.4.35-.75.75-.75zm-7 0c.367 0 .691.294.743.651l.007.099v10c0 .4-.35.75-.75.75a.772.772 0 01-.743-.651L7.75 18.5v-10c0-.4.35-.75.75-.75zm6-5.75h-5v1.5h5V2z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4w; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-remove",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4v = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionReply {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12.483 6.263H10.5V3.352l-6.75 4.4 6.75 4.4v-2.89h1.982c3.033 0 5.5 2.469 5.5 5.5v4.288a1.5 1.5 0 003 0v-4.287c0-4.687-3.813-8.5-8.5-8.5", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M10.5 8.513h2.239a6.257 6.257 0 016.25 6.25v4.987a.75.75 0 001.5 0v-4.987c0-4.273-3.477-7.75-7.75-7.75H10.5V3.352l-6.75 4.4 6.75 4.4v-3.64z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4v; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-reply",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4u = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionReplyAll {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M15.25 6.514H13.5V3.352l-6.75 4.4L13.5 12V9.014h1.75c3.17 0 5.75 2.579 5.75 5.75v4.486a1.25 1.25 0 102.5 0v-4.486c0-4.55-3.7-8.25-8.25-8.25zM7.5 5.473V3.352l-6.75 4.4 6.75 4.4v-2.12l-3.497-2.28L7.5 5.472z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M4.003 7.752l1.928-1.257 1.57-1.022V3.352l-6.75 4.4 6.75 4.399v-2.12L5.93 9.009 4.003 7.752zM15.75 7H13.5V3.352l-6.75 4.4 6.75 4.399V8.5h2.25A6.257 6.257 0 0122 14.75v4.987a.75.75 0 001.5 0V14.75c0-4.273-3.476-7.75-7.75-7.75z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4u; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-reply-all",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4t = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionReplyForward {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M4.72 7.506H15V10.5l6.87-4.25L15 2v3.006H4.72a1.25 1.25 0 000 2.5m7.114 4.995H10.5V9.5l-6.87 4.25L10.5 18v-3h1.334a6.167 6.167 0 016.159 6.16 1.25 1.25 0 102.5 0c0-4.774-3.885-8.66-8.66-8.66", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M4.238 7H15v3.5l6.871-4.25L15.001 2v3.5H4.237a.75.75 0 100 1.5m8.14 6H10.5V9.5l-6.87 4.25L10.5 18v-3.5h1.878a6.666 6.666 0 016.66 6.659.75.75 0 101.5 0c0-4.499-3.66-8.159-8.16-8.159", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4t; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-reply-forward",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4s = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionRestart {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M19.67 3.43A11.5 11.5 0 00.56 10.81a11.575 11.575 0 004.27 10.16L3.5 23h6.675L7.5 16.87l-1.3 2A8.97 8.97 0 016 5.29a9 9 0 117.5 15.57 1.24 1.24 0 00-1 1.23 1.25 1.25 0 001.255 1.255c.07.005.14.005.21 0A11.5 11.5 0 0019.67 3.43z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M10.745 1.07c-5.09.565-9.175 4.695-9.69 9.79-.395 3.915 1.275 7.46 4.04 9.695l-1.59 2.435 6.675-.015-2.68-6.11-1.575 2.415A9.454 9.454 0 012.5 12c0-5.6 4.865-10.08 10.59-9.44 4.455.5 8.01 4.175 8.375 8.645.41 5.035-3.135 9.34-7.865 10.15-.35.06-.6.375-.6.735 0 .465.42.825.88.745C19.06 21.94 23 17.435 23 12 23 5.51 17.385.335 10.745 1.07z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4s; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-restart",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4r = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionSearch {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M10 4.125A5.88 5.88 0 0115.875 10a5.8 5.8 0 01-1.13 3.445l-.545.755-.755.545A5.8 5.8 0 0110 15.875a5.875 5.875 0 010-11.75M10 2a8 8 0 104.7 14.465l4.915 4.92c.49.487 1.28.487 1.77 0a1.26 1.26 0 000-1.77l-4.92-4.915A8 8 0 0010 2z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M21.4 19.6l-4.9-4.9a8.02 8.02 0 001.55-4.7c0-4.4-3.6-8-8-8S2 5.6 2 10s3.6 8 8 8c1.75 0 3.4-.55 4.7-1.55l4.9 4.9c.5.5 1.3.5 1.75 0 .5-.45.5-1.25.05-1.75zM3.5 10c0-3.6 2.9-6.5 6.5-6.5s6.5 2.9 6.5 6.5-2.9 6.5-6.5 6.5-6.5-2.9-6.5-6.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4r; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-search",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4q = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionSend {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M22.885 2.515L10.1 16.953l-.01-.001-1.513-.541 12.25-13.833-19.405 9.91a.749.749 0 00.084 1.372l7.03 2.564V21.1a.75.75 0 001.36.435l2.636-3.7 5.917 2.079a.761.761 0 00.616-.053.755.755 0 00.366-.5l3.476-16.474a.746.746 0 00-.02-.373", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M21.83 2.07a.758.758 0 011.101.711l-.011.109-3.48 16.48c-.05.21-.18.39-.37.5a.927.927 0 01-.52.076l-.1-.026-5.92-2.08-2.64 3.7a.74.74 0 01-.61.31c-.08 0-.15-.02-.23-.04a.727.727 0 01-.512-.602L8.53 21.1v-4.68L1.5 13.86a.748.748 0 01-.49-.66.77.77 0 01.317-.654l.093-.056L21.83 2.07zm-1.04 3.6l-10.12 9.92 7.47 2.63 2.65-12.55zm-1.52-.62L3.63 13.04l5.46 1.99 10.18-9.98z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4q; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-send",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4p = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionShare {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M10.955 5a8.875 8.875 0 00-3.95 7.079L7 12.385v2.325a2.25 2.25 0 004.495.154l.005-.154v-2.325a4.39 4.39 0 013.291-4.247L15 8.09v4.855l5.5-3.6V18a3 3 0 01-2.824 2.995L17.5 21h-12a3 3 0 01-2.995-2.824L2.5 18V5h8.455zM16.5 1.33l6.75 4.42-6.75 4.42V6.5h-.61a5.895 5.895 0 00-5.886 5.664l-.004.221v2.325a.75.75 0 01-1.493.102L8.5 14.71v-2.325a7.395 7.395 0 017.146-7.38L15.89 5h.61V1.33z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M10.966 5a8.99 8.99 0 00-1.465 1.22l-.26.28H4V18c0 .778.596 1.42 1.356 1.493l.144.007h12c.778 0 1.42-.596 1.493-1.356L19 18v-7.675l1.5-.983V18a3 3 0 01-2.824 2.995L17.5 21h-12a3 3 0 01-2.995-2.824L2.5 18V5h8.466zM16.5 1.332l6.75 4.418-6.75 4.418V6.5h-.613a5.895 5.895 0 00-5.883 5.667l-.004.22v2.322a.75.75 0 01-1.493.101l-.007-.1v-2.322c0-3.992 3.183-7.254 7.144-7.383L15.887 5h.613V1.332z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4p; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-share",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4o = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionShoppingCart {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M5.5 20a2 2 0 110 4 2 2 0 010-4zm15 0a2 2 0 110 4 2 2 0 010-4zM.06.455A.755.755 0 01.949.027l.096.033 2.27.975a2.984 2.984 0 011.42 1.275l.1.19h18.24l-.895 9.41a2.986 2.986 0 01-2.612 2.693l-.183.017-13.145.85.065.67c.07.727.637 1.286 1.35 1.353l.145.007h13.45a.749.749 0 01.102 1.493L21.25 19H7.8a2.98 2.98 0 01-2.964-2.538l-.021-.177L3.63 3.655a1.51 1.51 0 00-.771-1.175l-.134-.065-2.27-.975A.75.75 0 01.06.455z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M5.5 20a2 2 0 110 4 2 2 0 010-4zm15 0a2 2 0 110 4 2 2 0 010-4zM.06.455A.755.755 0 01.949.027l.096.033 2.27.975a2.984 2.984 0 011.42 1.275l.1.19h18.24l-.895 9.41a2.986 2.986 0 01-2.612 2.693l-.183.017-13.145.85.065.67c.07.727.637 1.286 1.35 1.353l.145.007h13.45a.749.749 0 01.102 1.493L21.25 19H7.8a2.98 2.98 0 01-2.964-2.538l-.021-.177L3.63 3.655a1.51 1.51 0 00-.771-1.175l-.134-.065-2.27-.975A.75.75 0 01.06.455zM21.43 4H5.17l.935 9.975 13.185-.85a1.495 1.495 0 001.376-1.22l.019-.135L21.43 4z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4o; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-shopping-cart",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4n = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionShowPassword {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 4c4.108 0 6.987 2.283 9.1 4.68l.364.425.35.423.334.421.476.62.726.981.35.45-.35.45-.726.981-.314.411-.327.419-.342.422c-.059.07-.117.142-.177.212l-.365.424C18.987 17.717 16.11 20 12 20c-4.108 0-6.987-2.283-9.1-4.68l-.364-.425-.35-.423-.334-.421-.476-.62-.726-.981L.3 12l.35-.45.726-.981.314-.411.327-.419.342-.422c.059-.07.117-.142.177-.212L2.9 8.68C5.013 6.283 7.89 4 12 4zm0 3c2.75 0 5 2.25 5 5s-2.25 5-5 5-5-2.25-5-5 2.25-5 5-5zm0 1.5c-1.95 0-3.5 1.55-3.5 3.5s1.55 3.5 3.5 3.5 3.5-1.55 3.5-3.5-1.55-3.5-3.5-3.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 4c4.108 0 6.987 2.283 9.1 4.68l.364.425.35.423.334.421.476.62.726.981.35.45-.35.45-.726.981-.314.411-.327.419-.342.422c-.059.07-.117.142-.177.212l-.365.424C18.987 17.717 16.11 20 12 20c-4.108 0-6.987-2.283-9.1-4.68l-.364-.425-.35-.423-.334-.421-.476-.62-.726-.981L.3 12l.35-.45.726-.981.314-.411.327-.419.342-.422c.059-.07.117-.142.177-.212L2.9 8.68C5.013 6.283 7.89 4 12 4zm0 1.5c-3.713 0-6.234 2.042-8.435 4.722l-.396.494-.391.506-.386.516L2.2 12l.578.778.39.506.397.494.404.48C6.076 16.698 8.512 18.5 12 18.5c3.488 0 5.924-1.802 8.03-4.242l.405-.48.396-.494.391-.506.386-.516L21.8 12l-.578-.778-.39-.506-.397-.494C18.234 7.542 15.713 5.5 12 5.5zM12 7c2.75 0 5 2.25 5 5s-2.25 5-5 5-5-2.25-5-5 2.25-5 5-5zm0 1.5c-1.95 0-3.5 1.55-3.5 3.5s1.55 3.5 3.5 3.5 3.5-1.55 3.5-3.5-1.55-3.5-3.5-3.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4n; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-show-password",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4m = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionSort {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M17.25 3.5c.647 0 1.18.492 1.244 1.122l.006.128V14h3.17l-4.42 6.75L12.83 14H16V4.75c0-.69.56-1.25 1.25-1.25zm-10.5-.25L11.17 10H8v9.25a1.25 1.25 0 01-2.494.128L5.5 19.25V10H2.33l4.42-6.75z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M17.25 4c.367 0 .691.294.743.651L18 4.75V14h3.65l-4.4 6.75-4.4-6.75h3.65V4.75c0-.4.35-.75.75-.75zm-10.5-.75l4.4 6.75H7.5v9.25c0 .4-.35.75-.75.75a.772.772 0 01-.743-.651L6 19.25V10H2.35l4.4-6.75z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4m; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-sort",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4l = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionSoundOn {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M13 3.5v17h-2l-4.5-4H5a3 3 0 01-2.995-2.824L2 13.5v-3a3 3 0 012.824-2.995L5 7.5h1.5l4.5-4h2zm6.7.8c4.178 4.178 4.251 10.906.22 15.174l-.22.226-1.06-1.06a9.39 9.39 0 00.225-13.047l-.225-.233L19.7 4.3zM16 8.025l1.035-1.06.025.025a7.12 7.12 0 01.206 9.855l-.206.215L16 16a5.625 5.625 0 00.193-7.773L16 8.025z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M13 3.5v17h-2l-4.5-4H5a3.003 3.003 0 01-2.995-2.824L2 13.5v-3a3.003 3.003 0 012.824-2.995L5 7.5h1.5l4.5-4h2zm6.7.8a10.8 10.8 0 013.19 7.7c0 2.794-1.041 5.426-2.947 7.45l-.243.25-1.06-1.06A9.322 9.322 0 0021.39 12c0-2.4-.892-4.66-2.523-6.405l-.227-.235L19.7 4.3zm-8.2.76L7.07 9H5c-.776 0-1.42.598-1.493 1.356L3.5 10.5v3c0 .776.598 1.42 1.356 1.493L5 15h2.07l4.43 3.94V5.06zm5.535 1.905A7.068 7.068 0 0119.12 12a7.063 7.063 0 01-1.878 4.819l-.207.216-1.06-1.06A5.59 5.59 0 0017.62 12c0-1.41-.514-2.738-1.452-3.772l-.193-.203 1.06-1.06z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4l; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-sound-on",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4k = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionStar {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M22.613 9.215a1.713 1.713 0 00-1.51-1.184l-5.451-.399-2.064-5.061a1.713 1.713 0 00-1.592-1.07c-.703 0-1.327.42-1.593 1.07L8.34 7.633l-5.452.398c-.7.052-1.292.516-1.51 1.184a1.712 1.712 0 00.526 1.845l4.176 3.527-1.304 5.308a1.715 1.715 0 00.658 1.802c.568.413 1.321.44 1.918.07l4.644-2.881 4.646 2.881a1.716 1.716 0 002.575-1.871l-1.305-5.309 4.176-3.527a1.714 1.714 0 00.526-1.845z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M22.613 9.215a1.713 1.713 0 00-1.51-1.184l-5.451-.399-2.064-5.061a1.713 1.713 0 00-1.592-1.07c-.703 0-1.327.42-1.593 1.07L8.34 7.633l-5.452.398c-.7.052-1.292.516-1.51 1.184a1.712 1.712 0 00.526 1.845l4.176 3.527-1.304 5.308a1.715 1.715 0 00.658 1.802c.568.413 1.321.44 1.918.07l4.644-2.881 4.646 2.881a1.716 1.716 0 002.575-1.871l-1.305-5.309 4.176-3.527a1.714 1.714 0 00.526-1.845zm-1.494.699l-4.886 4.127 1.527 6.212c.03.119-.03.19-.084.23a.203.203 0 01-.244.009l-5.436-3.372-5.436 3.372a.206.206 0 01-.245-.009.206.206 0 01-.084-.23l1.527-6.211-4.886-4.128a.205.205 0 01-.067-.235.206.206 0 01.192-.151l6.38-.468 2.416-5.923a.205.205 0 01.203-.136c.067 0 .156.024.203.137l2.416 5.922 6.38.468a.206.206 0 01.192.151.206.206 0 01-.068.235z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4k; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-star",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4j = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionStreamOn {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M1.75 18a1.25 1.25 0 110 2.5 1.25 1.25 0 010-2.5zm0-3.5a4.755 4.755 0 014.75 4.75 4.895 4.895 0 01-.11 1.004l-.06.246H4.75a3.25 3.25 0 00-4.057-4.323L.5 16.25v-1.58c.408-.11.828-.167 1.25-.17zm0-3.5A8.26 8.26 0 0110 19.25c-.005.314-.03.628-.071.94l-.049.31h-1.5c.078-.412.118-.83.12-1.25a6.76 6.76 0 00-6.75-6.75 6.88 6.88 0 00-.94.057l-.31.048v-1.5c.414-.065.831-.1 1.25-.105zM20.5 3.5a3 3 0 012.995 2.824l.005.176v11a3 3 0 01-2.824 2.995l-.176.005h-9.09a9.37 9.37 0 00.09-1.25A9.75 9.75 0 001.75 9.5a9.37 9.37 0 00-.835.041L.5 9.59V6.5a3 3 0 012.824-2.995L3.5 3.5h17z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M1.75 11C6.3 11 10 14.7 10 19.25c0 .337-.028.647-.063.95l-.037.3H8.4c.05-.4.1-.8.1-1.25 0-3.7-3.05-6.75-6.75-6.75-.338 0-.647.028-.95.063l-.3.037v-1.5c.4-.05.8-.1 1.25-.1zm0 3.5c2.6 0 4.75 2.15 4.75 4.75a5.1 5.1 0 01-.096 1.01l-.054.24h-1.6c.15-.4.25-.8.25-1.25C5 17.45 3.55 16 1.75 16c-.375 0-.715.07-1.05.18l-.2.07v-1.6c.4-.1.8-.15 1.25-.15zm0 3.5a1.25 1.25 0 110 2.5 1.25 1.25 0 010-2.5zM20.5 3.5a3.01 3.01 0 012.995 2.824l.005.176v11a3.01 3.01 0 01-2.824 2.995l-.176.005h-9.1c.075-.425.1-.712.106-.938l.001-.206L11.5 19h9c.8 0 1.423-.576 1.493-1.352L22 17.5v-11c0-.8-.576-1.423-1.352-1.493L20.5 5h-17c-.753 0-1.417.576-1.493 1.352L2 6.5v3l-.136-.007-.232.001-.24.011-.306.024-.178.019L.5 9.6V6.5a3.01 3.01 0 012.824-2.995L3.5 3.5h17z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4j; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-stream-on",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4i = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionSuccess {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 1C5.925 1 1 5.925 1 12s4.925 11 11 11 11-4.925 11-11A11 11 0 0012 1zm5.53 8.295l-6.865 6.865-4.195-4.195a.75.75 0 111.06-1.06l3.135 3.135 5.805-5.805a.755.755 0 011.06 0 .745.745 0 010 1.06z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("g", { "fill-rule": "evenodd" }, hAsync("path", { d: "M12 1C5.925 1 1 5.925 1 12s4.925 11 11 11 11-4.925 11-11S18.075 1 12 1zm0 20.5c-5.239 0-9.5-4.262-9.5-9.5 0-5.239 4.261-9.5 9.5-9.5 5.238 0 9.5 4.261 9.5 9.5 0 5.238-4.262 9.5-9.5 9.5z" }), hAsync("path", { d: "M16.47 8.236l-5.803 5.803-3.137-3.136a.75.75 0 10-1.06 1.06l4.197 4.197 6.864-6.863a.75.75 0 10-1.061-1.061z" }))))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4i; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-success",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4h = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionThumbsDown {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M13.03 2l3.225.005c1.215 0 2.315.455 2.94 1.22.36.44.55.97.555 1.53.97.745 1.43 1.935 1.185 3.06.825.86 1.09 1.985.72 3.055.505.79.58 1.8.175 2.735a3.088 3.088 0 01-2.87 1.895h-3.625a.251.251 0 00-.25.285l.525 4.01c.155 1.19-.505 2.26-1.605 2.6-.225.07-.45.105-.675.105-.835 0-1.6-.475-2.025-1.31-.37-.735-.555-1.135-1.32-2.86-1.055-2.395-2.09-4.125-3.485-4.655V15.5H2V4h2.555c2.87 0 3.43-.62 3.615-.67.71-.4 2.385-1.33 4.845-1.33h.015zM5 5.5H3.5V14H5V5.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M21.655 10.87c.37-1.07.105-2.195-.72-3.055.245-1.125-.215-2.315-1.185-3.06a2.427 2.427 0 00-.555-1.53c-.625-.765-1.725-1.22-2.94-1.22L13.03 2h-.015c-2.46 0-4.135.93-4.845 1.33-.185.05-.745.67-3.615.67H2v11.5h4.5v-1.825c1.395.53 2.43 2.26 3.485 4.655.765 1.725.95 2.125 1.32 2.86.425.835 1.19 1.31 2.025 1.31.225 0 .45-.035.675-.105 1.1-.34 1.76-1.41 1.605-2.6l-.525-4.01a.251.251 0 01.25-.285h3.625a3.088 3.088 0 002.87-1.895c.405-.935.33-1.945-.175-2.735zm-1.205 2.14c-.205.48-.705.99-1.49.99h-3.625c-.51 0-.99.22-1.32.605-.335.385-.48.89-.41 1.385l.525 4c.075.57-.255.88-.56.975-.14.04-.62.14-.92-.455-.36-.71-.53-1.075-1.285-2.79-1.095-2.46-2.455-5.07-4.865-5.61V5.4c1.555-.2 2.325-.73 2.4-.76.665-.37 2.045-1.145 4.115-1.145h.01l3.225.005c.76 0 1.445.26 1.785.675.325.395.215.705.085 1.35.555.305.945.475 1.215 1.02.335.67.095 1.1-.18 1.735.54.425.97.715 1.12 1.31.135.525-.045.84-.4 1.515.22.225 1.04.835.575 1.905z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4h; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-thumbs-down",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4g = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionThumbsUp {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M11.31 2.815c.535-1.06 1.62-1.545 2.7-1.21 1.1.34 1.76 1.41 1.605 2.6l-.525 4a.25.25 0 00.245.295h3.625c1.265 0 2.36.725 2.87 1.895.405.935.33 1.945-.175 2.735.37 1.07.105 2.195-.72 3.055.24 1.125-.215 2.32-1.185 3.06a2.451 2.451 0 01-.555 1.535c-.63.765-1.73 1.215-2.945 1.215L13.03 22h-.015c-2.33 0-3.905-.805-4.905-1.36-.495-.275-1.045-.43-1.61-.52v1.885H2v-11.5h3.565c1.9 0 3.145-1.93 4.425-4.83a74.449 74.449 0 011.013-2.244l.099-.202.1-.202.108-.212zM5 12H3.5v8.5H5V12z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M21.655 13.13c.505-.79.58-1.8.175-2.735-.51-1.17-1.605-1.895-2.87-1.895h-3.625a.25.25 0 01-.245-.295l.525-4c.155-1.19-.505-2.26-1.605-2.6-1.08-.335-2.165.15-2.7 1.21-.375.735-.56 1.135-1.32 2.86-1.28 2.9-2.525 4.83-4.425 4.83H2v11.5h4.5V20.12c.565.09 1.115.245 1.61.52 1 .555 2.575 1.36 4.905 1.36h.015l3.22-.005c1.215 0 2.315-.45 2.945-1.215.36-.44.55-.98.555-1.535.97-.74 1.425-1.935 1.185-3.06.825-.86 1.09-1.985.72-3.055zM20.3 14.315c-.11.62-.545.935-1.145 1.405.27.62.455.93.27 1.51-.12.37-.24.655-1.31 1.245.125.62.245.95-.085 1.355-.335.415-1.02.67-1.78.67l-3.22.005h-.01c-1.62 0-2.85-.435-4.175-1.18-.755-.42-1.545-.625-2.34-.725v-6.71c2.41-.545 3.77-3.15 4.855-5.615.755-1.71.925-2.075 1.285-2.79.3-.595.78-.495.92-.455.305.095.635.405.56.975L13.605 8c-.15 1.055.665 2 1.735 2h3.625c.785 0 1.285.51 1.495.99.51 1.18-.47 1.71-.57 1.91.285.56.505.895.41 1.415z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4g; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-thumbs-up",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4f = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionTilesAdd {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M10.5 13.5V22H4a2 2 0 01-1.995-1.85L2 20v-6.5h8.5zm7.25 0a.75.75 0 01.743.648l.007.102V17h2.75a.75.75 0 01.102 1.493l-.102.007H18.5v2.75a.75.75 0 01-1.493.102L17 21.25V18.5h-2.75a.75.75 0 01-.102-1.493L14.25 17H17v-2.75a.75.75 0 01.75-.75zM10.5 2v8.5H2V4a2 2 0 011.85-1.995L4 2h6.5zM20 2a2 2 0 011.995 1.85L22 4v6.5h-8.5V2H20z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M10.5 13.5V22H4c-1.05 0-1.918-.82-1.994-1.851L2 20v-6.5h8.5zm7.25 0c.367 0 .691.294.743.651l.007.099V17h2.75c.4 0 .75.35.75.75a.772.772 0 01-.651.743l-.099.007H18.5v2.75c0 .4-.35.75-.75.75a.772.772 0 01-.743-.651L17 21.25V18.5h-2.75c-.4 0-.75-.35-.75-.75 0-.367.294-.691.651-.743L14.25 17H17v-2.75c0-.4.35-.75.75-.75zM9 15H3.5v5c0 .267.158.454.404.493L4 20.5h5V15zm1.5-13v8.5H2V4c0-1.05.82-1.918 1.851-1.994L4 2h6.5zM20 2c1.05 0 1.918.82 1.994 1.851L22 4v6.5h-8.5V2H20zM9 3.5H4c-.267 0-.454.158-.493.404L3.5 4v5H9V3.5zm11 0h-5V9h5.5V4c0-.267-.158-.454-.404-.493L20 3.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4f; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-tiles-add",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4e = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionUpload {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M21.25 20.185a1.065 1.065 0 01.116 2.124l-.116.006H2.75a1.065 1.065 0 01-.116-2.124l.116-.006h18.5zM12 2l4.58 7h-3.33v6.75a1.25 1.25 0 01-2.494.128l-.006-.128V9H7.42L12 2z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M21.25 20.5c.4 0 .75.35.75.75a.772.772 0 01-.651.743L21.25 22H2.75c-.4 0-.75-.35-.75-.75 0-.367.294-.691.651-.743l.099-.007h18.5zM12 2l4.6 7h-3.85v6.75c0 .4-.35.75-.75.75a.772.772 0 01-.743-.651l-.007-.099V9H7.4L12 2z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4e; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-upload",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4d = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionUploadToCloud {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M13.5 3.7c1.9 0 3.6.65 4.95 1.8 1 .85 1.8 1.95 2.25 3.25 1.85.95 3.05 2.95 3.05 5.05 0 3.15-2.6 5.75-5.75 5.75-.5 0-1-.05-1.5-.2a8.77 8.77 0 01-3.75 1.538V15h3.3L12 10l-4.05 5h3.3v6a8.962 8.962 0 01-5.6-2c-1.15.1-2.35-.25-3.35-1-1.25-.95-2.05-2.4-2.05-4.1 0-1.9 1.05-3.6 2.7-4.5C3.2 7.05 5.2 5.25 7.6 5.25c.35 0 .75.05 1.1.15 1.35-1.1 3.05-1.7 4.8-1.7z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M20.7 8.75c-.45-1.3-1.25-2.4-2.25-3.25-1.35-1.15-3.05-1.8-4.95-1.8-1.75 0-3.45.6-4.8 1.7-.35-.1-.75-.15-1.1-.15-2.4 0-4.4 1.8-4.65 4.15-1.65.9-2.7 2.6-2.7 4.5 0 1.7.8 3.15 2.05 4.1 1 .75 2.2 1.1 3.35 1 1.6 1.3 3.6 2 5.65 2 1.9 0 3.65-.55 5.2-1.65.5.15 1 .2 1.5.2 3.15 0 5.75-2.6 5.75-5.75 0-2.1-1.2-4.1-3.05-5.05zm-2.7 9.3c-.9 0-1.55-.3-1.8-.4-.3.2-1.3 1.25-3.45 1.7V15h3.3L12 10l-4.05 5h3.3v4.5c-.85 0-1.65-.15-2.45-.45a7.49 7.49 0 01-2.65-1.65c-.6.05-1.95.3-3.25-.9-.7-.65-1.2-1.6-1.2-2.65 0-2.75 2.6-3.5 2.65-3.55.05-.2-.2-1.65 1.1-2.8C6.4 6.7 7.7 6.45 9 7c1.55-1.55 3.35-1.9 4.45-1.9 1.5 0 2.85.5 3.95 1.4 1.5 1.25 1.9 2.85 2 3.2 0 0 2.8 1 2.8 4 .05 2.45-1.85 4.35-4.2 4.35z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4d; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-upload-to-cloud",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4c = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionVolumeDown {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M13 3.5v17h-2l-4.5-4H5a3 3 0 01-2.995-2.824L2 13.5v-3a3 3 0 012.824-2.995L5 7.5h1.5l4.5-4h2zm9 7.75a.75.75 0 01.102 1.493L22 12.75h-6a.75.75 0 01-.102-1.493L16 11.25h6z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M13 3.5v17h-2l-4.5-4H5a3.003 3.003 0 01-2.995-2.824L2 13.5v-3a3.003 3.003 0 012.824-2.995L5 7.5h1.5l4.5-4h2zm-1.5 1.56L7.07 9H5c-.776 0-1.42.598-1.493 1.356L3.5 10.5v3c0 .776.598 1.42 1.356 1.493L5 15h2.07l4.43 3.94V5.06zM22 11.25a.749.749 0 01.102 1.493L22 12.75h-6a.749.749 0 01-.102-1.493L16 11.25h6z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4c; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-volume-down",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4b = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionVolumeUp {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M13 3.5v17h-2l-4.5-4H5a3 3 0 01-2.995-2.824L2 13.5v-3a3 3 0 012.824-2.995L5 7.5h1.5l4.5-4h2zm6 4.75a.75.75 0 01.743.648L19.75 9v2.25H22a.75.75 0 01.102 1.493L22 12.75h-2.25V15a.75.75 0 01-1.493.102L18.25 15v-2.25H16a.75.75 0 01-.102-1.493L16 11.25h2.25V9a.75.75 0 01.75-.75z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M13 3.5v17h-2l-4.5-4H5a3.003 3.003 0 01-2.995-2.824L2 13.5v-3a3.003 3.003 0 012.824-2.995L5 7.5h1.5l4.5-4h2zm-1.5 1.56L7.07 9H5c-.776 0-1.42.598-1.493 1.356L3.5 10.5v3c0 .776.598 1.42 1.356 1.493L5 15h2.07l4.43 3.94V5.06zM19 8.25c.38 0 .694.281.743.648L19.75 9v2.25H22a.749.749 0 01.102 1.493L22 12.75h-2.25V15a.749.749 0 01-1.493.102L18.25 15v-2.25H16a.749.749 0 01-.102-1.493L16 11.25h2.25V9c0-.415.335-.75.75-.75z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4b; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-volume-up",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4a = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionZoomIn {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M21.385 19.615l-4.92-4.915a8 8 0 10-1.765 1.765l4.915 4.92c.49.487 1.28.487 1.77 0a1.26 1.26 0 000-1.77zM10.75 13a.75.75 0 11-1.5 0v-2.25H7a.75.75 0 110-1.5h2.25V7a.75.75 0 011.5 0v2.25H13a.75.75 0 110 1.5h-2.25V13z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M10 2c4.42 0 8 3.58 8 8 0 1.65-.505 3.177-1.36 4.445l-.175.25 4.92 4.92c.485.49.485 1.28.005 1.77a1.245 1.245 0 01-.885.365c-.274 0-.549-.088-.776-.268l-.109-.097-4.92-4.92A7.961 7.961 0 0110 18c-4.42 0-8-3.58-8-8s3.58-8 8-8zm0 1.5A6.506 6.506 0 003.5 10c0 3.585 2.915 6.5 6.5 6.5s6.5-2.915 6.5-6.5-2.915-6.5-6.5-6.5zm0 2.75c.38 0 .694.281.743.648L10.75 7v2.25H13a.749.749 0 01.102 1.493L13 10.75h-2.25V13a.749.749 0 01-1.493.102L9.25 13v-2.25H7a.749.749 0 01-.102-1.493L7 9.25h2.25V7c0-.415.335-.75.75-.75z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4a; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-zoom-in",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$49 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionZoomOut {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M21.385 19.615l-4.92-4.915a8 8 0 10-1.765 1.765l4.915 4.92c.49.487 1.28.487 1.77 0a1.26 1.26 0 000-1.77zM13 10.75H7a.75.75 0 110-1.5h6a.75.75 0 110 1.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M10 2c4.42 0 8 3.58 8 8 0 1.65-.505 3.177-1.36 4.445l-.175.25 4.92 4.92c.485.49.485 1.28.005 1.77a1.245 1.245 0 01-.885.365c-.274 0-.549-.088-.776-.268l-.109-.097-4.92-4.92A7.961 7.961 0 0110 18c-4.42 0-8-3.58-8-8s3.58-8 8-8zm0 1.5A6.506 6.506 0 003.5 10c0 3.585 2.915 6.5 6.5 6.5s6.5-2.915 6.5-6.5-2.915-6.5-6.5-6.5zm3 5.75a.749.749 0 01.102 1.493L13 10.75H7a.749.749 0 01-.102-1.493L7 9.25h6z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$49; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-zoom-out",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
const tagTypes = {
  beta: 'β',
  WIP: '🛠 WIP',
  deprecated: '😵 Deprecation notice',
  warning: 'Warning',
};
const defaultMessages = {
  beta: 'This component is currently in beta status. Some things may be refactored. Watch the change log for now.',
  WIP: "This component is currently under development and is prone to change. Please wait for its release.\nIt will be available in Storybook once it's finished and documented.",
  deprecated: 'This component is deprecated.',
};
function statusNote({ tag = 'WIP', extraMessage = null, message = null, source = null, type = 'info', }) {
  // tslint:disable-next-line
  const dipatchMessage = console[type];
  dipatchMessage(`%c scale – ${tagTypes[tag]} `, 'background: #E20074; color: #FFF; border-radius: 4px', `\n\n${message ? message : defaultMessages[tag]} ${extraMessage ? '\n' + extraMessage : ''}
    `, source !== null ? '\nsource:' : '', 
  // typeof source === 'object' ? '\n' : `\nsource: ${source}`,
  typeof source === 'object' ? source : `${source}`, source !== null ? '\n\n' : '');
}

const alertCss = "/*!@.alert*/.alert.sc-scale-alert{box-sizing:border-box;background:#eee;color:#333;width:100%;padding:1rem;text-align:left;position:relative;display:flex;justify-content:space-between}/*!@.alert__body*/.alert__body.sc-scale-alert{display:flex}/*!@.alert__headline*/.alert__headline.sc-scale-alert{font-size:var(--type-size-3, 1rem);color:white;margin:0}/*!@.alert__icon*/.alert__icon.sc-scale-alert{display:flex;align-items:center;justify-content:center;background:none;height:24px;width:24px;margin:0 0.5rem 0 0;border-radius:var(--telekom-radius-standard)}/*!@.alert__close*/.alert__close.sc-scale-alert{height:16px;opacity:0.5;cursor:pointer}/*!@.alert__close:hover*/.alert__close.sc-scale-alert:hover{opacity:1}/*!@.alert--variant-primary*/.alert--variant-primary.sc-scale-alert{background:blue;color:#fff}/*!@.alert--variant-secondary*/.alert--variant-secondary.sc-scale-alert{background:#eee;color:#333}/*!@.alert--variant-variant-warning*/.alert--variant-variant-warning.sc-scale-alert{background:orange;color:#fff}/*!@.alert--variant-danger*/.alert--variant-danger.sc-scale-alert{background:red;color:#fff}/*!@.alert--variant-success*/.alert--variant-success.sc-scale-alert{background:green;color:#fff}/*!@.alert--variant-info*/.alert--variant-info.sc-scale-alert{background:lightblue;color:#fff}";

class Alert {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) Alert size */
    this.size = '';
    /** (optional) Alert variant */
    this.variant = '';
    /** (optional) Alert timeout */
    this.timeout = false;
    /** (optional) Alert icon */
    this.icon = '';
    this.defaultTimeout = 2000;
    this.close = () => {
      this.opened = false;
    };
    this.onCloseAlertWithTimeout = () => {
      if (this.timeout !== false) {
        if (typeof this.timeout === 'number') {
          setTimeout(this.close, this.timeout);
        }
        else {
          setTimeout(this.close, this.defaultTimeout);
        }
      }
      else {
        return null;
      }
    };
  }
  componentWillLoad() {
    this.hasSlotClose = !!this.hostElement.querySelector('[slot="close"]');
  }
  connectedCallback() {
    statusNote({ source: this.hostElement, type: 'warn' });
  }
  /** Alert method: open() */
  async open() {
    this.opened = true;
  }
  render() {
    this.onCloseAlertWithTimeout();
    if (!this.opened) {
      return null;
    }
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { class: this.getCssClassMap() }, hAsync("div", { class: "alert__body" }, hAsync("div", { class: "alert__icon" }, this.icon), hAsync("div", { class: "alert__content" }, hAsync("div", { class: "alert__headline" }, this.headline), hAsync("slot", null))), hAsync("a", { class: "alert__close", onClick: this.close }, this.hasSlotClose ? (hAsync("div", { class: "alert__close-icon" }, hAsync("slot", { name: "close" }))) : ('x')))));
  }
  getCssClassMap() {
    return classnames('alert', this.size && `alert--size-${this.size}`, this.variant && `alert--variant-${this.variant}`);
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return alertCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-alert",
    "$members$": {
      "size": [1],
      "variant": [1],
      "headline": [513],
      "opened": [516],
      "timeout": [8],
      "icon": [1],
      "styles": [1],
      "open": [64]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["headline", "headline"], ["opened", "opened"]]
  }; }
}

const iconCss$48 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class AlertAntivirusProtection {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 .98l9.5 2.172v7.998c0 5.587-3.684 10.572-8.997 12.233l-.297.089-.206.058-.206-.058c-5.373-1.537-9.155-6.448-9.29-12.013l-.004-.31V3.153L12 .98zm4.176 7.47c-2.311 1.916-5.76 1.972-8.138.17l-.213-.17-.638.772a7.34 7.34 0 002.004 1.175l.309.114v.989H7v1h2.5v1l.012.115a7.4 7.4 0 00-2.059 1.082l-.266.21.638.77a6.345 6.345 0 011.933-1.091A2.491 2.491 0 0012 16c.99 0 1.838-.58 2.243-1.414a6.37 6.37 0 011.679.892l.254.2.637-.771a7.321 7.321 0 00-2.325-1.292l.012-.115v-1H17v-1h-2.5v-.99a7.389 7.389 0 002.048-1.08l.265-.208-.637-.771zM12 6.5a1.75 1.75 0 00-1.75 1.75c0 .146.023.287.058.423a5.696 5.696 0 003.385 0c.034-.137.057-.277.057-.423A1.75 1.75 0 0012 6.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 .98l9.5 2.171v7.998c0 5.589-3.684 10.575-8.997 12.234l-.297.088-.206.058-.206-.058c-5.373-1.534-9.154-6.447-9.29-12.012l-.004-.31V3.151L12 .981zm0 1.54L4 4.346v6.802c0 4.954 3.28 9.371 8 10.82 4.627-1.42 7.868-5.69 7.996-10.523l.004-.297V4.347L12 2.52zm4.175 5.93l.638.771a7.37 7.37 0 01-2.313 1.29v.99H17v1h-2.5v1l-.012.113a7.365 7.365 0 012.325 1.293l-.638.771a6.327 6.327 0 00-1.933-1.093A2.492 2.492 0 0112 16c-.99 0-1.838-.58-2.243-1.415a6.35 6.35 0 00-1.933 1.093l-.637-.77a7.35 7.35 0 012.324-1.294l-.01-.114v-1H7v-1h2.5v-.989a7.348 7.348 0 01-2.314-1.29l.637-.77c2.381 1.971 5.97 1.971 8.351 0zM12 6.5c.966 0 1.75.783 1.75 1.75 0 .145-.023.285-.057.421a5.715 5.715 0 01-3.386 0 1.73 1.73 0 01-.057-.42c0-.968.783-1.75 1.75-1.75z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$48; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-alert-antivirus-protection",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$47 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class AlertCompliance {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M10.97 14H8a.75.75 0 110-1.5h4.06a7.865 7.865 0 011.89-1.5H8a.75.75 0 110-1.5h8a.74.74 0 01.725.575A7.535 7.535 0 0121 10.72V1H3v19a3 3 0 003 3h6.06a7.725 7.725 0 01-1.09-9zM8 6.5h8A.75.75 0 1116 8H8a.75.75 0 010-1.5zm12.895 9.035a.745.745 0 00-1.06 0L17 18.355l-1.41-1.41A.75.75 0 0014.545 18L17 20.5l3.88-3.88a.755.755 0 00.015-1.085zM17.75 11.5a6.25 6.25 0 100 12.5 6.25 6.25 0 000-12.5zm0 11a4.75 4.75 0 110-9.5 4.75 4.75 0 010 9.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M17.75 11.5c3.45 0 6.25 2.8 6.25 6.25S21.2 24 17.75 24s-6.25-2.8-6.25-6.25 2.8-6.25 6.25-6.25zM21 1v9.72a7.65 7.65 0 00-1.188-.436l-.312-.079V2.5h-15V20c0 .776.598 1.42 1.356 1.493L6 21.5h4.97c.24.436.525.843.844 1.222l.246.278H6a3.003 3.003 0 01-2.995-2.824L3 20V1h18zm-.105 14.535a.744.744 0 00-.975-.073l-.085.073-2.82 2.82-1.41-1.41a.745.745 0 00-1.06 0 .744.744 0 00-.073.975l.073.085 2.47 2.47 3.88-3.88a.754.754 0 000-1.06zM12.06 12.5c-.336.364-.64.757-.902 1.178L10.97 14H8a.749.749 0 01-.102-1.493L8 12.5h4.06zm3.94-3a.74.74 0 01.725.575 7.655 7.655 0 00-2.491.772L13.95 11H8a.749.749 0 01-.102-1.493L8 9.5h8zm0-3a.749.749 0 01.102 1.493L16 8H8a.749.749 0 01-.102-1.493L8 6.5h8z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$47; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-alert-compliance",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$46 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class AlertCyberSecurity {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 .98l9.5 2.171v7.998c0 5.693-3.822 10.758-9.294 12.322L12 23.53l-.206-.058C6.322 21.907 2.5 16.841 2.5 11.15V3.152L12 .98zm0 5.145a2.927 2.927 0 00-2.918 2.752l-.005.171v.953H8v4l.007.144a1.5 1.5 0 001.348 1.349l.145.007h5l.145-.007a1.5 1.5 0 001.348-1.35l.007-.143v-4h-1.077v-.952l-.005-.172A2.927 2.927 0 0012 6.125zm0 1.25c.874 0 1.594.674 1.667 1.53l.006.144V10h-3.346v-.952l.006-.145A1.675 1.675 0 0112 7.375z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 .98l9.5 2.173v7.998c0 5.587-3.684 10.572-8.997 12.232l-.297.089-.206.058-.206-.058c-5.373-1.536-9.154-6.447-9.29-12.012l-.004-.31V3.154L12 .98zm0 1.54L4 4.349v6.802c0 4.953 3.278 9.37 8 10.817 4.627-1.417 7.869-5.689 7.996-10.52L20 11.15V4.349l-8-1.83zm0 3.605a2.928 2.928 0 012.918 2.752l.005.172v.95H16v4a1.5 1.5 0 01-1.355 1.494l-.145.007h-5a1.5 1.5 0 01-1.493-1.356L8 14v-4h1.076v-.951A2.928 2.928 0 0112 6.125zm0 1.25c-.874 0-1.594.674-1.667 1.53l-.007.144v.95h3.347v-.95c0-.923-.75-1.674-1.673-1.674z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$46; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-alert-cyber-security",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$45 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class AlertError {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M23.075 18L14.6 3.32a3 3 0 00-5.2 0L.925 18a3 3 0 002.6 4.5H20.5a3 3 0 002.575-4.5zM11 8.25h2v6.5h-2v-6.5zm1 10.5a1.25 1.25 0 110-2.5 1.25 1.25 0 010 2.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M11.95 1.8c.938 0 1.875.44 2.483 1.318l.117.182 8.5 14.7c1.17 1.951-.18 4.378-2.383 4.496l-.167.004H3.55c-2.243 0-3.677-2.377-2.681-4.35L.95 18l8.4-14.7c.6-1 1.6-1.5 2.6-1.5zm.105 1.5h-.11a1.431 1.431 0 00-1.155.61l-.09.14-8.5 14.7c-.343.6-.208 1.09-.068 1.375l.068.125.077.12c.167.24.48.57 1.058.623L3.5 21h17c.75 0 1.15-.5 1.25-.75l.068-.125a1.47 1.47 0 00.048-1.227l-.066-.148-8.5-14.7c-.32-.56-.8-.704-1.107-.74l-.138-.01zM12 16.5a1.25 1.25 0 110 2.5 1.25 1.25 0 010-2.5zm1-8V15h-2V8.5h2z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$45; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-alert-error",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$44 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class AlertHelp {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 1C5.925 1 1 5.925 1 12s4.925 11 11 11 11-4.925 11-11A11 11 0 0012 1zm0 17a1.364 1.364 0 110-2.727A1.364 1.364 0 0112 18zm1.91-6c-.546.47-1.02.91-1.02 1.593v.36h-1.905v-.655c0-1.123.666-1.663 1.315-2.182.545-.43 1.03-.84 1.03-1.521a1.14 1.14 0 00-1.22-1.239 1.25 1.25 0 00-1.272 1.266h-1.98a3.098 3.098 0 013.273-3.055c1.849 0 3.19 1.228 3.19 2.913-.021 1.276-.757 1.936-1.412 2.52z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 1c6.075 0 11 4.925 11 11s-4.925 11-11 11S1 18.075 1 12 5.925 1 12 1zm0 1.5c-5.239 0-9.5 4.261-9.5 9.5 0 5.238 4.261 9.5 9.5 9.5 5.238 0 9.5-4.262 9.5-9.5 0-5.239-4.262-9.5-9.5-9.5zM12 15a1.25 1.25 0 110 2.5 1.25 1.25 0 010-2.5zm.101-7.98c1.695 0 2.926 1.123 2.926 2.67 0 .876-.381 1.437-.824 1.89l-.225.217-.462.42c-.346.323-.636.655-.69 1.095l-.01.152v.332H11.07v-.603c0-.89.46-1.383.968-1.811l.475-.391c.388-.33.707-.676.707-1.196 0-.7-.428-1.134-1.118-1.134-.612 0-1.02.366-1.146 1.015l-.022.143H9.12c.085-1.412 1.027-2.799 2.981-2.799z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$44; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-alert-help",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$43 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class AlertHighPriorityEmail {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 16.452a2.024 2.024 0 110 4.048 2.024 2.024 0 010-4.048zM13.619 3.5v10.523h-3.238V3.5h3.238z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 16.452a2.024 2.024 0 100 4.048 2.024 2.024 0 000-4.048zm-1.619-2.429h3.238V3.5h-3.238z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$43; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-alert-high-priority-email",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$42 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class AlertImprintDataprivacy {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 1l9.5 2.15v8c0 2.85-.95 5.55-2.6 7.75a12.863 12.863 0 01-4.844 3.9l-.378.167-.18.075-.343.133-.314.113-.413.135-.428.127c-2.64-.754-4.43-2.062-5.508-3.078l-.277-.27-.241-.25a5.328 5.328 0 01-.108-.118l-.19-.216-.158-.189-.218-.279c-1.674-2.152-2.707-4.808-2.794-7.616L2.5 11.15v-8L12 1zm-1.4 12l1.4 1.4 1.4-1.4h1c.897 0 1.66.624 1.911 1.494l.039.156.15.85h-9l.15-.85c.142-.897.908-1.571 1.793-1.644L9.6 13h1zM12 6.5c1.4 0 2.5 1 2.5 2.5 0 1.55-1.05 3-2.5 3s-2.5-1.5-2.5-3 1.1-2.5 2.5-2.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 1l9.5 2.15v8c0 2.85-.95 5.55-2.6 7.75a12.863 12.863 0 01-4.844 3.9l-.378.167-.18.075-.343.133-.314.113-.413.135-.428.127c-2.64-.754-4.43-2.062-5.508-3.078l-.277-.27-.241-.25a5.328 5.328 0 01-.108-.118l-.19-.216-.158-.189-.218-.279c-1.674-2.152-2.707-4.808-2.794-7.616L2.5 11.15v-8L12 1zm0 1.5L4 4.35v6.8c0 4.95 3.3 9.35 8 10.8 4.606-1.421 7.867-5.675 7.996-10.504L20 11.15v-6.8L12 2.5zM10.6 13l1.4 1.4 1.4-1.4h1c.897 0 1.66.624 1.911 1.494l.039.156.15.85h-9l.15-.85c.142-.897.908-1.571 1.793-1.644L9.6 13h1zM12 6.5c1.4 0 2.5 1 2.5 2.5 0 1.55-1.05 3-2.5 3s-2.5-1.5-2.5-3 1.1-2.5 2.5-2.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$42; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-alert-imprint-dataprivacy",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$41 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class AlertInformation {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 1C5.925 1 1 5.925 1 12s4.925 11 11 11 11-4.925 11-11A11 11 0 0012 1zm1 16h-2v-6.5h2V17zm-1-8a1.25 1.25 0 110-2.5A1.25 1.25 0 0112 9z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 1c6.1 0 11 4.9 11 11s-4.9 11-11 11S1 18.1 1 12 5.9 1 12 1zm0 1.5c-5.25 0-9.5 4.25-9.5 9.5s4.25 9.5 9.5 9.5 9.5-4.25 9.5-9.5-4.25-9.5-9.5-9.5zm1 8V17h-2v-6.5h2zm-1-4A1.25 1.25 0 1112 9a1.25 1.25 0 010-2.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$41; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-alert-information",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$40 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class AlertLegal {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M23.72 14.865L20.525 2H13v-.75a1 1 0 10-2 0V2H3.5L.28 14.865.25 15v.12c0 1.26.965 3.645 4.625 3.645s4.625-2.4 4.625-3.66V15L6.71 3.75H11V19.5H8.5A2.5 2.5 0 006 22h12a2.5 2.5 0 00-2.5-2.5H13V3.75h4.29l-2.76 11.115a1 1 0 00-.03.24c0 1.26.965 3.645 4.625 3.645s4.625-2.385 4.625-3.645a1 1 0 00-.03-.24zM7.445 15h-5.14l2.57-10.345L7.445 15zm9.11 0l2.57-10.345L21.695 15h-5.14z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M23.48 14.925L20.27 2h-7.52v-.75a.749.749 0 10-1.5 0V2H3.73L.52 14.925a.736.736 0 00-.02.18c0 1.175.915 3.395 4.375 3.395s4.375-2.22 4.375-3.395c0-.06-.005-.12-.02-.18L6.39 3.5h4.86v16H8.5c-.345 0-.675.07-.975.195-.6.255-1.075.73-1.33 1.33-.125.3-.195.63-.195.975h12c0-.345-.07-.675-.195-.975a2.508 2.508 0 00-1.33-1.33c-.3-.125-.63-.195-.975-.195h-2.75v-16h4.86l-2.835 11.425a.736.736 0 00-.02.18c0 1.175.915 3.395 4.375 3.395s4.37-2.22 4.37-3.395c0-.06-.005-.12-.02-.18zM4.875 3.62L7.7 15H2.05L4.875 3.62zM16.3 15l2.825-11.38L21.95 15H16.3z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$40; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-alert-legal",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3$ = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class AlertNetworkDisrupted {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 1a2.01 2.01 0 011.664.865l.095.15 5.738 9.939c.757 1.31-.134 2.937-1.61 3.04l-.149.006h-4.987v2.5H22v3.175A1.745 1.745 0 0121.25 24a1.75 1.75 0 01-1.75-1.75c0-.643.35-1.201.867-1.505l.133-.07V19h-7.75v1.675A1.745 1.745 0 0112 24a1.75 1.75 0 01-1.75-1.75c0-.643.35-1.201.867-1.505l.133-.07V19H3.5v1.675A1.745 1.745 0 012.75 24 1.75 1.75 0 011 22.25c0-.643.35-1.201.867-1.505l.133-.07V17.5h9.25V15H6.263c-1.513 0-2.477-1.585-1.83-2.914l.071-.133 5.738-9.938A2.012 2.012 0 0112 1zm0 9.5a.98.98 0 100 1.961.98.98 0 000-1.961zm.75-5h-1.5v4h1.5v-4z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 1c.631 0 1.263.288 1.664.865l.095.15 5.738 9.939c.756 1.31-.134 2.937-1.61 3.04l-.149.006H12.75v2.5H22v3.169a1.75 1.75 0 11-1.5 0V19h-7.75v1.669c.55.261.943.801.994 1.437l.006.144a1.75 1.75 0 11-2.5-1.582V19H3.5v1.669a1.75 1.75 0 11-1.5 0V17.5h9.25V15H6.263c-1.514 0-2.478-1.585-1.83-2.914l.07-.133 5.738-9.938A2.012 2.012 0 0112 1zm0 1.5a.514.514 0 00-.398.178l-.062.087-5.737 9.939a.513.513 0 000 .53c.049.085.156.22.353.256l.107.01h11.475a.514.514 0 00.46-.265.514.514 0 00.04-.446l-.04-.085-5.738-9.939A.514.514 0 0012 2.5zm0 8a.98.98 0 110 1.961.98.98 0 010-1.961zm.75-5v4h-1.5v-4h1.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3$; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-alert-network-disrupted",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3_ = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class AlertPasswordBreaking {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M17.25 6.013a4.75 4.75 0 014.03 2.241l.11.186-1.345.673a3.248 3.248 0 00-2.795-1.6 3.254 3.254 0 00-3.244 3.066l-.005.184V12.5h9.5V19a3 3 0 01-2.824 2.995L20.5 22H14a3 3 0 01-2.994-2.824L11 19v-6.5h1.5v-1.737a4.756 4.756 0 014.75-4.75zm0 9.487c-.69 0-1.25.56-1.25 1.25 0 .363.157.686.404.914l.096.08V19H18v-1.256c.302-.228.5-.586.5-.994 0-.69-.559-1.25-1.25-1.25zM22 2v4.712a6.221 6.221 0 00-9.005-.514 1.248 1.248 0 00-2.494.052c0 .69.559 1.25 1.25 1.25.065 0 .128-.01.191-.02a6.19 6.19 0 00-.908 2.72l-.02.3H3.501A3.003 3.003 0 01.506 7.676L.5 7.5V2H22zM8.25 5a1.25 1.25 0 100 2.5 1.25 1.25 0 000-2.5zm-3.5 0a1.25 1.25 0 100 2.5 1.25 1.25 0 000-2.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M23.5 12.5V19a3 3 0 01-2.824 2.995L20.5 22H14a3 3 0 01-2.995-2.824L11 19v-6.5h1.5v-1.736a4.756 4.756 0 014.75-4.75c1.775 0 3.327.979 4.142 2.426l-1.344.671a3.252 3.252 0 00-2.798-1.598 3.254 3.254 0 00-3.25 3.25V12.5h9.5zM22 14h-9.5v5c0 .778.596 1.42 1.356 1.493L14 20.5h6.5c.778 0 1.42-.596 1.493-1.356L22 19v-5zm-4.75 1.5a1.25 1.25 0 01.751 2.25L18 19h-1.5v-1.25a1.25 1.25 0 01.75-2.25zM22 2v4.707a6.298 6.298 0 00-1.5-1.28V3.5H2v4C2 8.327 2.673 9 3.5 9h7.753a6.22 6.22 0 00-.248 1.5H3.5c-1.655 0-3-1.345-3-3V2H22zM4.75 5a1.25 1.25 0 110 2.5 1.25 1.25 0 010-2.5zm3.5 0a1.25 1.25 0 110 2.5 1.25 1.25 0 010-2.5zm3.5 0c.67 0 1.216.526 1.248 1.188a6.249 6.249 0 00-1.067 1.297A1.25 1.25 0 1111.75 5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3_; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-alert-password-breaking",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3Z = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class AlertSecurity {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 1l9.5 2.1v8c0 3.05-1.1 5.95-3 8.2-1.807 2.218-3.884 3.289-5.51 3.877l-.414.144-.39.123L12 23.5l-.267-.07-.23-.067-.412-.133c-.1-.035-.206-.073-.316-.115l-.346-.136A12.802 12.802 0 015.85 19.75a12.774 12.774 0 01-3.344-8.226L2.5 11.15v-8L12 1zm3.3 7.95c.3-.3.75-.3 1.05 0 .273.273.298.67.074.965L16.35 10l-5.05 5.05-3.15-3.15c-.3-.3-.3-.75 0-1.05a.722.722 0 01.965-.074l.085.074 2.15 2.05 3.95-3.95z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 1l9.5 2.1v8c0 3.05-1.1 5.95-3 8.2-1.807 2.218-3.884 3.289-5.51 3.877l-.414.144-.39.123L12 23.5l-.267-.07-.23-.067-.412-.133c-.1-.035-.206-.073-.316-.115l-.346-.136A12.802 12.802 0 015.85 19.75a12.774 12.774 0 01-3.344-8.226L2.5 11.15v-8L12 1zm0 1.5L4 4.35v6.8c0 4.95 3.3 9.35 8 10.8 4.606-1.421 7.867-5.675 7.996-10.504L20 11.15v-6.8L12 2.5zm3.3 6.45c.3-.3.75-.3 1.05 0 .273.273.298.67.074.965L16.35 10l-5.05 5.05-3.15-3.15c-.3-.3-.3-.75 0-1.05a.722.722 0 01.965-.074l.085.074 2.15 2.05 3.95-3.95z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3Z; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-alert-security",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3Y = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class AlertTrafficDisruption {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M17.75 11.5a6.25 6.25 0 110 12.5 6.25 6.25 0 010-12.5zm0 1.5A4.756 4.756 0 0013 17.75a4.756 4.756 0 004.75 4.75 4.756 4.756 0 004.75-4.75A4.756 4.756 0 0017.75 13zm0 6.173a1 1 0 11.001 1.998 1 1 0 01-.001-1.998zM9.25 2c4.695 0 8.564 3.501 9.16 8.033a7.992 7.992 0 00-.66-.033c-.461 0-.911.048-1.351.126a7.247 7.247 0 00-3.023-4.83c.667 1.28 1.123 2.829 1.29 4.527l.035.427h1.132a7.752 7.752 0 00-3.309 1.784l-.226.216H10.25v3.582A7.733 7.733 0 0010 17.75c0 .935.176 1.828.48 2.658a9.223 9.223 0 01-1.23.092 9.25 9.25 0 010-18.5zm-1 10.25H5.808c.196 2.434 1.091 4.574 2.284 5.685l.158.14V12.25zM18.5 14v4H17v-4h1.5zM3.8 12.25H2.078a7.249 7.249 0 003.039 4.948c-.72-1.383-1.191-3.087-1.317-4.948zm4.45-7.825c-1.218 1.02-2.156 3.102-2.413 5.51l-.03.315H8.25V4.425zm2 0v5.825h2.443c-.206-2.54-1.172-4.76-2.443-5.825zm-5.128.873A7.25 7.25 0 002.124 9.96l-.046.29H3.8c.127-1.863.6-3.567 1.322-4.952z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M17.75 11.5a6.25 6.25 0 110 12.5 6.25 6.25 0 010-12.5zm0 7.673a1 1 0 10-.001 2 1 1 0 000-2zM9.25 2c4.695 0 8.564 3.501 9.16 8.033a7.992 7.992 0 00-.66-.033c-.29 0-.576.02-.857.05a7.753 7.753 0 00-3.468-5.319c.948 1.5 1.566 3.507 1.685 5.74a7.75 7.75 0 00-2.294 1.313l-.25.216H10v6.867l.085-.034a7.61 7.61 0 00.394 1.576 9.22 9.22 0 01-1.23.091 9.25 9.25 0 010-18.5zM8.5 12H4.887c.196 3.263 1.65 6.068 3.444 6.804l.169.063V12zm10 2H17v4h1.5v-4zM3.389 12H1.538a7.755 7.755 0 003.537 5.77c-.952-1.507-1.572-3.526-1.686-5.77zm1.686-7.269a7.758 7.758 0 00-3.504 5.48l-.033.29h1.85c.115-2.245.735-4.265 1.687-5.77zM8.5 3.632c-1.814.605-3.317 3.33-3.591 6.563l-.022.305H8.5V3.632zm1.5 0V10.5h3.613C13.41 7.134 11.87 4.256 10 3.632z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3Y; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-alert-traffic-disruption",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3X = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class AlertUnknown {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M2 2v17a3 3 0 003 3h14a3 3 0 003-3V2H2zm10 15.5a1.25 1.25 0 110-2.5 1.25 1.25 0 010 2.5zm1.75-5.5c-.5.43-.935.835-.935 1.46v.33H11.07v-.6c0-1.03.61-1.525 1.205-2 .5-.395.945-.77.945-1.395A1.045 1.045 0 0012.1 8.66a1.145 1.145 0 00-1.165 1.16H9.12a2.84 2.84 0 013-2.8c1.695 0 2.925 1.125 2.925 2.67-.02 1.17-.695 1.775-1.295 2.31z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M22 2v17a3 3 0 01-2.824 2.995L19 22H5a3 3 0 01-2.995-2.824L2 19V2h20zm-1.5 1.5h-17V19c0 .778.596 1.42 1.356 1.493L5 20.5h14c.778 0 1.42-.596 1.493-1.356L20.5 19V3.5zM12 15a1.25 1.25 0 110 2.5 1.25 1.25 0 010-2.5zm.1-7.98c1.696 0 2.927 1.123 2.927 2.67 0 1.023-.519 1.616-1.049 2.108l-.462.42c-.346.323-.636.654-.69 1.095l-.01.151v.332H11.07v-.602c0-.823.392-1.305.852-1.711l.234-.198.357-.294c.388-.33.707-.675.707-1.196 0-.699-.428-1.134-1.118-1.134-.612 0-1.02.367-1.146 1.015l-.023.143H9.12c.084-1.412 1.026-2.799 2.98-2.799z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3X; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-alert-unknown",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3W = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class AlertWarning {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 1C5.925 1 1 5.925 1 12s4.925 11 11 11 11-4.925 11-11A11 11 0 0012 1zm-1 5.75h2v6.5h-2v-6.5zm1 10.5a1.25 1.25 0 110-2.5 1.25 1.25 0 010 2.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 1c6.1 0 11 4.9 11 11s-4.9 11-11 11S1 18.1 1 12 5.9 1 12 1zm0 1.5c-5.25 0-9.5 4.25-9.5 9.5s4.25 9.5 9.5 9.5 9.5-4.25 9.5-9.5-4.25-9.5-9.5-9.5zM12 15a1.25 1.25 0 110 2.5 1.25 1.25 0 010-2.5zm1-8v6.5h-2V7h2z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3W; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-alert-warning",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
/**
 * Conditionally render markup for an icon based on data.
 *
 * @param value when a string, will be used as the `name` attribute in a `<scale-icon>`,
 *              when a function it should return a string of HTML
 * @param customContainerClass a custom class for the wrapper of the HTML returned by `value`
 */
const renderIcon = (value, customContainerClass) => {
  if (typeof value === 'function') {
    return hAsync("span", { innerHTML: value(), class: customContainerClass });
  }
  if (typeof value === 'string') {
    return hAsync("scale-icon", { name: value });
  }
  const Tag = value.tag;
  return hAsync(Tag, Object.assign({}, value.attributes));
};

const appFooterCss = "/*!@:host*/.sc-scale-app-footer-h{--background:var(--telekom-color-background-surface-highlight);--color:var(--telekom-color-text-and-icon-white-standard);--spacing-top:var(--telekom-spacing-composition-space-10);--spacing-bottom:var(--telekom-spacing-composition-space-08);--spacing-x:var(--telekom-spacing-composition-space-08);--background-container:var(--telekom-color-background-canvas);--radius:var(--telekom-radius-large);--max-width:inherit;--border-top-minimal:var(--telekom-spacing-composition-space-01) solid\n    var(--telekom-color-ui-faint);--color-minimal:var(--telekom-color-text-and-icon-additional);--background-minimal:var(--telekom-color-background-surface);--spacing-angular:var(--telekom-spacing-composition-space-08);--spacing-minimal:var(--telekom-spacing-composition-space-08);--background-mask:var(--telekom-color-background-canvas);--radius-mask:0 0 var(--telekom-radius-large) var(--telekom-radius-large);--font-size-copyright:var(--telekom-typography-font-size-caption);--color-link-standard:var(--telekom-color-text-and-icon-white-standard);--color-link-minimal:var(--telekom-color-text-and-icon-additional);--font-size-navigation-standard:var(--telekom-typography-font-size-caption);--font-family-navigation-standard:var(--telekom-typography-font-family-sans);--font-weight-navigation-standard:var(\n    --telekom-typography-font-weight-extra-bold\n  );--font-weight-navigation-minimal:var(\n    --telekom-typography-font-weight-medium\n  );--spacing-navigation-standard:var(--telekom-spacing-composition-space-04);--color-navigation-standard-hover:var(\n    --telekom-color-text-and-icon-white-standard\n  );--color-navigation-minimal-hover:var(\n    --telekom-color-text-and-icon-primary-hovered\n  );--color-navigation-active-focus:var(\n    --telekom-color-text-and-icon-primary-pressed\n  );--box-shadow-navigation-focus:0 0 0\n    var(--telekom-spacing-composition-space-02)\n    var(--telekom-color-functional-focus-standard);--border-color-standard-hover:var(\n    --telekom-color-text-and-icon-white-standard\n  )}/*!@.footer*/.footer.sc-scale-app-footer{width:100%;background:var(--background);color:var(--color);padding:var(--spacing-top) var(--spacing-x) var(--spacing-bottom)\n    var(--spacing-x);position:relative;bottom:0;box-sizing:border-box}/*!@.footer-container*/.footer-container.sc-scale-app-footer{background:var(--background)}/*!@.footer--variant-angular .footer*/.footer--variant-angular.sc-scale-app-footer .footer.sc-scale-app-footer{padding:var(--spacing-angular)}/*!@.footer--variant-minimal .footer*/.footer--variant-minimal.sc-scale-app-footer .footer.sc-scale-app-footer{border-top:var(--border-top-minimal);color:var(--color-minimal);background:var(--background-minimal);padding:var(--spacing-minimal)}/*!@.footer-mask*/.footer-mask.sc-scale-app-footer{position:relative;z-index:1;height:var(--radius);background:var(--background-mask);border-radius:var(--radius-mask)}/*!@.footer--variant-angular .footer-mask,\n.footer--variant-minimal .footer-mask*/.footer--variant-angular.sc-scale-app-footer .footer-mask.sc-scale-app-footer,.footer--variant-minimal.sc-scale-app-footer .footer-mask.sc-scale-app-footer{display:none}/*!@.footer-copyright*/.footer-copyright.sc-scale-app-footer{font-size:var(--font-size-copyright)}/*!@.footer-navigation a*/.footer-navigation.sc-scale-app-footer a.sc-scale-app-footer{color:var(--color-link-standard);text-decoration:none}/*!@.footer--variant-minimal .footer-navigation a*/.footer--variant-minimal.sc-scale-app-footer .footer-navigation.sc-scale-app-footer a.sc-scale-app-footer{color:var(--color-link-minimal)}/*!@.footer-navigation ul*/.footer-navigation.sc-scale-app-footer ul.sc-scale-app-footer{margin:0;padding:0;list-style:none;font-size:var(--font-size-navigation-standard);font-family:var(--font-family-navigation-standard);font-weight:var(--font-weight-navigation-standard)}/*!@.footer--variant-minimal .footer-navigation ul*/.footer--variant-minimal.sc-scale-app-footer .footer-navigation.sc-scale-app-footer ul.sc-scale-app-footer{font-weight:var(--font-weight-navigation-minimal)}/*!@.footer-navigation li a*/.footer-navigation.sc-scale-app-footer li.sc-scale-app-footer a.sc-scale-app-footer{display:flex;align-items:center;padding:var(--spacing-navigation-standard);margin:calc(-1 * var(--spacing-navigation-standard)) 0}/*!@.footer-navigation li span*/.footer-navigation.sc-scale-app-footer li.sc-scale-app-footer span.sc-scale-app-footer{padding:var(--telekom-spacing-composition-space-03) 0}/*!@.footer-navigation li a:hover*/.footer-navigation.sc-scale-app-footer li.sc-scale-app-footer a.sc-scale-app-footer:hover{color:var(--color-navigation-standard-hover)}/*!@.footer--variant-minimal .footer-navigation li a:hover*/.footer--variant-minimal.sc-scale-app-footer .footer-navigation.sc-scale-app-footer li.sc-scale-app-footer a.sc-scale-app-footer:hover{color:var(--color-navigation-minimal-hover)}/*!@.footer--variant-minimal .footer-navigation li a:hover span*/.footer--variant-minimal.sc-scale-app-footer .footer-navigation.sc-scale-app-footer li.sc-scale-app-footer a.sc-scale-app-footer:hover span.sc-scale-app-footer{border-bottom:1px solid transparent;margin-bottom:-1px}/*!@.footer--variant-angular .footer-navigation li a:hover span,\n.footer--variant-standard .footer-navigation li a:hover span*/.footer--variant-angular.sc-scale-app-footer .footer-navigation.sc-scale-app-footer li.sc-scale-app-footer a.sc-scale-app-footer:hover span.sc-scale-app-footer,.footer--variant-standard.sc-scale-app-footer .footer-navigation.sc-scale-app-footer li.sc-scale-app-footer a.sc-scale-app-footer:hover span.sc-scale-app-footer{border-bottom:1px solid var(--border-color-standard-hover);margin-bottom:-1px}/*!@.footer-navigation li a:active*/.footer-navigation.sc-scale-app-footer li.sc-scale-app-footer a.sc-scale-app-footer:active{color:var(--color-navigation-active-focus, #cb0068)}/*!@.footer--variant-minimal .footer-navigation li a:active span*/.footer--variant-minimal.sc-scale-app-footer .footer-navigation.sc-scale-app-footer li.sc-scale-app-footer a.sc-scale-app-footer:active span.sc-scale-app-footer{border-bottom:1px solid transparent;margin-bottom:-1px}/*!@.footer--variant-angular .footer-navigation li a:active span,\n.footer--variant-standard .footer-navigation li a:active span*/.footer--variant-angular.sc-scale-app-footer .footer-navigation.sc-scale-app-footer li.sc-scale-app-footer a.sc-scale-app-footer:active span.sc-scale-app-footer,.footer--variant-standard.sc-scale-app-footer .footer-navigation.sc-scale-app-footer li.sc-scale-app-footer a.sc-scale-app-footer:active span.sc-scale-app-footer{border-bottom:1px solid var(--color-navigation-active-focus);margin-bottom:-1px}/*!@.footer-navigation li a:active:focus*/.footer-navigation.sc-scale-app-footer li.sc-scale-app-footer a.sc-scale-app-footer:active:focus{color:var(--color-navigation-active-focus);box-shadow:none}/*!@.footer-navigation li a:focus*/.footer-navigation.sc-scale-app-footer li.sc-scale-app-footer a.sc-scale-app-footer:focus{outline:none;box-shadow:var(--box-shadow-navigation-focus);border-radius:var(--radius)}/*!@.footer-navigation svg*/.footer-navigation.sc-scale-app-footer svg.sc-scale-app-footer{width:auto;height:var(--telekom-spacing-composition-space-06);margin-right:var(--spacing-navigation-standard)}/*!@.footer--variant-minimal .footer-copyright*/.footer--variant-minimal.sc-scale-app-footer .footer-copyright.sc-scale-app-footer{justify-content:flex-start}/*!@.footer--variant-minimal .footer-branding*/.footer--variant-minimal.sc-scale-app-footer .footer-branding.sc-scale-app-footer{display:none}/*!@.footer--variant-minimal .footer-content*/.footer--variant-minimal.sc-scale-app-footer .footer-content.sc-scale-app-footer{grid-template-areas:'copyright navigation navigation'}@media (max-width: 639px){/*!@.footer-branding*/.footer-branding.sc-scale-app-footer{margin-bottom:var(--spacing-angular)}/*!@.footer-copyright*/.footer-copyright.sc-scale-app-footer{margin-bottom:var(--telekom-spacing-composition-space-06)}/*!@.footer-navigation ul*/.footer-navigation.sc-scale-app-footer ul.sc-scale-app-footer{line-height:var(--telekom-spacing-composition-space-10)}/*!@.footer-navigation li a*/.footer-navigation.sc-scale-app-footer li.sc-scale-app-footer a.sc-scale-app-footer{padding:var(--telekom-spacing-composition-space-03);margin:calc(-1 * var(--spacing-navigation-standard))\n      calc(-1 * var(--telekom-spacing-composition-space-03))}}@media (min-width: 640px){/*!@.footer-branding*/.footer-branding.sc-scale-app-footer{grid-area:branding;width:100%;display:flex;align-items:center;justify-content:flex-start}/*!@.footer-copyright*/.footer-copyright.sc-scale-app-footer{grid-area:copyright;width:100%;display:flex;align-items:center;justify-content:center}/*!@.footer-navigation*/.footer-navigation.sc-scale-app-footer{grid-area:navigation;width:100%;display:flex;align-items:center;justify-content:flex-end}/*!@.footer-navigation ul*/.footer-navigation.sc-scale-app-footer ul.sc-scale-app-footer{display:flex;align-items:center}}@media (min-width: 640px) and (max-width: 1295px){/*!@.footer-content*/.footer-content.sc-scale-app-footer{display:grid;grid-template-columns:repeat(auto-fit, minmax(0, 1fr));grid-template-areas:'branding ....... .......'\n      'copyright navigation navigation'}/*!@.footer-branding*/.footer-branding.sc-scale-app-footer{margin-bottom:var(--spacing-angular)}/*!@.footer-copyright*/.footer-copyright.sc-scale-app-footer{justify-content:flex-start}}@media (min-width: 1296px){/*!@.footer-content*/.footer-content.sc-scale-app-footer{display:grid;grid-template-columns:minmax(0, 1fr) minmax(0, 1fr) minmax(0, 1fr);grid-template-areas:'branding copyright navigation'}}@media (min-width: 1552px){/*!@.footer-content*/.footer-content.sc-scale-app-footer{margin:0 auto;max-width:var(--max-width)}}/*!@scale-logo:focus-visible*/scale-logo.sc-scale-app-footer:focus-visible{outline:none}";

const readData$4 = (data) => {
  let parsedData;
  try {
    parsedData = JSON.parse(data);
  }
  catch (error) {
    parsedData = data;
  }
  return parsedData;
};
class AppFooter {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.footerNavigation = [];
    this.variant = 'standard';
    this.copyright = '© Deutsche Telekom AG';
  }
  componentWillLoad() {
    this.hasSlotLogo = !!this.hostElement.querySelector('[slot="logo"]');
    this.hasSlotNavigation = !!this.hostElement.querySelector('[slot="navigation"]');
  }
  render() {
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { class: this.getCssClassMap() }, hAsync("div", { class: "footer-mask" }), hAsync("footer", { class: "footer" }, hAsync("div", { class: "footer-content" }, hAsync("div", { class: "footer-branding" }, this.hasSlotLogo ? (hAsync("slot", { name: "logo" })) : (hAsync("scale-logo", { transparent: true, variant: "white", size: 24, href: this.logoHref, logoTitle: this.logoTitle, onClick: this.logoClick, logoAriaDescribedBy: this.logoAriaDescribedBy }))), hAsync("div", { class: "footer-copyright" }, this.copyright), hAsync("nav", { "aria-label": "bottom", class: "footer-navigation" }, this.hasSlotNavigation ? (hAsync("slot", { name: "navigation" })) : (hAsync("ul", null, readData$4(this.footerNavigation).map((item) => (hAsync("li", { class: "footer-navigation__item" }, hAsync("a", { class: "footer-navigation__item-link", href: item.href || 'javascript:void(0);', target: item.target || '_self', onClick: (event) => {
        if (typeof item.onClick === 'function') {
          item.onClick(event);
        }
      } }, item.icon &&
      renderIcon({
        tag: `scale-icon-${item.icon}`,
        attributes: {
          class: 'footer-navigation__item-link',
        },
      }), hAsync("span", null, item.name)))))))))))));
  }
  getCssClassMap() {
    return classnames('footer-container', this.variant && `footer--variant-${this.variant}`);
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return appFooterCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-app-footer",
    "$members$": {
      "footerNavigation": [8, "footer-navigation"],
      "variant": [1],
      "copyright": [1],
      "logoHref": [1, "logo-href"],
      "logoTitle": [1, "logo-title"],
      "logoClick": [8, "logo-click"],
      "logoAriaDescribedBy": [1, "logo-aria-described-by"],
      "styles": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const appNavigationUserMenuCss = "/*!@:host*/.sc-app-navigation-user-menu-h{--border-width-divider:var(--telekom-spacing-composition-space-01);--color-divider:var(--telekom-color-ui-subtle);--color-menu-item-hover:var(--telekom-color-text-and-icon-primary-hovered);--color-menu-item-active:var(--telekom-color-text-and-icon-primary-pressed);--box-shadow-focus:0 0 0 var(--telekom-line-weight-highlight)\n    var(--telekom-color-functional-focus-standard)}/*!@.app-navigation-user-menu*/.app-navigation-user-menu.sc-app-navigation-user-menu{width:100%;position:relative;min-width:260px}/*!@.app-navigation-user-menu__divider*/.app-navigation-user-menu__divider.sc-app-navigation-user-menu{margin:var(--telekom-spacing-composition-space-06) 0;border:0;border-top:var(--border-width-divider) solid var(--color-divider)}@media (min-width: 1040px){/*!@.app-navigation-user-menu__user-info*/.app-navigation-user-menu__user-info.sc-app-navigation-user-menu{margin:var(--telekom-spacing-composition-space-05)\n      var(--telekom-spacing-composition-space-08) 0\n      var(--telekom-spacing-composition-space-08)}}@media (max-width: 1039px){/*!@.app-navigation-user-menu__user-info*/.app-navigation-user-menu__user-info.sc-app-navigation-user-menu{margin:var(--telekom-spacing-composition-space-08)\n      var(--telekom-spacing-composition-space-06) 0\n      var(--telekom-spacing-composition-space-06)}}/*!@.app-navigation-user-menu__user-info--name*/.app-navigation-user-menu__user-info--name.sc-app-navigation-user-menu{font:var(--telekom-text-style-heading-5);margin-bottom:var(--telekom-spacing-composition-space-03)}/*!@.app-navigation-user-menu__user-info--email*/.app-navigation-user-menu__user-info--email.sc-app-navigation-user-menu{color:var(--telekom-color-text-and-icon-additional);font:var(--telekom-text-style-body)}/*!@.app-navigation-user-menu__item*/.app-navigation-user-menu__item.sc-app-navigation-user-menu{display:flex;font:var(--telekom-text-style-heading-6);padding:var(--telekom-spacing-composition-space-04)\n    var(--telekom-spacing-composition-space-06);border-radius:calc(var(--telekom-radius-small) / 2);color:var(--telekom-color-text-and-icon-standard);text-decoration:none}@media (min-width: 1040px){/*!@.app-navigation-user-menu__item*/.app-navigation-user-menu__item.sc-app-navigation-user-menu{padding:var(--telekom-spacing-composition-space-04)\n      var(--telekom-spacing-composition-space-08)}}/*!@.app-navigation-user-menu__item:hover*/.app-navigation-user-menu__item.sc-app-navigation-user-menu:hover{color:var(--color-menu-item-hover)}/*!@.app-navigation-user-menu__item:active*/.app-navigation-user-menu__item.sc-app-navigation-user-menu:active{color:var(--color-menu-item-active)}/*!@.app-navigation-user-menu__item:focus*/.app-navigation-user-menu__item.sc-app-navigation-user-menu:focus{outline:none;box-shadow:var(--box-shadow-focus)}/*!@.app-navigation-user-menu__item--icon-prefix*/.app-navigation-user-menu__item--icon-prefix.sc-app-navigation-user-menu{margin-right:var(--telekom-spacing-composition-space-04)}/*!@.app-navigation-user-menu__item--icon-suffix*/.app-navigation-user-menu__item--icon-suffix.sc-app-navigation-user-menu{margin-left:var(--telekom-spacing-composition-space-04)}/*!@.app-navigation-user-menu__button*/.app-navigation-user-menu__button.sc-app-navigation-user-menu{padding:var(--telekom-spacing-composition-space-04)\n    var(--telekom-spacing-composition-space-06)}@media (min-width: 1040px){/*!@.app-navigation-user-menu__button*/.app-navigation-user-menu__button.sc-app-navigation-user-menu{padding:var(--telekom-spacing-composition-space-04)\n      var(--telekom-spacing-composition-space-08)}}@media (min-width: 1040px){/*!@.app-navigation-user-menu*/.app-navigation-user-menu.sc-app-navigation-user-menu{padding-bottom:var(--telekom-spacing-composition-space-03)}}";

class AppNavigationUserMenu {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.closeMenu = createEvent$1(this, "closeMenu", 7);
  }
  render() {
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { class: "app-navigation-user-menu" }, hAsync("slot", null), this.navigation.map((item) => {
      if (item.type === 'divider') {
        return (hAsync("hr", { class: "app-navigation-user-menu__divider", part: "rule-horizontal" }));
      }
      if (item.type === 'userInfo') {
        return (hAsync("div", { class: "app-navigation-user-menu__user-info", part: "userInfo" }, hAsync("div", { class: "app-navigation-user-menu__user-info--name scl-font-variant-heading-4" }, item.name), hAsync("div", { class: "app-navigation-user-menu__user-info--email" }, item.email)));
      }
      if (item.type === 'item') {
        return (hAsync("a", { href: item.href || 'javascript:void(0);', target: item.target || '_self', tabindex: 0, class: "app-navigation-user-menu__item", part: "item", onClick: (e) => {
            e.stopImmediatePropagation();
            if (item.onClick) {
              item.onClick(e);
            }
            this.hide();
          }, onKeyDown: (e) => {
            if ([' ', 'Enter'].includes(e.key)) {
              e.stopImmediatePropagation();
              e.preventDefault();
              if (item.onClick) {
                item.onClick(e);
              }
              this.hide();
            }
          } }, item.icon &&
          (!item.iconPosition || item.iconPosition === 'prefix')
          ? renderIcon({
            tag: `scale-icon-${item.icon}`,
            attributes: {
              class: `app-navigation-user-menu__item--icon-prefix`,
            },
          })
          : null, item.name, item.icon && item.iconPosition === 'suffix'
          ? renderIcon({
            tag: `scale-icon-${item.icon}`,
            attributes: {
              class: `app-navigation-user-menu__item--icon-suffix`,
            },
          })
          : null));
      }
      if (item.type === 'button') {
        return (hAsync("scale-button", { class: "app-navigation-user-menu__button", part: "button", onClick: (e) => {
            if (item.onClick) {
              item.onClick(e);
            }
            this.hide();
          }, onKeyDown: (e) => {
            if ([' ', 'Enter'].includes(e.key)) {
              e.stopImmediatePropagation();
              e.preventDefault();
              if (item.onClick) {
                item.onClick(e);
              }
              this.hide();
            }
          }, href: item.href, variant: item.variant || 'primary' }, item.icon &&
          (!item.iconPosition || item.iconPosition === 'prefix')
          ? renderIcon({
            tag: `scale-icon-${item.icon}`,
            attributes: {},
          })
          : null, item.name, item.icon && item.iconPosition === 'suffix'
          ? renderIcon({
            tag: `scale-icon-${item.icon}`,
            attributes: {},
          })
          : null));
      }
    }))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return appNavigationUserMenuCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "app-navigation-user-menu",
    "$members$": {
      "hide": [16],
      "navigation": [8],
      "styles": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const badgeCss = "/*!@:host*/.sc-scale-badge-h{--background-color-circle:var(--telekom-color-primary-standard);--color-circle:var(--telekom-color-text-and-icon-inverted-standard);--font-size-circle:var(--telekom-typography-font-size-badge);--font-weight-circle:bold;--border-radius-circle:var(--telekom-radius-circle);--font-color-label:var(--telekom-color-text-and-icon-standard);--_display-circle:flex;display:flex}/*!@:host([no-dot])*/[no-dot].sc-scale-badge-h{--_display-circle:none}/*!@:host::part(base)*/.sc-scale-badge-h::part(base){display:inline-flex;position:relative;align-items:center}/*!@:host::part(circle)*/.sc-scale-badge-h::part(circle){display:var(--_display-circle);position:absolute;align-items:center;justify-content:center;font-size:var(--font-size-circle);font-weight:var(--font-weight-circle);border-radius:var(--border-radius-circle);background-color:var(--background-color-circle);color:var(--color-circle)}/*!@:host::part(circle has-count)*/.sc-scale-badge-h::part(circle has-count).sc-scale-badge{padding:0 2px;top:-8px;right:-5px;height:14px;min-width:10px}/*!@:host::part(circle no-count)*/.sc-scale-badge-h::part(circle no-count).sc-scale-badge{top:-4px;right:-2px;height:8px;min-width:8px}/*!@:host::part(label)*/.sc-scale-badge-h::part(label){margin-left:8px;font-weight:400;font-size:12px;color:var(--font-color-label);display:flex;align-items:center}/*!@:host::part(visually-hidden)*/.sc-scale-badge-h::part(visually-hidden){clip-path:inset(100%);clip:rect(1px, 1px, 1px, 1px);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px}";

class Badge {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** a11y text for getting meaningful value. */
    this.ariaLabelTranslation = '$label - $count item';
    this.formatter = new Intl.NumberFormat('en', {
      // @ts-ignore
      notation: 'compact',
    });
  }
  connectedCallback() {
    statusNote({ source: this.hostElement, tag: 'beta' });
  }
  getAriaLabel() {
    const filledText = this.ariaLabelTranslation
      .replace(/\$count/g, `${this.count}`)
      .replace(/\$label/g, `${this.label}`);
    return filledText;
  }
  render() {
    return (hAsync(Host$1, null, hAsync("span", { part: "base", "aria-label": this.count ? this.getAriaLabel() : this.label }, hAsync("slot", null), hAsync("slot", { name: "dot" }), hAsync("span", { "aria-hidden": "true", part: classnames(`circle`, this.count ? `has-count` : 'no-count') }, !this.count ? '' : this.formatter.format(this.count)), hAsync("span", { "aria-hidden": "true", id: "raw-count", part: "visually-hidden" }, this.count)), hAsync("span", { id: "label", part: classnames('label', this.labelVisuallyHidden && 'visually-hidden'), "aria-hidden": "true" }, this.label)));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return badgeCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-badge",
    "$members$": {
      "count": [2],
      "label": [1],
      "labelVisuallyHidden": [4, "label-visually-hidden"],
      "ariaLabelTranslation": [1, "aria-label-translation"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const breadcrumbCss = "/*!@:host*/.sc-scale-breadcrumb-h{--spacing-left:calc(-1 * var(--telekom-spacing-composition-space-04));--font-size-list-item:var(--telekom-typography-font-size-caption);--color-separator:var(--telekom-color-text-and-icon-additional);--spacing-y-item:var(--telekom-spacing-composition-space-03);--spacing-x-item:var(--telekom-spacing-composition-space-04);--color-link:var(--telekom-color-text-and-icon-additional);--radius-link:var(--telekom-radius-standard);--color-link-hover:var(--telekom-color-text-and-icon-primary-hovered);--color-link-active:var(--telekom-color-text-and-icon-primary-pressed);--focus-outline:var(--telekom-line-weight-highlight) solid\n    var(--telekom-color-functional-focus-standard);--font-current:var(--telekom-text-style-caption-bold);--color-current:var(--telekom-color-text-and-icon-standard)}/*!@.breadcrumb*/.breadcrumb.sc-scale-breadcrumb{margin-left:var(--spacing-left)}/*!@.breadcrumb__list*/.breadcrumb__list.sc-scale-breadcrumb{display:flex;list-style:none;margin-top:0;padding-left:0;margin-bottom:0}/*!@.breadcrumb__list-item*/.breadcrumb__list-item.sc-scale-breadcrumb{display:inline-flex;font-size:var(--font-size-list-item);align-items:center}/*!@.breadcrumb__separator*/.breadcrumb__separator.sc-scale-breadcrumb{display:flex;color:var(--color-separator)}/*!@.breadcrumb__item,\n.breadcrumb__link*/.breadcrumb__item.sc-scale-breadcrumb,.breadcrumb__link.sc-scale-breadcrumb{padding:var(--spacing-y-item) var(--spacing-x-item)}/*!@.breadcrumb__link*/.breadcrumb__link.sc-scale-breadcrumb{text-decoration:none;color:var(--color-link);border-radius:var(--radius-link)}/*!@.breadcrumb__link:hover*/.breadcrumb__link.sc-scale-breadcrumb:hover{color:var(--color-link-hover)}/*!@.breadcrumb__link:active*/.breadcrumb__link.sc-scale-breadcrumb:active{color:var(--color-link-active)}/*!@.breadcrumb__link:focus*/.breadcrumb__link.sc-scale-breadcrumb:focus{outline:var(--focus-outline)}/*!@.breadcrumb__current*/.breadcrumb__current.sc-scale-breadcrumb{font:var(--font-current);color:var(--color-current)}";

/*
    @see https://www.w3.org/TR/wai-aria-practices/examples/breadcrumb/index.html
  */
class Breadcrumb {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.linksArray = [];
    this.separatorSlot = null;
  }
  componentWillLoad() {
    if (this.linksArray.length === 0) {
      this.setLinksArray();
    }
    this.separatorSlot = this.hostElement.querySelector('[slot="separator"]');
  }
  componentDidLoad() {
    const observer = new MutationObserver(() => {
      this.setLinksArray();
    });
    observer.observe(this.hostElement, {
      attributes: false,
      childList: true,
      subtree: true,
    });
    this.mo = observer;
  }
  disconnectedCallback() {
    if (this.mo) {
      this.mo.disconnect();
    }
  }
  setLinksArray() {
    this.linksArray = Array.from(this.hostElement.children).filter((element) => element.slot === '');
  }
  render() {
    const isLast = (index) => index === this.linksArray.length - 1;
    // Set aria-current="page" to the last item if it's a link
    const getCurrentAttr = (index) => isLast(index) === true ? { 'aria-current': 'page' } : undefined;
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("nav", { "aria-label": "Breadcrumb", class: this.getCssClassMap(), part: "base" }, hAsync("ol", { class: "breadcrumb__list", part: "list" }, this.linksArray.map((element, index) => {
      const separator = this.separatorSlot != null ? (hAsync("span", { class: "breadcrumb__separator", part: "separator", innerHTML: this.separatorSlot.innerHTML })) : (hAsync("span", { class: "breadcrumb__separator", part: "separator" }, this.separator || (hAsync("scale-icon-navigation-right", { size: 12 }))));
      return (hAsync("li", { class: "breadcrumb__list-item", part: "list-item" }, element.href || element.tagName === 'SCALE-LINK' ? (hAsync("a", Object.assign({ href: element.href, class: classnames(isLast(index) && 'breadcrumb__current', 'breadcrumb__link'), part: classnames(isLast(index) && 'current', 'link') }, getCurrentAttr(index)), element.textContent)) : (hAsync("span", { class: classnames(isLast(index) && 'breadcrumb__current', 'breadcrumb__item'), part: classnames(isLast(index) && 'current', 'item') }, element.textContent)), isLast(index) ? null : separator));
    })))));
  }
  getCssClassMap() {
    return classnames('breadcrumb');
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return breadcrumbCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-breadcrumb",
    "$members$": {
      "separator": [1],
      "styles": [1],
      "linksArray": [32],
      "separatorSlot": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
const hasShadowDom = (el) => {
  return !!el.shadowRoot && !!el.attachShadow;
};
// eg isPseudoClassSupported(':focus-visible') // true for chrome, false for safari
const isPseudoClassSupported = (pseudoClass) => {
  // Get the document stylesheet1
  let ss = document.styleSheets[0];
  // Create a stylesheet if one doesn't exist
  if (!ss) {
    const el = document.createElement('style');
    document.head.appendChild(el);
    ss = document.styleSheets[0];
    document.head.removeChild(el);
  }
  // Test the pseudo-class by trying to style with it
  function testPseudo() {
    try {
      if (!/^:/.test(pseudoClass)) {
        pseudoClass = ':' + pseudoClass;
      }
      ss.insertRule('html' + pseudoClass + '{}', 0);
      ss.deleteRule(0);
      return true;
    }
    catch (e) {
      return false;
    }
  }
  // Run the test
  return testPseudo();
};
/**
 * Call `emit` on component events twice.
 * One for the legacy camel-cased event, one for the new kebab-cased.
 * e.g. for the event `scaleChange` it will do `instance.scaleChange.emit()` and `instance.scaleChangeLegacy.emit()`.
 * It expects both `scaleChange` and `scaleChangeLegacy` event-decorated properties to exist on the component.
 *
 * @param instance {ComponentInterface} - The component instance, aka `this`
 * @param eventKey {string} - The event property, e.g. `scaleChange`
 * @param detail {any} - The custom event `detail`
 * @returns {CustomEvent[]} - The events emitted
 */
function emitEvent$1(instance, eventKey, detail) {
  const legacyKey = eventKey + 'Legacy';
  const emitted = [];
  if (typeof instance[legacyKey] !== 'undefined') {
    // Emit legacy camel case event, e.g. `scaleClose`
    emitted.push(instance[legacyKey].emit(detail));
  }
  // Emit now-standard kebab-case event, e.g. `scale-close`
  emitted.push(instance[eventKey].emit(detail));
  // Return both
  return emitted;
}
function isClickOutside(event, host) {
  let target = event.target;
  const hasShadow = target.shadowRoot != null;
  const composedPath = hasShadow ? event.composedPath() : [];
  do {
    if (target === host) {
      return false;
    }
    if (hasShadow) {
      // @ts-ignore
      target = composedPath.shift();
    }
    else {
      target = target.parentNode;
    }
  } while (target);
  return true;
}
const isScaleIcon = (el) => {
  if (el == null || el.nodeType !== 1) {
    return false;
  }
  return el.nodeName.toUpperCase().substring(0, 10) === 'SCALE-ICON';
};
/** Creating global ids for different component helper-texts */
let id$1 = 0;
function generateUniqueId() {
  return id$1++;
}
/**
 * Useful for waiting for animations to finish before doing something.
 *
 * @param el {HTMLElement | ShadowRoot} - The element to call `getAnimations` on
 * @returns {Promise} - Resolves when all animations are finished
 */
const animationsFinished = (el) => {
  return Promise.all(el.getAnimations({ subtree: true }).map((x) => x.finished));
};

const buttonCss = "/*!@:host*/.sc-scale-button-h{--width:auto;--spacing-x-right:var(--telekom-spacing-composition-space-07);--spacing-x-left:var(--telekom-spacing-composition-space-07);--spacing-x-icon-only:var(--telekom-spacing-composition-space-05);--min-height:var(--telekom-spacing-composition-space-13);--min-width:var(--telekom-spacing-composition-space-13);--radius:var(--telekom-radius-standard);--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);--color-focus:var(--telekom-color-functional-focus-standard);--font-weight:var(--telekom-typography-font-weight-bold);--font-size:var(--telekom-typography-font-size-body);--line-height:var(--telekom-typography-line-spacing-tight);--spacing-icon-x:var(--telekom-spacing-composition-space-04);--vertical-align:middle;--font-size-small:var(--telekom-typography-font-size-caption);--line-height-small:1.125rem;--min-height-small:var(--telekom-spacing-composition-space-10);--spacing-x-right-small:var(--telekom-spacing-composition-space-06);--spacing-x-left-small:var(--telekom-spacing-composition-space-06);--spacing-x-icon-only-small:var(--telekom-spacing-composition-space-00);--spacing-icon-x-small:var(--telekom-spacing-composition-space-03);--radius-primary:var(--radius);--background-primary:var(--telekom-color-primary-standard);--background-primary-hover:var(--telekom-color-primary-hovered);--background-primary-active:var(--telekom-color-primary-pressed);--background-primary-disabled:var(--telekom-color-ui-disabled);--color-primary:var(--telekom-color-text-and-icon-white-standard);--color-primary-disabled:var(--telekom-color-text-and-icon-disabled);--radius-secondary:var(--radius);--border-width-secondary:var(--telekom-spacing-composition-space-01);--background-secondary:transparent;--color-secondary:var(--telekom-color-text-and-icon-standard);--color-secondary-hover:var(--telekom-color-text-and-icon-standard);--color-secondary-active:var(--telekom-color-text-and-icon-standard);--color-secondary-disabled:var(--telekom-color-text-and-icon-disabled);--background-secondary:var(--telekom-color-ui-state-fill-standard);--background-secondary-hover:var(--telekom-color-ui-state-fill-hovered);--background-secondary-active:var(--telekom-color-ui-state-fill-pressed);--background-secondary-disabled:none;--border-secondary:var(--telekom-color-ui-border-standard);--border-secondary-hover:var(--telekom-color-ui-border-hovered);--border-secondary-active:var(--telekom-color-ui-border-pressed);--border-secondary-focus:var(--telekom-color-functional-focus-standard);--border-secondary-white:var(--telekom-color-ui-white);--color-secondary-white:var(--telekom-color-ui-white);--background-secondary-white-hover:var(\n    --telekom-color-ui-state-fill-hovered-inverted\n  );--background-secondary-white-active:var(\n    --telekom-color-ui-state-fill-pressed-inverted\n  );--secondary-white-opacity:0.5;--radius-ghost:var(--radius);--border-width-ghost:var(--telekom-spacing-composition-space-01);--spacing-x-ghost:var(--telekom-spacing-composition-space-04);--color-ghost:var(--telekom-color-text-and-icon-link-standard);--color-ghost-hover:var(--telekom-color-text-and-icon-link-hovered);--color-ghost-active:var(--telekom-color-text-and-icon-link-active);--color-ghost-disabled:var(--telekom-color-text-and-icon-disabled);--background-ghost-hover:var(--telekom-color-ui-state-fill-hovered);--background-ghost-active:var(--telekom-color-ui-state-fill-pressed);display:inline-block}/*!@.button*/.button.sc-scale-button{box-sizing:border-box;display:inline-flex;align-items:center;position:relative;border:0;outline:none;cursor:pointer;user-select:none;font-family:inherit;word-spacing:inherit;letter-spacing:inherit;justify-content:center;text-decoration:none;font-weight:var(--font-weight);font-size:var(--font-size);line-height:var(--line-height);min-height:var(--min-height);min-width:var(--min-width);width:var(--width);padding-left:var(--spacing-x-left);padding-right:var(--spacing-x-right);vertical-align:var(--vertical-align);transition:var(--transition)}/*!@.button.button--size-small*/.button.button--size-small.sc-scale-button{font-size:var(--font-size-small);line-height:var(--line-height-small);min-height:var(--min-height-small);padding-left:var(--spacing-x-left-small);padding-right:var(--spacing-x-right-small)}/*!@.button:not(.button--disabled):focus*/.button.sc-scale-button:not(.button--disabled):focus{outline:var(--telekom-line-weight-highlight) solid var(--color-focus);outline-offset:var(--telekom-spacing-composition-space-01)}/*!@.button.button--icon-before:not(.button--icon-only) ::slotted(*)*/.button.button--icon-before:not(.button--icon-only) .sc-scale-button-s>*{margin-right:var(--spacing-icon-x);margin-left:calc(var(--spacing-icon-x-small) * -1);margin-top:var(--spacing-icon-x);margin-bottom:var(--spacing-icon-x)}/*!@.button.button--icon-before:not(.button--icon-only).button--size-small\n  ::slotted(*)*/.button.button--icon-before:not(.button--icon-only).button--size-small .sc-scale-button-s>*{margin-right:var(--spacing-icon-x-small);margin-left:calc(var(--spacing-icon-x) * -0.5)}/*!@.button.button--icon-after:not(.button--icon-only) ::slotted(*)*/.button.button--icon-after:not(.button--icon-only) .sc-scale-button-s>*{margin-left:var(--spacing-icon-x);margin-right:calc(var(--spacing-icon-x-small) * -1);margin-top:var(--spacing-icon-x);margin-bottom:var(--spacing-icon-x)}/*!@.button.button--icon-after:not(.button--icon-only).button--size-small\n  ::slotted(*)*/.button.button--icon-after:not(.button--icon-only).button--size-small .sc-scale-button-s>*{margin-left:var(--spacing-icon-x-small);margin-right:calc(var(--spacing-icon-x) * -0.5)}/*!@.button:after*/.button.sc-scale-button:after{top:0;left:0;width:100%;border:var(--telekom-spacing-composition-space-01) solid transparent;height:100%;content:'';display:block;position:absolute;box-sizing:border-box;pointer-events:none;border-radius:var(--radius)}/*!@.button--icon-only*/.button--icon-only.sc-scale-button{padding-left:var(--spacing-x-icon-only);padding-right:var(--spacing-x-icon-only)}/*!@.button--icon-only.button--variant-secondary*/.button--icon-only.button--variant-secondary.sc-scale-button{padding-left:calc(var(--spacing-x-icon-only) - 1px);padding-right:calc(var(--spacing-x-icon-only) - 1px)}/*!@.button--icon-only.button--size-small*/.button--icon-only.button--size-small.sc-scale-button{padding-left:var(--spacing-x-icon-only-small);padding-right:var(--spacing-x-icon-only-small);min-width:32px}/*!@.button--icon-only.button--size-small.button--variant-secondary*/.button--icon-only.button--size-small.button--variant-secondary.sc-scale-button{padding-left:calc(var(--spacing-x-icon-only-small) - 1px);padding-right:calc(var(--spacing-x-icon-only-small) - 1px)}/*!@.button--disabled*/.button--disabled.sc-scale-button{cursor:not-allowed}/*!@.button--variant-primary*/.button--variant-primary.sc-scale-button{text-align:center;border-radius:var(--radius);background:var(--background-primary);color:var(--color-primary)}/*!@.button--variant-primary:not(.button--disabled):hover*/.button--variant-primary.sc-scale-button:not(.button--disabled):hover{background:var(--background-primary-hover)}/*!@.button--variant-primary:not(.button--disabled):active*/.button--variant-primary.sc-scale-button:not(.button--disabled):active{background:var(--background-primary-active)}/*!@.button--disabled.button--variant-primary*/.button--disabled.button--variant-primary.sc-scale-button{background:var(--background-primary-disabled);color:var(--color-primary-disabled)}/*!@.button--variant-secondary*/.button--variant-secondary.sc-scale-button{background:var(--background-secondary);text-align:center;border-radius:var(--radius-secondary);border:var(--border-width-secondary) solid currentColor;color:var(--color-secondary);background-color:var(--background-secondary);border-color:var(--border-secondary)}/*!@.button--variant-secondary:not(.button--disabled):hover*/.button--variant-secondary.sc-scale-button:not(.button--disabled):hover{color:var(--color-secondary-hover);background-color:var(--background-secondary-hover);border-color:var(--border-secondary-hover)}/*!@.button--variant-secondary:not(.button--disabled):active*/.button--variant-secondary.sc-scale-button:not(.button--disabled):active{color:var(--color-secondary-active);background-color:var(--background-secondary-active);border-color:var(--border-secondary-active)}/*!@.button--disabled.button--variant-secondary*/.button--disabled.button--variant-secondary.sc-scale-button{color:var(--color-secondary-disabled);background-color:var(--background-secondary-disabled)}/*!@.button--variant-ghost*/.button--variant-ghost.sc-scale-button{background:transparent;text-align:center;border-radius:var(--radius-ghost);border:var(--border-width-ghost) solid transparent;color:var(--color-ghost);padding-left:var(--spacing-x-ghost);padding-right:var(--spacing-x-ghost)}/*!@.button--variant-ghost:not(.button--disabled):hover*/.button--variant-ghost.sc-scale-button:not(.button--disabled):hover{color:var(--color-ghost-hover);background-color:var(--background-ghost-hover)}/*!@.button--variant-ghost:not(.button--disabled):active*/.button--variant-ghost.sc-scale-button:not(.button--disabled):active{color:var(--color-ghost-active);background-color:var(--background-ghost-active)}/*!@.button--disabled.button--variant-ghost*/.button--disabled.button--variant-ghost.sc-scale-button{color:var(--color-ghost-disabled)}/*!@.button--variant-secondary-white*/.button--variant-secondary-white.sc-scale-button{background:var(--background-secondary);text-align:center;border-radius:var(--radius-secondary);border:var(--border-width-secondary) solid currentColor;color:var(--color-secondary-white);background-color:var(--background-secondary);border-color:var(--border-secondary-white)}/*!@.button--variant-secondary-white:not(.button--disabled):hover*/.button--variant-secondary-white.sc-scale-button:not(.button--disabled):hover{background-color:var(--background-secondary-white-hover)}/*!@.button--variant-secondary-white:not(.button--disabled):active*/.button--variant-secondary-white.sc-scale-button:not(.button--disabled):active{background-color:var(--background-secondary-white-active)}/*!@.button--disabled.button--variant-secondary-white*/.button--disabled.button--variant-secondary-white.sc-scale-button{opacity:var(--secondary-white-opacity)}";

const DEFAULT_ICON_SIZE$4 = 24;
const buttonIconSizeMap = {
  small: 16,
  large: 20,
};
class Button {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The size of the button */
    this.size = 'large';
    /** (optional) Button variant */
    this.variant = 'primary';
    /** (optional) If `true`, the button is disabled */
    this.disabled = false;
    /** (optional) Set to `true` when the button contains only an icon */
    this.iconOnly = false;
    /** (optional) Icon position related to the label */
    this.iconPosition = 'before';
    /** (optional) The target attribute for the <a> tag */
    this.target = '_self';
    /**
     * Hack to make the button behave has expected when inside forms.
     * @see https://github.com/ionic-team/ionic-framework/blob/master/core/src/components/button/button.tsx#L155-L175
     */
    this.handleClick = (ev) => {
      // No need to check for `disabled` because disabled buttons won't emit clicks
      if (hasShadowDom(this.hostElement)) {
        const parentForm = this.hostElement.closest('form');
        if (parentForm) {
          ev.preventDefault();
          const fakeButton = document.createElement('button');
          if (this.type) {
            fakeButton.type = this.type;
          }
          fakeButton.style.display = 'none';
          parentForm.appendChild(fakeButton);
          fakeButton.click();
          fakeButton.remove();
        }
      }
    };
  }
  /**
   * Prevent clicks from being emitted from the host
   * when the component is `disabled`.
   */
  handleHostClick(event) {
    if (this.disabled === true) {
      event.stopImmediatePropagation();
    }
  }
  async setFocus() {
    this.focusableElement.focus();
  }
  componentDidLoad() {
    this.setChildrenIconSize();
  }
  connectedCallback() {
    this.setIconPositionProp();
    this.appendEnterKeySubmitFallback();
  }
  disconnectedCallback() {
    this.cleanUpEnterKeySubmitFallback();
  }
  /**
   * In order for forms to be submitted with the Enter key
   * there has to be a `button` or an `input[type="submit"]` in the form.
   * Browsers do not take the <button> inside the Shadow DOM into account for this matter.
   * So we carefully append an `input[type="submit"]` to overcome this.
   *
   * @see https://stackoverflow.com/a/35235768
   * @see https://github.com/telekom/scale/issues/859
   */
  appendEnterKeySubmitFallback() {
    if (hasShadowDom(this.hostElement)) {
      const parentForm = this.hostElement.closest('form');
      if (parentForm == null) {
        return;
      }
      const hasSubmitInputAlready = parentForm.querySelector('input[type="submit"]') != null;
      if (hasSubmitInputAlready) {
        return;
      }
      this.fallbackSubmitInputElement = document.createElement('input');
      this.fallbackSubmitInputElement.type = 'submit';
      this.fallbackSubmitInputElement.hidden = true;
      parentForm.appendChild(this.fallbackSubmitInputElement);
    }
  }
  cleanUpEnterKeySubmitFallback() {
    if (this.fallbackSubmitInputElement != null) {
      try {
        this.fallbackSubmitInputElement.remove();
        this.fallbackSubmitInputElement = null;
      }
      catch (err) { }
    }
  }
  /**
   * Detect whether the last node is an element (not text).
   * If so, it's probably an icon, so we set `iconPosition` to `after`.
   */
  setIconPositionProp() {
    const nodes = Array.from(this.hostElement.childNodes).filter((node) => {
      // ignore empty text nodes, which are probably due to formatting
      return !(node.nodeType === 3 && node.nodeValue.trim() === '');
    });
    const lastNode = nodes.length > 1 ? nodes[nodes.length - 1] : null;
    if (!this.iconOnly && lastNode && isScaleIcon(lastNode)) {
      this.iconPosition = 'after';
    }
  }
  /**
   * Set any children icon's size according the button size.
   */
  setChildrenIconSize() {
    if (this.size != null && buttonIconSizeMap[this.size] != null) {
      const icons = Array.from(this.hostElement.childNodes).filter(isScaleIcon);
      icons.forEach((icon) => {
        if (icon.size === DEFAULT_ICON_SIZE$4) {
          icon.size = buttonIconSizeMap[this.size];
        }
      });
    }
  }
  render() {
    const basePart = classnames('base', this.variant && `variant-${this.variant}`, this.iconOnly && 'icon-only', !this.iconOnly && this.iconPosition, this.disabled && 'disabled');
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), this.href ? (hAsync("a", { ref: (el) => (this.focusableElement = el), class: this.getCssClassMap(), href: this.disabled ? null : this.href, download: this.download, target: this.target, rel: this.target === '_blank' ? 'noopener noreferrer' : undefined, part: basePart, tabIndex: this.innerTabindex, role: "link", "aria-disabled": this.disabled ? 'true' : null, "aria-label": this.innerAriaLabel }, hAsync("slot", null))) : (hAsync("button", { ref: (el) => (this.focusableElement = el), class: this.getCssClassMap(), onClick: this.handleClick, disabled: this.disabled, type: this.type, part: basePart, tabIndex: this.innerTabindex, name: this.name, value: this.value, "aria-label": this.innerAriaLabel }, hAsync("slot", null)))));
  }
  getCssClassMap() {
    return classnames('button', this.size && `button--size-${this.size}`, this.variant && `button--variant-${this.variant}`, this.iconOnly && `button--icon-only`, !this.iconOnly &&
      this.iconPosition &&
      `button--icon-${this.iconPosition}`, this.disabled && `button--disabled`);
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return buttonCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-button",
    "$members$": {
      "size": [1],
      "variant": [1],
      "disabled": [4],
      "type": [1],
      "name": [1],
      "value": [1],
      "iconOnly": [4, "icon-only"],
      "iconPosition": [513, "icon-position"],
      "href": [1],
      "target": [1],
      "styles": [1],
      "download": [1],
      "innerTabindex": [2, "inner-tabindex"],
      "innerAriaLabel": [1, "inner-aria-label"],
      "setFocus": [64]
    },
    "$listeners$": [[2, "click", "handleHostClick"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["iconPosition", "icon-position"]]
  }; }
}

const calloutCss = "/*!@:host*/.sc-scale-callout-h{--position:absolute;--background:var(--telekom-color-ui-extra-strong);--color:var(--telekom-color-text-and-icon-inverted-standard);--spacing:var(--telekom-spacing-composition-space-10);--min-width:6rem;--aspect-ratio:1 / 1;--rotation:0deg;--font-small:var(--telekom-text-style-body-bold);--font-medium:var(--telekom-text-style-body-bold);--font-large:var(--telekom-text-style-heading-1);box-sizing:border-box;display:inline-flex;align-items:center;justify-content:center;text-align:center;border-radius:50%;position:var(--position);background:var(--background);color:var(--color);min-width:var(--min-width);aspect-ratio:var(--aspect-ratio);min-height:var(--min-width);transform:rotateZ(var(--rotation, 0deg))}/*!@[part='base']*/[part='base'].sc-scale-callout{box-sizing:border-box;padding:var(--spacing);font:var(--font-medium)}@media screen and (forced-colors: active), (-ms-high-contrast: active){/*!@[part='base']*/[part='base'].sc-scale-callout{border:1px solid}}/*!@:host([variant='primary'])*/[variant='primary'].sc-scale-callout-h{--background:var(--telekom-color-primary-standard);--color:var(--telekom-color-text-and-icon-white-standard)}/*!@:host([variant='black'])*/[variant='black'].sc-scale-callout-h{--background:var(--telekom-color-ui-black, #000000);--color:var(--telekom-color-text-and-icon-white-standard)}/*!@:host([variant='white'])*/[variant='white'].sc-scale-callout-h{--background:var(--telekom-color-ui-white, #ffffff);--color:var(--telekom-color-text-and-icon-black-standard)}/*!@:host([variant='blue'])*/[variant='blue'].sc-scale-callout-h{--background:var(--telekom-color-additional-cyan-100);--color:var(--telekom-color-text-and-icon-black-standard)}/*!@::slotted(*)*/.sc-scale-callout-s>*{display:block}/*!@::slotted(.scl-callout-text-small)*/.sc-scale-callout-s>.scl-callout-text-small{font:var(--font-small)}/*!@::slotted(.scl-callout-text-large)*/.sc-scale-callout-s>.scl-callout-text-large{font:var(--font-large)}";

/**
 * Adds the `px` suffix to a string number
 * but leaves other units untouched.
 * 1  -> 1px
 * 5% -> 5%
 */
const numToPx = (val) => (Number.isNaN(Number(val)) ? val : val + 'px');
class Callout {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) Degree of rotation */
    this.rotation = 0;
  }
  connectedCallback() {
    statusNote({ source: this.hostElement, tag: 'beta' });
    this.syncPropsToCSS();
  }
  rotationChanged() {
    this.syncPropsToCSS();
  }
  syncPropsToCSS() {
    this.hostElement.style.setProperty('--rotation', `${this.rotation}deg`);
    if (this.top != null ||
      this.right != null ||
      this.bottom != null ||
      this.left != null) {
      Object.assign(this.hostElement.style, {
        top: numToPx(this.top),
        right: numToPx(this.right),
        bottom: numToPx(this.bottom),
        left: numToPx(this.left),
      });
    }
  }
  render() {
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { part: "base" }, hAsync("slot", null))));
  }
  get hostElement() { return getElement$1(this); }
  static get watchers() { return {
    "rotation": ["rotationChanged"],
    "top": ["rotationChanged"],
    "right": ["rotationChanged"],
    "bottom": ["rotationChanged"],
    "left": ["rotationChanged"]
  }; }
  static get style() { return calloutCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-callout",
    "$members$": {
      "variant": [1],
      "rotation": [2],
      "top": [1],
      "right": [1],
      "bottom": [1],
      "left": [1],
      "styles": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const cardCss = "/*!@:host*/.sc-scale-card-h{--background:var(--telekom-color-background-surface);--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);--radius:var(--telekom-radius-large);--box-shadow:var(--telekom-shadow-raised-standard);--box-shadow-hover:var(--telekom-shadow-raised-hover);--box-shadow-focus:0 0 0 var(--telekom-line-weight-highlight)\n    var(--telekom-color-functional-focus-standard);--box-shadow-active:var(--telekom-shadow-raised-pressed);--spacing-body:var(--telekom-spacing-composition-space-08);--spacing-body-slotted:0;--spacing-body-slotted-interactive:0;--font-body-slotted:var(--telekom-text-style-body)}/*!@.card-border*/.card-border.sc-scale-card{border:1px solid transparent}/*!@.card*/.card.sc-scale-card{width:100%;overflow:hidden;box-sizing:border-box;background:var(--background);transition:var(--transition);border-radius:var(--radius);box-shadow:var(--box-shadow)}/*!@.card__body*/.card__body.sc-scale-card{padding:var(--spacing-body)}/*!@.card__body ::slotted(*)*/.card__body .sc-scale-card-s>*{margin:var(--spacing-body-slotted)}/*!@.card--interactive*/.card--interactive.sc-scale-card{color:inherit;cursor:pointer;display:block;outline:none;text-decoration:none}/*!@.card--interactive:hover*/.card--interactive.sc-scale-card:hover{box-shadow:var(--box-shadow-hover)}/*!@.card--interactive:focus*/.card--interactive.sc-scale-card:focus{box-shadow:var(--telekom-shadow-raised-hover), var(--box-shadow-focus)}/*!@.card--interactive:active*/.card--interactive.sc-scale-card:active{border:none;box-shadow:var(--box-shadow-active)}/*!@.card--interactive .card__body ::slotted(*)*/.card--interactive .card__body .sc-scale-card-s>*{margin:var(--spacing-body-slotted-interactive)}/*!@.card__body ::slotted(*)*/.card__body .sc-scale-card-s>*{font:var(--font-body-slotted)}";

class Card {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) Link card */
    this.to = '';
    /** (optional) Label of the card */
    this.label = '';
    /** (optional) Link card target */
    this.target = '_self';
    /** (optional) Link card rel */
    this.rel = '';
  }
  render() {
    const Tag = !!this.to ? 'a' : 'div';
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { class: "card-border", part: "border" }, hAsync(Tag, Object.assign({ class: this.getCssClassMap(), part: classnames('base', !!this.to && 'interactive') }, (!this.to ? { role: 'group' } : {}), (!!this.to ? { href: this.to } : {}), (!!this.target ? { target: this.target } : {}), (!!this.rel ? { rel: this.rel } : {}), (!!this.label ? { ['aria-label']: this.label } : {})), hAsync("div", { class: "card__body", part: "body" }, hAsync("slot", null))))));
  }
  getCssClassMap() {
    return classnames('card', !!this.to && 'card--interactive');
  }
  static get style() { return cardCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-card",
    "$members$": {
      "to": [1],
      "label": [1],
      "target": [1],
      "rel": [1],
      "styles": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const carouselCss = "/*!@.carousel*/.carousel.sc-scale-carousel{width:400px;height:300px;position:relative}/*!@.carousel__container*/.carousel__container.sc-scale-carousel{width:100%;height:100%;margin:0;display:flex;padding:0;overflow:hidden;position:relative;box-sizing:border-box;align-items:center}/*!@.carousel__slide*/.carousel__slide.sc-scale-carousel{height:100%;position:relative;min-width:100%;transition:all 0.3s ease-in-out}/*!@.carousel__arrow*/.carousel__arrow.sc-scale-carousel{top:50%;color:#fff;width:24px;border:none;cursor:pointer;height:24px;display:flex;outline:none;z-index:99;position:absolute;transform:translateY(-50%);background:rgba(31, 45, 61, 0.11);align-items:center;border-radius:50%;justify-content:center}/*!@.carousel__arrow--left*/.carousel__arrow--left.sc-scale-carousel{left:12px}/*!@.carousel__arrow--right*/.carousel__arrow--right.sc-scale-carousel{right:12px}/*!@.carousel__indicators*/.carousel__indicators.sc-scale-carousel{left:50%;bottom:12px;margin:0;display:inline-flex;padding:0;z-index:2;position:absolute;transform:translateX(-50%);list-style:none}/*!@.carousel__indicator*/.carousel__indicator.sc-scale-carousel{width:30px;border:none;cursor:pointer;height:4px;margin:0 6px;display:block;opacity:0.5;outline:none;padding:0;background:#fff;transition:0.3s}/*!@.carousel__indicator--active*/.carousel__indicator--active.sc-scale-carousel{opacity:1}/*!@.carousel--vertical .carousel__container*/.carousel--vertical.sc-scale-carousel .carousel__container.sc-scale-carousel{flex-direction:column}/*!@.carousel--vertical .carousel__arrow*/.carousel--vertical.sc-scale-carousel .carousel__arrow.sc-scale-carousel{display:none}/*!@.carousel--vertical .carousel__indicators*/.carousel--vertical.sc-scale-carousel .carousel__indicators.sc-scale-carousel{top:50%;left:unset;right:12px;bottom:0;display:flex;transform:translateY(-50%);flex-direction:column}/*!@.carousel--vertical .carousel__indicator*/.carousel--vertical.sc-scale-carousel .carousel__indicator.sc-scale-carousel{width:4px;height:30px;margin:6px 0}";

class Carousel {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) carousel display direction */
    this.vertical = false;
    this.slidesArray = [];
    this.value = 0;
    this.handleSlideChange = (direction) => {
      const val = this.value;
      if (direction === 'prev') {
        val === 0
          ? (this.value = -100 * (this.slidesArray.length - 1))
          : (this.value = val + 100);
      }
      if (direction === 'next') {
        val === -100 * (this.slidesArray.length - 1)
          ? (this.value = 0)
          : (this.value = val - 100);
      }
    };
    this.setActiveSlide = (index) => {
      this.value = -100 * index;
    };
    this.setTransformValue = () => {
      if (!!this.vertical) {
        return `translateY(${this.value}%)`;
      }
      return `translateX(${this.value}%)`;
    };
    this.setActiveCssClass = (index) => {
      if (Math.abs(this.value) / 100 === index) {
        return 'carousel__indicator--active';
      }
      return '';
    };
  }
  connectedCallback() {
    statusNote({ source: this.hostElement, type: 'warn' });
  }
  componentWillLoad() {
    if (this.slidesArray.length === 0) {
      const children = this.hostElement.children;
      // tslint:disable-next-line: prefer-for-of
      for (let childIndex = 0; childIndex < children.length; childIndex++) {
        if (children[childIndex].slot === '') {
          // tslint:disable-next-line: prefer-for-of
          for (let slideIndex = 0; slideIndex < children[childIndex].children.length; slideIndex++) {
            const element = children[childIndex].children[slideIndex];
            this.slidesArray.push(element);
          }
        }
      }
    }
  }
  render() {
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { class: this.getCssClassMap() }, hAsync("div", { class: "carousel__container" }, hAsync("div", { class: "carousel__arrow carousel__arrow--left", onClick: () => this.handleSlideChange('prev') }, hAsync("slot", { name: "arrow-left" })), this.slidesArray.map((element) => (hAsync("div", { class: "carousel__slide", style: { transform: this.setTransformValue() } }, hAsync("div", { innerHTML: element.outerHTML })))), hAsync("div", { class: "carousel__arrow carousel__arrow--right", onClick: () => this.handleSlideChange('next') }, hAsync("slot", { name: "arrow-right" }))), hAsync("ul", { class: "carousel__indicators" }, Array.from(Array(this.slidesArray.length).keys()).map((index) => (hAsync("li", { key: index, class: `carousel__indicator ${this.setActiveCssClass(index)}`, onClick: () => this.setActiveSlide(index) })))))));
  }
  getCssClassMap() {
    return classnames('carousel', this.vertical && `carousel--vertical`);
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return carouselCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-carousel",
    "$members$": {
      "vertical": [4],
      "styles": [1],
      "slidesArray": [32],
      "value": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const chartStackCardCss = ":host{--scl-chart-stack-card-color:var(--telekom-color-additional-blue-600)}.chart-stack-card{color:var(--color-text);--scl-chart-stack-card-color:var(--telekom-color-additional-blue-600)}.chart-stack-card .header{height:var(--telekom-spacing-composition-space-08);font-size:var(--telekom-typography-font-size-headline-3);font-weight:var(--telekom-typography-font-weight-extra-bold);line-height:var(--telekom-typography-line-spacing-tight);margin-bottom:var(--telekom-spacing-composition-space-08)}.chart-stack-card .bar{display:flex;justify-content:space-between;margin-bottom:var(--telekom-spacing-composition-space-06)}.chart-stack-card .bar__item{background-color:var(--scl-chart-stack-card-color);height:var(--telekom-spacing-composition-space-10);flex:1}.chart-stack-card .bar__item:first-of-type{border-top-left-radius:var(--telekom-radius-small);border-bottom-left-radius:var(--telekom-radius-small)}.chart-stack-card .bar__item:last-of-type{border-top-right-radius:var(--telekom-radius-small);border-bottom-right-radius:var(--telekom-radius-small)}.chart-stack-card .legend{display:flex;flex-direction:column;height:calc(var(--telekom-spacing-composition-space-06) * 10)}.chart-stack-card .spacer{padding:0 var(--telekom-spacing-composition-space-04)}.chart-stack-card .legend .legend__row__item{display:flex;line-height:var(--telekom-typography-line-spacing-standard)}.chart-stack-card .legend .legend__row{display:flex;justify-content:space-between}.chart-stack-card .legend .legend__row:last-child{padding-bottom:var(--telekom-spacing-composition-space-10)}.chart-stack-card .legend .legend__item{height:10px;width:10px;background-color:var(--scl-chart-stack-card-color);border-radius:100%;align-self:center;margin-right:var(--telekom-spacing-composition-space-03)}.chart-stack-card .legend .legend__label{font-weight:var(--type-weight-bold);font-size:var(--telekom-spacing-composition-space-06);line-height:200%}";

class ChartStackCard {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.readData = (data) => {
      try {
        return Array.isArray(JSON.parse(data)) ? JSON.parse(data) : [];
      }
      catch (error) {
        return Array.isArray(data) ? data : [];
      }
    };
  }
  getOpacity(item, index) {
    return JSON.stringify(index === 0 ? 1 : +item.percentage / 100);
  }
  getCardStyle() {
    return `
      .card:after {
          content: '';
          display: block;
          background: linear-gradient(0deg, white, rgba(255,255,255, 0));
          height: 2rem;
          margin-top: -2rem;
          position: relative;
        }

      .card__body: {
        padding-bottom: 0 !important;
      }
  `;
  }
  connectedCallback() {
    statusNote({ source: this.hostElement, type: 'warn' });
  }
  render() {
    return (hAsync(Host$1, null, hAsync("div", { class: this.getCssClassMap() }, hAsync("scale-card", { styles: this.getCardStyle() }, hAsync("div", { class: "header" }, this.heading), hAsync("div", { class: "bar" }, this.readData(this.data)
      .sort((a, b) => b.percentage - a.percentage)
      .map((item, index) => {
      if (+item.percentage > 0) {
        return (hAsync("div", { class: "bar__item", style: {
            opacity: this.getOpacity(item, index),
            flex: JSON.stringify(+item.percentage),
          } }));
      }
    })), hAsync("div", { class: "legend" }, this.readData(this.data)
      .sort((a, b) => b.percentage - a.percentage)
      .map((item, index) => (hAsync("div", { class: "legend__row" }, hAsync("div", { class: "legend__row__item" }, hAsync("div", { class: "legend__item", style: {
        opacity: this.getOpacity(item, index),
      } }), hAsync("div", { class: "legend__label spacer" }, item.type)), hAsync("div", { class: "legend__row__item" }, hAsync("div", { class: "spacer" }, item.value), hAsync("div", { class: "spacer" }, item.percentage, "%"))))))))));
  }
  getCssClassMap() {
    return classnames('chart-stack-card');
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return chartStackCardCss; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-chart-stack-card",
    "$members$": {
      "data": [1],
      "heading": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const checkboxCss = ":host,scale-checkbox{--spacing-x:var(--telekom-spacing-composition-space-04);--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);--color-text:var(--telekom-color-text-and-icon-standard);--color-error:var(--telekom-color-functional-danger-standard);--color-disabled:var(--telekom-color-text-and-icon-disabled);--color-standard:var(--telekom-color-background-surface);--background-disabled:none;--color-primary:var(--telekom-color-primary-standard);--color-focus:var(--telekom-color-functional-focus-standard);--color-primary-hover:var(--telekom-color-text-and-icon-standard);--color-primary-active:var(--telekom-color-text-and-icon-standard);--width-control:var(--telekom-spacing-composition-space-07);--height-control:var(--telekom-spacing-composition-space-07);--transition-control:var(--transition);--spacing-control:var(--telekom-spacing-composition-space-02);--spacing-left-control:var(--telekom-spacing-composition-space-03);--radius-control:var(--telekom-radius-small);--border-width-control:var(--telekom-line-weight-standard);--transition-helper-text:var(--transition);--spacing-left-helper-text:calc(var(--width-control) + var(--spacing-x));--font-size-helper-text:var(--telekom-typography-font-size-small);--font-weight-helper-text:var(--telekom-typography-font-weight-bold);--line-height-helper-text:var(--telekom-typography-line-spacing-standard);--color-helper-text:var(\n    --telekom-color-text-and-icon-functional-informational\n  );--font-weight-label:var(--telekom-typography-font-weight-medium);--transition-label:var(--transition);--color-icon-checked-disabled:var(--telekom-color-text-and-icon-disabled);--color-icon-checked-active:var(\n    --telekom-color-text-and-icon-white-standard\n  );--width-icon:var(--telekom-spacing-composition-space-06);--height-icon:var(--telekom-spacing-composition-space-06);--stroke-width:var(--stroke-width-checkbox, 0.5px)}scale-checkbox{position:relative;display:flex;width:fit-content;flex-direction:column;color:var(--color-text)}scale-checkbox [part='icon'],scale-checkbox [part='checkbox'],scale-checkbox [part='label'],scale-checkbox [part='helper-text']{transition:var(--transition)}scale-checkbox [part='input'],scale-checkbox.hideLabel [part='label']{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border-width:0}scale-checkbox [part='checkbox']{box-sizing:border-box;display:flex;flex:0 0 auto;justify-content:center;align-items:center;width:var(--width-control);height:var(--height-control);border-radius:var(--radius-control);border:var(--border-width-control) solid\n    var(--telekom-color-ui-border-standard)}scale-checkbox [part='label']{font-weight:var(--font-weight-label);margin-left:var(--spacing-x)}scale-checkbox [part='icon']{width:var(--width-icon);height:var(--height-icon);color:var(--color-icon-checked-active)}scale-checkbox [part='icon'] svg{width:100%;height:100%}scale-checkbox [part='icon'] svg rect,scale-checkbox [part='icon'] svg path{stroke:currentColor;stroke-width:var(--stroke-width)}scale-checkbox [part='container']{align-items:center;display:flex;line-height:var(--telekom-typography-line-spacing-standard)}scale-checkbox [part='helper-text']{font-size:var(--font-size-helper-text);font-weight:var(--font-weight-helper-text);line-height:var(--line-height-helper-text);color:var(--color-helper-text);padding-left:calc(\n    var(--width-control) + var(--spacing-control) + var(--spacing-x) +\n      calc(var(--border-width-control) * 2)\n  );display:flex;align-items:center}scale-checkbox.indeterminate [part='checkbox']{background:var(--telekom-color-primary-standard);border:none;color:var(--color-icon-checked-active)}scale-checkbox.indeterminate [part='icon']{color:var(--color-icon-checked-active)}scale-checkbox.checked [part='checkbox']{background:var(--telekom-color-primary-standard);border-color:var(--telekom-color-primary-standard);color:var(--color-icon-checked-active)}scale-checkbox [part='container']:hover [part='checkbox']{background:var(--telekom-color-ui-state-fill-hovered);border-color:var(--telekom-color-ui-border-hovered);color:var(--color-icon-checked-active)}scale-checkbox.checked [part='container']:hover [part='checkbox']{background:var(--telekom-color-primary-hovered);border-color:var(--telekom-color-ui-border-hovered);color:var(--color-icon-checked-active)}scale-checkbox [part='container']:active [part='checkbox']{background:var(--telekom-color-ui-state-fill-pressed);border-color:var(--telekom-color-ui-border-pressed);color:var(--color-icon-checked-active)}scale-checkbox [part='input']:focus~[part='container'] [part='checkbox']{outline:var(--telekom-spacing-composition-space-02) solid var(--color-focus);outline-offset:var(--telekom-spacing-composition-space-01)}scale-checkbox [part='container']:hover{color:var(--color-primary-hover);cursor:pointer}scale-checkbox.checked [part='container']:hover [part='checkbox'],scale-checkbox.indeterminate [part='container']:hover [part='checkbox']{background:var(--telekom-color-primary-hovered);border-color:var(--telekom-color-primary-hovered)}scale-checkbox.checked [part='input']:active~[part='container'],scale-checkbox.checked [part='container']:active{color:var(--color-primary-active)}scale-checkbox [part='input']:active~[part='container'] [part='checkbox'],scale-checkbox.checked [part='container']:active [part='checkbox'],scale-checkbox.indeterminate [part='container']:active [part='checkbox']{background:var(--telekom-color-primary-pressed);border-color:var(--telekom-color-primary-pressed)}scale-checkbox:not(.checked) [part='container']:active [part='checkbox']{background:var(--telekom-color-ui-state-fill-pressed);border-color:var(--telekom-color-ui-border-pressed)}scale-icon-alert-information,scale-icon-alert-error{color:var(--color-helper-text);display:flex;justify-content:center;align-items:center;margin-right:var(--telekom-spacing-composition-space-03)}scale-checkbox.error [part='helper-text']{color:var(--telekom-color-text-and-icon-functional-danger)}scale-checkbox.error [part='helper-text'] scale-icon-alert-error{color:var(--telekom-color-text-and-icon-functional-danger)}scale-checkbox.error [part='checkbox']{box-shadow:inset 0 0 0 var(--telekom-spacing-composition-space-02)\n    var(--color-error);border:none}scale-checkbox.error [part='input']:focus~[part='container'] [part='checkbox']{box-shadow:inset 0 0 0 var(--telekom-spacing-composition-space-02)\n    var(--color-error)}scale-checkbox.error [part='checkbox']:hover{background-color:var(--telekom-color-ui-state-fill-hovered);box-shadow:inset 0 0 0 var(--telekom-spacing-composition-space-02)\n    var(--telekom-color-functional-danger-hovered)}scale-checkbox.error [part='checkbox']:active{background-color:var(--telekom-color-ui-state-fill-pressed);box-shadow:inset 0 0 0 var(--telekom-spacing-composition-space-02)\n    var(--telekom-color-functional-danger-pressed)}scale-checkbox.error:not(.checked) [part='container']:active [part='checkbox']{background:var(--telekom-color-ui-state-fill-pressed);box-shadow:inset 0 0 0 var(--telekom-spacing-composition-space-02)\n    var(--telekom-color-functional-danger-pressed)}scale-checkbox.checked.error [part='container']:hover [part='checkbox']{background-color:var(--telekom-color-primary-hovered);box-shadow:inset 0 0 0 var(--telekom-spacing-composition-space-02)\n    var(--telekom-color-functional-danger-hovered)}scale-checkbox.error [part='helper-text']{padding-left:calc(\n    var(--width-control) + var(--spacing-control) + var(--spacing-x)\n  )}scale-checkbox.disabled{cursor:not-allowed}scale-checkbox.disabled [part='container'],scale-checkbox.disabled [part='helper-text']{color:var(--color-disabled);pointer-events:none}scale-checkbox.disabled [part='checkbox']{background:var(--telekom-color-ui-solid-fill-disabled);border-color:var(--telekom-color-ui-border-disabled)}scale-checkbox.checked.disabled [part='checkbox']{background-color:var(--telekom-color-ui-disabled);border-color:transparent}scale-checkbox.checked.disabled [part='icon']{color:var(--color-icon-checked-disabled);background-color:var(--telekom-color-ui-disabled)}scale-checkbox.disabled [part='helper-text'] scale-icon-alert-information,scale-checkbox.disabled.error [part='helper-text'] scale-icon-alert-error{color:var(--color-disabled)}";

class Checkbox {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleChange = createEvent$1(this, "scale-change", 7);
    this.scaleChangeLegacy = createEvent$1(this, "scaleChange", 7);
    /** (optional) Input label */
    this.label = '';
    /** (optional) Hides the specified label visually */
    this.hideLabel = false;
    /** @deprecated - invalid should replace status */
    this.status = '';
    /** (optional) Input status */
    this.invalid = false;
    /** (optional) Input disabled */
    this.disabled = false;
    /** (optional) Active switch */
    this.checked = false;
    /** (optional) indeterminate */
    this.indeterminate = false;
    /** (optional) Input value */
    this.value = '';
    this.internalId = generateUniqueId();
    this.handleChange = (ev) => {
      if (this.indeterminate) {
        this.indeterminate = false;
        this.checked = true;
        ev.target.checked = true;
      }
      else {
        this.checked = ev.target.checked;
      }
      const { checked, indeterminate, value, disabled } = this;
      emitEvent$1(this, 'scaleChange', { checked, indeterminate, value, disabled });
    };
  }
  componentDidRender() {
    if (this.status !== '') {
      statusNote({
        tag: 'deprecated',
        message: 'Property "status" is deprecated. Please use the "invalid" property!',
        type: 'warn',
        source: this.host,
      });
    }
    if (this.host.hasAttribute('aria-label')) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "ariaLabel" is deprecated. Please use the "ariaLabelCheckbox" property!',
        type: 'warn',
        source: this.host,
      });
    }
  }
  connectedCallback() {
    if (!this.inputId) {
      this.inputId = 'input-checkbox-' + this.internalId;
    }
  }
  /* Accessibility: rendering the icon *only* when checked, otherwise is always visible in HCM */
  renderIcon() {
    if (this.indeterminate) {
      return (hAsync("scale-icon-action-minus", { part: "icon", decorative: true }));
    }
    if (this.checked) {
      return (hAsync("scale-icon-action-checkmark", { part: "icon", decorative: true }));
    }
  }
  renderHelperIcon() {
    if (this.helperText && !this.invalid) {
      return (hAsync("scale-icon-alert-information", { size: 11 }));
    }
    if (this.invalid) {
      return hAsync("scale-icon-alert-error", { size: 11 });
    }
  }
  renderHelperText(text) {
    if (this.helperText && this.helperText !== '') {
      return (hAsync("div", { part: "helper-text", id: text.id, "aria-live": "polite", "aria-relevant": "additions removals" }, this.renderHelperIcon(), text.content));
    }
  }
  render() {
    const helperText = {
      id: this.helperText ? `helper-message-${this.internalId}` : null,
      content: this.helperText,
    };
    return (hAsync(Host$1, { class: {
        checked: this.checked,
        indeterminate: this.indeterminate,
        disabled: this.disabled,
        error: this.status === 'error' || this.invalid,
        hideLabel: this.hideLabel,
      } }, hAsync("input", { type: "checkbox", part: "input", name: this.name || null, id: this.inputId, value: this.value, checked: this.checked, indeterminate: this.indeterminate, "aria-label": this.ariaLabelCheckbox, "aria-checked": this.indeterminate ? 'mixed' : false, "aria-invalid": this.status === 'error' || this.invalid ? 'true' : null, "aria-describedBy": helperText.id, disabled: this.disabled, required: this.required, onChange: this.handleChange }), hAsync("label", { part: "container", htmlFor: this.inputId }, hAsync("span", { part: "checkbox" }, this.renderIcon()), hAsync("span", { part: "label" }, this.label || hAsync("slot", null))), this.renderHelperText(helperText)));
  }
  get host() { return getElement$1(this); }
  static get style() { return checkboxCss; }
  static get cmpMeta() { return {
    "$flags$": 4,
    "$tagName$": "scale-checkbox",
    "$members$": {
      "name": [1],
      "label": [1],
      "ariaLabelCheckbox": [1, "aria-label-checkbox"],
      "hideLabel": [4, "hide-label"],
      "helperText": [1, "helper-text"],
      "status": [1],
      "invalid": [4],
      "disabled": [516],
      "checked": [1540],
      "indeterminate": [1540],
      "value": [1],
      "inputId": [1025, "input-id"],
      "styles": [1],
      "required": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["disabled", "disabled"], ["checked", "checked"], ["indeterminate", "indeterminate"]]
  }; }
}

const checkboxGroupCss = ":host,.checkbox-group{--spacing-left-container:var(--telekom-spacing-composition-space-10);--spacing-left-checkbox:var(--telekom-spacing-composition-space-04);--spacing-top-slotted-item:var(--telekom-spacing-composition-space-05)}.checkbox-group{display:inline-flex;flex-direction:column;position:relative}.checkbox-group [part='fieldset']{display:flex;flex-direction:column;border:0;padding:0;margin:0;margin-left:var(--spacing-left-container)}.checkbox-group [part='parent-checkbox']{line-height:var(--telekom-typography-line-spacing-standard);--font-weight-label:var(--telekom-typography-font-weight-bold)}.checkbox-group legend{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border-width:0}.checkbox-group scale-checkbox{margin-top:var(--spacing-top-slotted-item)}";

class CheckboxGroup {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) Input label */
    this.label = '';
    /** @deprecated - invalid should replace status */
    this.status = '';
    /** (optional) Input status */
    this.invalid = false;
    /** (optional) Input value */
    this.value = '';
    this.selectText = 'Select all';
    this.unselectText = 'Unselect all';
  }
  handleCheckboxChange(ev) {
    const el = ev.composedPath()[0];
    const { tagName, checked } = el;
    // make sure the event belongs to a scale checkbox
    if (tagName.toLowerCase() === 'scale-checkbox') {
      if (el !== this.groupNode) {
        this.updateParentCheckboxState();
      }
      else {
        this.updateChildrenCheckboxStates(checked);
        this.updateParentCheckboxState();
      }
    }
  }
  componentDidRender() {
    if (this.status !== '') {
      statusNote({
        tag: 'deprecated',
        message: 'Property "status" is deprecated. Please use the "invalid" property!',
        type: 'warn',
        source: this.host,
      });
    }
    if (this.host.hasAttribute('aria-label')) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "ariaLabel" is deprecated. Please use the "ariaLabelCheckboxGroup" property!',
        type: 'warn',
        source: this.host,
      });
    }
  }
  componentDidLoad() {
    this.updateParentCheckboxState();
    const fieldset = this.host.querySelector('fieldset');
    const mo = new MutationObserver(() => {
      this.updateParentCheckboxState();
    });
    mo.observe(fieldset, {
      childList: true,
    });
    this.observer = mo;
  }
  disconnectedCallback() {
    if (this.observer) {
      this.observer.disconnect();
    }
  }
  getChildNodes() {
    return Array.from(this.host.querySelector('fieldset').querySelectorAll('scale-checkbox'));
  }
  updateChildrenCheckboxStates(checked) {
    const childNodes = this.getChildNodes().filter((node) => !node.disabled);
    childNodes.forEach((node) => {
      if (checked !== undefined) {
        node.checked = checked;
        node.indeterminate = false;
      }
    });
  }
  updateParentCheckboxState() {
    const childNodes = this.getChildNodes();
    const checked = childNodes === null || childNodes === void 0 ? void 0 : childNodes.map((childNode) => childNode.checked);
    const indeterminate = childNodes === null || childNodes === void 0 ? void 0 : childNodes.map((childNode) => childNode.indeterminate);
    const disabled = childNodes === null || childNodes === void 0 ? void 0 : childNodes.map((childNode) => childNode.disabled);
    const allChecked = checked.every(Boolean);
    const someChecked = checked.some(Boolean);
    const someIndeterminate = indeterminate.some(Boolean);
    const allDisabled = disabled.every(Boolean);
    this.checked = allChecked || someChecked;
    this.indeterminate = someIndeterminate || (someChecked && !allChecked);
    this.disabled = allDisabled;
    this.actionText = allChecked ? this.unselectText : this.selectText;
  }
  render() {
    return (hAsync(Host$1, { class: "checkbox-group" }, hAsync("scale-checkbox", { ref: (el) => (this.groupNode = el), name: this.name, label: this.label, ariaLabelCheckbox: `${this.ariaLabelCheckboxGroup || this.label} - ${this.actionText}`, helperText: this.helperText, status: this.status, invalid: this.invalid, value: this.value, inputId: this.inputId, checked: this.checked, indeterminate: this.indeterminate, disabled: this.disabled, part: "parent-checkbox" }), hAsync("fieldset", { part: "fieldset" }, hAsync("legend", null, this.ariaLabelCheckboxGroup || this.label), hAsync("slot", null))));
  }
  get host() { return getElement$1(this); }
  static get style() { return checkboxGroupCss; }
  static get cmpMeta() { return {
    "$flags$": 4,
    "$tagName$": "scale-checkbox-group",
    "$members$": {
      "name": [1],
      "label": [1],
      "ariaLabelCheckboxGroup": [1, "aria-label-checkbox-group"],
      "helperText": [1, "helper-text"],
      "status": [1],
      "invalid": [4],
      "value": [1],
      "inputId": [1025, "input-id"],
      "styles": [1],
      "selectText": [1, "select-text"],
      "unselectText": [1, "unselect-text"],
      "checked": [32],
      "indeterminate": [32],
      "disabled": [32]
    },
    "$listeners$": [[0, "scaleChange", "handleCheckboxChange"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const chipCss = "/*!@:host*/.sc-scale-chip-h{--height:32px;--font-size:var(--telekom-typography-font-size-body);--line-height:var(--telekom-typography-line-spacing-standard);--font-weight:var(--telekom-typography-font-weight-bold);--color-focus:var(--telekom-color-functional-focus-standard);--focus-outline:var(--telekom-line-weight-highlight) solid\n    var(--telekom-color-functional-focus-standard);--box-shadow:0px 1px 2px rgba(0, 0, 0, 0.1), 0px 2px 8px rgba(0, 0, 0, 0.1);--background-standard-selected:var(--telekom-color-ui-extra-strong);--color-standard-selected:var(\n    --telekom-color-text-and-icon-inverted-standard\n  )}/*!@.chip*/.chip.sc-scale-chip{box-sizing:border-box;border:var(--telekom-spacing-composition-space-01) solid transparent;display:inline-flex;outline:none;padding:0 var(--telekom-spacing-composition-space-05);text-align:center;align-items:center;white-space:nowrap;border-radius:1rem;border-color:rgba(255, 255, 255, 0.14);height:var(--height);vertical-align:baseline;justify-content:center;cursor:default;color:var(--telekom-color-text-and-icon-standard);background:var(--telekom-color-text-and-icon-inverted-standard);border:1px solid var(--telekom-color-ui-border-standard)}/*!@.chip.chip--selected.chip--type-dynamic*/.chip.chip--selected.chip--type-dynamic.sc-scale-chip{padding-right:var(--telekom-spacing-composition-space-03)}/*!@.chip.chip--selected.chip--type-dynamic button*/.chip.chip--selected.chip--type-dynamic.sc-scale-chip button.sc-scale-chip{border:none;cursor:pointer;padding:0;height:24px;width:24px;outline:none;background:transparent;border-radius:var(--telekom-radius-circle);display:flex;justify-content:center;align-items:center;background-color:transparent}/*!@.chip.chip--selected.chip--type-dynamic.chip--variant-standard button:hover*/.chip.chip--selected.chip--type-dynamic.chip--variant-standard.sc-scale-chip button.sc-scale-chip:hover{background:var(--telekom-color-ui-state-fill-hovered-inverted)}/*!@.chip.chip--selected.chip--type-dynamic.chip--variant-standard button:active*/.chip.chip--selected.chip--type-dynamic.chip--variant-standard.sc-scale-chip button.sc-scale-chip:active{background:var(--telekom-color-ui-state-fill-pressed-inverted)}/*!@.chip.chip--selected.chip--type-dynamic button:focus*/.chip.chip--selected.chip--type-dynamic.sc-scale-chip button.sc-scale-chip:focus{justify-content:center;outline:var(--focus-outline)}/*!@.chip.chip--selected.chip--type-dynamic.chip--variant-standard\n  scale-icon-action-close*/.chip.chip--selected.chip--type-dynamic.chip--variant-standard.sc-scale-chip scale-icon-action-close.sc-scale-chip{padding:0;color:var(--telekom-color-text-and-icon-inverted-standard)}/*!@.chip:not(.chip--disabled):not(.chip--type-dynamic):focus,\n.chip.chip--type-dynamic:not(.chip--selected):focus*/.chip.sc-scale-chip:not(.chip--disabled):not(.chip--type-dynamic):focus,.chip.chip--type-dynamic.sc-scale-chip:not(.chip--selected):focus{outline:var(--telekom-spacing-composition-space-02) solid var(--color-focus);outline-offset:var(--telekom-spacing-composition-space-01)}/*!@.chip:not(.chip--disabled):not(.chip--type-dynamic):hover,\n.chip.chip--type-dynamic:not(.chip--selected):hover*/.chip.sc-scale-chip:not(.chip--disabled):not(.chip--type-dynamic):hover,.chip.chip--type-dynamic.sc-scale-chip:not(.chip--selected):hover{background:linear-gradient(\n      var(--telekom-color-ui-state-fill-hovered),\n      var(--telekom-color-ui-state-fill-hovered)\n    ),\n    var(--telekom-color-text-and-icon-inverted-standard)}/*!@.chip:not(.chip--disabled):not(.chip--type-dynamic):active,\n.chip.chip--type-dynamic:not(.chip--selected):active*/.chip.sc-scale-chip:not(.chip--disabled):not(.chip--type-dynamic):active,.chip.chip--type-dynamic.sc-scale-chip:not(.chip--selected):active{background:linear-gradient(\n      var(--telekom-color-ui-state-fill-pressed),\n      var(--telekom-color-ui-state-fill-pressed)\n    ),\n    var(--telekom-color-text-and-icon-inverted-standard)}/*!@.chip--selected*/.chip--selected.sc-scale-chip{background:var(--background-standard-selected);color:var(--color-standard-selected)}/*!@.chip--selected:not(.chip--disabled):not(.chip--type-dynamic):hover*/.chip--selected.sc-scale-chip:not(.chip--disabled):not(.chip--type-dynamic):hover{background:linear-gradient(\n      var(--telekom-color-ui-state-fill-hovered-inverted),\n      var(--telekom-color-ui-state-fill-hovered-inverted)\n    ),\n    var(--background-standard-selected)}/*!@.chip--selected:not(.chip--disabled):not(.chip--type-dynamic):active*/.chip--selected.sc-scale-chip:not(.chip--disabled):not(.chip--type-dynamic):active{background:linear-gradient(\n      var(--telekom-color-ui-state-fill-pressed-inverted),\n      var(--telekom-color-ui-state-fill-pressed-inverted)\n    ),\n    var(--background-standard-selected)}/*!@.chip-label*/.chip-label.sc-scale-chip{padding:0 var(--telekom-spacing-composition-space-03) 0\n    var(--telekom-spacing-composition-space-03);font-weight:var(--telekom-typography-font-weight-bold);font-size:1rem;line-height:100%}/*!@.chip--selected .chip-label*/.chip--selected.sc-scale-chip .chip-label.sc-scale-chip{padding-right:var(--telekom-spacing-composition-space-04)}/*!@.chip--type-dynamic.chip--selected .chip-label*/.chip--type-dynamic.chip--selected.sc-scale-chip .chip-label.sc-scale-chip{padding-right:var(--telekom-spacing-composition-space-03)}/*!@.chip slot[name='chip-icon']::slotted(*)*/.chip slot[name='chip-icon'].sc-scale-chip-s>*{padding-right:var(--telekom-spacing-composition-space-03);padding-top:var(--telekom-spacing-composition-space-03)}/*!@.chip.chip--disabled:not(.chip--type-dynamic)*/.chip.chip--disabled.sc-scale-chip:not(.chip--type-dynamic){color:var(--telekom-color-text-and-icon-disabled);border:1px solid var(--telekom-color-ui-border-disabled)}/*!@.chip--selected:not(.chip--variant-outlined):not(.chip--type-dynamic).chip--disabled*/.chip--selected.sc-scale-chip:not(.chip--variant-outlined):not(.chip--type-dynamic).chip--disabled{background:var(--telekom-color-ui-disabled);color:var(--telekom-color-text-and-icon-disabled);border:none}/*!@.chip--variant-outlined.chip--selected.chip--disabled:not(.chip--type-dynamic)*/.chip--variant-outlined.chip--selected.chip--disabled.sc-scale-chip:not(.chip--type-dynamic){background-color:var(--telekom-color-text-and-icon-inverted-standard);color:var(--telekom-color-text-and-icon-disabled);border:1px solid var(--telekom-color-ui-border-disabled)}/*!@.chip.chip--variant-outline.chip--selected:not(.chip.chip--disabled):not(.chip--type-dynamic):hover*/.chip.chip--variant-outline.chip--selected.sc-scale-chip:not(.chip.chip--disabled):not(.chip--type-dynamic):hover{background:linear-gradient(\n      var(--telekom-color-ui-state-fill-hovered),\n      var(--telekom-color-ui-state-fill-hovered)\n    ),\n    var(--telekom-color-text-and-icon-inverted-standard)}/*!@.chip.chip--variant-outline.chip--selected:not(.chip.chip--disabled):not(.chip--type-dynamic):active*/.chip.chip--variant-outline.chip--selected.sc-scale-chip:not(.chip.chip--disabled):not(.chip--type-dynamic):active{background:linear-gradient(\n      var(--telekom-color-ui-state-fill-pressed),\n      var(--telekom-color-ui-state-fill-pressed)\n    ),\n    var(--telekom-color-text-and-icon-inverted-standard)}/*!@.chip.chip--variant-outline.chip--selected*/.chip.chip--variant-outline.chip--selected.sc-scale-chip{color:var(--telekom-color-text-and-icon-primary-standard);background:var(--telekom-color-text-and-icon-inverted-standard);border:1px solid var(--telekom-color-text-and-icon-primary-standard)}/*!@.chip.chip--selected.chip--type-dynamic.chip--variant-outline\n  scale-icon-action-close*/.chip.chip--selected.chip--type-dynamic.chip--variant-outline.sc-scale-chip scale-icon-action-close.sc-scale-chip{padding:0;color:var(--telekom-color-text-and-icon-primary-standard)}/*!@.chip.chip--selected.chip--type-dynamic.chip--variant-outline button:hover*/.chip.chip--selected.chip--type-dynamic.chip--variant-outline.sc-scale-chip button.sc-scale-chip:hover{background:var(--telekom-color-ui-state-fill-hovered)}/*!@.chip.chip--selected.chip--type-dynamic.chip--variant-outline\n  button:hover\n  scale-icon-action-close*/.chip.chip--selected.chip--type-dynamic.chip--variant-outline.sc-scale-chip button.sc-scale-chip:hover scale-icon-action-close.sc-scale-chip{color:var(--telekom-color-text-and-icon-primary-hovered)}/*!@.chip.chip--selected.chip--type-dynamic.chip--variant-outline button:active*/.chip.chip--selected.chip--type-dynamic.chip--variant-outline.sc-scale-chip button.sc-scale-chip:active{background:var(telekom-color-ui-state-fill-pressed)}/*!@.chip.chip--selected.chip--type-dynamic.chip--variant-outline\n  button:active\n  scale-icon-action-close*/.chip.chip--selected.chip--type-dynamic.chip--variant-outline.sc-scale-chip button.sc-scale-chip:active scale-icon-action-close.sc-scale-chip{color:var(--telekom-color-text-and-icon-primary-pressed)}";

class Chip {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleChange = createEvent$1(this, "scale-change", 7);
    this.scaleChangeLegacy = createEvent$1(this, "scaleChange", 7);
    this.scaleClose = createEvent$1(this, "scale-close", 7);
    this.scaleCloseLegacy = createEvent$1(this, "scaleClose", 7);
    /** (optional) */
    this.variant = 'standard';
    /** (optional) */
    this.type = 'persistent';
    /** (optional) */
    this.selected = false;
    /** (optional) chip aria-role */
    this.ariaRoleTitle = 'switch';
    /** @deprecated (optional) chip aria-checked - should be derived from selected state attribute */
    this.ariaCheckedState = false;
    /** (optional) chip disabled */
    this.disabled = false;
    /** (optional) Dismiss label */
    this.dismissText = 'dismiss';
    this.handleClose = (event) => {
      event.preventDefault();
      event.stopPropagation();
      if (this.disabled && this.type !== 'dynamic') {
        return;
      }
      emitEvent$1(this, 'scaleClose', event);
    };
    this.handleClick = (event) => {
      if (this.type !== 'dynamic') {
        this.selected = !this.selected;
      }
      event.preventDefault();
      event.stopPropagation();
      if (this.disabled && this.type !== 'dynamic') {
        return;
      }
      emitEvent$1(this, 'scaleChange', event);
    };
  }
  componentDidRender() {
    // handle no setted icon size attribute
    const defaultIconSize = 24;
    const iconSlot = this.hostElement.querySelector('[slot="chip-icon"]');
    if (iconSlot !== null) {
      if (iconSlot.children[0].getAttribute('size') === String(defaultIconSize)) {
        iconSlot.children[0].setAttribute('size', String(16));
      }
      if (this.selected) {
        iconSlot.children[0].setAttribute('selected', String(true));
      }
      else {
        iconSlot.children[0].setAttribute('selected', String(false));
      }
    }
  }
  disconnectedCallback() { }
  getIcon() {
    if (this.type === 'dynamic' && this.selected) {
      return (hAsync("button", { part: "button-dismissable", disabled: this.disabled, "aria-label": this.dismissText, onClick: !this.disabled ? this.handleClose : null }, hAsync("scale-icon-action-close", { "accessibility-title": "close", size: 16, selected: true })));
    }
    else if (this.type === 'persistent' && this.selected) {
      return (hAsync("scale-icon-action-checkmark", { "accessibility-title": "success", size: 16, selected: true }));
    }
    else if (this.type === 'persistent') {
      return (hAsync("scale-icon-action-checkmark", { "accessibility-title": "success", size: 16 }));
    }
  }
  render() {
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), this.type === 'dynamic' && this.selected ? (hAsync("span", { role: this.ariaRoleTitle, tabindex: this.selected ? '0' : '-1', part: this.getBasePartMap(), class: this.getCssClassMap(), "aria-checked": this.selected.toString(), onClick: !this.disabled || this.type === 'dynamic'
        ? this.handleClick
        : null }, hAsync("slot", { name: "chip-icon" }), hAsync("span", { class: "chip-label" }, hAsync("slot", null)), this.selected ? this.getIcon() : null)) : (hAsync("span", { role: this.ariaRoleTitle, "aria-checked": this.selected.toString(), tabindex: this.selected ? '0' : '-1', part: this.getBasePartMap(), class: this.getCssClassMap(), onClick: !this.disabled || this.type === 'dynamic'
        ? this.handleClick
        : null }, hAsync("slot", { name: "chip-icon" }), hAsync("span", { class: "chip-label" }, hAsync("slot", null)), this.selected ? this.getIcon() : null))));
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const component = 'chip';
    const prefix = mode === 'basePart' ? '' : `${component}--`;
    return classnames(mode === 'basePart' ? 'base' : component, !!this.selected && `${prefix}selected`, !!this.disabled && `${prefix}disabled`, this.type && `${prefix}type-${this.type}`, this.variant && `${prefix}variant-${this.variant}`);
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return chipCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-chip",
    "$members$": {
      "variant": [1],
      "type": [1],
      "selected": [4],
      "ariaRoleTitle": [1, "aria-role-title"],
      "ariaCheckedState": [4, "aria-checked-state"],
      "label": [1],
      "disabled": [4],
      "dismissText": [1, "dismiss-text"],
      "styles": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const collapsibleCss = "/*!@:host*/.sc-scale-collapsible-h{--spacing-y:var(--telekom-spacing-composition-space-06);--font:var(--telekom-text-style-heading-5);--border-width-button:var(--telekom-spacing-composition-space-02);--radius-button:var(--telekom-radius-small);--spacing-left-button:0;--spacing-left-button-text:var(--telekom-spacing-composition-space-04);--color-button-hover:var(--telekom-color-text-and-icon-primary-hovered);--color-button-active:var(--telekom-color-text-and-icon-primary-pressed);--background-button-hover:none;--focus-outline:var(--telekom-line-weight-highlight) solid\n    var(--telekom-color-functional-focus-standard);--spacing-right-content:var(--telekom-spacing-composition-space-14);--spacing-left-content:34px;--spacing-top-content:var(--telekom-spacing-composition-space-06);--spacing-bottom-content:var(--telekom-spacing-composition-space-08)}/*!@.collapsible*/.collapsible.sc-scale-collapsible{position:relative;margin:var(--spacing-y) 0}/*!@.collapsible--expanded:before*/.collapsible--expanded.sc-scale-collapsible:before{top:0;left:0;right:0;width:100%;border:var(--telekom-spacing-composition-space-01) solid transparent;content:'';display:block;position:absolute;pointer-events:none;bottom:calc(-1 * var(--spacing-y))}/*!@.collapsible__heading*/.collapsible__heading.sc-scale-collapsible{margin:0}/*!@.collapsible__button*/.collapsible__button.sc-scale-collapsible{color:currentColor;width:100%;display:flex;text-align:left;align-items:center;padding-top:0;border-color:transparent;border-style:solid;padding-right:0;padding-bottom:0;background-color:transparent;font:var(--font);border-width:var(--border-width-button);border-radius:var(--radius-button);padding-left:var(--spacing-left-button);font-family:inherit;word-spacing:inherit;letter-spacing:inherit}/*!@.collapsible__button-text*/.collapsible__button-text.sc-scale-collapsible{margin-left:var(--spacing-left-button-text)}/*!@.collapsible__button:hover*/.collapsible__button.sc-scale-collapsible:hover{cursor:pointer;color:var(--color-button-hover);background-color:var(--background-button-hover)}/*!@.collapsible__button:active*/.collapsible__button.sc-scale-collapsible:active{color:var(--color-button-active);background-color:transparent}/*!@.collapsible__button:focus*/.collapsible__button.sc-scale-collapsible:focus{outline:var(--focus-outline)}/*!@.collapsible__icon*/.collapsible__icon.sc-scale-collapsible{flex-shrink:0}/*!@.collapsible__icon-right*/.collapsible__icon-right.sc-scale-collapsible{margin-left:auto}/*!@.collapsible__button[aria-expanded='true'] .collapsible__icon*//*!@.collapsible__content*/.collapsible__content.sc-scale-collapsible{padding-right:var(--spacing-right-content);padding-left:var(--spacing-left-content);margin-top:var(--spacing-top-content);margin-bottom:var(--spacing-bottom-content)}/*!@::slotted(*:not([slot='heading']))*/.sc-scale-collapsible-s>*:not([slot='heading']){font:var(--telekom-text-style-body)}";

const DEFAULT_ICON_SIZE$3 = 24;
let i$8 = 0;
class Collapsible {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleExpand = createEvent$1(this, "scale-expand", 7);
    this.scaleExpandLegacy = createEvent$1(this, "scaleExpand", 7);
    /** Default aria-level for heading */
    this.headingLevel = 2;
    this.iconLocation = 'left';
    this.handleClick = () => {
      this.expanded = !this.expanded;
      emitEvent$1(this, 'scaleExpand', { expanded: this.expanded });
    };
  }
  componentWillLoad() {
    const j = i$8++;
    this.headingId = 'collapsable-heading-' + j;
    this.panelId = 'collapsable-panel-' + j;
  }
  componentDidLoad() {
    this.setHeadingFromLightDOM();
  }
  /**
   * @deprecated Safe to remove in 4.0
   * @see https://github.com/telekom/scale/pull/319
   */
  setHeadingFromLightDOM() {
    const lightHeading = this.hostElement.querySelector(':first-child');
    if (lightHeading == null) {
      return;
    }
    // Only proceed if the element is not a heading and has no `slot` attribute
    const isHeading = lightHeading.tagName.charAt(0).toUpperCase() === 'H';
    const hasSlotAttr = lightHeading.hasAttribute('slot');
    if (isHeading && !hasSlotAttr) {
      this.headingElement.innerHTML = lightHeading.innerHTML;
      lightHeading.style.display = 'none';
    }
  }
  render() {
    const IconTag = this.expanded
      ? 'scale-icon-navigation-collapse-down'
      : 'scale-icon-navigation-right';
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { class: this.getCssClassMap(), part: classnames('base', this.expanded && 'expanded') }, hAsync("h2", { "aria-level": this.headingLevel, class: "collapsible__heading", part: "heading" }, hAsync("button", { id: this.headingId, class: "collapsible__button", part: "button", onClick: this.handleClick, "aria-expanded": this.expanded ? 'true' : 'false', "aria-controls": this.panelId }, this.iconLocation === 'left' ? (hAsync(IconTag, { size: DEFAULT_ICON_SIZE$3, decorative: true, class: "collapsible__icon", part: classnames('icon', this.expanded && 'expanded') })) : null, hAsync("span", { ref: (el) => (this.headingElement = el), class: "collapsible__button-text", part: "button-text" }, hAsync("slot", { name: "heading" })), this.iconLocation === 'right' ? (hAsync(IconTag, { size: DEFAULT_ICON_SIZE$3, decorative: true, class: "collapsible__icon collapsible__icon-right", part: classnames('icon', this.expanded && 'expanded') })) : null)), hAsync("div", { id: this.panelId, role: "region", "aria-labelledby": this.headingId, hidden: !this.expanded, class: "collapsible__content", part: "content" }, hAsync("slot", null)))));
  }
  getCssClassMap() {
    return classnames('collapsible', this.expanded && 'collapsible--expanded');
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return collapsibleCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-collapsible",
    "$members$": {
      "expanded": [1540],
      "headingLevel": [2, "heading-level"],
      "styles": [1],
      "iconLocation": [1, "icon-location"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["expanded", "expanded"]]
  }; }
}

const iconCss$3V = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationAvailable {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 1C5.925 1 1 5.925 1 12s4.925 11 11 11 11-4.925 11-11A11 11 0 0012 1zm5.53 8.295l-6.865 6.865-4.195-4.195a.75.75 0 111.06-1.06l3.135 3.135 5.805-5.805a.755.755 0 011.06 0 .745.745 0 010 1.06z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("g", { "fill-rule": "evenodd" }, hAsync("path", { d: "M12 1C5.925 1 1 5.925 1 12s4.925 11 11 11 11-4.925 11-11S18.075 1 12 1zm0 20.5c-5.239 0-9.5-4.262-9.5-9.5 0-5.239 4.261-9.5 9.5-9.5 5.238 0 9.5 4.261 9.5 9.5 0 5.238-4.262 9.5-9.5 9.5z" }), hAsync("path", { d: "M16.47 8.236l-5.803 5.803-3.137-3.136a.75.75 0 10-1.06 1.06l4.197 4.197 6.864-6.863a.75.75 0 10-1.061-1.061z" }))))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3V; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-available",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3U = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationBlog {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M11.775 19.452l1.898 1.9-2.607.707.71-2.607zm9.836-9.307a1.376 1.376 0 011.073 2.238l-.1.112-8.044 8.037-1.946-1.947 8.044-8.037c.269-.268.62-.403.973-.403zM19.115 2v8.047l-5.781 5.777h-2.686l-3.122 3.122a1.556 1.556 0 01-1.112.469c-.771 0-1.513-.566-1.593-1.436l-.007-.156v-1.998h-1.09a2.724 2.724 0 01-2.719-2.558L1 13.1V2h18.115z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M11.775 19.452l1.898 1.9-2.607.707.71-2.607zm9.836-9.307a1.376 1.376 0 011.073 2.238l-.1.112-8.044 8.037-1.946-1.947 8.044-8.037c.269-.268.62-.403.973-.403zM19.115 2v8.047l-1.431 1.43V3.43H2.43v9.67c0 .67.51 1.221 1.162 1.288l.132.006h2.52v3.429c0 .114.086.148.135.157l.035.005a.11.11 0 00.07-.023l.031-.027 3.54-3.54 4.71-.001-1.431 1.43h-2.686l-3.122 3.122a1.556 1.556 0 01-1.112.469c-.771 0-1.513-.566-1.593-1.436l-.007-.156v-1.998h-1.09a2.724 2.724 0 01-2.719-2.558L1 13.1V2h18.115z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3U; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-blog",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3T = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationCallIncoming {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M5.9 3.5l3.4 5.95-1.7 1.7c-.25.25-.3.7-.05 1l.423.512.34.4.387.438.43.466a23.96 23.96 0 00.954.955l.466.43.438.385.584.494.328.27a.76.76 0 00.92.019l.08-.069 1.6-1.65 5.95 3.35-.043.442-.042.338c-.172 1.231-.63 2.95-2.165 3.92-.8.5-1.7.65-2.5.65a6.477 6.477 0 01-1.458-.183l-.326-.082-.466-.135C11.15 22.3 8.5 20.5 6 18c-2.45-2.5-4.25-5.15-5.1-7.5l-.077-.262-.06-.228L.7 9.744C.487 8.75.337 7.137 1.2 5.75c.962-1.462 2.574-1.947 3.768-2.138l.344-.05.16-.02L5.9 3.5zm15.5-1.95c.3-.3.75-.3 1.05 0 .273.273.298.71.074.976L16.75 8.25l2.2 2.2-6.9 1.45L13.5 5l2.2 2.2 5.7-5.65z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M5.9 3.5l3.4 5.95-1.7 1.7c-.25.25-.3.7-.05 1l.423.512.34.4.387.438.43.466a23.96 23.96 0 00.954.955l.466.43.438.385.584.494.328.27a.76.76 0 00.92.019l.08-.069 1.6-1.65 5.95 3.35-.043.442-.042.338c-.172 1.231-.63 2.95-2.165 3.92-.8.5-1.7.65-2.5.65a6.477 6.477 0 01-1.458-.183l-.326-.082-.466-.135C11.15 22.3 8.5 20.5 6 18c-2.45-2.5-4.25-5.15-5.1-7.5l-.077-.262-.06-.228L.7 9.744C.487 8.75.337 7.137 1.2 5.75c.962-1.462 2.574-1.947 3.768-2.138l.344-.05.16-.02L5.9 3.5zm-.75 1.6c-1.25.2-2.15.7-2.6 1.45-.522.815-.49 1.822-.364 2.562l.054.281.059.246L2.4 10c.7 2.15 2.4 4.6 4.7 6.9 2.35 2.35 4.8 4.05 6.9 4.75l.238.073.221.057.127.03.28.054c.74.127 1.769.158 2.584-.364.7-.42 1.182-1.232 1.406-2.355l.044-.245-4.05-2.3-.9.9c-.8.8-2.1.85-3 .15l-.324-.25a19.79 19.79 0 01-.178-.142l-.386-.32-.419-.362-.444-.403a25.7 25.7 0 01-.463-.44L8.5 15.5l-.475-.512-.443-.493-.592-.683-.64-.762a2.225 2.225 0 01.035-2.876l.115-.124.95-.9-2.3-4.05zM21.4 1.55c.3-.3.75-.3 1.05 0 .273.273.298.71.074.976L16.75 8.25l2.2 2.2-6.9 1.45L13.5 5l2.2 2.2 5.7-5.65z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3T; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-call-incoming",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3S = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationCallOutgoing {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M5.9 3.5l3.4 5.95-1.7 1.7c-.25.25-.3.7-.05 1l.423.512.34.4.387.438.43.466a23.96 23.96 0 00.954.955l.466.43.438.385.584.494.328.27a.76.76 0 00.92.019l.08-.069 1.6-1.65 5.95 3.35-.043.442-.042.338c-.172 1.231-.63 2.95-2.165 3.92-.8.5-1.7.65-2.5.65a6.477 6.477 0 01-1.458-.183l-.326-.082-.466-.135C11.15 22.3 8.5 20.5 6 18c-2.45-2.5-4.25-5.15-5.1-7.5l-.077-.262-.06-.228L.7 9.744C.487 8.75.337 7.137 1.2 5.75c.962-1.462 2.574-1.947 3.768-2.138l.344-.05.16-.02L5.9 3.5zm16.55-1.9L21 8.5l-2.2-2.2-5.65 5.65c-.15.15-.35.2-.55.2-.2 0-.4-.05-.55-.2a.722.722 0 01-.074-.965l.074-.085 5.7-5.65-2.2-2.2 6.9-1.45z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M5.9 3.5l3.4 5.95-1.7 1.7c-.25.25-.3.7-.05 1l.423.512.34.4.387.438.43.466a23.96 23.96 0 00.954.955l.466.43.438.385.584.494.328.27a.76.76 0 00.92.019l.08-.069 1.6-1.65 5.95 3.35-.043.442-.042.338c-.172 1.231-.63 2.95-2.165 3.92-.8.5-1.7.65-2.5.65a6.477 6.477 0 01-1.458-.183l-.326-.082-.466-.135C11.15 22.3 8.5 20.5 6 18c-2.45-2.5-4.25-5.15-5.1-7.5l-.077-.262-.06-.228L.7 9.744C.487 8.75.337 7.137 1.2 5.75c.962-1.462 2.574-1.947 3.768-2.138l.344-.05.16-.02L5.9 3.5zm-.75 1.6c-1.25.2-2.15.7-2.6 1.45-.522.815-.49 1.822-.364 2.562l.054.281.059.246L2.4 10c.7 2.15 2.4 4.6 4.7 6.9 2.35 2.35 4.8 4.05 6.9 4.75l.238.073.221.057.127.03.28.054c.74.127 1.769.158 2.584-.364.7-.42 1.182-1.232 1.406-2.355l.044-.245-4.05-2.3-.9.9c-.8.8-2.1.85-3 .15l-.324-.25a19.79 19.79 0 01-.178-.142l-.386-.32-.419-.362-.444-.403a25.7 25.7 0 01-.463-.44L8.5 15.5l-.475-.512-.443-.493-.592-.683-.64-.762a2.225 2.225 0 01.035-2.876l.115-.124.95-.9-2.3-4.05zm17.3-3.5L21 8.5l-2.2-2.2-5.65 5.65c-.15.15-.35.2-.55.2-.2 0-.4-.05-.55-.2a.722.722 0 01-.074-.965l.074-.085 5.7-5.65-2.2-2.2 6.9-1.45z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3S; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-call-outgoing",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3R = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationChat {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M3.5 8.5V10a1.5 1.5 0 00-1.493 1.356L2 11.5v5a1.5 1.5 0 001.356 1.493L3.5 18H5v2.32L7.32 18H12a1.5 1.5 0 00.999-.388l.111-.112h.275l.92.92a3 3 0 01-2.1 1.073L12 19.5H7.94l-2.375 2.355a1.21 1.21 0 01-2.058-.723L3.5 21v-1.5a3 3 0 01-2.995-2.824L.5 16.5v-5a3 3 0 012.824-2.995L3.5 8.5zm19.5-6V13a3 3 0 01-2.824 2.995L20 16h-.5v1.875a1.5 1.5 0 01-2.453 1.162l-.112-.102L14 16H8a3 3 0 01-2.995-2.824L5 13V2.5h18z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M3.5 8.5V10c-.8 0-1.423.576-1.493 1.352L2 11.5v5c0 .8.576 1.423 1.352 1.493L3.5 18H5v2.3L7.3 18h5c.394 0 .71-.153.985-.392l.115-.108 1.05 1.05a3.027 3.027 0 01-1.94.893l-.21.007H7.95l-2.4 2.4c-.25.25-.55.35-.85.35-.563 0-1.125-.396-1.193-1.063L3.5 21v-1.5a3.01 3.01 0 01-2.995-2.824L.5 16.5v-5a3.01 3.01 0 012.824-2.995L3.5 8.5zm19.5-6V13a3.01 3.01 0 01-2.824 2.995L20 16h-.5v1.9c0 .9-.75 1.5-1.5 1.5-.306 0-.65-.115-.933-.345l-.117-.105L14 16H8a3.01 3.01 0 01-2.995-2.824L5 13V2.5h18zM21.5 4h-15v9c0 .8.576 1.423 1.352 1.493L8 14.5h6.65L18 17.85V14.5h2c.8 0 1.423-.576 1.493-1.352L21.5 13V4z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3R; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-chat",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3Q = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationChatBadge {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M10.973 3.5a7.698 7.698 0 00-.972 3.75c0 4.273 3.476 7.75 7.75 7.75a7.69 7.69 0 004.498-1.453l.25-.187V16a3 3 0 01-2.823 2.994L19.5 19h-7l-3.512 3.513a1.715 1.715 0 01-1.225.516c-.855 0-1.676-.63-1.756-1.598L6 21.274V19H4.5a3 3 0 01-2.994-2.823L1.5 16V3.5h9.473zM17.75 1a6.25 6.25 0 110 12.499A6.25 6.25 0 0117.75 1zm0 1.5A4.755 4.755 0 0013 7.25 4.756 4.756 0 0017.75 12c2.62 0 4.75-2.131 4.75-4.75 0-2.62-2.13-4.75-4.75-4.75zm.124 1.434c1.208 0 1.997.808 1.997 1.942 0 .798-.356 1.334-.82 1.785l-.118.11-1.469 1.33v.055h2.38v1.125h-3.848V8.943l2.073-1.989c.297-.288.557-.594.557-1.078 0-.4-.297-.79-.752-.79-.406 0-.681.192-.777.59l-.023.126H15.83c.075-1.05.781-1.868 2.045-1.868z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M21 16c0 .827-.673 1.5-1.5 1.5h-7.621l-3.952 3.952a.236.236 0 01-.273.056.26.26 0 01-.154-.233V17.5h-3c-.827 0-1.5-.673-1.5-1.5V5h7.335a7.649 7.649 0 01.634-1.5H1.5V16a3 3 0 003 3H6v2.275c0 1.055.863 1.754 1.763 1.754.43 0 .867-.16 1.225-.517L12.5 19h7a3 3 0 003-3v-2.636a7.735 7.735 0 01-1.5.914V16zm-3.25-2.5a6.25 6.25 0 100-12.5 6.25 6.25 0 000 12.5zm.123-9.566c1.208 0 1.998.808 1.998 1.942 0 .864-.418 1.422-.938 1.896l-1.469 1.329v.055h2.379v1.125h-3.847V8.943l2.072-1.988c.298-.288.558-.595.558-1.079 0-.399-.298-.79-.753-.79-.446 0-.734.233-.799.716h-1.245c.074-1.05.781-1.868 2.044-1.868z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3Q; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-chat-badge",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3P = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationEmail {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M23.5 6.665V17.5a3 3 0 01-2.824 2.995l-.176.005h-17a3 3 0 01-2.995-2.824L.5 17.5V6.715l8.97 7.61a3.89 3.89 0 004.889.138l.171-.138 8.97-7.66zm0-3.165v1.19l-9.945 8.49c-.85.727-2.08.765-2.97.115l-.145-.115L.5 4.745V3.5h23z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M.5 3.5v14c0 1.65 1.35 3 3 3h17c1.65 0 3-1.35 3-3v-14H.5zM22 5v.95l-8.45 7.25c-.9.75-2.2.75-3.1 0L2 5.95V5h20zm-1.5 14h-17c-.85 0-1.5-.65-1.5-1.5V7.95l7.45 6.4c.75.65 1.65.95 2.55.95.9 0 1.8-.3 2.55-.95L22 7.95v9.55c0 .85-.65 1.5-1.5 1.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3P; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-email",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3O = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationEndCall {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M23.905 12.195c-.465-2.09-2.515-3.235-3.13-3.535C18.585 7.59 15.47 7 12 7c-3.47 0-6.585.59-8.775 1.66-.615.3-2.66 1.45-3.13 3.535-.315 1.42.15 2.92 1.39 4.47l.31.385 6.485-1.825V12.87c0-.375.285-.69.665-.735.71-.08 1.815-.17 3.055-.17 1.24 0 2.345.095 3.055.17.38.04.665.355.665.735v2.355l6.485 1.825.31-.385c1.24-1.545 1.705-3.05 1.39-4.47z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M23.905 12.195c-.465-2.09-2.515-3.235-3.13-3.535C18.585 7.59 15.47 7 12 7c-3.47 0-6.585.59-8.775 1.66-.615.3-2.66 1.45-3.13 3.535-.315 1.42.15 2.92 1.39 4.47l.31.385 6.485-1.825V12.87c0-.375.285-.69.665-.735.71-.08 1.815-.17 3.055-.17 1.24 0 2.345.095 3.055.17.38.04.665.355.665.735v2.355l6.485 1.825.31-.385c1.24-1.545 1.705-3.05 1.39-4.47zm-2.265 3.14l-4.42-1.245v-1.215c0-1.145-.86-2.1-2-2.225-2.175-.24-4.26-.24-6.435 0-1.14.125-2 1.08-2 2.225v1.215l-4.42 1.245c-.72-1.025-.99-1.965-.8-2.81.32-1.435 1.86-2.29 2.325-2.515C5.87 9.035 8.755 8.5 12 8.5c3.245 0 6.13.535 8.115 1.505.465.225 2.005 1.08 2.325 2.515.19.85-.08 1.795-.8 2.815z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3O; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-end-call",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3N = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationFeedback {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 1c5.8 0 10.5 4.7 10.45 10.55 0 5.8-4.7 10.5-10.5 10.5a10.41 10.41 0 01-2.69-.345L8.9 21.6l-1.45 1.45c-.35.35-.75.5-1.2.5-.855 0-1.665-.632-1.744-1.595L4.5 21.8v-2.95c-1.85-1.9-3-4.5-3-7.35C1.5 5.7 6.2 1 12 1zm4.25 11.5c.45 0 .75.35.75.75a.772.772 0 01-.651.743L16.25 14h-8.7c-.4 0-.75-.35-.75-.75 0-.367.294-.691.651-.743l.099-.007h8.7zm0-3.5c.45 0 .75.35.75.75a.772.772 0 01-.651.743l-.099.007h-8.7c-.4 0-.75-.35-.75-.75 0-.367.294-.691.651-.743L7.55 9h8.7z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 1c5.8 0 10.5 4.7 10.45 10.55 0 5.8-4.7 10.5-10.5 10.5a10.41 10.41 0 01-2.69-.345L8.9 21.6l-1.45 1.45c-.35.35-.75.5-1.2.5-.855 0-1.665-.632-1.744-1.595L4.5 21.8v-2.95c-1.85-1.9-3-4.5-3-7.35C1.5 5.7 6.2 1 12 1zm0 1.5c-4.95 0-9 4.05-9 9 0 2.243.82 4.395 2.373 6.065l.227.235.45.45v3.55c0 .188.14.234.21.246l.04.004c.037 0 .075-.028.112-.063L8.55 19.85l.85.25c.85.25 1.7.4 2.6.4 4.95 0 9-4.05 9-9s-4.05-9-9-9zm4.25 10c.45 0 .75.35.75.75a.772.772 0 01-.651.743L16.25 14h-8.7c-.4 0-.75-.35-.75-.75 0-.367.294-.691.651-.743l.099-.007h8.7zm0-3.5c.45 0 .75.35.75.75a.772.772 0 01-.651.743l-.099.007h-8.7c-.4 0-.75-.35-.75-.75 0-.367.294-.691.651-.743L7.55 9h8.7z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3N; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-feedback",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3M = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationFlightMode {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M9.239 23.262a1.428 1.428 0 01-1.262-.773l-2.231-4.353-4.327-2.185a1.422 1.422 0 01.805-2.679l5.085.59 3.197-3.498-8.233-5.328a1.546 1.546 0 01-.25-2.403 1.536 1.536 0 011.455-.409c1.546.371 9.064 2.176 11.869 2.93l.207-.188c3.729-3.4 5.981-5.449 7.403-4.035.199.198.435.553.422 1.117-.045 1.966-3.469 5.408-4.576 6.47.759 2.802 2.538 10.11 2.943 11.933a1.548 1.548 0 01-.5 1.51l-.039.034a1.544 1.544 0 01-1.239.363 1.55 1.55 0 01-1.085-.698l-5.327-8.315-3.519 3.228.617 5.095c.053.437-.096.866-.407 1.177a1.43 1.43 0 01-1.008.417z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M13.857 11.033l6.289 9.817.569.58-.492-.567.041-.036a.051.051 0 00.018-.05c-.426-1.92-2.38-9.932-3.044-12.293l-.125-.447.345-.313c2.551-2.304 4.596-5.143 4.419-5.764-.608-.15-3.333 2.31-5.312 4.114l-.819.746-.4-.11C12.971 6.045 4.752 4.071 3.128 3.682l-.049.014.008.08 9.722 6.291-4.91 5.37-5.406-.625 4.365 2.203 2.255 4.402-.657-5.429 5.401-4.956zm-4.618 12.23a1.428 1.428 0 01-1.262-.773l-2.231-4.354-4.327-2.185a1.422 1.422 0 01.805-2.679l5.085.59 3.197-3.498-8.233-5.328a1.546 1.546 0 01-.25-2.403 1.536 1.536 0 011.455-.409c1.546.371 9.064 2.176 11.869 2.93l.207-.188c3.729-3.4 5.981-5.449 7.403-4.035.199.198.435.553.422 1.117-.045 1.966-3.469 5.408-4.576 6.47.759 2.802 2.538 10.11 2.943 11.933a1.548 1.548 0 01-.5 1.51l-.039.034a1.544 1.544 0 01-1.239.363 1.55 1.55 0 01-1.085-.698l-5.327-8.315-3.519 3.228.617 5.095c.053.437-.096.866-.407 1.177a1.43 1.43 0 01-1.008.417z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3M; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-flight-mode",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3L = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationHappyPerson {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M11.75 4.75a2.126 2.126 0 100-4.252 2.126 2.126 0 00.002 4.252m7.44-1.426a.925.925 0 00-1.301.138c-.68.838-1.576 1.854-1.828 2.028-1.951 1.341-7.306.664-8.816-.75-.238-.263-1.007-1.756-1.576-2.985a.926.926 0 00-1.679.779c.517 1.116 1.46 3.06 1.977 3.543.609.571 1.55 1.045 2.65 1.39-.086 1.056-.274 3.4-.377 5.04-.111 1.778-.19 4.755-.218 5.953-.012.5.192.983.558 1.324l3.652 3.392a.95.95 0 001.368-1.313l-3.024-3.541.287-3.477 3.36 1.339-.657 4.149a.95.95 0 001.86.379l1.337-5.346a.951.951 0 00-.495-1.079l-3.523-1.774.51-4.441c1.492-.063 2.885-.392 3.854-1.057.597-.411 1.849-1.933 2.218-2.389a.926.926 0 00-.137-1.302", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M11.75 4.75a2.126 2.126 0 100-4.252 2.126 2.126 0 00.002 4.252m7.44-1.426a.925.925 0 00-1.301.138c-.68.838-1.576 1.854-1.828 2.028-1.951 1.341-7.306.664-8.816-.75-.238-.263-1.007-1.756-1.576-2.985a.926.926 0 00-1.679.779c.517 1.116 1.46 3.06 1.977 3.543.609.571 1.55 1.045 2.65 1.39-.086 1.056-.274 3.4-.377 5.04-.111 1.778-.19 4.755-.218 5.953-.012.5.192.983.558 1.324l3.652 3.392a.95.95 0 001.368-1.313l-3.024-3.541.287-3.477 3.36 1.339-.657 4.149a.95.95 0 001.86.379l1.337-5.346a.951.951 0 00-.495-1.079l-3.523-1.774.51-4.441c1.492-.063 2.885-.392 3.854-1.057.597-.411 1.849-1.933 2.218-2.389a.926.926 0 00-.137-1.302", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3L; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-happy-person",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3K = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationInbox {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M9.315 15.5l.203.428A2.765 2.765 0 0012 17.5c.991 0 1.912-.547 2.396-1.407l.085-.165.204-.428H21v4a3.004 3.004 0 01-2.824 2.995L18 22.5H6a3.004 3.004 0 01-2.995-2.824L3 19.5v-4h6.315zM12 1a.75.75 0 01.743.648l.007.102V7.5h3.832L12 14.5l-4.582-7h3.832V1.75A.75.75 0 0112 1z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M9.315 15.5l.204.428A2.762 2.762 0 0012 17.5c.992 0 1.912-.547 2.396-1.407l.085-.165.205-.428H21v4a3.004 3.004 0 01-2.824 2.995L18 22.5H6a3.004 3.004 0 01-2.995-2.824L3 19.5v-4h6.315zM8.399 17H4.5v2.5c0 .778.596 1.42 1.356 1.493L6 21h12c.778 0 1.42-.596 1.493-1.356l.007-.144V17h-3.898A4.272 4.272 0 0112 19a4.27 4.27 0 01-3.601-2zM12 1a.75.75 0 01.743.648l.007.102V7.5h3.832L12 14.5l-4.582-7h3.832V1.75A.75.75 0 0112 1z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3K; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-inbox",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3J = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationLandingMobileContactClient {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M20 1a3 3 0 012.996 2.824L23 4v12a3 3 0 01-2.824 2.995L20 19h-5a2.998 2.998 0 01-2.73-1.761l.23.011a6.706 6.706 0 004.773-1.977 6.76 6.76 0 000-9.546A6.706 6.706 0 0012.5 3.75c-.164 0-.327.013-.49.023a2.998 2.998 0 012.815-2.768L15.001 1h5zm-1 1.5h-3V4h3V2.5zM5.639 6.09l.275.053.487.102.991 5.121-1.677.843a.343.343 0 00-.164.427l.065.171.155.394.09.219.206.474c.074.164.153.335.237.51l.13.264c.224.444.452.853.66 1.204l.238.39c.075.12.144.23.207.326a.344.344 0 00.372.148l.068-.025 1.676-.844 3.52 3.85-.207.452c-.633 1.378-1.509 2.217-2.605 2.491a3.162 3.162 0 01-.774.094c-.987 0-1.862-.435-2.375-.759l-.21-.14-.154-.11C5 20.34 3.636 18.11 2.82 16.485c-.818-1.624-1.797-4.047-1.82-6.371l.002-.164.01-.214c.004-.078.012-.164.022-.255l.04-.29c.124-.758.45-1.758 1.286-2.443.764-.626 1.775-.86 3.01-.698l.268.04zm10.045 1.228a4.5 4.5 0 11-6.366 6.364 4.5 4.5 0 016.366-6.364zm-3.182.606a.539.539 0 00-.533.452l-.007.088V9.96h-1.497a.54.54 0 00-.088 1.073l.088.007h1.497v1.496a.539.539 0 001.073.088l.007-.088V11.04h1.496a.538.538 0 00.54-.54.54.54 0 00-.453-.533l-.087-.007H13.04V8.464a.54.54 0 00-.54-.54z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M5.638 6.09l.275.053.487.102.991 5.121-1.677.843a.343.343 0 00-.164.427l.065.171.155.394.09.219.206.474c.074.164.153.335.237.51l.13.264c.224.444.452.853.66 1.204l.238.39c.075.12.144.23.207.326a.344.344 0 00.372.148l.068-.025 1.676-.844 3.52 3.85-.207.452c-.633 1.378-1.509 2.217-2.605 2.491a3.162 3.162 0 01-.774.094c-.987 0-1.862-.435-2.375-.759l-.21-.14-.154-.11C5 20.34 3.636 18.11 2.82 16.485c-.818-1.624-1.797-4.047-1.82-6.371l.002-.164.01-.214c.004-.078.012-.164.022-.255l.04-.29c.124-.758.45-1.758 1.286-2.443.764-.626 1.775-.86 3.01-.698l.268.04zm-.99 1.41c-.558 0-1.006.136-1.338.408-.508.417-.699 1.106-.77 1.609l-.027.253-.011.2-.002.13c.016 1.588.605 3.616 1.658 5.712 1.055 2.095 2.332 3.778 3.597 4.737l.098.071.153.102c.417.264 1.226.674 1.992.483.475-.12.898-.464 1.263-1.03l.12-.196-2.067-2.26-.662.332a1.841 1.841 0 01-2.373-.647 22.014 22.014 0 01-1.186-2.062 21.789 21.789 0 01-.948-2.183 1.84 1.84 0 01.76-2.214l.136-.076.661-.333L5.12 7.53a4.145 4.145 0 00-.472-.029zM20.001 1a3 3 0 012.995 2.824L23 4v12a3 3 0 01-2.824 2.995L20 19h-5a3 3 0 01-2.96-2.522c.153.011.305.022.46.022.36 0 .714-.036 1.06-.098a1.5 1.5 0 001.304 1.092L15 17.5h5c.778 0 1.42-.596 1.493-1.356L21.5 16V4c0-.778-.596-1.42-1.356-1.493L20 2.5h-1V4h-3V2.5h-1c-.78 0-1.42.596-1.493 1.356L13.5 4v.589a6.045 6.045 0 00-1-.089l-.251.007-.25.017V4a3 3 0 012.825-2.995L15 1h5zm-4.318 6.318a4.5 4.5 0 11-6.366 6.364 4.5 4.5 0 016.366-6.364zm-3.182.606a.539.539 0 00-.533.452l-.007.088V9.96h-1.497a.54.54 0 00-.088 1.073l.088.007h1.497v1.496a.539.539 0 001.073.088l.007-.088V11.04h1.496a.538.538 0 00.54-.54.54.54 0 00-.453-.533l-.087-.007H13.04V8.464a.54.54 0 00-.54-.54z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3J; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-landing-mobile-contact-client",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3I = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationLoyaltyEarned {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M16.92 11.992c-.058.08-.108.164-.173.24l-4.251 4.972c-.375.439-.921.69-1.501.69a1.965 1.965 0 01-1.497-.69l-4.252-4.972a3.81 3.81 0 01-.254-4.61 3.797 3.797 0 013.14-1.664c1.487 0 2.419.843 2.52.939l.345.325.343-.325c.102-.096 1.035-.94 2.52-.94 1.21 0 2.338.58 3.054 1.552a2.248 2.248 0 00-2.163 2.24c0 1.214.966 2.199 2.169 2.243M23 10.5h-2.25v2.25a.75.75 0 11-1.5 0V10.5H17A.75.75 0 1117 9h2.25V6.75a.75.75 0 011.5 0V9H23a.75.75 0 010 1.5M1 4h1.5v1.5a.75.75 0 101.5 0V4h1.5a.75.75 0 100-1.5H4V1a.75.75 0 00-1.5 0v1.5H1A.75.75 0 001 4m6.5 14.5H5V16a.75.75 0 00-1.5 0v2.5H1A.75.75 0 001 20h2.5v2.5a.75.75 0 101.5 0V20h2.5a.75.75 0 100-1.5", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M15.917 11.71l-4.178 4.886a.967.967 0 01-1.476 0l-4.251-4.97a2.802 2.802 0 01-.187-3.399A2.77 2.77 0 018.138 7c.331 0 .663.058.978.172 1.143.42 1.459 1.23 1.885 2.074.406-.805.708-1.59 1.778-2.032A2.848 2.848 0 0113.864 7a2.77 2.77 0 011.98.828A2.237 2.237 0 0117 7.5h.483c-.024-.038-.041-.08-.066-.117A4.294 4.294 0 0013.864 5.5c-.573 0-1.131.11-1.658.328a4.161 4.161 0 00-1.204.748 4.116 4.116 0 00-1.371-.812A4.332 4.332 0 008.138 5.5a4.294 4.294 0 00-3.554 1.883 4.312 4.312 0 00.288 5.216l4.25 4.973a2.47 2.47 0 003.756 0l4.25-4.973c.163-.19.305-.39.429-.599H17c-.395 0-.761-.112-1.084-.29M23 9h-2.25V6.75a.75.75 0 10-1.5 0V9H17a.75.75 0 100 1.5h2.25v2.25a.75.75 0 001.5 0V10.5H23A.75.75 0 0023 9M1 4h1.5v1.5a.75.75 0 001.5 0V4h1.5a.75.75 0 000-1.5H4V1a.75.75 0 10-1.5 0v1.5H1A.75.75 0 101 4m6.5 14.5H5V16a.75.75 0 10-1.5 0v2.5H1A.75.75 0 001 20h2.5v2.5a.75.75 0 101.5 0V20h2.5a.75.75 0 100-1.5", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3I; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-loyalty-earned",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3H = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationLoyaltyLost {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M7.436 14.782l-1.898 1.625 2.589 3.029 1.899-1.626-2.59-3.028zm4.9 4.946l-.036.042a.391.391 0 01-.3.126.383.383 0 01-.294-.121l-.384-.456-1.905 1.623.386.454a2.888 2.888 0 004.396 0l.362-.422-1.9-1.621-.325.375zm7.548-8.928c-.11.195-.241.383-.39.557l-1.664 1.946 1.898 1.625 1.666-1.947c.252-.295.477-.616.667-.953l.247-.435-2.18-1.23-.244.437zm-15.377.556a3.547 3.547 0 01-.404-.581l-.242-.438-2.188 1.21.243.439c.197.354.43.689.692.995l1.639 1.917 1.9-1.625-1.64-1.917zm9.443 6.485l1.9 1.624 2.589-3.028-1.9-1.625-2.59 3.029zM10.447 7.728c.007.009.7.827 1.07 2.208l.484 1.796.483-1.797c.37-1.381 1.064-2.198 1.07-2.205l.403-.465L12 6.174l-1.952 1.09.398.464zm9.28-.607c.317.464.518 1.003.583 1.558l.057.497 2.484-.29-.06-.497a5.988 5.988 0 00-.997-2.674 6.151 6.151 0 00-.548-.694l-.338-.368-1.843 1.69.339.369c.115.125.224.263.324.409zm-4.24-1.261a3.6 3.6 0 012.04-.203l.49.096.479-2.453-.491-.096a6.03 6.03 0 00-3.474.347h-.001l-.196.084-.457.206 1.029 2.27.58-.251zm-8.983-.207a3.565 3.565 0 012.165.273l.456.21L10.16 3.86l-.454-.208a6.059 6.059 0 00-.467-.191 6.037 6.037 0 00-3.198-.265l-.49.092.46 2.457.492-.092zM3.696 8.65a3.509 3.509 0 01.579-1.531v-.001c.102-.15.217-.295.342-.43l.34-.365-1.83-1.704-.34.366A6.008 6.008 0 001.215 8.34l-.061.496 2.482.31.06-.496z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12.678 20.095c-.343.401-1.016.4-1.355.001l-.06-.07-1.142.972.061.072a2.39 2.39 0 003.637 0l.035-.04-1.14-.976-.036.041zm1.976-2.31l1.14.974 1.94-2.268-1.14-.975-1.94 2.268zm-8.52-14.1l.277 1.474a4.086 4.086 0 012.466.311l.621-1.365a5.581 5.581 0 00-3.364-.42zm13.74 7.994l-1.34 1.567 1.14.975 1.34-1.567c.23-.27.437-.565.612-.874l-1.307-.737a4.055 4.055 0 01-.445.636zM14.721 4.01a6.213 6.213 0 00-.182.08l.62 1.365.136-.059a4.066 4.066 0 012.326-.23l.287-1.473a5.586 5.586 0 00-3.187.317zM3.665 11.016l-1.313.726c.18.324.394.631.635.914l1.315 1.536 1.14-.975-1.315-1.537a4.044 4.044 0 01-.462-.664zm17.14-2.396l1.49-.173a5.496 5.496 0 00-1.418-3.089l-1.106 1.014a3.998 3.998 0 011.034 2.248zM12 9.805h.001c.41-1.524 1.174-2.404 1.174-2.404L12 6.745l-1.176.656s.767.88 1.176 2.403v.001zM3.861 6.838a3.93 3.93 0 01.39-.49L3.152 5.326A5.519 5.519 0 001.71 8.402l1.49.188a3.988 3.988 0 01.662-1.75zm2.38 9.624l1.94 2.268 1.14-.975-1.94-2.269-1.14.976z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3H; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-loyalty-lost",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3G = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationMailOpened {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M15 7.47H9a.75.75 0 000 1.5h6a.75.75 0 000-1.5zm-3 9.607L.5 10.717v9.753c0 1.655 1.345 3 3 3h17c1.654 0 3-1.345 3-3v-9.753L12 17.077zM5.5 4.97h13v6.799l4.929-2.726L20 6.115V3.47h-3.096l-2.38-2.034a3.871 3.871 0 00-5.048 0L7.095 3.47H4v2.645L.571 9.043 5.5 11.769V4.97zm9.5 5.5H9a.75.75 0 000 1.5h6a.75.75 0 000-1.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M20 6.144V3.5h-3.096l-2.38-2.034a3.869 3.869 0 00-5.048 0L7.096 3.5H4v2.644L.5 9.134V20.5c0 1.654 1.345 3 3 3h17c1.654 0 3-1.346 3-3V9.134L20 6.144zM5.5 5h13v6.799L12 15.393l-6.5-3.595V5zM22 20.5c0 .827-.673 1.5-1.5 1.5h-17c-.827 0-1.5-.673-1.5-1.5v-8.923l10 5.53 10-5.53V20.5zM9 9h6a.75.75 0 100-1.5H9A.75.75 0 109 9zm6.75 2.25a.75.75 0 00-.75-.75H9A.75.75 0 109 12h6a.75.75 0 00.75-.75z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3G; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-mail-opened",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3F = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationMessage {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M1.5 3.5V16a3 3 0 003 3H6v2.275A1.75 1.75 0 009 22.5l3.5-3.5h7a3 3 0 003-3V3.5h-21zm15 10h-9a.75.75 0 110-1.5h9a.75.75 0 110 1.5zm0-3.5h-9a.75.75 0 010-1.5h9a.75.75 0 110 1.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M22.45 3.5v12.55a3.01 3.01 0 01-2.824 2.995l-.176.005h-7l-3.5 3.5c-.35.35-.75.5-1.2.5-.855 0-1.665-.632-1.744-1.595L6 21.3V19H4.5a3.01 3.01 0 01-2.995-2.824L1.5 16V3.5h20.95zM21 5H3v11c0 .8.576 1.423 1.352 1.493l.148.007h3.05v3.8c0 .188.14.234.21.246l.04.004c.037 0 .075-.028.112-.063L11.9 17.5h7.6c.8 0 1.423-.576 1.493-1.352L21 16V5zm-4.5 7c.4 0 .75.35.75.75a.772.772 0 01-.651.743l-.099.007h-9c-.4 0-.75-.35-.75-.75 0-.367.294-.691.651-.743L7.5 12h9zm0-3.5c.4 0 .75.35.75.75a.772.772 0 01-.651.743L16.5 10h-9c-.4 0-.75-.35-.75-.75 0-.367.294-.691.651-.743L7.5 8.5h9z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3F; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-message",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3E = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationMessageIncoming {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M19.499 3v5.867l-6.153 3.879a1.199 1.199 0 00-.108 1.929l.108.079L17.54 17.5h-6.92l-3.273 3.274c-.339.34-.756.491-1.166.491-.811 0-1.591-.597-1.671-1.514l-.007-.155V17.5H3.361a2.856 2.856 0 01-2.852-2.69l-.005-.167V3H19.5zm.002 7.15V13h3.75a.75.75 0 01.1 1.493l-.1.007H19.5v2.85l-5.498-3.6 5.498-3.6z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M19.5 3v5.357l-1.5.982V4.5H2v10.143c0 .704.54 1.285 1.227 1.35l.13.007H6v3.596c0 .134.165.237.285.117L9.998 16h4.7l2.264 1.481-.158.014-.161.005h-6.024l-3.274 3.274a1.63 1.63 0 01-1.167.491c-.81 0-1.591-.597-1.671-1.514l-.007-.155V17.5H3.357a2.857 2.857 0 01-2.852-2.69L.5 14.644V3h19zm0 7.15V13h3.75a.75.75 0 01.102 1.493l-.102.007H19.5v2.85l-5.5-3.6 5.5-3.6z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3E; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-message-incoming",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3D = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationMessageOutgoing {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M19.506 3v6.697l-.841-.551a1.195 1.195 0 00-1.227-.052 1.2 1.2 0 00-.623.925l-.007.131v1.65h-2.55c-1.075 0-1.95.875-1.95 1.95 0 1.026.797 1.87 1.805 1.945l.145.005h2.55v1.65l.008.076.012.074h-6.203l-3.274 3.274a1.63 1.63 0 01-1.167.491c-.81 0-1.591-.597-1.671-1.514l-.007-.155V17.5H3.363a2.857 2.857 0 01-2.852-2.69l-.005-.167V3h19zm-1.498 7.15l5.5 3.6-5.5 3.6V14.5h-3.75a.75.75 0 01-.102-1.493l.102-.007h3.75v-2.85z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M19.5 3v6.339L18 8.357V4.5H2v10.143c0 .704.54 1.285 1.227 1.35l.13.007H6v3.596c0 .134.165.237.285.117L9.998 16H16.5v1.5h-5.881l-3.274 3.274a1.63 1.63 0 01-1.167.491c-.81 0-1.591-.597-1.671-1.514l-.007-.155V17.5H3.357a2.857 2.857 0 01-2.852-2.69L.5 14.644V3h19zM18 10.15l5.5 3.6-5.5 3.6V14.5h-3.75a.75.75 0 01-.102-1.493L14.25 13H18v-2.85z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3D; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-message-outgoing",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3C = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationMmsIncoming {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M19.5 3v8.406l-6.32 4.088a1.5 1.5 0 00-.68 1.255c0 .215.05.422.136.611l.071.139H10.62l-3.274 3.274a1.63 1.63 0 01-1.166.491c-.812 0-1.592-.597-1.672-1.514l-.007-.156V17.5H3.358a2.857 2.857 0 01-2.852-2.69l-.005-.168V3h19zm0 10.15v2.849h3.75a.75.75 0 01.102 1.493l-.102.007H19.5v2.85l-5.5-3.6 5.5-3.6zm-4.575-4.906c-.767 0-1.355.495-1.355 1.287 0 .48.221.923.776 1.13l.146.046.476.136c.322.086.495.216.495.476 0 .266-.18.464-.538.464-.27 0-.48-.107-.576-.374l-.03-.108h-.83c.075.816.582 1.262 1.436 1.262.779 0 1.391-.464 1.391-1.293 0-.548-.327-.975-.859-1.164l-.137-.043-.476-.13c-.229-.062-.42-.167-.42-.458 0-.29.216-.451.5-.451.286 0 .455.122.528.366l.023.098h.817c-.08-.761-.532-1.244-1.367-1.244zm-5.41.093h-.767v4.133h.835v-2.333h.037l1.009 1.82h.266l1.015-1.82h.037v2.333h.829V8.337h-.768l-1.225 2.29h-.037l-1.23-2.29zm-5.012 0h-.767v4.133h.835v-2.333h.037l1.01 1.82h.265l1.015-1.82h.037v2.333h.829V8.337h-.767l-1.225 2.29h-.038l-1.23-2.29z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M19.5 3v8.357l-1.5.982V4.5H2v10.143c0 .704.54 1.285 1.227 1.35l.13.007H6v3.596c0 .07.045.131.105.157.055.023.122.017.18-.04L9.998 16H12.5v1.5h-1.881l-3.274 3.274a1.63 1.63 0 01-1.167.491c-.81 0-1.591-.597-1.671-1.514l-.007-.155V17.5H3.357a2.857 2.857 0 01-2.852-2.69L.5 14.644V3h19zm0 10.15V16h3.75a.75.75 0 01.102 1.493l-.102.007H19.5v2.85l-5.5-3.6 5.5-3.6zm-4.576-4.905c.783 0 1.23.424 1.348 1.104l.02.14h-.818c-.056-.31-.229-.465-.55-.465-.285 0-.502.161-.502.452 0 .259.152.37.347.436l.075.022.476.13c.612.161.996.613.996 1.207 0 .829-.612 1.292-1.392 1.292-.8 0-1.296-.391-1.416-1.113l-.02-.148h.83c.075.346.303.482.606.482.359 0 .539-.198.539-.464 0-.228-.133-.355-.382-.442l-.114-.034-.476-.136c-.662-.18-.922-.656-.922-1.176 0-.792.588-1.287 1.355-1.287zm-5.41.093l1.232 2.289h.037l1.225-2.29h.767v4.133h-.829v-2.332h-.037l-1.015 1.819h-.266L9.62 10.138h-.037v2.332h-.836V8.337h.768zm-5.012 0l1.231 2.289h.038l1.224-2.29h.768v4.133h-.829v-2.332h-.037l-1.016 1.819h-.265l-1.009-1.819H4.57v2.332h-.836V8.337h.768z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3C; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-mms-incoming",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3B = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationMmsOutgoing {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M19.503 3v9.697l-.842-.551a1.195 1.195 0 00-1.228-.052 1.2 1.2 0 00-.622.925l-.007.131v1.65h-2.55a1.953 1.953 0 00-1.852 2.559l.053.141h-1.833l-3.274 3.274a1.63 1.63 0 01-1.167.491c-.81 0-1.591-.597-1.671-1.514l-.007-.155V17.5H3.36a2.857 2.857 0 01-2.852-2.69l-.005-.167V3h19zm-1.499 10.15l5.5 3.6-5.5 3.6V17.5h-3.75a.75.75 0 01-.102-1.493l.102-.007h3.75v-2.85zm-3.076-4.905c-.767 0-1.355.495-1.355 1.287 0 .48.222.923.776 1.129l.146.046.477.136c.322.087.495.217.495.477-.001.266-.18.464-.54.464-.269 0-.48-.107-.575-.375l-.03-.107h-.83c.074.816.582 1.261 1.435 1.261.78 0 1.393-.463 1.393-1.293 0-.548-.327-.975-.86-1.164l-.137-.042-.476-.13c-.229-.062-.42-.167-.42-.458 0-.291.216-.452.5-.452.287 0 .455.123.528.367l.024.098h.817c-.081-.762-.532-1.244-1.368-1.244zm-5.41.093h-.767v4.133h.835v-2.333h.037l1.01 1.819h.265l1.015-1.819h.037v2.333h.829V8.338h-.768l-1.224 2.289h-.038l-1.23-2.29zm-5.012-.001h-.768v4.133h.836v-2.333h.037l1.009 1.82h.266l1.014-1.82h.037v2.333h.83V8.337h-.768l-1.224 2.29h-.038l-1.23-2.29z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M10.783 10.627h-.037l-1.232-2.29h-.767v4.134h.835v-2.333h.037l1.01 1.819h.265l1.015-1.819h.037v2.333h.829V8.338h-.768l-1.224 2.289zm-3.02 1.843V8.337h-.768l-1.224 2.29h-.037l-1.231-2.29h-.768v4.133h.835v-2.333h.037l1.009 1.82h.266l1.014-1.82h.038v2.333h.829zm7.16-.686c-.303 0-.531-.136-.605-.482h-.83c.075.816.582 1.261 1.436 1.261.78 0 1.392-.463 1.392-1.293 0-.593-.384-1.045-.996-1.206l-.476-.13c-.23-.062-.421-.167-.421-.458 0-.291.216-.452.5-.452.322 0 .495.155.552.465h.816c-.08-.762-.532-1.244-1.367-1.244-.767 0-1.355.495-1.355 1.287 0 .52.26.996.922 1.175l.476.136c.322.087.495.217.495.477 0 .266-.18.464-.538.464zM23.5 16.75l-5.5-3.6V16h-3.75a.75.75 0 100 1.5H18v2.85l5.5-3.6zM9.998 16l-3.713 3.713c-.12.12-.285.017-.285-.117V16H3.357A1.359 1.359 0 012 14.643V4.5h16v6.857l1.5.982V3H.5v11.643A2.857 2.857 0 003.357 17.5H4.5v2.096c0 1.004.822 1.67 1.678 1.67.41 0 .827-.152 1.167-.492l3.274-3.274H12V16H9.998z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3B; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-mms-outgoing",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3A = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationMobilePhoneNumber {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12.001.5a3 3 0 012.995 2.824l.005.176V6H23v6.5a4.5 4.5 0 01-4.288 4.495L18.5 17h-3.499v3.5a3 3 0 01-2.823 2.994L12 23.5H4a3 3 0 01-2.994-2.824L1 20.5v-17A3 3 0 013.825.505L4.001.5h8zm-4 18a1.25 1.25 0 100 2.5 1.25 1.25 0 000-2.5zm13.5-11H6.502v6l-2 2h14a3.003 3.003 0 002.994-2.824l.005-.176v-5zm-4.019 1.71c.911 0 1.521.706 1.521 1.476 0 .53-.173.93-.427 1.305l-.1.14-1.129 1.468H16.34l1.11-1.437-.013-.013h-.045c-.866 0-1.437-.705-1.437-1.463 0-.77.61-1.475 1.527-1.475zm-2.454.103v2.663h.455v.77h-.455v.853H14.2v-.853h-1.867v-.982l1.912-2.45h.783zm-4.46.674v1.116h1.116v.706h-1.116v1.116h-.706V11.81H8.746v-.706h1.116V9.987h.706zm3.632.687h-.038l-1.033 1.27v.032H14.2v-1.302zM17.482 10c-.41 0-.673.308-.673.686 0 .372.263.668.673.668.405 0 .68-.29.68-.668a.666.666 0 00-.68-.686zm-7.48-8h-4v1.5h4V2z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 .5a3 3 0 012.98 2.65l.015.174V6h-1.5V3.375a1.501 1.501 0 00-1.359-1.369L12 2l-2 .002V3.5H6V2.004l-2.125.001a1.5 1.5 0 00-1.369 1.358L2.5 3.5l.005 17.125a1.5 1.5 0 001.358 1.369L4 22l8.125-.005a1.5 1.5 0 001.369-1.358l.006-.137-.001-3.5h1.5v3.5a3 3 0 01-2.65 2.98l-.173.015L4 23.5a3 3 0 01-2.98-2.65l-.015-.174L1 3.5A3.002 3.002 0 013.65.52l.174-.015L12 .5zm-4 18A1.25 1.25 0 118 21a1.25 1.25 0 010-2.5zm13.5-11v5l-.005.176a3.005 3.005 0 01-2.82 2.819l-.175.005h-14l2-2v-6h15zm-4.02 1.711c-.917 0-1.526.706-1.526 1.476 0 .712.506 1.38 1.287 1.456l.15.007h.045l.013.012-1.111 1.438h1.008l1.129-1.469.1-.14c.254-.375.427-.774.427-1.304 0-.77-.61-1.476-1.521-1.476zm-2.454.103h-.782l-1.912 2.451v.981h1.867v.854h.827v-.854h.456v-.77h-.456V9.314zm-4.46.674h-.705v1.116H8.745v.706H9.86v1.116h.706V11.81h1.116v-.706h-1.116V9.988zm3.633.686v1.302h-1.072v-.031l1.033-1.271h.039zM17.48 10c.404 0 .68.308.68.687 0 .378-.276.667-.68.667a.645.645 0 01-.674-.667c0-.379.263-.687.674-.687z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3A; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-mobile-phone-number",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3z = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationNetworkSignal {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M18.75 3.58c.69 0 1.25.56 1.25 1.25V20.5h-2.5V4.83c0-.69.56-1.25 1.25-1.25zm-4.5 3.615c.69 0 1.25.56 1.25 1.25V20.5H13V8.445c0-.69.56-1.25 1.25-1.25zm-4.5 4.1c.69 0 1.25.559 1.25 1.25V20.5H8.5v-7.955c0-.691.56-1.25 1.25-1.25zm-4.5 3.585c.69 0 1.25.559 1.25 1.25v4.37H4v-4.37c0-.691.56-1.25 1.25-1.25z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M18.75 3.58c.69 0 1.25.56 1.25 1.25V20.5h-2.5V4.83c0-.69.56-1.25 1.25-1.25zm-4.5 3.615c.69 0 1.25.56 1.25 1.25V20.5H13V8.445c0-.69.56-1.25 1.25-1.25zm-4.5 4.1c.69 0 1.25.559 1.25 1.25V20.5H8.5v-7.955c0-.691.56-1.25 1.25-1.25zm-4.5 3.585c.69 0 1.25.559 1.25 1.25v4.37H4v-4.37c0-.691.56-1.25 1.25-1.25z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3z; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-network-signal",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3y = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationNewEmail {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M10.803 19.303l1.992 1.993-2.737.743.745-2.736zm10.815-10.26a1.444 1.444 0 011.12 2.355l-.1.11-8.935 8.93-2.041-2.043 8.936-8.93c.28-.281.65-.422 1.02-.422zM19 5.87v3.072L10.936 17H2.479a2.475 2.475 0 01-2.474-2.31L0 14.53V5.87l7.31 6.246a3.375 3.375 0 004.21.136l.17-.136L19 5.87zM19 3v.898l-8.284 7.077c-.636.542-1.621.576-2.3.101l-.131-.101L0 3.898V3h19z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M10.803 19.303l1.992 1.993-2.737.743.745-2.736zm10.815-10.26a1.444 1.444 0 011.12 2.355l-.1.11-8.935 8.93-2.041-2.043 8.936-8.93c.28-.281.65-.422 1.02-.422zM19 3v5.942l-1.5 1.499V7.15l-5.81 4.963a3.366 3.366 0 01-2.19.814c-.7 0-1.399-.22-1.995-.66l-.194-.154L1.5 7.152v7.377c0 .498.378.908.865.964l.114.007h9.958L10.936 17H2.479a2.476 2.476 0 01-2.474-2.31L0 14.53V2.999h19zm-1.5 1.5h-16v.679l6.785 5.795c.66.563 1.6.6 2.295.106l.136-.106L17.5 5.179v-.68z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3y; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-new-email",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3x = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationOutbox {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M9.316 15.5l.202.428A2.764 2.764 0 0012 17.5c.992 0 1.913-.547 2.396-1.407l.085-.165.204-.428H21v4a3.003 3.003 0 01-2.823 2.995L18 22.5H6a3.004 3.004 0 01-2.994-2.824L3 19.5v-4h6.314zM11.998 1l4.582 7h-3.83v5.75a.75.75 0 01-1.493.102l-.007-.102V8H7.42L12 1z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M9.314 15.5l.205.428A2.761 2.761 0 0012 17.5c.991 0 1.912-.547 2.396-1.407l.085-.165.204-.428H21v4a3.004 3.004 0 01-2.824 2.995L18 22.5H6a3.004 3.004 0 01-2.995-2.824L3 19.5v-4h6.314zM8.398 17H4.5v2.5c0 .778.596 1.42 1.356 1.493L6 21h12c.778 0 1.42-.596 1.493-1.356l.007-.144V17h-3.899A4.27 4.27 0 0112 19a4.272 4.272 0 01-3.602-2zM12 1l4.582 7H12.75v5.75a.75.75 0 01-1.5 0V8H7.418L12 1z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3x; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-outbox",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3w = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationPhoneNumber {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M16.05 13.3l-1.7 1.7c-.25.25-.7.3-1 .05-.55-.45-1.4-1.15-2.3-2.05-.9-.9-1.6-1.75-2.05-2.3a.76.76 0 01.05-1l1.7-1.7L7.4 2c-1.1.1-3.45.35-4.7 2.25C1.55 6.1 2.2 8.35 2.4 9c.85 2.35 2.65 5 5.1 7.5 2.5 2.5 5.15 4.3 7.45 5.1.35.1 1.25.4 2.25.4.8 0 1.7-.15 2.5-.65 1.9-1.2 2.15-3.55 2.25-4.7l-5.9-3.35z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M16.05 13.3l-1.7 1.7c-.25.25-.7.3-1 .05-.55-.45-1.4-1.15-2.3-2.05-.9-.9-1.6-1.75-2.05-2.3a.76.76 0 01.05-1l1.7-1.7L7.4 2c-1.1.1-3.45.35-4.7 2.25C1.55 6.1 2.2 8.35 2.4 9c.85 2.35 2.65 5 5.1 7.5 2.5 2.5 5.15 4.3 7.45 5.1.35.1 1.25.4 2.25.4.8 0 1.7-.15 2.5-.65 1.9-1.2 2.15-3.55 2.25-4.7l-5.9-3.35zm2.9 6.7c-1.25.8-3 .3-3.45.15-2.1-.7-4.55-2.4-6.9-4.75-2.3-2.3-4-4.75-4.7-6.9-.15-.5-.65-2.2.15-3.45C4.5 4.3 5.4 3.8 6.65 3.6l2.3 4.05-.95.9c-.8.8-.9 2.1-.15 3 .5.6 1.25 1.5 2.15 2.45.95.95 1.85 1.7 2.45 2.15.9.7 2.2.65 3-.15l.9-.9 4.05 2.3c-.25 1.25-.7 2.15-1.45 2.6z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3w; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-phone-number",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3v = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationRecipient {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M19.885 15.476l-.085.074-2.8 2.8-1.4-1.4c-.3-.3-.75-.3-1.05 0a.722.722 0 00-.075.965l.075.085L17 20.5l3.9-3.9c.3-.3.25-.75-.05-1.05a.723.723 0 00-.965-.074M17.75 22.5A4.756 4.756 0 0113 17.75 4.756 4.756 0 0117.75 13a4.756 4.756 0 014.75 4.75 4.756 4.756 0 01-4.75 4.75m0-11c-3.45 0-6.25 2.8-6.25 6.25S14.3 24 17.75 24 24 21.2 24 17.75s-2.8-6.25-6.25-6.25m0-1.5c.421 0 .831.043 1.233.108.003 0 .015-.008.017-.008V5.87l-7.3 6.23c-.65.55-1.4.8-2.2.8a3.315 3.315 0 01-2.021-.657L7.3 12.1 0 5.87v8.68l.005.16C.088 15.988 1.156 17 2.5 17h7.538c.378-3.922 3.691-7 7.712-7m-7.185 1.056l.135-.106L19 3.932V3H0v.923l8.25 7.027c.656.563 1.62.598 2.315.106", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M17.75 11.5c3.45 0 6.25 2.8 6.25 6.25S21.2 24 17.75 24s-6.25-2.8-6.25-6.25 2.8-6.25 6.25-6.25zm3.1 4.05a.722.722 0 00-.965-.074l-.085.074-2.8 2.8-1.4-1.4c-.3-.3-.75-.3-1.05 0a.722.722 0 00-.074.965l.074.085L17 20.5l3.9-3.9c.3-.3.25-.75-.05-1.05zM19 3v7.1c-.3-.037-.6-.075-.921-.091L17.75 10h-.25V7.15l-5.8 4.95c-.65.55-1.4.8-2.2.8a3.317 3.317 0 01-2.02-.657L7.3 12.1 1.5 7.15v7.4c0 .464.388.885.884.943l.116.007h7.85c-.112.375-.197.75-.253 1.125L10.05 17H2.5C1.156 17 .088 15.986.005 14.71L0 14.55V3h19zm-1.5 1.5h-16v.7l6.75 5.75c.656.563 1.62.598 2.315.105l.135-.105 6.8-5.75v-.7z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3v; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-recipient",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3u = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationSaveEmailsToDrafts {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M17.75 11.5a6.25 6.25 0 110 12.5 6.25 6.25 0 010-12.5zm0 1.5A4.756 4.756 0 0013 17.75a4.756 4.756 0 004.75 4.75 4.756 4.756 0 004.75-4.75A4.756 4.756 0 0017.75 13zm0 1.5a.75.75 0 01.743.648l.007.102v2.25h1.833l-2.583 3.945-2.582-3.945H17v-2.25a.75.75 0 01.75-.75zM19 5.87v4.24a7.798 7.798 0 00-1.25-.11c-3.935 0-7.192 2.947-7.684 6.75l-.028.25h-7.56a2.475 2.475 0 01-2.473-2.308L0 14.529V5.87l7.31 6.244a3.366 3.366 0 004.21.136l.17-.136L19 5.87zM19 3v.896l-8.284 7.078c-.677.579-1.754.579-2.431 0L0 3.896V3h19z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M17.75 11.5a6.25 6.25 0 110 12.5 6.25 6.25 0 010-12.5zm0 3a.75.75 0 00-.743.649L17 15.25v2.25h-1.833l2.583 3.945 2.582-3.945H18.5v-2.25a.75.75 0 00-.75-.75zM19 3v7.11a7.808 7.808 0 00-1.25-.11l-.25.013V7.152l-5.81 4.963a3.36 3.36 0 01-4.185.154l-.195-.154L1.5 7.152v7.378c0 .496.378.908.864.964l.114.007h7.856a7.71 7.71 0 00-.25 1.115l-.046.385h-7.56a2.475 2.475 0 01-2.473-2.309L0 14.53V3h19zm-1.5 1.5h-16v.679l6.784 5.795c.661.564 1.6.6 2.296.106l.135-.106L17.5 5.179V4.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3u; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-save-emails-to-drafts",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3t = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationSms {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M22.5 3.5V16a3 3 0 01-2.824 2.995L19.5 19h-7l-3.512 3.513a1.717 1.717 0 01-1.226.516c-.853 0-1.676-.63-1.756-1.598L6 21.275V19H4.5a3 3 0 01-2.995-2.824L1.5 16V3.5h21zm-5.198 4.871c-.929 0-1.642.615-1.642 1.567 0 .575.281 1.116.965 1.363l.153.048.577.165c.39.104.6.261.6.591 0 .324-.217.563-.645.563-.337 0-.596-.134-.71-.466l-.032-.119h-1.005c.09.99.704 1.538 1.747 1.538.937 0 1.68-.57 1.68-1.575 0-.68-.398-1.207-1.061-1.434l-.146-.044-.578-.157c-.278-.075-.51-.203-.51-.54 0-.338.262-.548.607-.548.352 0 .557.152.644.456l.024.107h.989c-.096-.922-.644-1.515-1.657-1.515zm-10.17 0c-.929 0-1.642.615-1.642 1.567 0 .575.281 1.116.965 1.363l.153.048.577.165c.39.104.6.261.6.591 0 .324-.217.563-.645.563-.337 0-.596-.134-.71-.466l-.032-.119H5.393c.09.99.704 1.538 1.747 1.538.938 0 1.68-.57 1.68-1.575 0-.68-.398-1.207-1.061-1.434l-.146-.044-.578-.157c-.278-.075-.51-.203-.51-.54 0-.338.263-.548.607-.548.352 0 .557.152.644.456l.024.107h.989c-.096-.922-.644-1.515-1.657-1.515zm3.556.12h-.931v5.01h1.013v-2.827h.045l1.223 2.204h.322l1.23-2.204h.045v2.827h1.013v-5.01h-.938l-1.485 2.775h-.045l-1.492-2.775z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M22.5 3.5h-21V16a3 3 0 003 3H6v2.275c0 1.055.863 1.753 1.763 1.753.43 0 .868-.159 1.224-.515L12.5 19h7a3 3 0 003-3V3.5zM21 5v11c0 .827-.673 1.5-1.5 1.5h-7.621l-3.952 3.952c-.054.054-.103.076-.164.076-.003 0-.263-.007-.263-.253V17.5h-3c-.827 0-1.5-.673-1.5-1.5V5h18zm-5.734 7.083h1.005c.09.42.367.585.742.585.428 0 .645-.239.645-.563 0-.33-.21-.487-.6-.591l-.577-.165c-.795-.218-1.118-.795-1.118-1.411 0-.952.713-1.567 1.643-1.567 1.012 0 1.56.593 1.657 1.515h-.99c-.067-.375-.277-.563-.667-.563-.345 0-.608.21-.608.548 0 .337.233.465.51.54l.578.157c.75.196 1.207.75 1.207 1.478 0 1.005-.742 1.575-1.68 1.575-1.042 0-1.657-.548-1.747-1.538zm-.765-3.592v5.01h-1.013v-2.827h-.045l-1.23 2.204h-.322l-1.223-2.204h-.044v2.827H9.611v-5.01h.93l1.493 2.775h.045l1.484-2.775h.938zm-9.105 3.592h1.005c.09.42.368.585.743.585.427 0 .645-.239.645-.563 0-.33-.21-.487-.601-.591l-.577-.165c-.795-.218-1.117-.795-1.117-1.411 0-.952.712-1.567 1.642-1.567 1.012 0 1.56.593 1.657 1.515h-.989c-.068-.375-.278-.563-.668-.563-.345 0-.607.21-.607.548 0 .337.232.465.51.54l.577.157c.75.196 1.208.75 1.208 1.478 0 1.005-.743 1.575-1.68 1.575-1.043 0-1.658-.548-1.748-1.538z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3t; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-sms",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3s = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationSpam {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M17.75 11.498a6.25 6.25 0 110 12.498 6.25 6.25 0 010-12.498zm-3.53 4.274a4.016 4.016 0 00-.518 1.975 4.054 4.054 0 004.049 4.05 4.02 4.02 0 001.752-.401l.224-.117-5.507-5.507zm3.53-2.073c-.627 0-1.221.145-1.752.4l-.223.117 5.507 5.507a4.018 4.018 0 00.519-1.976 4.054 4.054 0 00-4.05-4.048zm1.248-7.83v4.239a7.76 7.76 0 00-1.247-.11 7.749 7.749 0 00-7.683 6.75l-.028.249H2.478A2.474 2.474 0 01.005 14.69L0 14.528v-8.66l7.309 6.245a3.376 3.376 0 004.208.136l.17-.136 7.31-6.244zm0-2.87v.898l-8.283 7.076c-.636.542-1.621.576-2.3.102l-.131-.102L0 3.897v-.898h18.998z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M17.75 11.5a6.25 6.25 0 110 12.499 6.25 6.25 0 010-12.5zm-3.53 4.274a4.006 4.006 0 00-.52 1.976 4.054 4.054 0 004.05 4.05 4.02 4.02 0 001.752-.401l.224-.117-5.507-5.508zm3.53-2.073c-.628 0-1.222.144-1.752.4l-.224.117 5.508 5.509a4.034 4.034 0 00.518-1.977 4.054 4.054 0 00-4.05-4.05zM19 2.998v7.111a7.685 7.685 0 00-1.25-.11l-.125.005-.125.007v-2.86l-5.81 4.962a3.357 3.357 0 01-4.185.154l-.195-.153L1.5 7.151v7.378c0 .496.378.907.864.963l.114.006h7.856c-.11.363-.193.735-.249 1.116l-.047.385h-7.56a2.475 2.475 0 01-2.473-2.308L0 14.53V3h19zm-1.5 1.5h-16v.68l6.785 5.794c.66.565 1.6.601 2.295.106l.136-.106L17.5 5.178V4.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3s; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-spam",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3r = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationVoiceMessage {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M22.45 3v12.55a3.01 3.01 0 01-2.824 2.995l-.176.005h-7l-3.5 3.5c-.35.35-.75.5-1.2.5-.855 0-1.665-.632-1.744-1.595L6 20.8v-2.3H4.5a3.01 3.01 0 01-2.995-2.824L1.5 15.5V3h20.95zm-11.7 4c.367 0 .691.294.743.651l.007.099v6c0 .4-.35.75-.75.75a.772.772 0 01-.743-.651L10 13.75v-6c0-.4.35-.75.75-.75zm3 1c.367 0 .691.294.743.651l.007.099v4c0 .4-.35.75-.75.75a.772.772 0 01-.743-.651L13 12.75v-4c0-.4.35-.75.75-.75zm-6 1c.367 0 .691.294.743.651l.007.099v2c0 .4-.35.75-.75.75a.772.772 0 01-.743-.651L7 11.75v-2c0-.4.35-.75.75-.75zm9 0c.367 0 .691.294.743.651l.007.099v2c0 .4-.35.75-.75.75a.772.772 0 01-.743-.651L16 11.75v-2c0-.4.35-.75.75-.75z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M22.45 3v12.55a3.01 3.01 0 01-2.824 2.995l-.176.005h-7l-3.5 3.5c-.35.35-.75.5-1.2.5-.855 0-1.665-.632-1.744-1.595L6 20.8v-2.3H4.5a3.01 3.01 0 01-2.995-2.824L1.5 15.5V3h20.95zM21 4.5H3v11c0 .8.576 1.423 1.352 1.493L4.5 17h3v3.8c0 .182.207.322.394.196l.056-.046L11.9 17h7.6c.8 0 1.423-.576 1.493-1.352L21 15.5v-11zM10.75 7c.367 0 .691.294.743.651l.007.099v6c0 .4-.35.75-.75.75a.772.772 0 01-.743-.651L10 13.75v-6c0-.4.35-.75.75-.75zm3 1c.367 0 .691.294.743.651l.007.099v4c0 .4-.35.75-.75.75a.772.772 0 01-.743-.651L13 12.75v-4c0-.4.35-.75.75-.75zm-6 1c.367 0 .691.294.743.651l.007.099v2c0 .4-.35.75-.75.75a.772.772 0 01-.743-.651L7 11.75v-2c0-.4.35-.75.75-.75zm9 0c.367 0 .691.294.743.651l.007.099v2c0 .4-.35.75-.75.75a.772.772 0 01-.743-.651L16 11.75v-2c0-.4.35-.75.75-.75z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3r; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-voice-message",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3q = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class Content2FaGoogleAuth {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("g", { "fill-rule": "evenodd" }, hAsync("path", { d: "M9.501 10h1V9h-1v1zm-.5.5h2v-2h-2v2z" }), hAsync("path", { d: "M16 9v1.5h-1.5V12H13v-1.5h1.5V9H13V7.5h3V9zm0 5v1.5h-3V14h1.5v-1.5H16V14zm-3.998 7a1.25 1.25 0 110-2.5 1.25 1.25 0 010 2.5zM8 15.5V14h1.5v-1.5h3V14H11v1.5H8zm0-4h4v-4H8v4zm2-8h4V2h-4v1.5zm6-3H8a3 3 0 00-3 3v17a3 3 0 003 3h8a3 3 0 003-3v-17a3 3 0 00-3-3z" })))) : (hAsync("g", null, hAsync("path", { d: "M9.001 10.5h2v-2h-2v2zm-1 1h4v-4h-4v4zm3 2.5h1.5v-1.5h-3V14h-1.5v1.5h3V14zm3.5 0h-1.5v1.5h3v-3h-1.5V14zm-1.5-2h1.5v-1.5h-1.5V12zm0-4.5V9h1.5v1.5h1.5v-3h-3zm-3.5 2.5h1V9h-1v1zm2.5 8.5a1.25 1.25 0 10-.002 2.498 1.25 1.25 0 00.002-2.498zm5.5 2c0 .827-.674 1.5-1.5 1.5h-8c-.827 0-1.5-.673-1.5-1.5v-17c0-.827.673-1.5 1.5-1.5h2v1.5h4V2h2c.826 0 1.5.673 1.5 1.5v17zm-1.5-20h-8a3 3 0 00-3 3v17a3 3 0 003 3h8a3 3 0 003-3v-17a3 3 0 00-3-3z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3q; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-2fa-google-auth",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3p = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentAchievement {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M19 3V1.5H5V3H1.5v5.5a5 5 0 004.145 4.92 7 7 0 004.855 3.915A2.75 2.75 0 017.75 20H7v2.5h10V20h-.75a2.75 2.75 0 01-2.75-2.665 7 7 0 004.85-3.915A5 5 0 0022.5 8.5V3H19zM3 8.5v-4h2v6c.003.406.04.81.11 1.21A3.5 3.5 0 013 8.5zm11.08 3.405L12 10.615l-2.08 1.29.58-2.38-1.87-1.58 2.44-.18L12 5.5l.925 2.265 2.44.18-1.865 1.58.58 2.38zM21 8.5a3.5 3.5 0 01-2.11 3.21c.07-.4.107-.804.11-1.21v-6h2v4z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M19 1.5V3h3.5v5.5c0 2.45-1.8 4.5-4.15 4.9-.9 1.95-2.7 3.45-4.85 3.9a2.756 2.756 0 002.578 2.645l.172.005H17v2.5H7v-2.5h.75c1.5 0 2.7-1.15 2.75-2.65-2.15-.45-3.95-1.95-4.85-3.9-2.277-.388-4.037-2.323-4.145-4.672L1.5 8.5V3H5V1.5h14zM17.5 3h-11v7.5c0 3.05 2.45 5.5 5.5 5.5a5.483 5.483 0 005.496-5.278l.004-.222V3zM12 5.5l.9 2.25 2.45.2-1.85 1.6.6 2.35-2.1-1.3-2.1 1.3.6-2.35-1.85-1.6 2.45-.2.9-2.25zm-7-1v6l.009.3c.016.3.053.6.091.9C3.85 11.15 3 9.95 3 8.5v-4h2zm16 0v4l-.006.216c-.08 1.352-.907 2.462-2.094 2.984.05-.4.1-.8.1-1.2v-6h2z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3p; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-achievement",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3o = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentAndroid {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M5.805 8.22l.002 8.996a1.476 1.476 0 001.479 1.478l1.007.001.001 3.072a1.386 1.386 0 102.772 0v-3.072h1.871l.001 3.071a1.387 1.387 0 002.773 0l-.001-3.07 1.01-.002a1.48 1.48 0 001.48-1.48l-.002-8.997-12.393.002zm9.039-2.746h-.001a.523.523 0 01-.523-.524.528.528 0 01.524-.525.524.524 0 010 1.049zm-5.687.001A.523.523 0 119.16 4.43a.523.523 0 01-.003 1.046zm5.903-2.73l.967-1.768a.192.192 0 10-.337-.185l-.977 1.786a6.655 6.655 0 00-2.717-.57c-.971 0-1.891.203-2.71.566L8.308.794a.192.192 0 10-.337.183l.968 1.765c-1.902.982-3.187 2.85-3.186 4.994h12.488c0-2.145-1.282-4.009-3.181-4.992zm6.446 6.596a1.386 1.386 0 10-2.772.001l.001 5.805a1.385 1.385 0 102.772 0l-.001-5.806zM3.88 7.957a1.385 1.385 0 00-1.386 1.386l.001 5.806a1.384 1.384 0 001.385 1.386h.001c.765 0 1.386-.619 1.386-1.384V9.343c0-.765-.622-1.387-1.387-1.386z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M5.805 8.22l.002 8.996a1.476 1.476 0 001.479 1.478l1.007.001.001 3.072a1.386 1.386 0 102.772 0v-3.072h1.871l.001 3.071a1.387 1.387 0 002.773 0l-.001-3.07 1.01-.002a1.48 1.48 0 001.48-1.48l-.002-8.997-12.393.002zm9.039-2.746h-.001a.523.523 0 01-.523-.524.528.528 0 01.524-.525.524.524 0 010 1.049zm-5.687.001A.523.523 0 119.16 4.43a.523.523 0 01-.003 1.046zm5.903-2.73l.967-1.768a.192.192 0 10-.337-.185l-.977 1.786a6.655 6.655 0 00-2.717-.57c-.971 0-1.891.203-2.71.566L8.308.794a.192.192 0 10-.337.183l.968 1.765c-1.902.982-3.187 2.85-3.186 4.994h12.488c0-2.145-1.282-4.009-3.181-4.992zm6.446 6.596a1.386 1.386 0 10-2.772.001l.001 5.805a1.385 1.385 0 102.772 0l-.001-5.806zM3.88 7.957a1.385 1.385 0 00-1.386 1.386l.001 5.806a1.384 1.384 0 001.385 1.386h.001c.765 0 1.386-.619 1.386-1.384V9.343c0-.765-.622-1.387-1.387-1.386z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3o; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-android",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3n = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentApple {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M19.408 16.361c-.855-.619-1.996-1.829-1.996-3.879a4.65 4.65 0 011.391-3.374c.504-.502.952-.731.952-.731s-.566-1.024-1.91-1.664c-.61-.291-1.382-.503-2.333-.503-1.769 0-3.129 1.006-3.86 1.006-.854 0-2.128-.946-3.769-.946-.158 0-.316.009-.474.027a4.64 4.64 0 00-1.854.629 5.198 5.198 0 00-.84.624c-.665.606-1.223 1.423-1.587 2.445-.292.818-.46 1.767-.46 2.844 0 4.379 3.18 9.828 5.696 9.828.88 0 2.228-.885 3.587-.885.5 0 .951.12 1.386.27.58.2 1.132.453 1.735.546.15.024.304.037.463.037 2.756 0 4.796-5.744 4.796-5.744s-.41-.158-.923-.53M11.53 5.988l.016.002.041.003.051.004.05.001.068.001h.002c.061 0 .131-.003.206-.008l.058-.005c.078-.007.16-.018.25-.033l.02-.002a3.364 3.364 0 00.375-.09 3.855 3.855 0 00.342-.118 3.799 3.799 0 00.447-.221 4.04 4.04 0 00.373-.237l.008-.006c.126-.092.253-.199.38-.315l.095-.089a5.02 5.02 0 001.157-1.669 4.735 4.735 0 00.366-1.558c.024-.4-.017-.648-.017-.648s-.626.003-1.428.34a4.79 4.79 0 00-1.975 1.546c-.712.938-.922 1.8-.969 2.375-.036.447.025.72.025.72s.023.004.06.007", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M19.408 16.361c-.855-.619-1.996-1.829-1.996-3.879a4.65 4.65 0 011.391-3.374c.504-.502.952-.731.952-.731s-.566-1.024-1.91-1.664c-.61-.291-1.382-.503-2.333-.503-1.769 0-3.129 1.006-3.86 1.006-.854 0-2.128-.946-3.769-.946-.158 0-.316.009-.474.027a4.64 4.64 0 00-1.854.629 5.198 5.198 0 00-.84.624c-.665.606-1.223 1.423-1.587 2.445-.292.818-.46 1.767-.46 2.844 0 4.379 3.18 9.828 5.696 9.828.88 0 2.228-.885 3.587-.885.5 0 .951.12 1.386.27.58.2 1.132.453 1.735.546.15.024.304.037.463.037 2.756 0 4.796-5.744 4.796-5.744s-.41-.158-.923-.53M11.53 5.988l.016.002.041.003.051.004.05.001.068.001h.002c.061 0 .131-.003.206-.008l.058-.005c.078-.007.16-.018.25-.033l.02-.002a3.364 3.364 0 00.375-.09 3.855 3.855 0 00.342-.118 3.799 3.799 0 00.447-.221 4.04 4.04 0 00.373-.237l.008-.006c.126-.092.253-.199.38-.315l.095-.089a5.02 5.02 0 001.157-1.669 4.735 4.735 0 00.366-1.558c.024-.4-.017-.648-.017-.648s-.626.003-1.428.34a4.79 4.79 0 00-1.975 1.546c-.712.938-.922 1.8-.969 2.375-.036.447.025.72.025.72s.023.004.06.007", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3n; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-apple",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3m = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentApplications {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M9 13a2 2 0 012 2v5a2 2 0 01-2 2H4a2 2 0 01-2-2v-5a2 2 0 012-2h5zm11 0a2 2 0 012 2v5a2 2 0 01-2 2h-5a2 2 0 01-2-2v-5a2 2 0 012-2h5zM9 2a2 2 0 012 2v5a2 2 0 01-2 2H4a2 2 0 01-2-2V4a2 2 0 012-2h5zm11 0a2 2 0 012 2v5a2 2 0 01-2 2h-5a2 2 0 01-2-2V4a2 2 0 012-2h5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M8.5 13a2.473 2.473 0 012.495 2.333L11 15.5v4a2.473 2.473 0 01-2.333 2.495L8.5 22h-4a2.473 2.473 0 01-2.495-2.333L2 19.5v-4a2.473 2.473 0 012.333-2.495L4.5 13h4zm11 0a2.473 2.473 0 012.495 2.333L22 15.5v4a2.473 2.473 0 01-2.333 2.495L19.5 22h-4a2.473 2.473 0 01-2.495-2.333L13 19.5v-4a2.473 2.473 0 012.333-2.495L15.5 13h4zm-11 1.5h-4c-.51 0-.935.388-.993.884L3.5 15.5v4c0 .51.388.935.884.993l.116.007h4c.51 0 .935-.388.993-.884L9.5 19.5v-4c0-.51-.388-.935-.884-.993L8.5 14.5zm11 0h-4c-.51 0-.935.388-.993.884l-.007.116v4c0 .51.388.935.884.993l.116.007h4c.51 0 .935-.388.993-.884l.007-.116v-4c0-.51-.388-.935-.884-.993L19.5 14.5zM8.5 2a2.473 2.473 0 012.495 2.333L11 4.5v4a2.473 2.473 0 01-2.333 2.495L8.5 11h-4a2.473 2.473 0 01-2.495-2.333L2 8.5v-4a2.473 2.473 0 012.333-2.495L4.5 2h4zm11 0a2.473 2.473 0 012.495 2.333L22 4.5v4a2.473 2.473 0 01-2.333 2.495L19.5 11h-4a2.473 2.473 0 01-2.495-2.333L13 8.5v-4a2.473 2.473 0 012.333-2.495L15.5 2h4zm-11 1.5h-4c-.51 0-.935.388-.993.884L3.5 4.5v4c0 .51.388.935.884.993L4.5 9.5h4c.51 0 .935-.388.993-.884L9.5 8.5v-4c0-.51-.388-.935-.884-.993L8.5 3.5zm11 0h-4c-.51 0-.935.388-.993.884L14.5 4.5v4c0 .51.388.935.884.993l.116.007h4c.51 0 .935-.388.993-.884L20.5 8.5v-4c0-.51-.388-.935-.884-.993L19.5 3.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3m; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-applications",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3l = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentAvailableKeychain {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12.883 12.822a.749.749 0 00-1.06 0l-3.218 3.217-1.341-1.34a.749.749 0 10-1.06 1.06l2.4 2.401 4.279-4.279a.749.749 0 000-1.06zM8.436 5.995a.96.96 0 101.92-.002.96.96 0 00-1.92.002zm7.667.183V19.89a2.875 2.875 0 01-2.875 2.874H5.562a2.875 2.875 0 01-2.875-2.875V6.18l6.708-4.976 6.708 4.975zm5.848 12.544l-4.38 1.671c.02-.166.031-.333.031-.504V5.423l-.606-.45-4.458-3.306 6.078 1.704 4.698 12.302a2.362 2.362 0 01-1.364 3.048z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M7.264 14.698a.75.75 0 10-1.061 1.061l2.4 2.402 4.28-4.279a.75.75 0 00-1.06-1.06l-3.22 3.216-1.34-1.34zm1.173-8.704a.959.959 0 101.917 0 .959.959 0 00-1.917 0zm6.166 13.896c0 .757-.618 1.374-1.375 1.374H5.562a1.376 1.376 0 01-1.375-1.375V6.933L9.393 3.07l5.208 3.863V19.89zM2.687 6.177V19.89a2.875 2.875 0 002.875 2.875h7.666a2.875 2.875 0 002.875-2.875V6.18l-6.71-4.976-6.707 4.975zm20.627 9.495l-4.7-12.301-6.078-1.704 3.377 2.505 1.57.44 4.428 11.596a.863.863 0 01-.497 1.113l-3.813 1.455v1.113c0 .171-.013.34-.032.505l4.38-1.672a2.36 2.36 0 001.363-3.049z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3l; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-available-keychain",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3k = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentBank {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M13.25 4.75a1.25 1.25 0 10-2.5 0 1.25 1.25 0 002.5 0zM23.5 4.5v4H.5v-4L12 .5l11.5 4zm0 15.5v2H.5v-2a3 3 0 012-2.826V10h3v7h2v-7H11v7h2v-7h3.5v7h2v-7h3v7.174c1.165.412 2 1.52 2 2.826z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 3.5a1.25 1.25 0 100 2.498A1.25 1.25 0 0012 3.5zM2 7V5.566l10-3.478 10 3.478V7H2zm15 10h3V8.5h-3V17zm-6.5 0h3V8.5h-3V17zM4 17h3V8.5H4V17zm18 3v.5H2V20c0-.827.674-1.5 1.5-1.5h17c.828 0 1.5.673 1.5 1.5zm1.5-11.5v-4L12 .5.5 4.5v4h2v8.674A3 3 0 00.5 20v2h23v-2a3 3 0 00-2-2.826V8.5h2z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3k; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-bank",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3j = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentBiometric {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12.1 9.95c1.1 0 2.25.4 3.3 1.15.28.2.528.432.744.67l.156.18c.311.356.622.711 1.144 1.067l.206.133c.85.6 1.95 1 3.25 1.35.45.15.65.55.55.95-.1.4-.5.65-.9.55-1.5-.4-2.7-.9-3.7-1.55a8.522 8.522 0 01-1.127-.925L15.2 13l-.282-.294c-.09-.093-.18-.18-.273-.255l-.145-.101c-.75-.55-1.6-.85-2.4-.85-.85 0-1.65.3-2.3.85-1.55 1.3-1.75 3.5-.5 5.25.55.75 1.5 1.7 2.45 2.45.7.55 1.5 1.05 2.35 1.5.35.2.5.65.3 1s-.65.5-1 .3c-.95-.45-1.8-1-2.6-1.65-1.1-.8-2.1-1.85-2.75-2.75C6.3 16 6.6 13 8.8 11.15c.95-.75 2.1-1.2 3.3-1.2zm0-2.95c1.45 0 2.9.4 4.25 1.15a7.53 7.53 0 011.527 1.177l.838.835.243.226c.536.476 1.164.86 2.392 1.112.4.1.65.5.65.85-.1.4-.5.7-.9.6-1.76-.368-2.648-1.004-3.351-1.689l-.229-.23-.22-.231c-.5-.5-.95-.95-1.7-1.4-1.1-.6-2.35-.95-3.5-.95-1.55 0-3.05.55-4.25 1.55-2.683 2.293-3.13 6.06-1.153 9.075l.153.225c.394.613.94 1.225 1.574 1.837l.276.263c.3.25.35.75.05 1.05-.3.3-.75.35-1.05.05-.8-.75-1.5-1.55-2.05-2.3C3 16.55 3.5 11.75 6.9 8.9 8.35 7.7 10.2 7 12.1 7zm-1.35 6.5c.95-.85 2.3-.65 3.25.45.45.55.8.95 1.4 1.4 1.35 1 2.8 1.55 4.35 2 .4.15.65.55.55.95-.15.4-.55.6-.95.5l-.94-.295-.432-.146A12.556 12.556 0 0114.6 16.6l-.506-.438c-.113-.1-.228-.205-.352-.324l-.192-.188-.403-.47-.247-.296-.1-.134c-.25-.3-.75-.4-1.1-.1-.3.3-.35.75-.1 1.05.525.656 1.05 1.236 1.709 1.773l.291.227c.93.75 1.95 1.284 2.768 1.645l.391.167.35.138.541.2c.35.15.6.55.45.95-.15.35-.55.6-.95.45l-.234-.08-.29-.107-.338-.131-.185-.076-.398-.17-.43-.198A14.686 14.686 0 0112.65 18.9c-.85-.65-1.65-1.5-2.15-2.15-.85-1.15-.75-2.4.25-3.25zM12.1 4c3.35 0 6.55 1.5 8.85 4.15.25.3.2.8-.1 1.05-.3.25-.8.2-1.05-.1-2-2.3-4.75-3.6-7.65-3.6-2.138 0-4.23.767-5.934 2.087L5.95 7.8c-.6.45-1.1 1-1.55 1.6-.23.275-.668.382-.971.167L3.35 9.5c-.35-.25-.4-.7-.15-1.05.5-.65 1.1-1.3 1.75-1.85C6.95 4.9 9.5 4 12.1 4zm0-3c2.3 0 4.55.55 6.65 1.65.35.2.5.65.3 1-.183.32-.577.474-.91.343l-.09-.043C16.2 3 14.2 2.5 12.15 2.5 10.05 2.5 8 3 6.2 4c-.4.15-.85.05-1.05-.35-.2-.35-.05-.8.3-1C7.5 1.55 9.8 1 12.1 1z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12.1 9.95c1.1 0 2.25.4 3.3 1.15.28.2.528.432.744.67l.156.18c.311.356.622.711 1.144 1.067l.206.133c.85.6 1.95 1 3.25 1.35.45.15.65.55.55.95-.1.4-.5.65-.9.55-1.5-.4-2.7-.9-3.7-1.55a8.522 8.522 0 01-1.127-.925L15.2 13l-.282-.294c-.09-.093-.18-.18-.273-.255l-.145-.101c-.75-.55-1.6-.85-2.4-.85-.85 0-1.65.3-2.3.85-1.55 1.3-1.75 3.5-.5 5.25.55.75 1.5 1.7 2.45 2.45.7.55 1.5 1.05 2.35 1.5.35.2.5.65.3 1s-.65.5-1 .3c-.95-.45-1.8-1-2.6-1.65-1.1-.8-2.1-1.85-2.75-2.75C6.3 16 6.6 13 8.8 11.15c.95-.75 2.1-1.2 3.3-1.2zm0-2.95c1.45 0 2.9.4 4.25 1.15a7.53 7.53 0 011.527 1.177l.838.835.243.226c.536.476 1.164.86 2.392 1.112.4.1.65.5.65.85-.1.4-.5.7-.9.6-1.76-.368-2.648-1.004-3.351-1.689l-.229-.23-.22-.231c-.5-.5-.95-.95-1.7-1.4-1.1-.6-2.35-.95-3.5-.95-1.55 0-3.05.55-4.25 1.55-2.683 2.293-3.13 6.06-1.153 9.075l.153.225c.394.613.94 1.225 1.574 1.837l.276.263c.3.25.35.75.05 1.05-.3.3-.75.35-1.05.05-.8-.75-1.5-1.55-2.05-2.3C3 16.55 3.5 11.75 6.9 8.9 8.35 7.7 10.2 7 12.1 7zm-1.35 6.5c.95-.85 2.3-.65 3.25.45.45.55.8.95 1.4 1.4 1.35 1 2.8 1.55 4.35 2 .4.15.65.55.55.95-.15.4-.55.6-.95.5l-.94-.295-.432-.146A12.556 12.556 0 0114.6 16.6l-.506-.438c-.113-.1-.228-.205-.352-.324l-.192-.188-.403-.47-.247-.296-.1-.134c-.25-.3-.75-.4-1.1-.1-.3.3-.35.75-.1 1.05.525.656 1.05 1.236 1.709 1.773l.291.227c.93.75 1.95 1.284 2.768 1.645l.391.167.35.138.541.2c.35.15.6.55.45.95-.15.35-.55.6-.95.45l-.234-.08-.29-.107-.338-.131-.185-.076-.398-.17-.43-.198A14.686 14.686 0 0112.65 18.9c-.85-.65-1.65-1.5-2.15-2.15-.85-1.15-.75-2.4.25-3.25zM12.1 4c3.35 0 6.55 1.5 8.85 4.15.25.3.2.8-.1 1.05-.3.25-.8.2-1.05-.1-2-2.3-4.75-3.6-7.65-3.6-2.138 0-4.23.767-5.934 2.087L5.95 7.8c-.6.45-1.1 1-1.55 1.6-.23.275-.668.382-.971.167L3.35 9.5c-.35-.25-.4-.7-.15-1.05.5-.65 1.1-1.3 1.75-1.85C6.95 4.9 9.5 4 12.1 4zm0-3c2.3 0 4.55.55 6.65 1.65.35.2.5.65.3 1-.183.32-.577.474-.91.343l-.09-.043C16.2 3 14.2 2.5 12.15 2.5 10.05 2.5 8 3 6.2 4c-.4.15-.85.05-1.05-.35-.2-.35-.05-.8.3-1C7.5 1.55 9.8 1 12.1 1z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3j; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-biometric",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3i = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentBirthday {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12.978 4.394c.45-.45.534-1.149.204-1.694L12 .75 10.818 2.7a1.383 1.383 0 002.16 1.694m5.25 0c.45-.45.534-1.149.204-1.694L17.25.75 16.068 2.7a1.383 1.383 0 002.16 1.694m-10.501 0c.45-.45.534-1.149.205-1.693L6.75.75 5.569 2.7a1.382 1.382 0 002.159 1.694m10.798 13.522a5.552 5.552 0 01-3.262-1.044A5.555 5.555 0 0112 17.916a5.552 5.552 0 01-3.262-1.044 5.555 5.555 0 01-3.263 1.044A5.567 5.567 0 012 16.704V22.5h20v-5.794a5.575 5.575 0 01-3.475 1.21m-13.049-1.5a3.938 3.938 0 002.715-1.067l.547-.515.548.515a3.938 3.938 0 002.715 1.067 3.94 3.94 0 002.715-1.067l.547-.515.548.515a3.938 3.938 0 002.715 1.067c1.481 0 2.824-.819 3.474-2.091V12.5a3 3 0 00-3-3h-1V6h-1.5v3.5h-3.75V6h-1.5v3.5H7.5V6H6v3.5H5a3 3 0 00-3 3v1.823c.65 1.273 1.993 2.093 3.476 2.093", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M18.228 4.394c.45-.45.535-1.15.204-1.694L17.251.75 16.068 2.7a1.383 1.383 0 002.16 1.694zm-12.455 0a1.38 1.38 0 002.159-1.693L6.751.75 5.568 2.7a1.383 1.383 0 00.205 1.694zm7.205 0c.45-.45.535-1.15.204-1.694L12.001.75 10.818 2.7a1.383 1.383 0 002.16 1.694zm7.523 11.264a3.702 3.702 0 01-4.843-.308l-.525-.515-.525.515A3.706 3.706 0 0112 16.417c-.98 0-1.906-.379-2.607-1.067l-.526-.516-.525.516a3.702 3.702 0 01-4.843.308V12.5c0-.827.674-1.5 1.5-1.5h14c.827 0 1.5.673 1.5 1.5v3.158h.002zm0 5.342h-17v-3.594a5.192 5.192 0 005.368-.533 5.185 5.185 0 003.132 1.044 5.192 5.192 0 003.133-1.044 5.187 5.187 0 005.367.533V21zm-1.5-11.5h-1V6h-1.5v3.5h-3.75V6h-1.5v3.5h-3.75V6h-1.5v3.5h-1a3 3 0 00-3 3v10h20v-10a3 3 0 00-3-3z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3i; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-birthday",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3h = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentBookmark {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M19.5 3.5v20L12 18.24 4.5 23.5v-20a3 3 0 013-3h9a3 3 0 013 3z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M16.5.5h-9c-1.655 0-3 1.345-3 3v20l7.5-5.26 7.5 5.26v-20c0-1.655-1.345-3-3-3zM18 20.615l-6-4.21-6 4.21V3.5C6 2.675 6.675 2 7.5 2h9c.825 0 1.5.675 1.5 1.5v17.115z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3h; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-bookmark",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3g = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentCalendar {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M17.5 3.5v-2H16v2H8v-2H6.5v2H2V19a3 3 0 003 3h14a3 3 0 003-3V3.5h-4.5zm-10 14a1 1 0 110-2 1 1 0 010 2zm0-4.5a1 1 0 110-2 1 1 0 010 2zm4.5 4.5a1 1 0 110-2 1 1 0 010 2zm0-4.5a1 1 0 110-2 1 1 0 010 2zm4.5 4.5a1 1 0 110-2 1 1 0 010 2zm0-4.5a1 1 0 110-2 1 1 0 010 2z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M8 1.5v2h8v-2h1.5v2H22V19a3.01 3.01 0 01-2.824 2.995L19 22H5a3.01 3.01 0 01-2.995-2.824L2 19V3.5h4.5v-2H8zM20.5 8h-17v11c0 .8.576 1.423 1.352 1.493L5 20.5h14c.8 0 1.423-.576 1.493-1.352L20.5 19V8zm-13 7.5a1 1 0 110 2 1 1 0 010-2zm4.5 0a1 1 0 110 2 1 1 0 010-2zm4.5 0a1 1 0 110 2 1 1 0 010-2zm-9-4.5a1 1 0 110 2 1 1 0 010-2zm4.5 0a1 1 0 110 2 1 1 0 010-2zm4.5 0a1 1 0 110 2 1 1 0 010-2z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3g; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-calendar",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3f = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentClipboard {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M6.545 3.5c-.018.11-.031.221-.038.333L6.5 4v3.5h11V4a3.384 3.384 0 00-.022-.334l-.023-.166H21v17a3 3 0 01-2.824 2.995L18 23.5H6a3 3 0 01-2.995-2.824L3 20.5v-17h3.545zM16 16.5H8a.75.75 0 00-.102 1.493L8 18h8a.75.75 0 00.102-1.493L16 16.5zm0-3.5H8a.75.75 0 00-.102 1.493L8 14.5h8a.75.75 0 00.102-1.493L16 13zm0-3.5H8a.75.75 0 00-.102 1.493L8 11h8a.75.75 0 00.102-1.493L16 9.5zm-4-9a1.5 1.5 0 011.493 1.356L13.5 2v.5h1a1.5 1.5 0 011.493 1.356L16 4v2H8V4a1.5 1.5 0 011.356-1.493L9.5 2.5h1V2A1.5 1.5 0 0112 .5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M6.55 3.453c-.037.11-.047.247-.05.37V4.92h-2v15.647c0 .783.576 1.392 1.352 1.46l.148.007h12c.8 0 1.423-.563 1.493-1.322l.007-.145V4.92h-2v-.977c0-.11 0-.248-.021-.372l-.029-.117H21v17.113c0 1.556-1.255 2.84-2.824 2.929L18 23.5H6c-1.591 0-2.903-1.228-2.995-2.762L3 20.566V3.453h3.55zM16 16.166c.4 0 .75.342.75.733 0 .359-.294.676-.651.726l-.099.007H8c-.4 0-.75-.342-.75-.733 0-.359.294-.676.651-.726L8 16.166h8zm0-3.423c.4 0 .75.342.75.733 0 .359-.294.676-.651.727L16 14.21H8c-.4 0-.75-.343-.75-.734 0-.358.294-.676.651-.726L8 12.743h8zm0-3.423c.4 0 .75.342.75.734 0 .358-.294.676-.651.726l-.099.007H8c-.4 0-.75-.342-.75-.733 0-.359.294-.677.651-.727L8 9.32h8zm-5.5-7.334c0-.88.85-1.614 1.8-1.467a1.53 1.53 0 011.193 1.37l.007.146v.44h1c.8 0 1.423.563 1.493 1.322l.007.145v1.955H8V3.942c0-.783.576-1.392 1.352-1.46l.148-.007h1v-.49z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3f; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-clipboard",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3e = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentClock {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 1C5.925 1 1 5.925 1 12s4.925 11 11 11 11-4.925 11-11A11 11 0 0012 1zm5.47 14a.75.75 0 01-.66.39.785.785 0 01-.36-.09l-5.2-2.855v-7.71a.75.75 0 111.5 0v6.82l4.42 2.415a.75.75 0 01.3 1.03z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 1c6.1 0 11 4.9 11 11s-4.9 11-11 11S1 18.1 1 12 5.95 1 12 1zm0 1.5c-5.25 0-9.5 4.25-9.5 9.5s4.25 9.5 9.5 9.5 9.5-4.25 9.5-9.5-4.25-9.5-9.5-9.5zM12 4c.367 0 .691.252.743.64l.007.11v6.8l4.4 2.4c.4.2.5.7.3 1.05-.15.25-.4.4-.65.4a.814.814 0 01-.267-.063l-.083-.037-5.2-2.85v-7.7c0-.4.35-.75.75-.75z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3e; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-clock",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3d = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentCloudSecurity {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 9.326a3.623 3.623 0 013.62 3.62V14H17v5.5a1.5 1.5 0 01-1.5 1.5h-7A1.5 1.5 0 017 19.5V14h1.38v-1.055A3.623 3.623 0 0112 9.326zm1.512-7.152a7.595 7.595 0 017.148 4.982 5.759 5.759 0 013.09 5.094 5.754 5.754 0 01-5.256 5.725v-5.342h-1.44A5.072 5.072 0 0012 7.875a5.072 5.072 0 00-5.054 4.758h-1.44V18A5.257 5.257 0 01.25 12.75c0-1.9 1.032-3.643 2.668-4.568a4.717 4.717 0 014.704-4.438c.369 0 .738.045 1.1.133a7.592 7.592 0 014.79-1.703zM12 10.826c-1.168 0-2.12.95-2.12 2.12V14h4.24v-1.055A2.122 2.122 0 0012 10.826z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 9.325a3.624 3.624 0 013.62 3.62V14H17v5.5a1.5 1.5 0 01-1.5 1.5h-7A1.5 1.5 0 017 19.5V14h1.38v-1.055A3.624 3.624 0 0112 9.325zm1.512-7.15a7.595 7.595 0 017.148 4.981 5.759 5.759 0 013.09 5.094c0 3.004-2.317 5.472-5.256 5.724v-1.506a4.255 4.255 0 003.756-4.218 4.257 4.257 0 00-2.507-3.872l-.304-.138-.101-.317a6.1 6.1 0 00-5.826-4.249 6.101 6.101 0 00-4.105 1.591l-.328.298-.42-.143a3.188 3.188 0 00-1.037-.176 3.216 3.216 0 00-3.213 3.213l.033.661-.468.21A3.755 3.755 0 001.75 12.75a3.754 3.754 0 003.55 3.745l.206.005V18A5.258 5.258 0 01.25 12.75c0-1.9 1.032-3.643 2.667-4.568a4.718 4.718 0 014.705-4.438c.369 0 .738.045 1.1.133a7.592 7.592 0 014.79-1.703zM12 10.824a2.122 2.122 0 00-2.12 2.12V14h4.24v-1.055c0-1.169-.951-2.12-2.12-2.12z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3d; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-cloud-security",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3c = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentCodeScanner {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M2 21.5h9v-9H2v9zM3.5 14h6v6h-6v-6zM5 18.5h3v-3H5v3zM2 11h9V2H2v9zm1.5-7.5h6v6h-6v-6zM5 8h3V5H5v3zm12 11.25v2.25h4.5V17h-2.25v2.25H17zM12.5 2v9h9V2h-9zM20 9.5h-6v-6h6v6zM18.5 5h-3v3h3V5zM17 12.5h-2.25v2.25H12.5V17h2.25v2.25H17V17h2.25v-2.25H17V12.5zm-4.5 9h2.25v-2.25H12.5v2.25zm6.75-6.75h2.25V12.5h-2.25v2.25z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M2 21.5h9v-9H2v9zM3.5 14h6v6h-6v-6zM5 18.5h3v-3H5v3zM2 11h9V2H2v9zm1.5-7.5h6v6h-6v-6zM5 8h3V5H5v3zm12 11.25v2.25h4.5V17h-2.25v2.25H17zM12.5 2v9h9V2h-9zM20 9.5h-6v-6h6v6zM18.5 5h-3v3h3V5zM17 12.5h-2.25v2.25H12.5V17h2.25v2.25H17V17h2.25v-2.25H17V12.5zm-4.5 9h2.25v-2.25H12.5v2.25zm6.75-6.75h2.25V12.5h-2.25v2.25z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3c; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-code-scanner",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3b = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentColorSelection {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M20.5 19c0 .827-.673 1.5-1.5 1.5h-8.394l11.564-6.677-3.31-5.733-.866 1.5 2.128 3.684-8.981 5.185 7.004-12.131L12.5 3.069v1.732l3.596 2.076L11 15.703V2H2v17c0 1.654 1.345 3 3 3h14c1.654 0 3-1.346 3-3v-3.347l-1.5.867V19zm-12.94-.44a1.5 1.5 0 11-2.121-2.12 1.5 1.5 0 012.121 2.12z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M20.5 19c0 .827-.673 1.5-1.5 1.5h-8.394l11.564-6.677-3.31-5.733-.866 1.5 2.128 3.684-8.981 5.185 7.004-12.131L12.5 3.069v1.732l3.596 2.076L11 15.703V2H2v17c0 1.654 1.345 3 3 3h14c1.654 0 3-1.346 3-3v-3.347l-1.5.867V19zm-12.94-.44a1.5 1.5 0 11-2.121-2.12 1.5 1.5 0 012.121 2.12z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3b; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-color-selection",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3a = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentCountry {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M5 23a.75.75 0 11-1.5 0V3.325A1.745 1.745 0 014.25 0 1.745 1.745 0 015 3.325zM6.502 3.433c3.416-.71 5.513.352 7.401 1.313 3.397 1.728 4.94 1.922 9.597.042v11.423c0 1.46-.816 3.741-4.75 3.909-2.07.088-3.628-.57-5.527-1.537l-.367-.186c-1.736-.872-3.48-1.611-6.355-.927z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M13.903 4.746C11.753 3.652 9.332 2.427 5 3.836v-.511A1.745 1.745 0 004.25 0a1.745 1.745 0 00-.75 3.325V23A.75.75 0 105 23v-5.076c4.037-1.459 6.076-.433 8.223.66 1.899.965 3.457 1.624 5.527 1.535 3.934-.167 4.75-2.448 4.75-3.908V4.788c-4.657 1.88-6.2 1.686-9.597-.042zM22 16.211c0 2.199-2.359 2.378-3.393 2.404-1.915.05-3.278-.644-4.704-1.369-1.46-.742-3.043-1.548-5.263-1.548-1.052 0-2.247.18-3.64.634V5.418c4.042-1.462 6.075-.427 8.223.665 2.235 1.136 4.54 2.31 8.777.893v9.235z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3a; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-country",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$39 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentCreditCard {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M23.5 11v6.5a3 3 0 01-3 3h-17a3 3 0 01-3-3V11h23zm-3-7.5a3 3 0 013 3V8H.5V6.5a3 3 0 013-3z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M20.5 3.5h-17c-1.655 0-3 1.345-3 3v11c0 1.655 1.345 3 3 3h17c1.655 0 3-1.345 3-3v-11c0-1.655-1.345-3-3-3zm1.5 14c0 .825-.675 1.5-1.5 1.5h-17c-.825 0-1.5-.675-1.5-1.5V11h20v6.5zM22 8H2V6.5C2 5.675 2.675 5 3.5 5h17c.825 0 1.5.675 1.5 1.5V8z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$39; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-credit-card",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$38 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentDataVisualisation {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M1 3.5V16a3 3 0 003 3h5.44l-.11.21A1.5 1.5 0 018 20H5.5v1.5h13V20H16a1.5 1.5 0 01-1.325-.79L14.56 19H20a3 3 0 003-3V3.5H1zm10.925 12a3.925 3.925 0 110-7.845v3.92h3.92a3.92 3.92 0 01-3.92 3.925zm1.075-5V6.575a3.925 3.925 0 013.925 3.925H13z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M23 3.5V16a3 3 0 01-2.824 2.995L20 19h-5.441l.113.21a1.5 1.5 0 001.172.783l.149.007H18.5v1.5h-13V20h2.507a1.5 1.5 0 001.244-.662l.077-.129.113-.209H4a3 3 0 01-2.995-2.824L1 16V3.5h22zM21.5 5h-19v11c0 .778.596 1.42 1.356 1.493L4 17.5h16c.778 0 1.42-.596 1.493-1.356L21.5 16V5zm-9.577 2.654v3.923h3.923a3.923 3.923 0 11-4.125-3.918l.202-.005zM13 6.577a3.91 3.91 0 012.774 1.149 3.91 3.91 0 011.142 2.543l.007.231H13V6.577z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$38; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-data-visualisation",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$37 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentDelivery {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M17.25 11.5a6.25 6.25 0 100 12.5 6.25 6.25 0 000-12.5zm2.6 3.814c.2 0 .39.08.53.221.294.29.3.762.015 1.06L16.5 20.5 14.045 18a.75.75 0 011.06-1.06l1.395 1.415 2.82-2.82a.745.745 0 01.53-.221zM9 6.5v14H3a3 3 0 01-3-3v-11h9zm10.5 0v3.835a7.745 7.745 0 00-9 3.615V6.5h9zM9 1.5V5H0l3-3.5h6zm7.5 0l3 3.5h-9V1.5h6z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M17.25 11.5c3.45 0 6.25 2.8 6.25 6.25S20.7 24 17.25 24 11 21.2 11 17.75s2.8-6.25 6.25-6.25zm3.1 4.05a.722.722 0 00-.965-.074l-.085.074-2.8 2.8-1.4-1.4c-.3-.3-.75-.3-1.05 0a.722.722 0 00-.074.965l.074.085 2.45 2.5 3.9-3.9c.3-.3.25-.75-.05-1.05zM16.5 1.5l3 3.5v5.35a8.086 8.086 0 00-1.125-.253L18 10.05V6.5h-7.5v3H9v-3H1.5v11c0 .8.576 1.423 1.352 1.493L3 19h6.6c.08.4.16.8.291 1.2l.109.3H3a3.01 3.01 0 01-2.995-2.824L0 17.5V5l3-3.5h13.5zM15.8 3h-5.3v2h7.05L15.8 3zM9 3H3.7L2 5h7V3z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$37; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-delivery",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$36 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentDigitalBanking {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M6.98 8.555l.045-.055H1v4a3 3 0 003 3h3.04a9.08 9.08 0 011-3.46 2.195 2.195 0 01-.62-.335 2.245 2.245 0 01-.44-3.15zm7.11-4.23A11 11 0 0121 5.36V5a3 3 0 00-3-3H4a3 3 0 00-3 3v1h8.75a11.525 11.525 0 014.34-1.675zm9.23 10.945a8 8 0 01-3.25-2.115c-1-.945-2.055-1.925-3.81-1.955a4.86 4.86 0 00-3.55 1.425 5.06 5.06 0 00-1.5 3.63c0 3.735 5 6.69 6.77 7.435a.75.75 0 00.58-1.385c-1.83-.775-5.85-3.37-5.85-6.05a3.57 3.57 0 011.04-2.56 3.34 3.34 0 012.475-1c1.175 0 1.86.66 2.81 1.55a9.31 9.31 0 003.83 2.45.75.75 0 10.445-1.43l.01.005zm-.455 2.88c-2.755-.935-3.805-2.055-4.565-2.87-.59-.625-1.14-1.215-2.135-1.28a2.1 2.1 0 00-2.16 1.545c-.755 2.645 4.04 5.56 6.825 6.38a.76.76 0 00.21.03.75.75 0 00.21-1.455c-2.935-.865-6.14-3.36-5.805-4.5a.61.61 0 01.62-.5c.37.025.585.22 1.14.81.82.875 2.045 2.19 5.18 3.26a.75.75 0 00.48-1.42zm-13.5-7.78a8.185 8.185 0 015.215-3.085 8 8 0 015.71 1.13.751.751 0 10.81-1.265 9.455 9.455 0 00-6.765-1.345 9.7 9.7 0 00-6.16 3.655.755.755 0 00.14 1.04.775.775 0 001.055-.13h-.005zm3.675 11.395c-1.135-.89-3.045-2.79-3.045-5.5a6.29 6.29 0 016.255-6.33c2.185 0 3.77 1.25 5.5 3.125a.75.75 0 101.11-1c-1.715-1.88-3.7-3.615-6.595-3.615a7.79 7.79 0 00-7.765 7.81c0 2.5 1.285 4.865 3.625 6.69.13.105.293.161.46.16a.75.75 0 00.46-1.34h-.005z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M16.1 11.2c1.417 0 2.789.624 3.821 1.747l.389.439.214.228c.586.598 1.306 1.126 2.826 1.686.35.15.55.6.5.9-.15.4-.55.6-.95.45-2.15-.8-3.1-1.65-3.85-2.6-.8-.9-1.85-1.4-2.9-1.4-.8 0-1.55.3-2.15.8-1.45 1.25-1.65 3.3-.45 4.95.55.75 1.45 1.65 2.4 2.4.75.6 1.65 1.15 2.55 1.6.4.2.55.65.35 1-.2.4-.65.55-1 .35-1.05-.5-2-1.1-2.85-1.75-1.05-.8-2.05-1.8-2.7-2.7-1.7-2.35-1.4-5.2.7-6.95.85-.75 1.95-1.15 3.1-1.15zM16 8.55c1.65 0 3.2.5 4.55 1.45.49.35.915.744 1.264 1.1l.28.293.53.58.076.077c.3.3.3.75 0 1.05-.3.3-.75.3-1.05 0l-.408-.478a8.647 8.647 0 00-1.328-1.269L19.7 11.2c-1.05-.8-2.35-1.2-3.65-1.2-1.4 0-2.8.5-3.9 1.45-2.6 2.15-2.95 5.8-.95 8.6.45.6 1.05 1.25 1.7 1.9.3.25.35.75.05 1.05-.3.3-.75.35-1.05.05-.75-.7-1.4-1.45-1.9-2.15-2.5-3.45-2-7.95 1.1-10.55 1.35-1.15 3.1-1.8 4.9-1.8zm-1.25 5.9c.95-.85 2.3-.65 3.25.45.45.55.8.95 1.4 1.4l.216.157.249.17c.223.147.485.306.798.473l.4.203c.495.241 1.098.494 1.837.747.4.15.65.7.5 1.05-.15.35-.55.6-.95.45-1.55-.5-2.8-1.1-3.85-1.9a10.39 10.39 0 01-1.593-1.538l-.257-.312c-.25-.35-.75-.45-1.1-.1-.3.25-.35.7-.1 1 .6.75 1.2 1.35 2 2 .85.65 1.9 1.25 2.9 1.65l.194.08.512.19c.06.024.124.05.194.08.35.1.5.45.4.85-.15.4-.55.6-.95.5-1.35-.4-2.9-1.25-4.15-2.2-.85-.65-1.65-1.5-2.15-2.15-.85-1.15-.75-2.4.25-3.25zM18 2a3.01 3.01 0 012.995 2.824L21 5v.25c-.5-.2-1.05-.4-1.55-.55-.093-.607-.622-1.126-1.302-1.193L18 3.5H4c-.8 0-1.423.576-1.493 1.352L2.5 5v1h7.35c-.4.28-.8.528-1.174.82l-.276.23a9.698 9.698 0 00-1.221 1.18l-.229.27H2.5v4c0 .8.576 1.423 1.352 1.493L4 14h3.2c-.12.4-.176.8-.22 1.2l-.03.3H4a3.01 3.01 0 01-2.995-2.824L1 12.5V5a3.01 3.01 0 012.824-2.995L4 2h14zm-1.95 3.7c1.75 0 3.5.45 5.05 1.3.35.2.5.65.3 1-.183.32-.577.474-.91.343L20.4 8.3c-1.35-.7-2.85-1.1-4.35-1.1-2.1 0-4.1.75-5.7 2.1-.4.35-.75.7-1.1 1.1a.668.668 0 01-.922.118l-.078-.068c-.35-.25-.35-.75-.1-1.05.35-.45.8-.85 1.25-1.25 1.85-1.6 4.2-2.45 6.65-2.45z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$36; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-digital-banking",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$35 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentDigitalMedia {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M5.355 11.5a8.76 8.76 0 007.598 4.994l.297.006h.25v5.835a1.085 1.085 0 01-1.752.856l-.098-.086L9.55 21H2.355a1.855 1.855 0 01-1.85-1.71L.5 19.145V11.5h4.855zM19.5 10.06l3.995 2.345v1.83l-2.5-.625v6.255c0 1.95-1.378 2.362-2.27 2.353l-.19-.008c-1.35-.11-2.43-1.055-2.415-2.155.015-1.1 1.12-1.92 2.47-1.83.235.015.466.059.69.13l.22.08V10.06zM8.524 2.259a7.245 7.245 0 0111.918 6.324l-.037.272L18 7.445v5.775A7.245 7.245 0 118.524 2.259zM11.5 5.17v5.33l4.615-2.665L11.5 5.17z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M5.355 11.5c.204.424.44.832.705 1.216l.205.284H2v6.145c0 .17.122.314.284.348l.071.007h7.815L12 21.33V16.4c.41.06.825.1 1.255.105l.25-.015v5.85a1.081 1.081 0 01-1.753.852l-.097-.087L9.55 21H2.355a1.854 1.854 0 01-1.85-1.71L.5 19.145V11.5h4.855zM19.5 10.06l4 2.345v1.83l-2.51-.635v6.255c0 1.955-1.378 2.367-2.27 2.358l-.19-.008c-1.345-.11-2.425-1.055-2.41-2.155.02-1.1 1.12-1.92 2.47-1.83.24.019.474.066.695.134l.215.076v-8.37zM13.25.5a7.249 7.249 0 017.25 7.25c0 .281-.023.56-.057.833l-.038.272-1.42-.835c.005-.09.015-.18.015-.27C19 4.58 16.42 2 13.25 2S7.5 4.58 7.5 7.75s2.58 5.75 5.75 5.75a5.75 5.75 0 004.611-2.32l.139-.195v2.235A7.224 7.224 0 0113.25 15 7.249 7.249 0 016 7.75 7.249 7.249 0 0113.25.5zM11.5 5.17l4.615 2.665L11.5 10.5V5.17z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$35; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-digital-media",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$34 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentDiscount {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12.44 1.535l8.785 1.3 1.3 8.78-10.305 10.31a3.065 3.065 0 01-4.325 0l-5.76-5.765a3.05 3.05 0 010-4.32L12.44 1.535zm.635 12.8a1.925 1.925 0 100 2.705v.02a1.905 1.905 0 000-2.725zm-1.344.557a.785.785 0 01.574.228.83.83 0 01-1.17 1.17.79.79 0 01.035-1.14.785.785 0 01.561-.258zm3.574-3.877L6.5 13.05l1 1 8.805-2.035-1-1zm-3.423-3.446A1.925 1.925 0 009.78 8a1.905 1.905 0 000 2.7 1.925 1.925 0 102.102-3.131zm-1.287 1.266a.83.83 0 011.125-.045.775.775 0 01-.035 1.135.775.775 0 01-1.135.035.83.83 0 01.045-1.125zm7.745-3.12a1.018 1.018 0 00-1.44 0 1 1 0 000 1.44 1 1 0 001.44 0 1.018 1.018 0 000-1.44z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12.441 1.533l8.781 1.302 1.303 8.782L12.22 21.922a3.048 3.048 0 01-2.162.895 3.04 3.04 0 01-1.993-.74l-.168-.155-5.762-5.762a3.056 3.056 0 01-.132-4.18l.132-.142L12.441 1.534zm.526 1.594L3.196 12.9A1.546 1.546 0 002.74 14c0 .363.124.707.352.985l.104.115 5.762 5.762c.294.294.685.456 1.1.456.364 0 .708-.124.986-.352l.114-.104 9.772-9.772-1.028-6.935-6.935-1.028zm.1 11.23c.755.755.762 1.948.008 2.701a1.906 1.906 0 01-2.71 0 1.915 1.915 0 01-.008-2.717 1.905 1.905 0 012.71.016zm-1.899.795c-.333.333-.348.82-.032 1.136.316.317.795.292 1.128-.04.332-.333.356-.812.04-1.128-.317-.316-.803-.3-1.136.032zm4.17-4.121l.982.981-8.804 2.037-.981-.982 8.803-2.037zM12.492 8.02a1.91 1.91 0 01.007 2.718c-.755.755-1.947.746-2.71-.016a1.895 1.895 0 01-.008-2.702 1.906 1.906 0 012.71 0zm-1.9.811c-.333.333-.349.82-.04 1.128.324.325.803.3 1.136-.032.332-.333.356-.811.031-1.136-.308-.309-.794-.292-1.127.04zm7.029-3.413a1.018 1.018 0 11.002 2.038 1.018 1.018 0 01-.002-2.038z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$34; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-discount",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$33 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentESim {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("g", { "fill-rule": "evenodd" }, hAsync("path", { d: "M20 3a3 3 0 012.995 2.824L23 6v12a3 3 0 01-2.824 2.995L20 21h-.5v-2.5h.5a.5.5 0 00.492-.41L20.5 18V6a.5.5 0 00-.41-.492L20 5.5H8.535L3.5 10.535V15H1V9.5L7.5 3H20z" }), hAsync("path", { d: "M2.95 16.65c1.05 0 1.736.774 1.796 1.976l.004.174v.4h-2.6c.05.75.35 1 .8 1 .262 0 .487-.115.606-.311L3.6 19.8h1.15c-.2.85-.9 1.35-1.8 1.35-1.15 0-1.9-.85-1.9-2.25 0-1.45.75-2.25 1.9-2.25zM7.3 15c1.09 0 1.73.628 1.88 1.587l.02.163H8.05c-.05-.45-.3-.65-.75-.65-.4 0-.7.25-.7.65 0 .36.243.517.51.618l.09.032.65.2c.85.25 1.4.9 1.4 1.6 0 1.15-.85 1.8-1.95 1.8-1.137 0-1.825-.539-1.98-1.573l-.02-.177h1.15c.1.5.4.7.85.7.5 0 .75-.3.75-.65 0-.315-.203-.509-.571-.617l-.129-.033-.65-.2c-.95-.25-1.3-.9-1.3-1.65 0-1.1.8-1.8 1.9-1.8zm3.9.2V21h-1.15v-5.8h1.15zm2.2 0l1.75 3.2h.05l1.7-3.2H18V21h-1.2v-3.3h-.05l-1.4 2.6h-.4l-1.4-2.6h-.05V21h-1.15v-5.8h1.05zM2.95 17.6c-.367 0-.65.168-.77.62l-.03.13H3.7c-.1-.55-.4-.75-.75-.75z" })))) : (hAsync("g", null, hAsync("path", { d: "M2.95 16.65c1.05 0 1.736.774 1.796 1.976l.004.174v.4h-2.6c.05.75.35 1 .8 1 .262 0 .487-.115.606-.311L3.6 19.8h1.15c-.2.85-.9 1.35-1.8 1.35-1.15 0-1.9-.85-1.9-2.25 0-1.45.75-2.25 1.9-2.25zM20 3a3.01 3.01 0 012.995 2.824L23 6v12a3.01 3.01 0 01-2.824 2.995L20 21h-.5v-1.5h.5c.8 0 1.423-.576 1.493-1.352L21.5 18V6c0-.8-.576-1.423-1.352-1.493L20 4.5H8.1l-5.6 5.6V15H1V9.5L7.5 3H20zM7.3 15c1.09 0 1.73.628 1.88 1.587l.02.163H8.05c-.05-.45-.3-.65-.75-.65-.4 0-.7.25-.7.65 0 .36.243.517.51.618l.09.032.65.2c.85.25 1.4.9 1.4 1.6 0 1.15-.85 1.8-1.95 1.8-1.137 0-1.825-.539-1.98-1.573l-.02-.177h1.15c.1.5.4.7.85.7.5 0 .75-.3.75-.65 0-.315-.203-.509-.571-.617l-.129-.033-.65-.2c-.95-.25-1.3-.9-1.3-1.65 0-1.1.8-1.8 1.9-1.8zm3.9.2V21h-1.15v-5.8h1.15zm2.2 0l1.75 3.2h.05l1.7-3.2H18V21h-1.2v-3.3h-.05l-1.4 2.6h-.4l-1.4-2.6h-.05V21h-1.15v-5.8h1.05zM2.95 17.6c-.367 0-.65.168-.77.62l-.03.13H3.7c-.1-.55-.4-.75-.75-.75z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$33; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-e-sim",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$32 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentEu {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 3C5.65 3 .5 7.03.5 12s5.15 9 11.5 9 11.5-4.03 11.5-9S18.35 3 12 3zm-1.205 6.935h-2.58v1.41h2.5v1.25h-2.5v1.5h2.58v1.25h-3.93v-6.66h3.93v1.25zm6.2 3c.005 1.66-.89 2.565-2.47 2.565s-2.5-.92-2.5-2.59V8.685h1.34v4.06c0 1.04.32 1.5 1.14 1.5.82 0 1.14-.44 1.14-1.5v-4.06H17l-.005 4.25z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 3c6.35 0 11.5 4.05 11.5 9s-5.15 9-11.5 9S.5 16.95.5 12 5.65 3 12 3zm0 1.5C6.5 4.5 2 7.85 2 12s4.5 7.5 10 7.5 10-3.35 10-7.5-4.5-7.5-10-7.5zm1.35 4.2v4.05c0 1.05.35 1.5 1.15 1.5.8 0 1.15-.45 1.15-1.5l-.007-2.476-.016-1.164-.014-.329a.54.54 0 00-.008-.072L15.6 8.7h1.35v4.25c0 1.7-.85 2.6-2.45 2.6-1.536 0-2.427-.83-2.496-2.4l-.004-.2V8.7h1.35zm-2.55 0v1.25H8.2v1.4h2.5v1.25H8.2v1.5h2.6v1.25H6.85V8.7h3.95z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$32; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-eu",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$31 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentFaceMask {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 4.75c3.257 0 5 2.25 8.499 2.25.162 0 .318-.004.466-.004.954 0 1.805.026 2.407.62.563.556.628 1.368.628 1.968 0 6.48-5.093 6.224-5.21 6.28-.925 1.348-2.31 2.325-4.376 3.111a6.791 6.791 0 01-4.828 0c-2.066-.786-3.451-1.763-4.376-3.112-.101-.048-5.21.229-5.21-6.279 0-.6.065-1.412.629-1.968.602-.594 1.422-.62 2.407-.62.148 0 .303.004.465.004C7.001 7 8.744 4.75 12 4.75zm-3.671 8.415a.75.75 0 00.336 1.006l.013.006.066.03c.317.144 1.546.643 3.256.643 1.954 0 3.28-.652 3.336-.679a.749.749 0 00.335-1.002.752.752 0 00-1.003-.341c-.011.005-1.087.522-2.668.522-1.581 0-2.656-.517-2.664-.521a.751.751 0 00-1.007.335zM3.514 8.5c-.989 0-1.56-.028-1.811.192-.17.148-.203.392-.203.892 0 2.645.966 4.204 2.87 4.651-.554-1.494-.793-3.36-.856-5.735zm17.566 0h-.594c-.062 2.374-.301 4.241-.856 5.735 1.904-.447 2.87-2.006 2.87-4.651 0-.542-.033-.789-.239-.928-.204-.138-.586-.156-1.181-.157zM12 9.25c-1.822 0-3.846.501-3.932.522a.75.75 0 00.364 1.455c.019-.005 1.934-.478 3.568-.478 1.78 0 3.517.5 3.75.5a.75.75 0 00.182-1.477c-.026-.006-.236-.058-.567-.127l-.27-.054C14.319 9.44 13.12 9.25 12 9.25z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 4.75c3.257 0 5 2.25 8.499 2.25.162 0 .318-.004.466-.004.954 0 1.805.026 2.407.62.563.556.628 1.368.628 1.968 0 6.48-5.093 6.224-5.21 6.28-.925 1.348-2.31 2.325-4.376 3.111a6.791 6.791 0 01-4.828 0c-2.067-.786-3.451-1.763-4.377-3.112C5.11 15.816 0 16.093 0 9.585c0-.6.065-1.412.628-1.968.602-.594 1.423-.62 2.407-.62.148 0 .304.004.466.004C7.001 7 8.743 4.75 12 4.75zm0 1.5c-1.284 0-2.305.448-3.486.968-1.016.446-2.132.937-3.499 1.16.14 5.841 1.276 7.739 5.105 9.195a5.27 5.27 0 001.88.345c.647 0 1.28-.116 1.88-.345 3.829-1.456 4.965-3.354 5.104-9.195-1.366-.223-2.483-.714-3.498-1.16-1.181-.52-2.202-.968-3.486-.968zm-3.671 6.915a.751.751 0 011.006-.336c.008.004 1.084.521 2.665.521s2.657-.517 2.668-.522a.749.749 0 01.668 1.343c-.056.027-1.382.679-3.336.679-1.71 0-2.939-.499-3.256-.642l-.066-.03-.014-.008a.75.75 0 01-.335-1.005zM3.514 8.5c-.989 0-1.56-.028-1.811.192-.17.148-.203.392-.203.892 0 2.645.966 4.204 2.87 4.651-.555-1.494-.794-3.36-.856-5.735zm17.566 0h-.594c-.063 2.374-.302 4.241-.856 5.735 1.904-.447 2.87-2.006 2.87-4.651 0-.542-.033-.789-.239-.928-.204-.138-.586-.156-1.181-.157zM12 9.25c1.12 0 2.319.19 3.095.34l.27.055c.33.069.54.12.567.127a.75.75 0 01-.181 1.477c-.234 0-1.97-.5-3.751-.5-1.633 0-3.55.473-3.569.478a.75.75 0 01-.363-1.455c.085-.021 2.11-.522 3.932-.522z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$31; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-face-mask",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$30 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentFeatures {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M9.725 3.925l9.695 9.695a2.88 2.88 0 01.129 3.927l-.129.138-5.42 5.42a2.885 2.885 0 01-3.932.129l-.138-.129L.235 13.41l1.22-8.26L4.5 4.695l5.225-.77zm2.835 7.17l-2 1.745-2.465-1.035 1.035 2.46-1.745 2 2.665-.22 1.365 2.275.61-2.605 2.595-.575-2.285-1.385.225-2.66zM9.5.16l12.035 5.375a2.365 2.365 0 011.29 2.926l-.075.194-1.915 4.28-.162-.192-.173-.188-.81-.785 1.67-3.725a.865.865 0 00-.34-1.09l-.095-.05L9.58 1.84l-1.425.795L4 3.255 9.5.16zm-3.975 7.7a.96.96 0 10-1.36 1.355.96.96 0 001.36-1.355z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M9.7 3.9l9.75 9.75c1.054 1.054 1.098 2.797.132 3.909l-.132.141-5.4 5.4c-.6.55-1.3.85-2.05.85a2.92 2.92 0 01-1.895-.706L9.95 23.1l-9.7-9.7 1.2-8.25L9.7 3.9zm-.5 1.6l-6.4 1-.95 6.4 9.2 9.15c.25.25.6.4.95.4.3 0 .6-.11.837-.3l.113-.1 5.4-5.45c.516-.469.548-1.29.097-1.843l-.097-.107L9.2 5.5zm3.4 5.55l-.25 2.7 2.3 1.35-2.6.65-.6 2.6-1.4-2.3-2.65.2 1.75-2L8.1 11.8l2.45 1 2.05-1.75zM9.5.15l12.05 5.4c1.1.478 1.651 1.78 1.26 2.986l-.06.164-1.9 4.3a2.352 2.352 0 00-.267-.316L19.7 11.8l1.65-3.75A.857.857 0 0021 6.951l-.1-.051L9.55 1.85l-1.4.8-4.15.6L9.5.15zm-5.35 7.7c.4-.35 1-.35 1.35 0 .35.35.35 1 0 1.35-.35.35-1 .35-1.35 0-.35-.35-.35-1 0-1.35z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$30; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-features",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2$ = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentFlexibleTariffs {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M7.205 8.69L5.92 10.66l2.685 1.755A10.17 10.17 0 0112 16.08a10.175 10.175 0 013.095-3.458l.3-.202 2.685-1.755-1.285-1.97h6.57l-2.69 6.02-1.285-1.97-2.685 1.755a7.725 7.725 0 00-3.496 6.22l-.004.28v1.275a1.255 1.255 0 01-.138.586l-.067.114V23a1 1 0 01-.17.21l-.105.085H12.7a1.256 1.256 0 01-.488.19l-.132.015H12l-.14-.006a1.255 1.255 0 01-.915-.544.455.455 0 01-.045-.085 1.09 1.09 0 01-.147-.396l-.015-.179.002-.04V21l-.004-.28a7.725 7.725 0 00-3.264-6.063L7.24 14.5l-2.685-1.75-1.285 1.97L.635 8.69h6.57zM12 1l3.6 5.5h-2.35v6.25a1.25 1.25 0 01-2.494.128l-.006-.128V6.5H8.4L12 1z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M7.2 8.5l-1.55 2.4 2.7 1.75c1.65 1.1 2.9 2.6 3.65 4.4.659-1.647 1.85-3.117 3.363-4.201l.287-.199 2.7-1.75-1.55-2.4h6.65l-2.65 6-1.55-2.4-2.7 1.75c-2.269 1.497-3.652 3.925-3.745 6.611l-.005.289v1.45a.772.772 0 01-.651.743l-.099.007-.099-.007a.778.778 0 01-.644-.644L11.3 22.2v-1.45l-.005-.289c-.09-2.59-1.379-4.94-3.505-6.447l-.24-.164-2.7-1.75-1.55 2.4-2.65-6H7.2zM12 1l3.6 5.5h-2.85v6.55c0 .4-.35.75-.75.75a.772.772 0 01-.743-.651l-.007-.099V6.5H8.4L12 1z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2$; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-flexible-tariffs",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2_ = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentFolder {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("defs", null, hAsync("path", { d: "M11.5 4.5c-.3 0-.6-.15-.85-.35l-.45-.45c-.7-.75-1.65-1.2-2.7-1.2H1V19c0 1.65 1.35 3 3 3h16c1.65 0 3-1.35 3-3V4.5H11.5z", id: "a" })), hAsync("use", { xlinkHref: "#a", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("defs", null, hAsync("path", { d: "M7.5 2.5c1.05 0 2 .45 2.7 1.2l.45.45c.25.2.55.35.85.35H23V19c0 1.65-1.35 3-3 3H4c-1.65 0-3-1.35-3-3V2.5zm0 1.5h-5v15c0 .85.65 1.5 1.5 1.5h16c.85 0 1.5-.65 1.5-1.5V6h-10c-.7 0-1.4-.3-1.9-.85l-.45-.45C8.7 4.25 8.1 4 7.5 4z", id: "a" })), hAsync("use", { xlinkHref: "#a", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2_; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-folder",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2Z = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentFood {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M5.002 1v6.25c0 1.24 1.009 2.25 2.25 2.25a2.253 2.253 0 002.244-2.096l.005-.154V1h1.5v6.25a3.75 3.75 0 01-2.062 3.346l-.177.084.61 10.573a2.124 2.124 0 11-4.244.152l.003-.152.61-10.573a3.755 3.755 0 01-2.234-3.223l-.006-.207V1h1.5zM17.23 0c1.334 0 2.46.958 2.688 2.256l.024.172 1.026 9.24a3.005 3.005 0 01-.745 2.333 3.005 3.005 0 01-2.04.993l-.196.006h-.203l.713 6.269a2.005 2.005 0 11-3.991.376l-.005-.15V2.73A2.732 2.732 0 0117.23 0zM8 1v6.25a.75.75 0 01-1.493.102l-.006-.102V1h1.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M17.229 0c1.334 0 2.46.958 2.688 2.256l.024.172 1.027 9.24a3.005 3.005 0 01-.746 2.333 3.005 3.005 0 01-2.04.993l-.195.006h-.203l.713 6.269a2.005 2.005 0 11-3.992.376l-.005-.15V2.73A2.732 2.732 0 0117.229 0zM5 1v6.25C5 8.49 6.01 9.5 7.25 9.5a2.253 2.253 0 002.245-2.096L9.5 7.25V1H11v6.25a3.75 3.75 0 01-2.062 3.346l-.178.084.61 10.573a2.124 2.124 0 11-4.244.152l.003-.152.61-10.573a3.755 3.755 0 01-2.233-3.223L3.5 7.25V1H5zm12.229.5c-.635 0-1.16.485-1.223 1.104L16 2.729V13.5h1.986a1.48 1.48 0 001.118-.5 1.48 1.48 0 00.382-1.005l-.01-.16-1.026-9.242A1.227 1.227 0 0017.229 1.5zM8 1v6.25a.75.75 0 01-1.493.102L6.5 7.25V1H8z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2Z; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-food",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2Y = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentGenderDiverse {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 21.477c-3.308 0-6-2.691-6-6 0-3.31 2.692-6 6-6 3.31 0 6 2.69 6 6 0 3.309-2.69 6-6 6M13 7.04v-.934l.163.162c.244.245.564.367.884.367a1.25 1.25 0 00.884-2.134L13.769 3.34l1.202-1.202A1.25 1.25 0 1013.203.372L12 1.572 10.8.373A1.249 1.249 0 109.032 2.14l1.202 1.202L9.072 4.5a1.25 1.25 0 101.768 1.77l.16-.161v.933c-4.216.497-7.5 4.088-7.5 8.436 0 4.687 3.814 8.5 8.5 8.5 4.688 0 8.5-3.813 8.5-8.5 0-4.348-3.282-7.94-7.5-8.436", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 22a6.508 6.508 0 01-6.5-6.5C5.5 11.916 8.416 9 12 9s6.5 2.916 6.5 6.5S15.584 22 12 22m.75-14.462V5.06l1.018 1.018a.748.748 0 001.061 0 .749.749 0 000-1.06L13.061 3.25l1.767-1.768a.75.75 0 00-1.06-1.061L12 2.189 10.232.421a.75.75 0 10-1.06 1.061l1.767 1.768-1.768 1.768a.75.75 0 101.061 1.061L11.25 5.06v2.478A8 8 0 0012 23.5a8 8 0 00.75-15.962", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2Y; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-gender-diverse",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2X = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentGenderFemale {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M6 8.5c0-3.309 2.691-6 6-6s6 2.691 6 6-2.691 6-6 6-6-2.691-6-6m14.5 0C20.5 3.813 16.687 0 12 0 7.313 0 3.5 3.813 3.5 8.5c0 4.261 3.155 7.79 7.25 8.398v1.665H8.693a1.25 1.25 0 100 2.5h2.057v1.664a1.25 1.25 0 002.5 0v-1.664h2.057a1.25 1.25 0 100-2.5H13.25v-1.665c4.095-.608 7.25-4.137 7.25-8.398", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M5.5 8.5C5.5 4.916 8.418 2 12 2c3.584 0 6.5 2.916 6.5 6.5S15.584 15 12 15a6.508 6.508 0 01-6.5-6.5m14.5 0a8 8 0 00-8-8 8 8 0 00-.75 15.962V19h-2.5a.75.75 0 000 1.5h2.5V23a.75.75 0 001.5 0v-2.5h2.5a.75.75 0 000-1.5h-2.5v-2.538C16.816 16.083 20 12.665 20 8.5", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2X; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-gender-female",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2W = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentGenderMale {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M15.085 17.4a5.961 5.961 0 01-4.244 1.756A5.96 5.96 0 016.6 17.4a5.958 5.958 0 01-1.758-4.243c0-1.602.624-3.109 1.758-4.242a5.957 5.957 0 014.242-1.758c1.602 0 3.11.624 4.242 1.758a6.007 6.007 0 010 8.485zM21 8.5V3h-5.5l1.865 1.865-1.469 1.47a8.429 8.429 0 00-5.055-1.679c-2.27 0-4.404.885-6.01 2.49a8.446 8.446 0 00-2.49 6.01c0 2.271.885 4.406 2.49 6.011a8.445 8.445 0 006.01 2.49 8.45 8.45 0 006.011-2.49c3.014-3.013 3.277-7.74.811-11.065l1.47-1.47L21 8.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M15.43 17.762a6.455 6.455 0 01-4.596 1.904 6.457 6.457 0 01-4.596-1.904 6.46 6.46 0 01-1.904-4.596c0-1.736.676-3.368 1.904-4.596a6.46 6.46 0 014.596-1.904c1.736 0 3.369.676 4.596 1.904a6.457 6.457 0 011.904 4.596 6.455 6.455 0 01-1.904 4.596zM21.001 8.5V3h-5.5l2.219 2.22-1.786 1.785a7.976 7.976 0 00-5.1-1.839 8 8 0 105.657 13.657 7.999 7.999 0 00.503-10.757l1.787-1.786 2.22 2.22z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2W; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-gender-male",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2V = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentHalfRating {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M11.997 1.501c.652 0 1.237.362 1.53.934l.062.136 2.064 5.062 5.452.398c.7.052 1.293.516 1.51 1.184.2.616.04 1.28-.408 1.735l-.118.11-4.175 3.527 1.304 5.308a1.715 1.715 0 01-.659 1.802 1.712 1.712 0 01-1.777.149l-.14-.079-4.645-2.881-4.646 2.881a1.716 1.716 0 01-2.604-1.725l.03-.146 1.304-5.309-4.176-3.527a1.714 1.714 0 01-.526-1.845 1.712 1.712 0 011.362-1.166l.148-.018 5.452-.399 2.064-5.061c.265-.65.89-1.07 1.592-1.07zm0 1.5a.205.205 0 00-.171.079l-.033.058L9.378 9.06l-6.38.468a.206.206 0 00-.193.151.206.206 0 00.023.186l.045.049 4.886 4.127-1.527 6.212c-.029.119.03.19.084.23.044.032.107.06.184.037l.06-.028 5.436-3.372V3.002z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M22.613 9.215a1.713 1.713 0 00-1.51-1.184l-5.451-.399-2.064-5.061a1.713 1.713 0 00-1.592-1.07c-.703 0-1.327.42-1.593 1.07L8.34 7.633l-5.452.398c-.7.052-1.292.516-1.51 1.184a1.712 1.712 0 00.526 1.845l4.176 3.527-1.304 5.308a1.715 1.715 0 00.658 1.802c.568.413 1.321.44 1.918.07l4.644-2.881 4.646 2.881a1.716 1.716 0 002.575-1.871l-1.305-5.309 4.176-3.527a1.714 1.714 0 00.526-1.845zm-1.494.699l-4.886 4.127 1.527 6.212c.03.119-.03.19-.084.23a.203.203 0 01-.244.009l-5.436-3.372V3.002c.067 0 .156.024.203.137l2.416 5.922 6.38.468a.206.206 0 01.192.151.206.206 0 01-.068.235z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2V; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-half-rating",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2U = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentHeart {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M21.315 6.07a5.857 5.857 0 00-4.85-2.57 5.85 5.85 0 00-2.265.45c-1 .415-1.69.985-2.2 1.605-.55-.67-1.305-1.28-2.425-1.69a5.864 5.864 0 00-6.89 2.205 5.89 5.89 0 00.39 7.12l6.63 7.755a3.017 3.017 0 004.585 0l6.63-7.755a5.883 5.883 0 00.395-7.12z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M21.315 6.07a5.857 5.857 0 00-4.85-2.57 5.85 5.85 0 00-2.265.45c-1 .415-1.69.985-2.2 1.605-.55-.67-1.305-1.28-2.425-1.69a5.864 5.864 0 00-6.89 2.205 5.89 5.89 0 00.39 7.12l6.63 7.755a3.017 3.017 0 004.585 0l6.63-7.755a5.883 5.883 0 00.395-7.12zm-1.53 6.145L13.15 19.97c-.3.355-.725.53-1.15.53-.425 0-.85-.175-1.15-.53l-6.635-7.755a4.372 4.372 0 01-.29-5.3A4.319 4.319 0 017.535 5c.52 0 1.035.09 1.525.27 1.785.655 2.275 1.915 2.94 3.235.635-1.255 1.105-2.48 2.775-3.17A4.486 4.486 0 0116.465 5c1.365 0 2.735.625 3.61 1.915 1.11 1.63.99 3.8-.29 5.3z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2U; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-heart",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2T = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentHeight {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M8.002 1.482v2.5H5.183c-.646 0-1.179.493-1.243 1.123l-.007.127V5.5h1.57a.75.75 0 01.101 1.493L5.502 7H3.933v2.5h1.57a.75.75 0 01.101 1.493l-.102.006H3.933v2.5h1.57a.75.75 0 01.101 1.493L5.502 15H3.933v2.5h1.57a.75.75 0 01.101 1.493L5.502 19H3.933v.245c0 .646.493 1.179 1.123 1.243l.127.007h2.82v2.5h-2.82a3.754 3.754 0 01-3.744-3.552l-.005-.198V5.232a3.754 3.754 0 013.55-3.744l.2-.006h2.818zm13.2 8.316c1.06 0 1.616.629 1.666 1.846l.004.187v3.624h-1.466v-3.442c0-.534-.193-.875-.715-.875-.53 0-.892.367-.938.97l-.005.132v3.215h-1.466v-3.442c0-.534-.193-.875-.716-.875-.519 0-.88.376-.926.972l-.005.13v3.215h-1.466V9.98h1.375v.67h.068c.284-.534.807-.852 1.466-.852.682 0 1.14.262 1.404.749l.061.126h.068c.308-.568.875-.875 1.591-.875zm-8.228-1.931v7.588h-1.466V9.866h-.068l-1.977 1.635V9.73l2.182-1.862h1.329z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M2 4.5V20c0 1.654 1.345 3 3 3h3v-1.5H5c-.827 0-1.5-.673-1.5-1.5v-1h2a.75.75 0 100-1.5h-2V15h2a.75.75 0 100-1.5h-2V11h2a.75.75 0 100-1.5h-2V7h2a.75.75 0 100-1.5h-2v-1C3.5 3.673 4.173 3 5 3h3V1.5H5c-1.655 0-3 1.345-3 3zm19.2 5.299c-.715 0-1.283.306-1.59.875h-.069c-.25-.569-.727-.875-1.465-.875-.659 0-1.181.318-1.466.851h-.068v-.67h-1.375v5.476h1.466v-3.215c0-.67.375-1.102.931-1.102.523 0 .716.341.716.875v3.442h1.466v-3.215c0-.681.375-1.102.943-1.102.523 0 .715.341.715.875v3.442h1.466v-3.624c0-1.34-.556-2.034-1.67-2.034zM9.462 9.73v1.772l1.976-1.636h.069v5.59h1.466V7.867h-1.33L9.462 9.73z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2T; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-height",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2S = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentHistory {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 1.25a10.75 10.75 0 012.31 21.25 1.255 1.255 0 11-.52-2.455 8.24 8.24 0 10-7.214-1.856l.214.181 1.315-2 2.68 6.13H4.11l1.305-2A10.75 10.75 0 0112 1.25zm0 4a.75.75 0 01.743.648L12.75 6v5.55l3.85 2.035a.75.75 0 01-.588 1.376l-.112-.046-4.65-2.465V6a.75.75 0 01.75-.75z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 1.75c5.65 0 10.25 4.6 10.3 10.3 0 4.657-3.268 8.833-7.778 9.937l-.272.063h-.15c-.35 0-.65-.25-.75-.6-.1-.4.15-.8.55-.9 3.95-.85 6.85-4.45 6.85-8.55 0-4.8-3.95-8.75-8.75-8.75S3.25 7.2 3.25 12c0 2.548 1.156 4.957 3.023 6.606l.227.194 1.55-2.4 2.7 6.1H4.1l1.6-2.45C3.25 18.15 1.75 15.2 1.75 12 1.75 6.35 6.35 1.75 12 1.75zm0 3.5c.367 0 .691.294.743.651L12.75 6v5.55l3.85 2.05c.35.2.5.65.3 1-.1.25-.4.4-.65.4a.814.814 0 01-.267-.063L15.9 14.9l-4.65-2.45V6c0-.4.35-.75.75-.75z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2S; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-history",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2R = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentHourGlass {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M13.493 9.332c-.396.444-.698.77-.924 1.008a.78.78 0 01-1.13.006 44.54 44.54 0 01-.929-1.011L8.119 6.662c1.207.219 2.556.38 3.923.38 1.366 0 2.633-.161 3.84-.38l-2.389 2.67zm3.626 9.388a1.5 1.5 0 01.382 1v.78h-11v-.78c0-.37.135-.725.381-1 1.214-1.356 3.4-3.048 5.119-3.048 1.718 0 3.862 1.645 5.118 3.048zm2.235-11.438a4.496 4.496 0 001.147-3.001V.5h-17v3.78c0 1.107.407 2.176 1.146 3l3.626 4.053a1 1 0 010 1.333l-3.626 4.052a4.499 4.499 0 00-1.146 3v.781a3 3 0 003 3h11a3 3 0 003-3v-.78a4.496 4.496 0 00-1.147-3l-3.625-4.053a1 1 0 010-1.334l3.625-4.052z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12.042 7.041c-1.367 0-2.715-.161-3.922-.378l2.39 2.671c.395.441.7.77.929 1.011a.778.778 0 001.13-.005c.226-.238.527-.565.924-1.009l2.389-2.669c-1.207.218-2.473.379-3.84.379zm-5.16 11.678a1.5 1.5 0 00-.381 1v.781h11v-.781a1.5 1.5 0 00-.382-1c-1.255-1.403-3.4-3.048-5.118-3.048-1.72 0-3.905 1.692-5.118 3.048zm7.73-5.052l3.625 4.052a3 3 0 01.764 2v.781c0 .827-.674 1.5-1.5 1.5h-11c-.828 0-1.5-.673-1.5-1.5v-.781c0-.739.27-1.449.763-2l3.626-4.052c.85-.951.85-2.384 0-3.334L5.764 6.281a2.995 2.995 0 01-.764-2V2h14v2.281a3 3 0 01-.764 2l-3.626 4.052c-.85.95-.85 2.384.002 3.334zm4.742-6.386a4.496 4.496 0 001.147-3V.5h-17v3.781c0 1.106.408 2.175 1.146 3l3.626 4.052c.339.379.339.954 0 1.334l-3.626 4.052a4.5 4.5 0 00-1.146 3v.781a3 3 0 003 3h11a3 3 0 003-3v-.781a4.497 4.497 0 00-1.147-3l-3.625-4.052a1.002 1.002 0 010-1.334l3.625-4.052z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2R; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-hour-glass",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2Q = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentIban {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M20.5 3.5h-17a3 3 0 00-3 3V8h23V6.5a3 3 0 00-3-3zm-15.996 14h1.011v-5h-1.01v5zm2.124 0h1.863c1.086 0 1.543-.622 1.543-1.385 0-.524-.24-.921-.659-1.115v-.03c.382-.224.613-.629.613-1.144 0-.719-.433-1.326-1.459-1.326h-1.9v5zm3.818 0h1.026l.321-.966h1.721l.33.966h1.026l-1.707-5h-1.01l-1.707 5zm5.075 0h1.01v-3.129h.047l1.796 3.129h1.017v-5H18.39v3.144h-.047L16.548 12.5h-1.026v5zM.502 11h23v6.5a3 3 0 01-3 3h-17a3 3 0 01-3-3V11zm8.486 5.003c0-.36-.219-.592-.616-.592h-.733v1.197h.733c.397 0 .615-.224.615-.605zm3.69-1.961h-.046l-.523 1.549h1.093l-.524-1.549zm-4.283.509h-.756v-1.16h.756c.33 0 .547.224.547.576 0 .344-.209.584-.547.584z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M16.532 14.371h.045l1.797 3.128h1.017v-5h-1.003v3.144h-.045L16.547 12.5h-1.025v5h1.01v-3.128zm-3.9-.33h.045l.524 1.55h-1.093l.524-1.55zm-.839 2.493h1.722l.329.966h1.026l-1.706-5h-1.011l-1.706 5h1.026l.32-.965zm-4.154.075V15.41h.733c.396 0 .614.232.614.591 0 .381-.218.606-.614.606h-.733zm0-3.218h.756c.329 0 .547.223.547.575 0 .345-.21.585-.547.585h-.756v-1.16zm2.395 2.724c0-.525-.24-.92-.658-1.116v-.029c.381-.225.613-.629.613-1.145 0-.719-.434-1.325-1.46-1.325H6.628v5h1.864c1.085 0 1.542-.622 1.542-1.385zM4.506 17.5h1.01v-5h-1.01v5zM22.001 8h-20V6.5c0-.827.672-1.5 1.5-1.5h17c.827 0 1.5.673 1.5 1.5V8zm0 9.5c0 .827-.673 1.5-1.5 1.5h-17c-.828 0-1.5-.673-1.5-1.5V11h20v6.5zm-1.5-14h-17a3 3 0 00-3 3v11a3 3 0 003 3h17a3 3 0 003-3v-11a3 3 0 00-3-3z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2Q; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-iban",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2P = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentId {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M16.707 16.843v-3.729h.776c.829 0 1.365.553 1.365 1.864 0 1.312-.536 1.865-1.365 1.865h-.776zm3.39-1.864c0-1.934-.972-2.978-2.525-2.978h-2.069v5.958h2.069c1.552 0 2.525-1.044 2.525-2.98zm-6.967 2.98h1.204V12H13.13v5.958zm-5.376-2.905c1.206 0 2.083-1.226 2.083-2.492 0-1.265-.932-2.092-2.083-2.092-1.151 0-2.083.826-2.083 2.092s.877 2.492 2.083 2.492zm1.978.832h-.815L7.754 17.05l-1.162-1.162h-.817c-.804 0-1.492.573-1.638 1.363l-.134.72h7.5l-.133-.72a1.665 1.665 0 00-1.638-1.364zM22.001 19.5c0 .826-.674 1.5-1.5 1.5h-17c-.828 0-1.5-.674-1.5-1.5V7h8v2.5h4V7h8v12.5zm-8-14v-5h-4v5h-9.5v14a3 3 0 003 3h17a3 3 0 003-3v-14h-9.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M16.707 16.843v-3.729h.776c.829 0 1.365.553 1.365 1.864 0 1.312-.536 1.865-1.365 1.865h-.776zm3.39-1.864c0-1.934-.972-2.978-2.525-2.978h-2.069v5.958h2.069c1.552 0 2.525-1.044 2.525-2.98zm-6.967 2.98h1.204V12H13.13v5.958zm-5.376-2.905c1.206 0 2.083-1.226 2.083-2.492 0-1.265-.932-2.092-2.083-2.092-1.151 0-2.083.826-2.083 2.092s.877 2.492 2.083 2.492zm1.978.832h-.815L7.754 17.05l-1.162-1.162h-.817c-.804 0-1.492.573-1.638 1.363l-.134.72h7.5l-.133-.72a1.665 1.665 0 00-1.638-1.364zM22.001 19.5c0 .826-.674 1.5-1.5 1.5h-17c-.828 0-1.5-.674-1.5-1.5V7h8v2.5h4V7h8v12.5zm-8-14v-5h-4v5h-9.5v14a3 3 0 003 3h17a3 3 0 003-3v-14h-9.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2P; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-id",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2O = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentInStock {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M3.5 20a2 2 0 110 4 2 2 0 010-4zM23.94.456a.75.75 0 01-.304.939l-.09.046-2.271.973a1.5 1.5 0 00-.882 1.092l-.021.147-.62 6.61a7.753 7.753 0 00-9.251 4.741l-5.886-.38a2.986 2.986 0 01-2.77-2.527l-.023-.183-.897-9.412h18.24a2.998 2.998 0 011.32-1.372l.198-.094L22.954.06a.75.75 0 01.985.394zm-6.19 11.046a6.25 6.25 0 110 12.499 6.25 6.25 0 010-12.5zm3.143 4.035a.75.75 0 00-.976-.073l-.085.073-2.819 2.819-1.408-1.409a.75.75 0 00-1.133.976l.072.085 2.47 2.469 3.879-3.88a.75.75 0 000-1.06zM2.75 17.5h7.262l-.007.286.002.226c0 .04.003.083.005.128l.023.295c.01.108.025.227.043.358l.032.207H2.75a.75.75 0 01-.102-1.494l.102-.006z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M3.5 20a2 2 0 110 4 2 2 0 010-4zm14.25-8.5a6.25 6.25 0 110 12.5 6.25 6.25 0 010-12.5zm3.143 4.035a.75.75 0 00-.976-.073l-.085.073-2.819 2.819-1.408-1.409a.75.75 0 00-1.133.977l.072.084 2.47 2.47 3.879-3.88a.75.75 0 000-1.061zM2.75 17.5h7.262l-.007.286.002.226c0 .041.003.084.005.128l.023.296c.01.108.025.226.043.358l.032.206H2.75a.75.75 0 01-.102-1.493l.102-.007zM22.954.06a.75.75 0 01.682 1.333l-.09.046-2.271.973a1.5 1.5 0 00-.882 1.092l-.021.147-.621 6.62a7.679 7.679 0 00-1.104-.21l-.38-.035L18.833 4H2.573l.741 7.77a1.493 1.493 0 001.26 1.34l.136.015 6.534.421a7.73 7.73 0 00-.611 1.152l-.123.304-5.896-.38a2.986 2.986 0 01-2.77-2.527l-.023-.183L.925 2.5h18.24a2.998 2.998 0 011.32-1.372l.198-.094L22.954.06z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2O; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-in-stock",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2N = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentInternational {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 1C5.925 1 1 5.925 1 12s4.925 11 11 11 11-4.925 11-11A11 11 0 0012 1zm8.4 9.75h-1.445a15.205 15.205 0 00-1.185-4.97 8.465 8.465 0 012.63 4.97zM10.75 3.9v6.85H7.56a11.67 11.67 0 011.6-5.185A5.16 5.16 0 0110.75 3.9zm0 9.35v6.85a5.16 5.16 0 01-1.59-1.665 11.67 11.67 0 01-1.6-5.185h3.19zm2.5 6.85v-6.85h3.19a11.67 11.67 0 01-1.6 5.185 5.16 5.16 0 01-1.59 1.665zm0-9.35V3.9a5.16 5.16 0 011.59 1.665 11.67 11.67 0 011.6 5.185h-3.19zm-7-4.97a15.205 15.205 0 00-1.185 4.97h-1.46A8.43 8.43 0 016.23 5.78h.02zm-2.645 7.47h1.44a15.205 15.205 0 001.185 4.97 8.43 8.43 0 01-2.625-4.97zm14.165 4.97a15.205 15.205 0 001.185-4.97H20.4a8.465 8.465 0 01-2.63 4.97z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("defs", null, hAsync("path", { d: "M12 1C5.95 1 1 5.9 1 12s4.9 11 11 11 11-4.9 11-11S18.1 1 12 1zm9.45 10.25h-2.5c-.15-3-1.05-5.7-2.4-7.55 2.75 1.5 4.65 4.3 4.9 7.55zM11.25 2.6v8.65H6.5c.25-4.4 2.25-8.05 4.75-8.65zm0 10.15v8.65c-2.5-.6-4.5-4.25-4.75-8.65h4.75zm1.5 8.65v-8.65h4.75c-.25 4.4-2.25 8.05-4.75 8.65zm0-10.15V2.6c2.5.6 4.5 4.25 4.75 8.65h-4.75zM7.45 3.7c-1.35 1.85-2.3 4.55-2.4 7.55h-2.5a9.426 9.426 0 014.9-7.55zm-4.9 9.05h2.5c.15 3 1.05 5.7 2.4 7.55a9.426 9.426 0 01-4.9-7.55zM16.6 20.3c1.35-1.85 2.3-4.55 2.4-7.55h2.5a9.66 9.66 0 01-4.9 7.55z", id: "a" })), hAsync("use", { xlinkHref: "#a", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2N; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-international",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2M = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentInternationalSms {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M9.551 5.388c.163 0 .327.017.49.029l.245.01v6.818c0 .365.137.714.38.982l.11.11v.069h.088a1.41 1.41 0 00.891.309 1.47 1.47 0 00.743-.22l.129-.09h.176v-.127l2.116-2.116c.146.59.251 1.188.317 1.79l.04.454h.8a6.573 6.573 0 00-.761-2.187l-.17-.287.156-.156h2.528A9.076 9.076 0 119.55 5.388zM8.327 15.492H6.284c.1 1.429.53 2.815 1.254 4.05.175.281.38.542.61.778l.179.173v-5zm4.496 0h-2.047v5.001c.932-.858 1.754-2.556 2.012-4.68l.035-.32zm-8.998 0h-.798a6.563 6.563 0 001.415 3.15 12.965 12.965 0 01-.577-2.692l-.04-.458zm12.25 0h-.798a12.965 12.965 0 01-.617 3.15 6.563 6.563 0 001.358-2.836l.057-.314zM4.442 10.256a6.563 6.563 0 00-1.358 2.836l-.057.314h.798c.075-1.072.282-2.13.617-3.15zm3.885-1.851c-.933.858-1.755 2.556-2.013 4.68l-.035.32h2.048v-5zM24 0v9.306h-9.306l-2.939 2.939V0H24zm-9.666 3.063l-.13.003a1.102 1.102 0 00-1.122 1.117.98.98 0 00.694.997l.11.027.416.122c.28.073.431.176.431.411 0 .236-.176.407-.49.407a.49.49 0 01-.51-.338l-.019-.083h-.759a1.127 1.127 0 001.25 1.102A1.107 1.107 0 0015.418 5.7a1.078 1.078 0 00-.758-1.024l-.114-.029-.411-.112c-.201-.054-.368-.147-.368-.397a.392.392 0 01.436-.397.44.44 0 01.475.319l.015.088h.7a1.097 1.097 0 00-1.06-1.086zm6.966.02a1.19 1.19 0 00-1.17 1.1.98.98 0 00.69.997l.109.027.416.122c.28.073.431.176.431.411 0 .236-.176.407-.49.407a.49.49 0 01-.505-.338l-.019-.083h-.724a1.127 1.127 0 001.114 1.108l.15-.006A1.107 1.107 0 0022.53 5.7a1.073 1.073 0 00-.776-1.026l-.116-.027-.416-.112c-.201-.054-.367-.147-.367-.397a.392.392 0 01.435-.397.431.431 0 01.477.318l.013.089h.72a1.19 1.19 0 00-1.2-1.067zm-4.647.061h-.656v3.6h.725V4.712h.034l.877 1.587h.235l.881-1.587h.035v2.032h.705l.005-3.6h-.666L17.76 5.138h-.034l-1.073-1.994z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M7.1 5.75a9.51 9.51 0 011.647-.222l.328-.01.286.002.429.017.21.013V14h3.65l-.15-1.35 1.25-1.25c.167.667.299 1.403.367 2.15l.033.45H17a7.452 7.452 0 00-.789-2.696L16.05 11h1.65c.5 1.15.8 2.4.8 3.75 0 5.1-4.15 9.25-9.25 9.25S0 19.85 0 14.75c0-4.35 3-8 7.1-9zm6.5 9.75H10v6.85c1.794-.582 3.306-3.326 3.578-6.547l.022-.303zm-5.1 0H4.9c.194 3.248 1.657 6.074 3.433 6.79l.167.06V15.5zm-5.1 0H1.55c.2 2.4 1.6 4.5 3.55 5.75-.89-1.406-1.518-3.252-1.675-5.331L3.4 15.5zm13.55 0H15.1c-.15 2.25-.75 4.25-1.7 5.75 1.872-1.2 3.237-3.183 3.52-5.463l.03-.287zM8.5 7.15c-1.794.582-3.306 3.326-3.578 6.547L4.9 14h3.6V7.15zm-3.4 1.1c-1.872 1.2-3.237 3.183-3.52 5.463L1.55 14H3.4c.15-2.25.75-4.25 1.7-5.75zM24 0v9.5h-9.5l-3 3V0H24zm-9.9 3.2c-.7 0-1.2.45-1.2 1.15 0 .415.17.83.669 1.01l.131.04.4.1c.3.05.45.15.45.4 0 .2-.2.4-.5.4-.267 0-.454-.119-.528-.356L13.5 5.85h-.8c.1.7.55 1.1 1.3 1.1.7 0 1.25-.4 1.2-1.1 0-.458-.294-.833-.767-1.007L14.3 4.8l-.4-.1c-.2-.05-.35-.15-.35-.4s.2-.4.45-.4c.262 0 .41.115.476.311l.024.089h.8c-.05-.65-.45-1.1-1.2-1.1zm7.2 0c-.7 0-1.2.45-1.2 1.15 0 .415.17.83.669 1.01l.131.04.4.1c.3.05.45.15.45.4 0 .2-.2.4-.5.4-.267 0-.454-.119-.528-.356L20.7 5.85h-.75c.1.7.55 1.1 1.3 1.1.7 0 1.25-.4 1.2-1.1 0-.458-.294-.833-.767-1.007L21.55 4.8l-.4-.1c-.2-.05-.35-.15-.35-.4s.2-.4.45-.4c.262 0 .41.115.476.311l.024.089h.75c-.05-.65-.45-1.1-1.2-1.1zm-4.8 0h-.7v3.65h.75V4.8h.05l.9 1.6h.2l.9-1.6h.05v2.1h.8V3.2h-.7l-1.1 2.05h-.05L16.5 3.2z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2M; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-international-sms",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2L = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentInterview {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M8 12l1.08 1.055-4.825 5.155a1.085 1.085 0 001.44 1.62l.095-.085 5.15-4.805L12 16l-5.185 4.84a2.57 2.57 0 01-1.765.695 2.59 2.59 0 01-1.02-.222l-.19-.093-2.135 2.135-1.06-1.06 2.135-2.11a2.575 2.575 0 01.252-2.853l.128-.147L8 12zm4.915-8L20 11.085l-5.745 5.73-7.07-7.07L12.915 4zm.635 5.39l-1.08 1.08 1.06 1.06 1.08-1.08-1.06-1.06zm3.968-7.765a4 4 0 013.807 1.05 4 4 0 01-1.449 6.61l-.211.07-5-5a4 4 0 012.853-2.73z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M18.5 1.5a4.002 4.002 0 012.825 6.83 3.985 3.985 0 01-2.59 1.163L18.5 9.5h-.105l1.59 1.59-5.73 5.73-1.52-1.52-5.925 5.54a2.569 2.569 0 01-1.765.695c-.35 0-.693-.08-1.018-.222l-.192-.093L1.7 23.355l-1.06-1.06 2.135-2.135a2.578 2.578 0 01.255-2.826l.13-.149 5.545-5.92-1.52-1.52 5.73-5.735 1.59 1.59a3.97 3.97 0 011.165-2.93A3.998 3.998 0 0118.5 1.5zM9.765 12.325L4.26 18.21c-.4.43-.39 1.095.025 1.51a1.074 1.074 0 001.4.113l.105-.088 5.89-5.505-1.915-1.915zm3.15-6.19l-3.61 3.61 4.95 4.95 3.61-3.61-4.95-4.95zm.635 2.195l2.12 2.12-1.06 1.06-.53-.53-1.06 1.065-1.065-1.065 1.065-1.06-.535-.53 1.065-1.06z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2L; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-interview",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2K = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentKey {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M18.4 1.25l2.5 2.45c1.104 1.104 1.148 2.9.132 4.103l-.132.147-.55.55h-1.8v2h-2v1.8l-1.15 1.15c.75 2.5.1 5.2-1.75 7.05a7.006 7.006 0 01-4.95 2.05c-2.3 0-4.65-1.2-6.05-3.5-.35-.55-.6-1.15-.75-1.8-.6-2.5.1-4.95 1.8-6.65 1.784-1.784 4.405-2.452 6.786-1.825l.264.075 7.65-7.6zM7.1 16.1c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M18.4 1.25l2.5 2.45c1.104 1.104 1.148 2.9.132 4.103l-.132.147-.55.55h-1.8v2h-2v1.8l-1.15 1.15c.75 2.5.1 5.2-1.75 7.05a7.006 7.006 0 01-4.95 2.05c-2.3 0-4.65-1.2-6.05-3.5-.35-.55-.6-1.15-.75-1.8-.6-2.5.1-4.95 1.8-6.65 1.784-1.784 4.405-2.452 6.786-1.825l.264.075 7.65-7.6zm0 2.1l-7.25 7.3-.45-.2c-.65-.3-1.3-.4-2-.4-1.45 0-2.85.55-3.9 1.6-1.05 1.05-1.6 2.4-1.6 3.9s.55 2.85 1.6 3.9c2.35 2.35 6.3 2.1 8.35-.7 1.05-1.432 1.28-3.365.69-5.06l-.09-.24-.15-.35 1.4-1.4V9h2V7h2.65l.15-.15c.563-.563.598-1.389.105-1.984L19.8 4.75l-1.4-1.4zM7.1 16.1c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2K; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-key",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2J = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentLanguage {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M1.5 1.5v15a3 3 0 003 3H6v2.275A1.755 1.755 0 009 23l3.5-3.5h7a3 3 0 003-3v-15h-21zM12 5c.795 0 2 2 2.095 5h-4.19c.12-3 1.3-5 2.095-5zm-1.89.34A9.81 9.81 0 008.905 10h-2.38a5.5 5.5 0 013.585-4.66zM6.525 11h2.38a9.81 9.81 0 001.205 4.66A5.5 5.5 0 016.525 11zM12 16c-.795 0-1.975-1.975-2.095-5h4.19c-.095 3.025-1.3 5-2.095 5zm1.89-.34A9.81 9.81 0 0015.095 11H17.5a5.5 5.5 0 01-3.61 4.66zM15.095 10a9.81 9.81 0 00-1.205-4.66A5.5 5.5 0 0117.5 10h-2.405z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M22.5 1.5v15a3 3 0 01-2.824 2.995l-.176.005h-7l-3.513 3.512a1.715 1.715 0 01-1.225.517c-.854 0-1.676-.63-1.756-1.598L6 21.775V19.5H4.5a3 3 0 01-2.995-2.824L1.5 16.5v-15h21zM21 3H3v13.5c0 .778.596 1.42 1.356 1.493L4.5 18h3v3.775c0 .184.205.32.373.22l.053-.043L11.88 18h7.62c.778 0 1.42-.596 1.493-1.356L21 16.5V3zm-6.903 8c-.12 3.024-1.3 5-2.097 5-.77 0-1.901-1.85-2.082-4.71L9.903 11h4.194zm3.378 0a5.497 5.497 0 01-3.587 4.66c.638-1.025 1.081-2.556 1.191-4.307l.018-.353h2.378zm-8.572 0c.07 1.898.528 3.568 1.209 4.66a5.501 5.501 0 01-3.56-4.422L6.525 11h2.378zM12 5c.77 0 1.901 1.85 2.082 4.71l.015.29H9.903c.12-3.025 1.3-5 2.097-5zm1.888.34a5.5 5.5 0 013.56 4.422l.027.238h-2.379c-.069-1.898-.527-3.568-1.208-4.66zm-3.776 0c-.638 1.025-1.081 2.556-1.191 4.307L8.903 10H6.525a5.497 5.497 0 013.587-4.66z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2J; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-language",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2I = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentLock {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M18.5 9.5v-2a6.5 6.5 0 10-13 0v2H3V19a3 3 0 003 3h12a3 3 0 003-3V9.5h-2.5zM13 16.11V18h-2v-1.89a1.5 1.5 0 112 0zm4-6.61H7v-2a5 5 0 0110 0v2z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 1a6.486 6.486 0 016.496 6.266l.004.234v2H21V19a3.01 3.01 0 01-2.824 2.995L18 22H6a3.01 3.01 0 01-2.995-2.824L3 19V9.5h2.5v-2C5.5 3.9 8.4 1 12 1zm7.5 10h-15v8c0 .8.576 1.423 1.352 1.493L6 20.5h12c.8 0 1.423-.576 1.493-1.352L19.5 19v-8zM12 13.5c.85 0 1.5.65 1.5 1.5 0 .4-.158.76-.404 1.011L13 16.1V18h-2v-1.9c-.3-.25-.5-.65-.5-1.1 0-.85.65-1.5 1.5-1.5zm0-11c-2.678 0-4.881 2.133-4.995 4.784L7 7.5v2h10v-2c0-2.75-2.25-5-5-5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2I; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-lock",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2H = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentLoyalty {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M15.153.84c.156 0 .307.02.454.068.554.18.942.693 1.306 1.246l.271.416c.271.416.55.811.896 1.064.35.254.814.4 1.293.53l.48.13c.638.177 1.243.385 1.583.852.336.462.347 1.099.318 1.759l-.024.497c-.022.497-.026.985.109 1.401.13.402.42.785.73 1.17l.312.385c.413.517.782 1.049.782 1.642 0 .594-.37 1.125-.782 1.642l-.312.386c-.31.384-.599.767-.729 1.168-.135.417-.13.905-.109 1.402l.024.497c.029.66.018 1.298-.318 1.76-.34.466-.945.674-1.583.85l-.48.13c-.48.132-.943.277-1.293.531-.289.21-.53.52-.76.858l-.407.622c-.364.553-.752 1.066-1.307 1.247a1.457 1.457 0 01-.452.067c-.394 0-.813-.13-1.24-.288l-.643-.243c-.43-.157-.859-.289-1.269-.289-.41 0-.839.132-1.27.29l-.643.242c-.427.157-.845.288-1.239.288a1.47 1.47 0 01-.453-.067c-.554-.18-.942-.694-1.306-1.247l-.408-.622c-.229-.338-.47-.648-.759-.858-.35-.254-.814-.4-1.293-.53l-.48-.13c-.638-.177-1.244-.385-1.583-.851-.336-.463-.347-1.1-.318-1.76l.024-.497c.022-.497.026-.985-.109-1.401-.13-.402-.42-.785-.73-1.17l-.312-.385C.71 13.125.342 12.593.342 12s.37-1.125.782-1.642l.465-.578c.25-.32.468-.642.577-.976.135-.417.13-.905.108-1.402l-.024-.497c-.028-.66-.018-1.298.318-1.76.34-.466.946-.674 1.583-.85l.48-.13c.48-.132.944-.277 1.293-.531.347-.253.625-.648.896-1.064l.271-.416c.365-.553.752-1.066 1.307-1.246.146-.048.297-.069.453-.069.393 0 .812.132 1.238.29l.644.242c.43.157.859.288 1.269.288.41 0 .839-.13 1.27-.288l.643-.243c.427-.157.846-.288 1.239-.288zm-4.81 7.562a2.461 2.461 0 00-2.896.928 2.467 2.467 0 00.045 2.836l.12.153 3.742 4.376a.854.854 0 001.214.084l.084-.084 3.74-4.376c.724-.845.791-2.07.166-2.99a2.464 2.464 0 00-2.991-.89c-.672.277-1 .709-1.262 1.191l-.152.295-.15.301-.22-.44c-.296-.574-.634-1.09-1.44-1.384z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M23.66 12c0-1.187-1.476-2.126-1.823-3.197-.361-1.109.268-2.734-.404-3.658-.678-.932-2.422-.832-3.355-1.511-.924-.673-1.364-2.366-2.474-2.726a1.455 1.455 0 00-.453-.069c-.982 0-2.127.82-3.152.82-1.024 0-2.168-.82-3.15-.82a1.45 1.45 0 00-.454.069c-1.109.36-1.55 2.053-2.473 2.725-.933.68-2.677.58-3.356 1.513-.672.923-.043 2.548-.403 3.657C1.816 9.874.34 10.813.34 12c0 1.187 1.475 2.126 1.823 3.197.361 1.109-.268 2.733.404 3.658.678.933 2.422.832 3.356 1.511.923.672 1.364 2.366 2.473 2.727.146.047.297.067.453.067.982 0 2.127-.82 3.152-.82 1.024 0 2.168.82 3.151.82.155 0 .307-.02.453-.067 1.11-.361 1.55-2.054 2.473-2.727.934-.678 2.678-.578 3.357-1.511.672-.924.043-2.549.402-3.659.348-1.07 1.823-2.009 1.823-3.196zm-2.134.93c-.413.508-.882 1.083-1.116 1.803-.241.743-.203 1.5-.169 2.168.017.337.045.893-.023 1.071-.148.123-.694.269-1.023.357-.643.173-1.373.369-2 .825-.62.451-1.027 1.081-1.386 1.637-.193.299-.517.799-.657.87-.21 0-.652-.17-1.008-.306-.633-.241-1.35-.515-2.144-.515s-1.511.274-2.143.515c-.348.133-.778.297-1.005.305-.166-.105-.474-.582-.66-.87-.36-.555-.766-1.185-1.387-1.636-.627-.456-1.356-.652-2-.825-.33-.088-.875-.235-1.022-.358-.069-.178-.041-.733-.024-1.07.034-.668.072-1.425-.169-2.168-.234-.72-.702-1.296-1.116-1.804-.23-.283-.615-.755-.635-.925.02-.179.405-.652.635-.934.413-.508.882-1.084 1.116-1.804.241-.742.203-1.5.169-2.168-.017-.336-.045-.892.024-1.07.147-.123.693-.27 1.022-.358.644-.173 1.373-.368 2-.824.62-.452 1.027-1.082 1.386-1.637.188-.289.496-.767.661-.87.211.002.651.17 1.005.305.632.242 1.349.516 2.143.516.794 0 1.511-.274 2.143-.515.348-.132.778-.297 1.005-.304.166.105.474.581.66.87.36.555.767 1.185 1.387 1.636.627.456 1.357.652 2 .824.33.089.875.235 1.023.358.068.178.04.734.023 1.07-.034.668-.072 1.426.169 2.168.234.721.703 1.296 1.116 1.805.23.282.614.755.634.925-.02.178-.404.65-.634.933zm-7.961-4.492c-.941.389-1.207 1.08-1.565 1.788-.376-.743-.652-1.456-1.659-1.824a2.461 2.461 0 00-2.896.928 2.466 2.466 0 00.165 2.99l3.741 4.375a.854.854 0 001.298 0l3.741-4.376c.723-.845.79-2.07.165-2.99a2.464 2.464 0 00-2.99-.89z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2H; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-loyalty",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2G = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentMediaFolder {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M7.5 2.5a3.755 3.755 0 012.74 1.18l.43.46c.216.228.516.358.83.36H23V19a3 3 0 01-3 3H4a3 3 0 01-3-3V2.5h6.5zm2 6.89v7.5l5.73-3.75L9.5 9.39z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M7.5 2.5a3.65 3.65 0 012.546 1.044l.154.156.45.45c.214.171.465.306.722.341l.128.009H23V19a3.01 3.01 0 01-2.824 2.995L20 22H4a3.01 3.01 0 01-2.995-2.824L1 19V2.5h6.5zm0 1.5h-5v15c0 .8.576 1.423 1.352 1.493L4 20.5h16c.8 0 1.423-.576 1.493-1.352L21.5 19V6h-10a2.578 2.578 0 01-1.759-.706L9.15 4.7a2.37 2.37 0 00-1.47-.693L7.5 4zm2 5.4l5.75 3.75L9.5 16.9V9.4z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2G; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-media-folder",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2F = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentMoneyAt {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M13.545 2.435C7.415 2.435 2.79 7.28 2.79 13.7c0 4.845 3.4 8.36 8.08 8.36a10.26 10.26 0 005.03-1.315l.19-.105-.715-1.815-.25.135a8.605 8.605 0 01-4.235 1.1c-3.5 0-5.96-2.615-5.96-6.36 0-5.28 3.695-9.26 8.57-9.26 3.805 0 6 2.095 6 5.74 0 2.5-1.08 5.125-2.885 5.125a.84.84 0 01-.665-.245 1.5 1.5 0 01-.175-1.17l.905-6.345h-2.14L14.4 8.59a2.845 2.845 0 00-2.535-1.335c-2.875 0-4.43 3.08-4.43 6 0 2.41 1.4 4.03 3.5 4.03a3.32 3.32 0 002.8-1.535c.28.77 1 1.535 2.66 1.535 2.53 0 5.225-2.5 5.225-7.085-.02-4.7-3.18-7.765-8.075-7.765zm.3 9.065c0 1.765-.87 3.64-2.5 3.64-1.435 0-1.65-1.3-1.65-2.07 0-1.785.785-3.71 2.5-3.71 1.495.01 1.65 1.505 1.65 2.14z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M21.35 10.18c0 3.205-1.725 6.83-4.975 6.83-1.46 0-2.3-.62-2.52-1.725H13.7c-.595 1.04-1.55 1.725-2.785 1.725-1.97 0-3.23-1.525-3.23-3.78 0-2.895 1.525-5.725 4.18-5.725 1.325 0 2.21.71 2.585 1.77h.11l.2-1.48h1.635l-.86 6.06c-.155.995.135 1.7 1.085 1.7 2.055 0 3.14-2.895 3.14-5.375 0-3.76-2.275-5.99-6.235-5.99-5.195 0-8.845 4.265-8.845 9.505 0 4.09 2.785 6.61 6.215 6.61 1.725 0 3.14-.465 4.355-1.13l.53 1.35a10.047 10.047 0 01-4.91 1.285c-4.245 0-7.825-3.075-7.825-8.115 0-6.08 4.375-11.01 10.5-11.01 4.82 0 7.805 2.92 7.805 7.495zm-7.255 1.33c0-1.44-.64-2.39-1.88-2.39-1.77 0-2.765 1.835-2.765 3.96 0 1.37.62 2.32 1.9 2.32 1.73 0 2.745-1.88 2.745-3.89z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2F; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-money-at",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2E = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentMusic {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M7.5 4.89v12.06a4.205 4.205 0 00-1.885-.695c-1.89-.22-3.44.88-3.465 2.455-.025 1.575 1.5 3.03 3.385 3.25C7.42 22.18 9 21.075 9 19.5V8.11l10.5-2.19v8.53a4.205 4.205 0 00-1.885-.695c-1.89-.22-3.44.88-3.465 2.455-.025 1.575 1.5 3.03 3.385 3.25C19.42 19.68 21 18.575 21 17V2.08L7.5 4.89z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M7.5 4.89v12.06a4.205 4.205 0 00-1.885-.695c-1.89-.215-3.44.885-3.465 2.46-.02 1.575 1.495 3.03 3.385 3.245C7.43 22.175 9 21.075 9 19.5V8.11l10.5-2.19v8.53a4.205 4.205 0 00-1.885-.695c-1.89-.215-3.44.885-3.465 2.46-.02 1.575 1.495 3.03 3.385 3.245C19.43 19.675 21 18.575 21 17V2.08L7.5 4.89z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2E; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-music",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2D = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentNews {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M22.5 3v15.5a3 3 0 01-3 3h-15a3 3 0 01-3-3V3h21zm-4.75 13h-4a.75.75 0 000 1.5h4a.75.75 0 100-1.5zM11 11H5.5v6.5H11V11zm6.75 2.5h-4a.75.75 0 100 1.5h4a.75.75 0 100-1.5zm0-2.5h-4a.75.75 0 000 1.5h4a.75.75 0 100-1.5zm.75-4h-13v2h13V7z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M22.5 3v15.5a3.01 3.01 0 01-2.824 2.995l-.176.005h-15a3.01 3.01 0 01-2.995-2.824L1.5 18.5V3h21zM21 4.5H3v14c0 .8.576 1.423 1.352 1.493L4.5 20h15c.8 0 1.423-.576 1.493-1.352L21 18.5v-14zM17.75 16c.4 0 .75.35.75.75a.772.772 0 01-.651.743l-.099.007h-4c-.4 0-.75-.35-.75-.75 0-.367.294-.691.651-.743L13.75 16h4zM11 11v6.5H5.5V11H11zm6.75 2.5c.4 0 .75.35.75.75a.772.772 0 01-.651.743L17.75 15h-4c-.4 0-.75-.35-.75-.75 0-.367.294-.691.651-.743l.099-.007h4zm0-2.5c.4 0 .75.35.75.75a.772.772 0 01-.651.743l-.099.007h-4c-.4 0-.75-.35-.75-.75 0-.367.294-.691.651-.743L13.75 11h4zm.75-4v2h-13V7h13z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2D; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-news",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2C = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentOutOfStock {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M3.5 20a2 2 0 110 4 2 2 0 010-4zM23.94.456a.75.75 0 01-.304.939l-.09.046-2.271.973a1.5 1.5 0 00-.882 1.092l-.021.147-.62 6.61a7.753 7.753 0 00-9.251 4.741l-5.886-.38a2.986 2.986 0 01-2.77-2.527l-.023-.183-.897-9.412h18.24a2.998 2.998 0 011.32-1.372l.198-.094L22.954.06a.75.75 0 01.985.394zm-6.19 11.046a6.25 6.25 0 110 12.499 6.25 6.25 0 010-12.5zm-1.544 3.65a.75.75 0 00-.986 1.129l1.47 1.47-1.47 1.47-.077.09a.745.745 0 00.077.97.75.75 0 001.06 0l1.47-1.47 1.47 1.47.084.073a.75.75 0 00.976-1.133l-1.47-1.47 1.47-1.47.077-.09a.745.745 0 00-.077-.97.745.745 0 00-1.06 0l-1.47 1.47-1.47-1.47zM2.75 17.5h7.262l-.007.286.002.226c0 .04.003.083.005.128l.023.295c.01.108.025.227.043.358l.032.207H2.75a.75.75 0 01-.102-1.494l.102-.006z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M3.5 20a2 2 0 110 4 2 2 0 010-4zm14.25-8.5a6.25 6.25 0 110 12.5 6.25 6.25 0 010-12.5zm-1.47 3.72a.75.75 0 00-1.133.977l.072.084 1.47 1.47-1.47 1.469a.75.75 0 00.969 1.14l.093-.08 1.469-1.47 1.47 1.47a.748.748 0 001.06 0 .75.75 0 00.073-.976l-.073-.084-1.47-1.47 1.47-1.469a.75.75 0 00-.977-1.133l-.084.072-1.47 1.47-1.469-1.47zM2.75 17.5h7.262l-.012.25c0 .32.024.634.065.943l.045.307H2.75a.75.75 0 01-.102-1.493l.102-.007zM22.954.06a.75.75 0 01.682 1.333l-.09.046-2.271.973a1.5 1.5 0 00-.882 1.092l-.021.147-.621 6.62a7.679 7.679 0 00-1.104-.21l-.38-.035L18.833 4H2.573l.741 7.77a1.493 1.493 0 001.26 1.34l.136.015 6.534.421a7.73 7.73 0 00-.611 1.152l-.123.304-5.896-.38a2.986 2.986 0 01-2.77-2.527l-.023-.183L.925 2.5h18.24a2.998 2.998 0 011.32-1.372l.198-.094L22.954.06z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2C; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-out-of-stock",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2B = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentPersonWalking {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M9.512 5.71c1.372-.454 5.098-.372 5.847 1.452.11.27.217.547.32.823l.354.953.21.535c.165.398.328.734.463.872.042.043.1.098.172.16l.247.213.632.514.667.523.291.223a.926.926 0 01-1.119 1.473l-.835-.647-.47-.377-.308-.253-.279-.238a5.982 5.982 0 01-.32-.297c-.396-.404-.693-1.043-.989-1.804l-.198-.524-.271-.726-.176-.453-.46 5.588 2.666 2.76c.254.264.457.564.605.896l1.989 4.99a.921.921 0 01-1.613.863l-.058-.095-2.553-4.878-4.277-3.524a3.123 3.123 0 01-1.136-2.492l.012-.206.383-4.116c-.655.51-1.226 1.256-1.412 1.599a.994.994 0 00-.053.125l-.064.192-.073.25-.124.461-.133.535-.134.575-.18.826a.926.926 0 01-1.812-.376l.175-.811.114-.496.126-.516.133-.505c.135-.49.275-.917.4-1.145l.117-.199a5.95 5.95 0 01.166-.25l.212-.292c.585-.768 1.573-1.793 2.746-2.181zm-.624 9.988l.101.098.104.095 2.173 1.79-.162.608a3.114 3.114 0 01-.45.974l-.13.173-3.21 3.801a.924.924 0 01-1.534-1.005l.06-.105 2.847-4.252.201-2.177zM12.25 0a2.125 2.125 0 110 4.25 2.125 2.125 0 010-4.25z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M9.512 5.71c1.372-.454 5.098-.372 5.847 1.452.11.27.217.547.32.823l.354.953.21.535c.165.398.328.734.463.872.042.043.1.098.172.16l.247.213.632.514.667.523.291.223a.926.926 0 01-1.119 1.473l-.835-.647-.47-.377-.308-.253-.279-.238a5.982 5.982 0 01-.32-.297c-.396-.404-.693-1.043-.989-1.804l-.198-.524-.271-.726-.176-.453-.46 5.588 2.666 2.76c.254.264.457.564.605.896l1.989 4.99a.921.921 0 01-1.613.863l-.058-.095-2.553-4.878-4.277-3.524a3.123 3.123 0 01-1.136-2.492l.012-.206.383-4.116c-.655.51-1.226 1.256-1.412 1.599a.994.994 0 00-.053.125l-.064.192-.073.25-.124.461-.133.535-.134.575-.18.826a.926.926 0 01-1.812-.376l.175-.811.114-.496.126-.516.133-.505c.135-.49.275-.917.4-1.145l.117-.199a5.95 5.95 0 01.166-.25l.212-.292c.585-.768 1.573-1.793 2.746-2.181zm-.624 9.988l.101.098.104.095 2.173 1.79-.162.608a3.114 3.114 0 01-.45.974l-.13.173-3.21 3.801a.924.924 0 01-1.534-1.005l.06-.105 2.847-4.252.201-2.177zM12.25 0a2.125 2.125 0 110 4.25 2.125 2.125 0 010-4.25z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2B; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-person-walking",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2A = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentPrepaidActivate {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M17.5 11a6.5 6.5 0 110 13 6.5 6.5 0 010-13zm0 1.5a5 5 0 100 10 5 5 0 000-10zM19 0v9.645a8.205 8.205 0 00-1.5-.145 7.94 7.94 0 00-2.57.43 2.5 2.5 0 00-2.257-1.924L12.5 8h-5a2.5 2.5 0 00-2.495 2.336L5 10.5v5a2.5 2.5 0 002.336 2.495L7.5 18h2.025a7.96 7.96 0 001.18 3.723l.18.277H4a3 3 0 01-2.995-2.824L1 19V6.5L7.5 0H19zm.655 15.215a.751.751 0 011.138.976l-.073.084-4 4-2.55-2.545a.751.751 0 01.98-1.133l.085.073 1.5 1.5 2.95-2.95-.03-.005zM12.5 9.5a1 1 0 01.993.883l.007.117v.08a8 8 0 00-3.889 5.635l-.041.285H7.5a1 1 0 01-.993-.883L6.5 15.5v-5a1 1 0 01.883-.993L7.5 9.5h5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M17.75 11.5c3.45 0 6.25 2.8 6.25 6.25S21.2 24 17.75 24s-6.25-2.8-6.25-6.25 2.8-6.25 6.25-6.25zM19 0v10.1c-.3-.037-.6-.075-.921-.091L17.75 10h-.25V1.5H8.1L2.5 7.1V19c0 .8.576 1.423 1.352 1.493L4 20.5h6.5c.16.44.352.848.576 1.224l.174.276H4a3.01 3.01 0 01-2.995-2.824L1 19V6.5L7.5 0H19zm1.85 15.55a.722.722 0 00-.965-.074l-.085.074-2.8 2.8-1.4-1.4c-.3-.3-.75-.3-1.05 0a.722.722 0 00-.074.965l.074.085L17 20.5l3.9-3.9c.3-.3.25-.75-.05-1.05zM12.5 8a2.473 2.473 0 012.495 2.333L15 10.5l-.324.126a6.996 6.996 0 00-.9.45l-.276.174v-.75c0-.51-.388-.935-.884-.993L12.5 9.5h-5c-.51 0-.935.388-.993.884L6.5 10.5v5c0 .51.388.935.884.993l.116.007h2.6c-.037.3-.075.6-.091.921L10 17.75V18H7.5a2.473 2.473 0 01-2.495-2.333L5 15.5v-5a2.473 2.473 0 012.333-2.495L7.5 8h5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2A; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-prepaid-activate",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2z = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentPriceTag {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12.445 1.535l8.78 1.3 1.295 8.78L12.215 21.92a3.052 3.052 0 01-4.153.155l-.167-.155-5.76-5.76a3.05 3.05 0 01-.133-4.179l.133-.141 10.31-10.305zM17.5 5.5a1 1 0 110 2 1 1 0 010-2z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12.445 1.535l8.78 1.3 1.295 8.78L12.215 21.92a3.052 3.052 0 01-4.153.155l-.167-.155-5.76-5.76a3.05 3.05 0 01-.133-4.179l.133-.141 10.31-10.305zm.525 1.59L3.195 12.9A1.543 1.543 0 002.74 14c0 .363.122.707.35.985l.105.115 5.765 5.76c.295.295.685.455 1.1.455.363 0 .707-.123.985-.35l.115-.105 9.77-9.77-1.03-6.935-6.93-1.03zM17.5 5.5a1 1 0 110 2 1 1 0 010-2z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2z; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-price-tag",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2y = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentRatings {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M22.614 9.215a1.713 1.713 0 00-1.51-1.184l-5.451-.399-2.065-5.061a1.713 1.713 0 00-1.592-1.07c-.702 0-1.327.42-1.592 1.07L8.339 7.633l-5.451.398c-.7.052-1.293.516-1.51 1.184a1.712 1.712 0 00.526 1.845l4.176 3.527-1.305 5.308a1.715 1.715 0 00.659 1.802c.567.413 1.32.44 1.917.07l4.645-2.881 4.646 2.881a1.716 1.716 0 002.575-1.871l-1.305-5.309 4.175-3.527a1.714 1.714 0 00.527-1.845", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M22.613 9.215a1.713 1.713 0 00-1.51-1.184l-5.451-.399-2.064-5.061a1.713 1.713 0 00-1.592-1.07c-.703 0-1.327.42-1.593 1.07L8.34 7.633l-5.452.398c-.7.052-1.292.516-1.51 1.184a1.712 1.712 0 00.526 1.845l4.176 3.527-1.304 5.308a1.715 1.715 0 00.658 1.802c.568.413 1.321.44 1.918.07l4.644-2.881 4.646 2.881a1.716 1.716 0 002.575-1.871l-1.305-5.309 4.176-3.527a1.714 1.714 0 00.526-1.845zm-1.494.699l-4.886 4.127 1.527 6.212c.03.119-.03.19-.084.23a.203.203 0 01-.244.009l-5.436-3.372-5.436 3.372a.206.206 0 01-.245-.009.206.206 0 01-.084-.23l1.527-6.211-4.886-4.128a.205.205 0 01-.067-.235.206.206 0 01.192-.151l6.38-.468 2.416-5.923a.205.205 0 01.203-.136c.067 0 .156.024.203.137l2.416 5.922 6.38.468a.206.206 0 01.192.151.206.206 0 01-.068.235z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2y; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-ratings",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2x = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentRoute {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M18 6a1.5 1.5 0 113 0 1.5 1.5 0 01-3 0m1.418 7.973l.087-.007.05-.087 3.405-5.873a4 4 0 10-6.92 0l2.632 4.54c-1.4.176-4.087.686-5.025 2.058a1.95 1.95 0 00-.258 1.718c.386 1.273 1.888 1.548 3.343 1.815 1.732.317 2.448.551 2.395 1.176-.117 1.402-5.689 1.639-9.544 1.679l-.872 1.505c6.69-.031 11.686-.382 11.911-3.059.175-2.083-2.019-2.484-3.62-2.778-.868-.158-2.057-.376-2.178-.773a.456.456 0 01.061-.436c.547-.801 2.94-1.338 4.533-1.478M7 12a2.5 2.5 0 11.002-5.002A2.5 2.5 0 017 12m4.596-7.096A6.475 6.475 0 007 3a6.475 6.475 0 00-4.596 1.904 6.498 6.498 0 00-1.027 7.856L7 22.458l5.623-9.698a6.498 6.498 0 00-1.027-7.856", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M18 6a1.5 1.5 0 113-.001A1.5 1.5 0 0118 6m1.42 7.973l.085-.007.05-.086 3.405-5.874a4.001 4.001 0 00-6.289-4.835 4.001 4.001 0 00-.632 4.835l2.632 4.54c-1.4.176-4.086.686-5.024 2.058a1.949 1.949 0 00-.258 1.718c.385 1.273 1.888 1.548 3.342 1.815 1.733.317 2.448.551 2.396 1.176-.118 1.401-5.689 1.639-9.544 1.679l-.873 1.505c6.69-.03 11.687-.382 11.912-3.059.174-2.083-2.019-2.484-3.62-2.777-.868-.159-2.057-.377-2.178-.774a.456.456 0 01.061-.436c.547-.801 2.94-1.338 4.534-1.478M7 7a2.5 2.5 0 10.001 5 2.5 2.5 0 000-5m4.325 5.008L7 19.467l-4.326-7.459a5.007 5.007 0 01.79-6.044A4.97 4.97 0 017 4.5c1.335 0 2.591.52 3.535 1.464a5.007 5.007 0 01.791 6.044m.27-7.104A6.48 6.48 0 007 3a6.498 6.498 0 00-5.623 9.76L7 22.458l5.623-9.698a6.5 6.5 0 00-1.027-7.856", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2x; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-route",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2w = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentRss {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M19 2H5a3 3 0 00-3 3v14a3 3 0 003 3h14a3 3 0 003-3V5a3 3 0 00-3-3zM7.22 18.5a1.725 1.725 0 110-3.45 1.725 1.725 0 010 3.45zm6.085-.5H11.76c.11-.408.167-.828.17-1.25A4.755 4.755 0 007.18 12a4.6 4.6 0 00-1.18.155v-1.54a6.13 6.13 0 011.18-.115 6.26 6.26 0 016.125 7.5zm4.545 0h-1.5a9.37 9.37 0 00.095-1.25A9.26 9.26 0 007.18 7.5 9.23 9.23 0 006 7.585v-1.5c.391-.051.785-.08 1.18-.085 5.935.006 10.744 4.815 10.75 10.75a10.29 10.29 0 01-.08 1.25z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M19 2a3.003 3.003 0 012.995 2.824L22 5v14a3.003 3.003 0 01-2.824 2.995L19 22H5a3.003 3.003 0 01-2.995-2.824L2 19V5a3.003 3.003 0 012.824-2.995L5 2h14zm0 1.5H5c-.776 0-1.42.598-1.493 1.356L3.5 5v14c0 .776.598 1.42 1.356 1.493L5 20.5h14c.776 0 1.42-.598 1.493-1.356L20.5 19V5c0-.776-.598-1.42-1.356-1.493L19 3.5zM7.22 15.06a1.72 1.72 0 110 3.44 1.72 1.72 0 010-3.44zm-.04-4.56a6.259 6.259 0 016.178 7.194l-.053.306H11.76c.105-.4.17-.815.17-1.25 0-2.62-2.13-4.75-4.75-4.75-.328 0-.643.038-.95.102l-.23.053v-1.54c.38-.075.775-.115 1.18-.115zm0-4.5c5.93 0 10.75 4.82 10.75 10.75 0 .283-.013.562-.037.838L17.85 18h-1.515c.055-.41.095-.825.095-1.25 0-5.1-4.15-9.25-9.25-9.25a8.19 8.19 0 00-.79.04L6 7.586V6.07c.39-.045.78-.07 1.18-.07z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2w; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-rss",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2v = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentShop {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 1a4.48 4.48 0 014.495 4.287l.005.213V7h4.45l.9 12.8c.05.8-.25 1.65-.8 2.25-.504.55-1.218.89-1.989.943L18.85 23H5.15c-.85 0-1.65-.35-2.2-.95a3.049 3.049 0 01-.805-2.039l.005-.211.9-12.8H7.5V5.5C7.5 3 9.5 1 12 1zM8.25 9.75a1 1 0 110 2 1 1 0 010-2zm7.5 0a1 1 0 110 2 1 1 0 010-2zM12 2.5a3.01 3.01 0 00-2.995 2.824L9 5.5V7h6V5.5c0-1.65-1.35-3-3-3z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 1a4.48 4.48 0 014.495 4.287l.005.213V7h4.45l.9 12.8c.05.8-.25 1.65-.8 2.25-.504.55-1.218.89-1.989.943L18.85 23H5.15c-.85 0-1.65-.35-2.2-.95a3.049 3.049 0 01-.805-2.039l.005-.211.9-12.8H7.5V5.5C7.5 3 9.5 1 12 1zm7.55 7.5H4.45l-.8 11.35c-.05.45.1.8.4 1.15.262.306.602.46.95.493l.15.007h13.7c.4 0 .8-.2 1.1-.5.214-.257.355-.588.391-.929l.009-.171-.8-11.4zM8.25 9.75a1 1 0 110 2 1 1 0 010-2zm7.5 0a1 1 0 110 2 1 1 0 010-2zM12 2.5a3.01 3.01 0 00-2.995 2.824L9 5.5V7h6V5.5c0-1.65-1.35-3-3-3z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2v; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-shop",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2u = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentSignal {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 10a2 2 0 01.902 3.78l-.152.07V22a.75.75 0 01-1.493.102L11.25 22v-8.15A2 2 0 0112 10zM3.65 3.65l1.5 1.5v.01a9.694 9.694 0 00-.206 13.487l.206.213-1.5 1.5C-.876 15.82-.952 8.521 3.42 3.887l.23-.237zm16.705-.005c4.52 4.54 4.596 11.83.23 16.463l-.23.237-1.5-1.5a9.694 9.694 0 00.206-13.487l-.206-.213 1.5-1.5zM6.5 6.5L8 8a5.685 5.685 0 00-.195 7.846L8 16.05l-1.5 1.5a7.825 7.825 0 01-.19-10.853L6.5 6.5zm11.025 0a7.825 7.825 0 01.168 10.8l-.193.2L16 16a5.685 5.685 0 00.202-7.812L16.025 8l1.5-1.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12.04 10.024c1.077 0 1.959.882 1.959 1.96a1.92 1.92 0 01-1.08 1.748l-.145.064v7.984a.753.753 0 01-.734.734.757.757 0 01-.728-.638l-.007-.096v-7.984a1.922 1.922 0 01-1.224-1.812c0-1.078.881-1.96 1.959-1.96zM4.056 4l1.078 1.078a9.799 9.799 0 00-.255 13.597l.206.215-1.029 1.028C-.276 15.634-.35 8.654 3.832 4.23L4.056 4zm15.967 0c4.284 4.332 4.358 11.313.222 15.69l-.222.228-1.028-1.028c3.75-3.75 3.819-9.811.208-13.647l-.208-.214L20.023 4zM6.848 6.792L7.877 7.82a5.813 5.813 0 00-1.715 4.164c0 1.475.564 2.863 1.529 3.96l.186.203-1.029 1.029a7.34 7.34 0 01-2.155-5.192c0-1.856.703-3.625 1.943-4.972l.212-.22zm10.384 0a7.34 7.34 0 012.155 5.192 7.337 7.337 0 01-1.944 4.971l-.211.22-1.029-1.028a5.813 5.813 0 001.714-4.163c0-1.475-.52-2.864-1.52-3.961l-.194-.203 1.029-1.028z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2u; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-signal",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2t = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentSimCard {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M21 1v19a3 3 0 01-3 3H6a3 3 0 01-3-3V7.5L9.5 1H21zm-6.5 8h-5A2.5 2.5 0 007 11.5v5A2.5 2.5 0 009.5 19h5a2.5 2.5 0 002.5-2.5v-5A2.5 2.5 0 0014.5 9zm-1 1.5a2 2 0 012 2v3a2 2 0 01-2 2h-3a2 2 0 01-2-2v-3a2 2 0 012-2h3z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M21 1v19a3.01 3.01 0 01-2.824 2.995L18 23H6a3.01 3.01 0 01-2.995-2.824L3 20V7.5L9.5 1H21zm-1.5 1.5h-9.4L4.5 8.1V20c0 .8.576 1.423 1.352 1.493L6 21.5h12c.8 0 1.423-.576 1.493-1.352L19.5 20V2.5zm-5 6.5a2.473 2.473 0 012.495 2.333L17 11.5v5a2.473 2.473 0 01-2.333 2.495L14.5 19h-5a2.473 2.473 0 01-2.495-2.333L7 16.5v-5a2.473 2.473 0 012.333-2.495L9.5 9h5zm0 1.5h-5c-.51 0-.935.388-.993.884L8.5 11.5v5c0 .51.388.935.884.993l.116.007h5c.51 0 .935-.388.993-.884l.007-.116v-5c0-.51-.388-.935-.884-.993L14.5 10.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2t; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-sim-card",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2s = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentSmile {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 1C5.925 1 1 5.925 1 12s4.925 11 11 11 11-4.925 11-11A11 11 0 0012 1zm3.5 6.5a1.5 1.5 0 110 3 1.5 1.5 0 010-3zm-7 0a1.5 1.5 0 110 3 1.5 1.5 0 010-3zm8.77 8.87c-1.305 1.99-3.225 3.13-5.27 3.13-2.045 0-3.965-1.14-5.27-3.13A.757.757 0 018 15.545C9 17.105 10.5 18 12 18s3-.895 4-2.455a.75.75 0 011.255.825h.015z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 1c6.1 0 11 4.9 11 11s-4.9 11-11 11S1 18.1 1 12 5.95 1 12 1zm0 1.5c-5.25 0-9.5 4.25-9.5 9.5s4.25 9.5 9.5 9.5 9.5-4.25 9.5-9.5-4.25-9.5-9.5-9.5zM6.95 15.35c.35-.25.8-.15 1.05.2C9 17.1 10.5 18 12 18s3-.9 4-2.45c.25-.35.7-.45 1.05-.2.35.2.45.65.2 1.05-1.3 2-3.25 3.15-5.25 3.15S8.05 18.4 6.75 16.4c-.25-.35-.15-.8.2-1.05zM8.5 7.5a1.5 1.5 0 110 3 1.5 1.5 0 010-3zm7 0a1.5 1.5 0 110 3 1.5 1.5 0 010-3z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2s; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-smile",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2r = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentSortIndicatorDown {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M6.584 9.5l5.417 5 5.416-5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M6.584 9.5l5.417 5 5.416-5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2r; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-sort-indicator-down",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2q = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentSortIndicatorMiniDown {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M7.667 10L12 14l4.334-4z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M7.667 10L12 14l4.334-4z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2q; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-sort-indicator-mini-down",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2p = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentSortIndicatorUp {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 9.5l-5.417 5h10.834z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 9.5l-5.417 5h10.834z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2p; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-sort-indicator-up",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2o = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentSortIndicatorUpMini {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 10l-4.332 4h8.666z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 10l-4.332 4h8.666z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2o; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-sort-indicator-up-mini",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2n = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentStatusInactive {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M19.187 17.395L6.605 4.814A8.938 8.938 0 0112.001 3c4.962 0 9 4.038 9 9 0 2.025-.681 3.89-1.814 5.395M3.001 12c0-2.037.688-3.912 1.833-5.422l12.589 12.588A8.938 8.938 0 0112.001 21c-4.963 0-9-4.038-9-9m9-11.5C5.659.5.501 5.659.501 12s5.158 11.5 11.5 11.5c6.341 0 11.5-5.159 11.5-11.5S18.342.5 12.001.5", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M19.22 18.159L5.842 4.78a9.453 9.453 0 016.159-2.28c5.238 0 9.5 4.261 9.5 9.5a9.448 9.448 0 01-2.281 6.159M2.501 12c0-2.35.862-4.499 2.28-6.159L18.159 19.22a9.448 9.448 0 01-6.158 2.281c-5.239 0-9.5-4.262-9.5-9.5m9.5-11c-6.075 0-11 4.925-11 11s4.925 11 11 11c6.074 0 11-4.925 11-11s-4.926-11-11-11", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2n; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-status-inactive",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2m = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentStatusRecurring {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M14.009 3.995A8.234 8.234 0 0120.249 12a8.2 8.2 0 01-3.034 6.393l-1.321-2.026-2.68 6.112 6.674.012-1.302-1.995A10.687 10.687 0 0022.749 12c0-4.944-3.345-9.232-8.134-10.43a1.25 1.25 0 00-.606 2.425M10.9 21.518a1.25 1.25 0 01-1.516.91A10.731 10.731 0 011.251 12c0-3.385 1.556-6.485 4.162-8.496L4.112 1.506l6.674.013-2.681 6.112-1.321-2.026A8.203 8.203 0 003.75 12a8.234 8.234 0 006.241 8.003 1.25 1.25 0 01.909 1.517", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M6.511 5.187l1.595 2.445 2.68-6.112-6.675-.013 1.578 2.42A10.228 10.228 0 001.75 12c0 4.761 3.367 8.968 8.008 10.004a.751.751 0 00.327-1.464C6.125 19.656 3.25 16.064 3.25 12a8.732 8.732 0 013.261-6.813M22.252 12c0-4.762-3.37-8.969-8.01-10.004a.75.75 0 00-.327 1.464c3.96.883 6.836 4.474 6.836 8.54 0 2.664-1.238 5.166-3.264 6.809l-1.59-2.44-2.682 6.111 6.675.012-1.579-2.42c2.445-1.921 3.94-4.9 3.94-8.072", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2m; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-status-recurring",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2l = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentStopwatch {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M14.5 1v1.5h-1.75v1.538a9.45 9.45 0 015.144 2.024l.265.218 1.311-1.31 1.06 1.06-1.31 1.311A9.453 9.453 0 0121.5 13.5c0 5.238-4.262 9.5-9.5 9.5-5.239 0-9.5-4.262-9.5-9.5 0-2.232.778-4.283 2.072-5.906l.209-.253L3.47 6.03l1.06-1.06 1.311 1.31a9.453 9.453 0 015.048-2.207l.361-.035V2.5H9.5V1h5zM12 7a6.5 6.5 0 016.496 6.267l.004.233H12V7z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M14.5 1v1.5h-1.75v1.538a9.45 9.45 0 015.144 2.024l.265.218 1.311-1.31 1.06 1.06-1.31 1.311A9.453 9.453 0 0121.5 13.5c0 5.238-4.262 9.5-9.5 9.5-5.239 0-9.5-4.262-9.5-9.5 0-2.232.778-4.283 2.072-5.906l.209-.253L3.47 6.03l1.06-1.06 1.311 1.31a9.453 9.453 0 015.048-2.207l.361-.035V2.5H9.5V1h5zM12 5.5c-4.411 0-8 3.589-8 8s3.589 8 8 8 8-3.589 8-8-3.589-8-8-8zM12 7a6.5 6.5 0 016.496 6.267l.004.233H12V7z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2l; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-stopwatch",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2k = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentSupportChat {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12.002 1c5.798 0 10.5 4.701 10.5 10.5S17.8 22 12.002 22c-1.078 0-2.113-.17-3.09-.474l-.365-.12-2.292 1.3a1.74 1.74 0 01-.863.234c-1.034 0-1.94-.952-1.72-2.08l.033-.142.583-2.11A10.452 10.452 0 011.502 11.5c0-5.799 4.701-10.5 10.5-10.5zm0 13.498a1.25 1.25 0 100 2.5 1.25 1.25 0 000-2.5zm.1-7.98c-1.882 0-2.824 1.286-2.967 2.642l-.013.156h1.813c.09-.737.511-1.158 1.167-1.158.69 0 1.12.435 1.12 1.135 0 .52-.32.866-.708 1.195l-.475.391c-.472.398-.902.851-.96 1.627l-.008.184v.604h1.748v-.333c0-.466.255-.812.586-1.138l.23-.215.345-.313c.53-.492 1.048-1.085 1.048-2.108 0-1.546-1.23-2.67-2.926-2.67z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 1C6.201 1 1.5 5.701 1.5 11.5c0 2.745 1.063 5.236 2.787 7.108l-.583 2.11c-.328 1.189.61 2.222 1.687 2.222.285 0 .58-.073.863-.234l2.292-1.3C9.63 21.786 10.788 22 12 22c5.799 0 10.5-4.701 10.5-10.5S17.799 1 12 1zm0 19.5c-.994 0-1.99-.172-2.96-.51l-.642-.223-2.884 1.635a.249.249 0 01-.244.003.244.244 0 01-.12-.287l.805-2.914-.565-.613A8.971 8.971 0 013 11.5c0-4.963 4.037-9 9-9 4.962 0 9 4.037 9 9 0 4.962-4.038 9-9 9zm.101-13.982c-1.955 0-2.896 1.387-2.98 2.798h1.812c.09-.737.512-1.158 1.168-1.158.69 0 1.119.435 1.119 1.135 0 .624-.46.997-.947 1.392-.591.481-1.203.978-1.203 2.005v.604h1.747v-.333c0-.622.454-1.029.935-1.461.598-.537 1.275-1.144 1.275-2.313 0-1.546-1.23-2.67-2.926-2.67zM12 14.498a1.25 1.25 0 100 2.5 1.25 1.25 0 000-2.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2k; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-support-chat",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2j = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentSustainable {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M22.935 8.275c-.175-.045-4.37-1.12-7.32 1.415a7.77 7.77 0 00-2.63 6l-1 1.065v-4.46c0-3.5-1.195-7.855-10.5-10.415L.54 1.62v1c0 7.675 1.46 10.81 9.96 13.655v4.945a.75.75 0 101.5 0v-2.28l2.095-2.26a12.5 12.5 0 001.465.1 8.03 8.03 0 004.925-1.5c2.11-1.585 3-3.47 3-6.29v-.57l-.55-.145z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M15.617 9.691c-2.509 2.16-2.653 5.073-2.632 5.981L12 16.735v-4.44c0-2.173-.46-4.672-3.031-6.867C6.159 3.03 1.991 2.021.538 1.622c0 4.916.263 7.938 2.346 10.359 1.49 1.73 3.868 3.04 7.616 4.293v4.944a.75.75 0 101.5 0v-2.277l2.097-2.262c.5.06.992.099 1.463.099 1.942 0 3.621-.503 4.928-1.487 2.847-2.146 3.006-4.52 3.006-6.87-4.493-1.189-6.994.51-7.877 1.27zm-5.117 5c-3.237-1.121-5.266-2.253-6.522-3.768C2.533 9.18 2.11 6.93 2.047 3.607c2.774.855 4.638 1.87 5.891 2.918 2.562 2.144 2.562 4.428 2.562 5.77v2.396zm9.085-.598c-1.265.954-3.015 1.34-5.095 1.13.05-.964.378-2.907 2.106-4.395 1.777-1.53 4.267-1.378 5.381-1.213-.119 1.98-.837 3.306-2.392 4.479z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2j; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-sustainable",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2i = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentTariffs {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M21.061 2.836l-8.62-1.274L2.346 11.657a2.988 2.988 0 000 4.232l5.643 5.662a2.993 2.993 0 004.256 0l10.075-10.11-1.259-8.605zm-6.343 10.52l-1.087-1.087a1.043 1.043 0 00-.078-1.43c-.46-.46-1.01-.49-1.734-.034l1.112 1.112-.764.764-1.2-1.2-.191.19-.196.202 1.2 1.2-.764.759-1.112-1.097c-.446.715-.422 1.263.039 1.724.38.4 1.006.436 1.43.083l1.087 1.087a2.586 2.586 0 01-3.497-.19c-1.023-1.024-1.033-2.386-.117-3.762l-.49-.466.764-.764.382.382.196-.2.191-.191-.377-.382.774-.75.49.465c1.38-.92 2.733-.92 3.766.113a2.581 2.581 0 01.176 3.473zm3.502-6.283a.98.98 0 11-1.36-1.411.98.98 0 011.36 1.41z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12.45 1.55l8.75 1.3 1.3 8.75-10.3 10.3c-.6.6-1.4.9-2.15.9a3.071 3.071 0 01-1.982-.744L7.9 21.9l-5.75-5.75c-1.154-1.106-1.198-2.951-.133-4.158l.133-.142 10.3-10.3zm.5 1.6L3.2 12.9a1.572 1.572 0 00-.105 2.083l.105.117 5.75 5.75c.3.3.7.45 1.1.45.35 0 .7-.115.983-.345l.117-.105 9.8-9.7L19.9 4.2l-6.95-1.05zm-2.2 6.75c1.342-.91 2.637-.948 3.667.018l.133.132c.957.909 1.09 2.23.312 3.392l-.112.158-1.1-1.1c.35-.55.3-1.05-.1-1.45-.42-.467-.927-.498-1.603-.134L11.8 11l1.15 1.15-.8.8-1.2-1.2-.4.4 1.2 1.2-.8.8L9.8 13c-.45.7-.4 1.3.05 1.75.37.37.824.44 1.324.174l.126-.074 1.1 1.1c-1.2.85-2.6.75-3.55-.2-.957-1.004-1.044-2.329-.218-3.667l.118-.183-.5-.5.8-.8.4.4.4-.4-.4-.4.8-.8.5.5zm6.85-4.5c.257 0 .478.073.63.22l.07.08c.4.4.4 1.05 0 1.45-.2.2-.45.3-.7.3-.25 0-.5-.1-.7-.3-.4-.4-.4-1.05 0-1.45.2-.2.45-.3.7-.3z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2i; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-tariffs",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2h = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentThreats {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 .998c5.171 0 9.377 4.205 9.377 9.376a9.297 9.297 0 01-3.141 6.986l-.236.203V20a3.003 3.003 0 01-2.823 2.995L15 23h-.502v-3.014h-1.5V23h-1.997v-3.014h-1.5V23H9a3.003 3.003 0 01-2.994-2.824L6 20v-2.438a9.303 9.303 0 01-3.376-7.189c0-5.17 4.206-9.375 9.377-9.375zM13 15h-2v2.5h2V15zm2.5-5a2 2 0 100 4 2 2 0 000-4zm-7 0a2 2 0 100 4 2 2 0 000-4z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 .998c-5.17 0-9.376 4.205-9.376 9.375A9.303 9.303 0 006 17.563V20c0 1.654 1.346 3 3 3h6c1.654 0 3-1.346 3-3v-2.438a9.304 9.304 0 003.377-7.188c0-5.17-4.206-9.377-9.377-9.377zm4.792 15.61l-.292.226V20c0 .827-.673 1.5-1.5 1.5h-.5V19H13v2.5h-2V19H9.5v2.5H9c-.827 0-1.5-.673-1.5-1.5v-3.166l-.292-.226c-1.96-1.51-3.084-3.783-3.084-6.235 0-4.342 3.533-7.875 7.876-7.875s7.877 3.532 7.877 7.875c0 2.453-1.124 4.725-3.085 6.236zM8.5 10a2 2 0 100 4 2 2 0 000-4zm7 0a2 2 0 100 4 2 2 0 000-4zM11 17.5h2V15h-2v2.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2h; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-threats",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2g = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentTodoList {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M3.938 3.507a4.058 4.058 0 00-.034.29l-.006.15v3.46h10.836v-3.46c0-.1-.008-.199-.02-.295l-.02-.145h3.438v7.171c-.105-.005-.209-.016-.315-.016-3.438 0-6.314 2.428-7.017 5.66l-.047.237H8.751a.754.754 0 00-.735.735c0 .36.288.677.638.728l.097.007h1.89a7.167 7.167 0 002.587 5.338l.213.171H3.438a2.947 2.947 0 01-2.933-2.766L.5 20.6V3.507h3.438zm13.879 8.655a5.687 5.687 0 11.002 11.374 5.687 5.687 0 01-.002-11.374zm2.952 3.716a.693.693 0 00-.926-.071l-.082.071-2.688 2.688-1.344-1.344a.696.696 0 00-1.008 0 .693.693 0 00-.071.926l.071.082 2.352 2.4 3.744-3.744c.288-.288.24-.72-.048-1.008zm-15.002.651a.75.75 0 100 1.5.75.75 0 000-1.5zm0-5.987a.75.75 0 100 1.5.75.75 0 000-1.5zm7.467.01H8.751a.753.753 0 00-.735.734c0 .36.288.678.638.729l.097.007h4.483a.754.754 0 00.735-.736.757.757 0 00-.638-.727l-.097-.007zM7.846 1.988c0-.882.833-1.617 1.763-1.469.641.136 1.11.7 1.17 1.372l.006.145v.442h.98a1.44 1.44 0 011.462 1.324l.007.145v1.96H5.398v-1.96a1.44 1.44 0 011.324-1.462l.145-.007h.979v-.49z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M20.805 16.857l-3.744 3.744-2.352-2.4a.696.696 0 010-1.008.696.696 0 011.008 0l1.344 1.344 2.688-2.688a.696.696 0 011.008 0c.288.288.336.72.048 1.008zm-3-4.724a5.687 5.687 0 000 11.375 5.688 5.688 0 100-11.375zM5.755 18a.75.75 0 100-1.5.75.75 0 000 1.5zm0-5.987a.75.75 0 100-1.5.75.75 0 000 1.5zM12 22.041H3.426a1.444 1.444 0 01-1.47-1.47V4.948h1.96v-.98c0-.147 0-.342.049-.49H.488v17.093a2.947 2.947 0 002.938 2.938H13.43A7.236 7.236 0 0112 22.041zm1.222-18.123c0-.832-.637-1.469-1.47-1.469h-.98v-.442c0-.734-.488-1.37-1.175-1.517-.93-.148-1.763.587-1.763 1.47v.49h-.98c-.832 0-1.468.636-1.468 1.468v1.96h7.836v-1.96zm1.47 1.03h1.959v5.787c.377-.062.76-.102 1.154-.102.106 0 .21.011.315.016V3.48h-3.478c.05.147.05.342.05.49v.98zM8.739 16.53a.754.754 0 00-.735.735c0 .392.343.735.735.735h1.888c-.002-.06-.01-.119-.01-.179 0-.442.047-.87.123-1.29H8.739zm0-6.007a.753.753 0 00-.735.734c0 .393.343.736.735.736h4.483a.754.754 0 00.735-.736.753.753 0 00-.735-.734H8.739z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2g; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-todo-list",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2f = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentTransport {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M6.5 15.5C7.9 15.5 9 16.6 9 18s-1.1 2.5-2.5 2.5S4 19.4 4 18s1.1-2.5 2.5-2.5zm12.5 0c1.4 0 2.5 1.1 2.5 2.5s-1.1 2.5-2.5 2.5-2.5-1.1-2.5-2.5 1.1-2.5 2.5-2.5zm0 1.5c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zM6.5 17c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zM17 3.5v3h4.75c.267 0 .533.158.66.404l.04.096 1.25 3.75c.167.458.264.951.292 1.45l.008.3V18h-1.5c0-1.96-1.54-3.5-3.5-3.5a3.463 3.463 0 00-3.495 3.305L15.5 18H10c0-1.96-1.54-3.5-3.5-3.5a3.463 3.463 0 00-3.495 3.305L3 18a3.01 3.01 0 01-2.995-2.824L0 15V3.5h17zM20.5 9H18v4h3.5v-.5l-.01-.233a3.216 3.216 0 00-.089-.544l-.051-.173L20.5 9z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M19 15.5c1.4 0 2.5 1.1 2.5 2.5s-1.1 2.5-2.5 2.5-2.5-1.1-2.5-2.5 1.1-2.5 2.5-2.5zm-12.5 0C7.9 15.5 9 16.6 9 18s-1.1 2.5-2.5 2.5S4 19.4 4 18s1.1-2.5 2.5-2.5zM19 17c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zM6.5 17c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm9.35-.5a3.833 3.833 0 00-.341 1.267L15.5 18H10c0-.471-.073-.906-.252-1.304L9.65 16.5h6.2zM17 3.5v3h4.75c.267 0 .533.158.66.404l.04.096 1.25 3.75c.167.458.264.951.292 1.45l.008.3V18h-1.5v-5.5c0-.32-.032-.672-.122-1.005l-.078-.245L21.2 8H17v6c0 .4-.35.75-.75.75a.772.772 0 01-.743-.651L15.5 14V5h-14v10c0 .8.576 1.423 1.352 1.493L3 16.5h.35c-.2.45-.35.95-.35 1.5a3.01 3.01 0 01-2.995-2.824L0 15V3.5h17zM20.5 9l.85 2.55c.075.225.122.478.14.717l.01.233v.5H18V9h2.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2f; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-transport",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2e = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentUnlock {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M7 11V7a5 5 0 0110 0h1.5a6.5 6.5 0 10-13 0v4H3v9.5a3 3 0 003 3h12a3 3 0 003-3V11H7zm6 6.61v1.89h-2v-1.89a1.5 1.5 0 112 0z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 .5c2.3 0 4.45 1.25 5.6 3.2a6.4 6.4 0 01.893 2.986L18.5 7H17c0-.9-.25-1.8-.7-2.55C15.4 2.95 13.75 2 12 2 9.322 2 7.119 4.133 7.005 6.784L7 7v4h14v9.5a3.01 3.01 0 01-2.824 2.995L18 23.5H6a3.01 3.01 0 01-2.995-2.824L3 20.5V11h2.5V7C5.5 3.4 8.4.5 12 .5zm7.5 12h-15v8c0 .8.576 1.423 1.352 1.493L6 22h12c.8 0 1.423-.576 1.493-1.352l.007-.148v-8zM12 15c.85 0 1.5.65 1.5 1.5 0 .4-.158.76-.404 1.011L13 17.6v1.9h-2v-1.9c-.3-.25-.5-.65-.5-1.1 0-.85.65-1.5 1.5-1.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2e; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-unlock",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2d = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentVoucher {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M4.5 3v2H6V3h3v2h1.5V3h3v2H15V3h3v2h1.5V3H23v3.5h-2V8h2v3h-2v1.5h2v3h-2V17h2v.5a3 3 0 01-2.824 2.995L20 20.5h-.5v-2H18v2h-3v-2h-1.5v2h-3v-2H9v2H6v-2H4.5v2H4a3 3 0 01-2.995-2.824L1 17.5V17h2v-1.5H1v-3h2V11H1V8h2V6.5H1V3h3.5zm10.295 8.945a2.25 2.25 0 100 4.5 2.25 2.25 0 000-4.5zm.77-4.635H13.93l-5.635 9h1.64l5.63-9zm-.755 5.905a1 1 0 010 1.945.975.975 0 01-.116-1.93l.116-.015zM9.085 7.15a2.25 2.25 0 00-.03 4.5 2.235 2.235 0 002.27-2.245 2.25 2.25 0 00-2.24-2.255zm-.03 1.28a.92.92 0 01.919.849l.001.126a.915.915 0 11-1.826.113l.001-.113a.92.92 0 01.905-.975z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M2.5 17v.5c0 .8.576 1.423 1.352 1.493L4 19h.5v1.5H4a3.01 3.01 0 01-2.995-2.824L1 17.5V17h1.5zM18 19v1.5h-3V19h3zm5-2v.5a3.01 3.01 0 01-2.824 2.995L20 20.5h-.5V19h.5c.8 0 1.423-.576 1.493-1.352l.007-.148V17H23zm-9.5 2v1.5h-3V19h3zM9 19v1.5H6V19h3zm5.95-7.1c1.3 0 2.35 1 2.35 2.3 0 1.3-1.05 2.35-2.35 2.35S12.6 15.5 12.6 14.2s1.05-2.3 2.35-2.3zM15.8 7l-5.9 9.5H8.15L14.1 7h1.7zM2.5 12.5v3H1v-3h1.5zm20.5 0v3h-1.5v-3H23zm-8.05.7c-.55 0-.95.45-.95 1s.4 1 .95 1c.55 0 .95-.4.95-1 0-.55-.4-1-.95-1zm-5.9-6.25c1.3 0 2.35 1.05 2.35 2.35s-1.05 2.3-2.35 2.3-2.35-1-2.35-2.3c0-1.3 1.05-2.35 2.35-2.35zM2.5 8v3H1V8h1.5zM23 8v3h-1.5V8H23zM9 8.25c-.5 0-.9.45-.95 1 0 .55.4 1 .95 1 .55 0 .95-.45.95-1s-.4-1-.95-1zM23 3v3.5h-1.5v-2h-2V3H23zM4.5 3v1.5h-2v2H1V3h3.5zM18 3v1.5h-3V3h3zM9 3v1.5H6V3h3zm4.5 0v1.5h-3V3h3z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2d; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-voucher",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2c = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentWaiting {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 1.005c.444 0 .75.35.75.745 0 .402-.329.75-.75.75-5.239 0-9.5 4.261-9.5 9.5 0 5.238 4.261 9.5 9.5 9.5 5.238 0 9.5-4.262 9.5-9.5 0-.2.08-.39.22-.53.276-.28.78-.28 1.06 0 .14.14.22.335.22.53 0 6.066-4.934 11-11 11S1 18.066 1 12 5.934 1.005 12 1.005zm0 2.98a.75.75 0 01.743.649l.007.101v6.516l4.852.005a.75.75 0 01.1 1.493l-.103.006-6.349-.006V4.735a.75.75 0 01.75-.75zm9.71 4.635a.75.75 0 01.384 1.45.745.745 0 01-.915-.53.747.747 0 01.531-.92zM20.5 6.225a.746.746 0 011.025.275.744.744 0 01-.27 1.02.743.743 0 01-1.025-.27.745.745 0 01.27-1.025zM18.715 4.22a.76.76 0 011.065 0c.29.295.29.77 0 1.06-.15.15-.34.22-.53.22a.838.838 0 01-.51-.194.699.699 0 01-.239-.482.759.759 0 01.214-.604zm-2.24-1.475a.751.751 0 011.3.755.744.744 0 01-1.025.27.755.755 0 01-.275-1.025zm-2.546-.84a.751.751 0 011.45.385.755.755 0 01-.38.474.754.754 0 01-.938-.208.749.749 0 01-.132-.651z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 1.005c.444 0 .75.35.75.745 0 .402-.329.75-.75.75-5.239 0-9.5 4.261-9.5 9.5 0 5.238 4.261 9.5 9.5 9.5 5.238 0 9.5-4.262 9.5-9.5 0-.2.08-.39.22-.53.276-.28.78-.28 1.06 0 .14.14.22.335.22.53 0 6.066-4.934 11-11 11S1 18.066 1 12 5.934 1.005 12 1.005zm0 2.98a.75.75 0 01.743.649l.007.101v6.516l4.852.005a.75.75 0 01.1 1.493l-.103.006-6.349-.006V4.735a.75.75 0 01.75-.75zm9.71 4.635a.75.75 0 01.384 1.45.745.745 0 01-.915-.53.747.747 0 01.531-.92zM20.5 6.225a.746.746 0 011.025.275.744.744 0 01-.27 1.02.743.743 0 01-1.025-.27.745.745 0 01.27-1.025zM18.715 4.22a.76.76 0 011.065 0c.29.295.29.77 0 1.06-.15.15-.34.22-.53.22a.838.838 0 01-.51-.194.699.699 0 01-.239-.482.759.759 0 01.214-.604zm-2.24-1.475a.751.751 0 011.3.755.744.744 0 01-1.025.27.755.755 0 01-.275-1.025zm-2.546-.84a.751.751 0 011.45.385.755.755 0 01-.38.474.754.754 0 01-.938-.208.749.749 0 01-.132-.651z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2c; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-waiting",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2b = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentWallet {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M15.7.225L16.625 3H20.5v2H22v6h-6a2.5 2.5 0 00-.164 4.995L16 16h6v3a3 3 0 01-2.824 2.995L19 22H5a3 3 0 01-2.995-2.824L2 19V6a3 3 0 012.824-2.995L5 3h4.535L15.7.225zM22 12.5v2h-6a1 1 0 01-.117-1.993L16 12.5h6zM14.8 2.275L8.745 5h6.965l-.91-2.725z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M20.5 5V3h-3.9L15.7.25 9.55 3H5C3.35 3 2 4.35 2 6v13c0 1.65 1.35 3 3 3h14c1.65 0 3-1.35 3-3V5h-1.5zm-4.8 0H8.75l6.05-2.75.9 2.75zm4.8 9.5H16c-.55 0-1-.45-1-1s.45-1 1-1h4.5v2zM16 11c-1.4 0-2.5 1.1-2.5 2.5S14.6 16 16 16h4.5v3c0 .85-.65 1.5-1.5 1.5H5c-.85 0-1.5-.65-1.5-1.5V6.5h17V11H16z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2b; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-wallet",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
// Expected content: boolean, eg `true`
// Options
// style?: string 'switch' | 'checkbox'
// editable?: boolean = false
const CheckboxCell = {
  defaults: {
    sortBy: 'number',
  },
  getLongestContent({ rows, columnIndex }) {
    // Skip check as content width is always the same
    return rows[0][columnIndex];
  },
  render: ({ field, content, component, rowIndex, columnIndex }) => {
    const { style = 'checkbox', editable = false, label } = field;
    const props = {
      checked: content,
      disabled: !editable,
      label,
    };
    if (editable) {
      props.onScaleChange = (ev) => {
        const { value } = ev.detail;
        // Update rows data
        component.rows[rowIndex][columnIndex] = value;
        // Trigger event
        component.triggerEditEvent(value, rowIndex, columnIndex);
      };
    }
    switch (style) {
      case 'switch':
        return hAsync("scale-switch", Object.assign({ size: "small" }, props));
      default:
        // 'checkbox'
        return hAsync("scale-checkbox", Object.assign({}, props));
    }
  },
};

/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
// Expected: date/time string, eg '10:23:00'
// TODO: see if this is even worth it. It may help with sorting/filtering?
// work out format requirements - as date/time formatting is heavy eg moment.js
// const { inputFormat, outputFormat } = field;
// inputFormat: 'HH:mm:ss', // ['timestamp', '']
// outputFormat: 'HH:mm',
const DateCell = {
  defaults: {
    sortBy: 'date',
  },
  render: ({ content, isAutoWidthCheck }) => {
    let value = content;
    // Render all digits with 8s as they're the widest
    if (isAutoWidthCheck) {
      value = value.replace(/[0-9]/g, '8');
    }
    return hAsync("p", { class: `scl-body` }, value);
  },
};

/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
// Expected content: an email string (eg: 'mailto:example@domain.com)
const EmailCell = {
  defaults: {
    sortBy: 'text',
  },
  render: ({ content }) => {
    // Remove protocol (mailto:)
    const emailNoProtocol = content.replace(/^mailto:/i, '');
    return hAsync("scale-link", { href: content }, emailNoProtocol);
  },
};

/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
// Expected content: number, eg 10230.32
// Options
// style?: string 'bar' | 'progress'
// min?: number 0
// max?: number 100
const GraphCell = {
  defaults: {
    sortBy: 'number',
  },
  render: ({ field, content }) => {
    const { style = 'progress', min = 0, max = 100 } = field;
    // Convert content to 0>100 range for progress bar
    const progress = parseFloat((((content - min) / (max - min)) * 100).toPrecision(String(content).replace('.', '').length));
    // I really don't know the difference between bar and progress
    switch (style) {
      case 'bar':
        return (hAsync("div", { class: `tbody__bar-cell` },
          hAsync("scale-progress-bar", { class: "data-grid-progress-bar", "aria-hidden": "true", percentage: progress, 
            // showStatus={true}
            mute: true }),
          hAsync("p", { class: `scl-body` }, content)));
      default:
        // progress
        return (hAsync("scale-progress-bar", { class: "data-grid-progress-bar", percentage: progress, showStatus: true, mute: true }));
    }
  },
};

/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
var __rest$1 = (undefined && undefined.__rest) || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
// Expected content: a url string (eg: 'https://sample.com')
const LinkCell = {
  defaults: {
    sortBy: 'text',
  },
  render: ({ content }) => {
    if (typeof content === 'string') {
      // Remove protocol (http/https)
      const urlNoProtocol = content.replace(/^https?\:\/\//i, '');
      return (hAsync("scale-link", { href: content, target: "_blank" }, urlNoProtocol));
    }
    else {
      // if the type of content is not a string, the content is handled as
      // object of text and props (spread) which are passed as attributes to
      // the scale-link element
      const { text } = content, props = __rest$1(content, ["text"]);
      return hAsync("scale-link", Object.assign({}, props), text);
    }
  },
};

/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
// Expected content: HTMLElement
const HTMLCell = {
  defaults: {},
  getLongestContent({ rows, columnIndex }) {
    // Skip check as content width is always the same
    return rows[0][columnIndex];
  },
  render: ({ content, component }) => {
    return (content && (hAsync("scale-button", { variant: "secondary", size: "small", "icon-only": true, "inner-aria-label": `Activate to ${content.isExpanded ? 'collapse' : 'expand'} content`, onClick: () => {
        content.isExpanded = !content.isExpanded;
        component.forceRender++;
      } }, content.isExpanded ? (hAsync("scale-icon-navigation-collapse-up", { size: 14 })) : (hAsync("scale-icon-navigation-collapse-down", { size: 14 })))));
  },
};

/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
// Expected content: number or string, eg `120.0`
// Options
// precision
// decimalSymbol
// groupSymbol
// editable?: boolean = false / removed/deprecated in 3.0.0-beta.135
const NumberCell = {
  defaults: {
    textAlign: 'right',
    sortBy: 'number',
  },
  render: ({ field, content, 
  // component,
  // rowIndex,
  // columnIndex,
  isAutoWidthCheck, }) => {
    const { precision = Infinity, decimalSymbol = '.', groupSymbol = '', prefix = '', suffix = '', } = field;
    // Input component doesn't expand with content, so need to return a fake element that simulates width
    // if (isAutoWidthCheck && editable) {
    //   return (
    //     <p class={`scl-body`} style={{ paddingRight: '26px' }}>
    //       {content}
    //     </p>
    //   );
    // }
    // const step = `0.${(String(content).split('.')[1] || '')
    //   .split('')
    //   .map(() => '0')}`.replace(/,/g, '');
    // if (editable) {
    //   const props = {
    //     type: 'number',
    //     size: 'small',
    //     step: step.slice(0, step.length - 1) + '1',
    //     value: String(content),
    //     styles: /* css */ `.text-field__control {
    //       text-align: right !important;
    //     }`,
    //     label,
    //   } as any;
    //   // TODO: use blur to reduce number of changes - but doesn't pass value
    //   props.onScaleChange = ({ detail }) => {
    //     const { value } = detail;
    //     // Update rows data
    //     component.rows[rowIndex][columnIndex] = value;
    //     // Trigger event
    //     component.triggerEditEvent(value, rowIndex, columnIndex);
    //   };
    //   return <scale-text-field {...props}></scale-text-field>;
    // } else {
    // }
    let value = content;
    // Render all digits with 8s as they're the widest
    if (isAutoWidthCheck) {
      value = Number(value.toString().replace(/[0-9]/g, '8'));
    }
    // Refine to requested decimal precision
    if (precision < 100) {
      value = Number(value).toFixed(precision);
    }
    else {
      value = value.toString();
    }
    // Replace/add requested delimiters
    if (groupSymbol || decimalSymbol !== '.') {
      const parts = value.split('.');
      if (groupSymbol) {
        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, groupSymbol);
      }
      value = parts.join(decimalSymbol);
    }
    // Add prefix/suffix
    if (prefix || suffix) {
      value = prefix + value + suffix;
    }
    return (hAsync("p", { class: `scl-body`, style: { textAlign: 'right' } }, value));
  },
};

/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
// Expected: string
// Options
// options: string array
// editable?: boolean = false
const SelectCell = {
  defaults: {
    sortBy: 'text',
  },
  render: ({ field, content, component, rowIndex, columnIndex, isAutoWidthCheck, }) => {
    const { options, editable = false, label } = field;
    // Select component doesn't expand with content, so need to return a fake element that simulates width
    if (isAutoWidthCheck) {
      return (hAsync("p", { class: `scl-body`, style: { paddingRight: '56px' } }, content));
    }
    const props = {
      disabled: !editable,
      value: content,
      label,
    };
    if (editable) {
      props.onScaleChange = ({ detail }) => {
        const { value } = detail;
        // Update rows data
        component.rows[rowIndex][columnIndex] = value;
        // Trigger event
        component.triggerEditEvent(value, rowIndex, columnIndex);
      };
    }
    return (hAsync("scale-dropdown-select", Object.assign({ floatingStrategy: "fixed" }, props), options.map((option) => {
      return (hAsync("scale-dropdown-select-item", { value: option }, option));
    })));
  },
};

/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
// Expected: comma delimited string (eg 'one, two, three')
const TagsCell = {
  defaults: {
    sortBy: 'text',
  },
  render: ({ content }) => {
    let tags = [];
    // for backwards compatibility
    if (typeof content === 'string') {
      tags = content.split(',').map((el) => ({
        content: el,
        color: 'standard',
      }));
    }
    else {
      tags = content;
    }
    return (hAsync("ul", { class: `tbody__tag-list` }, tags.map((tag) => (hAsync("li", null,
      hAsync("scale-tag", { size: "small", type: "strong", color: tag.color }, tag.content))))));
  },
};

/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
// Expected content: a telephone number  string (eg: 'tel:+491234567')
const TelephoneCell = {
  defaults: {
    sortBy: 'text',
  },
  render: ({ content }) => {
    // Remove protocol (tell:)
    const telephoneNoProtocol = content.replace(/^tel:/i, '');
    return hAsync("scale-link", { href: content }, telephoneNoProtocol);
  },
};

/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
// Expected content: unformated string 'this is a string'
// Options
// variant?: string 'body' | 'h6' | 'h5' | etc
// editable?: boolean = false
// iconPrefix?: string eg 'action-download'
// iconSuffix?: string eg 'action-download'
const TextCell = {
  defaults: {
    sortBy: 'text',
  },
  render: ({ field, content, component, rowIndex, columnIndex, isAutoWidthCheck, }) => {
    const { variant = 'body', editable = false, iconPrefix, iconSuffix, label, } = field;
    // Input component doesn't expand with content, so need to return a fake element that simulates width
    if (isAutoWidthCheck && editable) {
      return (hAsync("p", { class: `scl-body`, style: { paddingRight: '26px' } }, content));
    }
    if (editable) {
      const props = {
        type: 'text',
        value: content,
        label,
      };
      // TODO: use blur to reduce number of changes - but doesn't pass value
      // TODO: apply variant and iconPrefix/Suffix to editable text
      props.onScaleChange = ({ detail }) => {
        const { value } = detail;
        // Update rows data
        component.rows[rowIndex][columnIndex] = value;
        // Trigger event
        component.triggerEditEvent(value, rowIndex, columnIndex);
      };
      return hAsync("scale-text-field", Object.assign({}, props));
    }
    else {
      let value = content;
      // Add an extra couple of characters for the width check to avoid clipping
      if (isAutoWidthCheck) {
        value += 'w';
      }
      return (hAsync("div", { class: `tbody__text-cell` },
        iconPrefix && (hAsync("span", { class: `tbody__text-cell-prefix` }, hAsync(`scale-icon-${iconPrefix}`))),
        hAsync("p", { class: `scl-${variant}` }, value),
        iconSuffix && (hAsync("span", { class: `tbody__text-cell-suffix` }, hAsync(`scale-icon-${iconSuffix}`)))));
    }
  },
};

/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
var __rest = (undefined && undefined.__rest) || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
const ActionsCell = {
  defaults: {},
  render: ({ content }) => {
    return (hAsync("div", { class: `tbody__actions` }, content.map((action) => {
      const { label } = action, props = __rest(action, ["label"]);
      if (typeof label === 'object' && '__html' in label) {
        return (hAsync("scale-button", Object.assign({ size: "small", innerHTML: label.__html }, props)));
      }
      return (hAsync("scale-button", Object.assign({ size: "small" }, props), label));
    })));
  },
};

/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
const CELL_TYPES = {
  checkbox: CheckboxCell,
  date: DateCell,
  email: EmailCell,
  graph: GraphCell,
  html: HTMLCell,
  link: LinkCell,
  number: NumberCell,
  select: SelectCell,
  tags: TagsCell,
  telephone: TelephoneCell,
  text: TextCell,
  actions: ActionsCell,
};
// Fallback if no type set on field
const DEFAULT_CELL_TYPE = 'text';
// Common cell defaults, can be overridden in cell type classes
const CELL_DEFAULTS = {
  maxWidth: Infinity,
  minWidth: 20,
  resizable: true,
  sortable: false,
  sortBy: 'text',
  textAlign: 'left',
  visible: true,
  width: 'auto',
};

function _typeof(o) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, _typeof(o);
}

function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }
  var number = Number(dirtyNumber);
  if (isNaN(number)) {
    return number;
  }
  return number < 0 ? Math.ceil(number) : Math.floor(number);
}

function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
  }
}

/**
 * @name toDate
 * @category Common Helpers
 * @summary Convert the given argument to an instance of Date.
 *
 * @description
 * Convert the given argument to an instance of Date.
 *
 * If the argument is an instance of Date, the function returns its clone.
 *
 * If the argument is a number, it is treated as a timestamp.
 *
 * If the argument is none of the above, the function returns Invalid Date.
 *
 * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
 *
 * @param {Date|Number} argument - the value to convert
 * @returns {Date} the parsed date in the local time zone
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Clone the date:
 * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
 * //=> Tue Feb 11 2014 11:30:30
 *
 * @example
 * // Convert the timestamp to date:
 * const result = toDate(1392098430000)
 * //=> Tue Feb 11 2014 11:30:30
 */
function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument);

  // Clone the date
  if (argument instanceof Date || _typeof(argument) === 'object' && argStr === '[object Date]') {
    // Prevent the date to lose the milliseconds when passed to new Date() in IE10
    return new Date(argument.getTime());
  } else if (typeof argument === 'number' || argStr === '[object Number]') {
    return new Date(argument);
  } else {
    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
      // eslint-disable-next-line no-console
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
      // eslint-disable-next-line no-console
      console.warn(new Error().stack);
    }
    return new Date(NaN);
  }
}

/**
 * @name addMilliseconds
 * @category Millisecond Helpers
 * @summary Add the specified number of milliseconds to the given date.
 *
 * @description
 * Add the specified number of milliseconds to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the milliseconds added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
 * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
 * //=> Thu Jul 10 2014 12:45:30.750
 */
function addMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var timestamp = toDate(dirtyDate).getTime();
  var amount = toInteger(dirtyAmount);
  return new Date(timestamp + amount);
}

var defaultOptions = {};
function getDefaultOptions() {
  return defaultOptions;
}

/**
 * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
 * They usually appear for dates that denote time before the timezones were introduced
 * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
 * and GMT+01:00:00 after that date)
 *
 * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
 * which would lead to incorrect calculations.
 *
 * This function returns the timezone offset in milliseconds that takes seconds in account.
 */
function getTimezoneOffsetInMilliseconds(date) {
  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
  utcDate.setUTCFullYear(date.getFullYear());
  return date.getTime() - utcDate.getTime();
}

/**
 * @name addSeconds
 * @category Second Helpers
 * @summary Add the specified number of seconds to the given date.
 *
 * @description
 * Add the specified number of seconds to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of seconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the seconds added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 30 seconds to 10 July 2014 12:45:00:
 * const result = addSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)
 * //=> Thu Jul 10 2014 12:45:30
 */
function addSeconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, amount * 1000);
}

/**
 * @name compareAsc
 * @category Common Helpers
 * @summary Compare the two dates and return -1, 0 or 1.
 *
 * @description
 * Compare the two dates and return 1 if the first date is after the second,
 * -1 if the first date is before the second or 0 if dates are equal.
 *
 * @param {Date|Number} dateLeft - the first date to compare
 * @param {Date|Number} dateRight - the second date to compare
 * @returns {Number} the result of the comparison
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Compare 11 February 1987 and 10 July 1989:
 * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))
 * //=> -1
 *
 * @example
 * // Sort the array of dates:
 * const result = [
 *   new Date(1995, 6, 2),
 *   new Date(1987, 1, 11),
 *   new Date(1989, 6, 10)
 * ].sort(compareAsc)
 * //=> [
 * //   Wed Feb 11 1987 00:00:00,
 * //   Mon Jul 10 1989 00:00:00,
 * //   Sun Jul 02 1995 00:00:00
 * // ]
 */
function compareAsc(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var diff = dateLeft.getTime() - dateRight.getTime();
  if (diff < 0) {
    return -1;
  } else if (diff > 0) {
    return 1;
    // Return 0 if diff is 0; return NaN if diff is NaN
  } else {
    return diff;
  }
}

/**
 * Days in 1 week.
 *
 * @name daysInWeek
 * @constant
 * @type {number}
 * @default
 */

/**
 * Milliseconds in 1 minute
 *
 * @name millisecondsInMinute
 * @constant
 * @type {number}
 * @default
 */
var millisecondsInMinute = 60000;

/**
 * Milliseconds in 1 hour
 *
 * @name millisecondsInHour
 * @constant
 * @type {number}
 * @default
 */
var millisecondsInHour = 3600000;

/**
 * Milliseconds in 1 second
 *
 * @name millisecondsInSecond
 * @constant
 * @type {number}
 * @default
 */
var millisecondsInSecond = 1000;

/**
 * @name differenceInCalendarMonths
 * @category Month Helpers
 * @summary Get the number of calendar months between the given dates.
 *
 * @description
 * Get the number of calendar months between the given dates.
 *
 * @param {Date|Number} dateLeft - the later date
 * @param {Date|Number} dateRight - the earlier date
 * @returns {Number} the number of calendar months
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // How many calendar months are between 31 January 2014 and 1 September 2014?
 * const result = differenceInCalendarMonths(
 *   new Date(2014, 8, 1),
 *   new Date(2014, 0, 31)
 * )
 * //=> 8
 */
function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();
  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();
  return yearDiff * 12 + monthDiff;
}

/**
 * @name differenceInMilliseconds
 * @category Millisecond Helpers
 * @summary Get the number of milliseconds between the given dates.
 *
 * @description
 * Get the number of milliseconds between the given dates.
 *
 * @param {Date|Number} dateLeft - the later date
 * @param {Date|Number} dateRight - the earlier date
 * @returns {Number} the number of milliseconds
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // How many milliseconds are between
 * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?
 * const result = differenceInMilliseconds(
 *   new Date(2014, 6, 2, 12, 30, 21, 700),
 *   new Date(2014, 6, 2, 12, 30, 20, 600)
 * )
 * //=> 1100
 */
function differenceInMilliseconds(dateLeft, dateRight) {
  requiredArgs(2, arguments);
  return toDate(dateLeft).getTime() - toDate(dateRight).getTime();
}

var roundingMap = {
  ceil: Math.ceil,
  round: Math.round,
  floor: Math.floor,
  trunc: function trunc(value) {
    return value < 0 ? Math.ceil(value) : Math.floor(value);
  } // Math.trunc is not supported by IE
};

var defaultRoundingMethod = 'trunc';
function getRoundingMethod(method) {
  return method ? roundingMap[method] : roundingMap[defaultRoundingMethod];
}

/**
 * @name endOfDay
 * @category Day Helpers
 * @summary Return the end of a day for the given date.
 *
 * @description
 * Return the end of a day for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the end of a day
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The end of a day for 2 September 2014 11:55:00:
 * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 02 2014 23:59:59.999
 */
function endOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setHours(23, 59, 59, 999);
  return date;
}

/**
 * @name endOfMonth
 * @category Month Helpers
 * @summary Return the end of a month for the given date.
 *
 * @description
 * Return the end of a month for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the end of a month
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The end of a month for 2 September 2014 11:55:00:
 * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 30 2014 23:59:59.999
 */
function endOfMonth$2(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var month = date.getMonth();
  date.setFullYear(date.getFullYear(), month + 1, 0);
  date.setHours(23, 59, 59, 999);
  return date;
}

/**
 * @name isLastDayOfMonth
 * @category Month Helpers
 * @summary Is the given date the last day of a month?
 *
 * @description
 * Is the given date the last day of a month?
 *
 * @param {Date|Number} date - the date to check
 * @returns {Boolean} the date is the last day of a month
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Is 28 February 2014 the last day of a month?
 * const result = isLastDayOfMonth(new Date(2014, 1, 28))
 * //=> true
 */
function isLastDayOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  return endOfDay(date).getTime() === endOfMonth$2(date).getTime();
}

/**
 * @name differenceInMonths
 * @category Month Helpers
 * @summary Get the number of full months between the given dates.
 *
 * @description
 * Get the number of full months between the given dates using trunc as a default rounding method.
 *
 * @param {Date|Number} dateLeft - the later date
 * @param {Date|Number} dateRight - the earlier date
 * @returns {Number} the number of full months
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // How many full months are between 31 January 2014 and 1 September 2014?
 * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))
 * //=> 7
 */
function differenceInMonths(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var sign = compareAsc(dateLeft, dateRight);
  var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));
  var result;

  // Check for the difference of less than month
  if (difference < 1) {
    result = 0;
  } else {
    if (dateLeft.getMonth() === 1 && dateLeft.getDate() > 27) {
      // This will check if the date is end of Feb and assign a higher end of month date
      // to compare it with Jan
      dateLeft.setDate(30);
    }
    dateLeft.setMonth(dateLeft.getMonth() - sign * difference);

    // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full
    // If so, result must be decreased by 1 in absolute value
    var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign;

    // Check for cases of one full calendar month
    if (isLastDayOfMonth(toDate(dirtyDateLeft)) && difference === 1 && compareAsc(dirtyDateLeft, dateRight) === 1) {
      isLastMonthNotFull = false;
    }
    result = sign * (difference - Number(isLastMonthNotFull));
  }

  // Prevent negative zero
  return result === 0 ? 0 : result;
}

/**
 * @name differenceInSeconds
 * @category Second Helpers
 * @summary Get the number of seconds between the given dates.
 *
 * @description
 * Get the number of seconds between the given dates.
 *
 * @param {Date|Number} dateLeft - the later date
 * @param {Date|Number} dateRight - the earlier date
 * @param {Object} [options] - an object with options.
 * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)
 * @returns {Number} the number of seconds
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // How many seconds are between
 * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?
 * const result = differenceInSeconds(
 *   new Date(2014, 6, 2, 12, 30, 20, 0),
 *   new Date(2014, 6, 2, 12, 30, 7, 999)
 * )
 * //=> 12
 */
function differenceInSeconds(dateLeft, dateRight, options) {
  requiredArgs(2, arguments);
  var diff = differenceInMilliseconds(dateLeft, dateRight) / 1000;
  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);
}

/**
 * @name subMilliseconds
 * @category Millisecond Helpers
 * @summary Subtract the specified number of milliseconds from the given date.
 *
 * @description
 * Subtract the specified number of milliseconds from the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the milliseconds subtracted
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:
 * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
 * //=> Thu Jul 10 2014 12:45:29.250
 */
function subMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, -amount);
}

function startOfUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

function getUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

function startOfUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getUTCISOWeekYear(dirtyDate);
  var fourthOfJanuary = new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCISOWeek(fourthOfJanuary);
  return date;
}

var MILLISECONDS_IN_WEEK$1 = 604800000;
function getUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();

  // Round the number of days to the nearest integer
  // because the number of milliseconds in a week is not constant
  // (e.g. it's different in the week of the daylight saving time clock shift)
  return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;
}

function startOfUTCWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);

  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

function getUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var defaultOptions = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);

  // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
  }
  var firstWeekOfNextYear = new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
  var firstWeekOfThisYear = new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

function startOfUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  var year = getUTCWeekYear(dirtyDate, options);
  var firstWeek = new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCWeek(firstWeek, options);
  return date;
}

var MILLISECONDS_IN_WEEK = 604800000;
function getUTCWeek(dirtyDate, options) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();

  // Round the number of days to the nearest integer
  // because the number of milliseconds in a week is not constant
  // (e.g. it's different in the week of the daylight saving time clock shift)
  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}

var dateLongFormatter = function dateLongFormatter(pattern, formatLong) {
  switch (pattern) {
    case 'P':
      return formatLong.date({
        width: 'short'
      });
    case 'PP':
      return formatLong.date({
        width: 'medium'
      });
    case 'PPP':
      return formatLong.date({
        width: 'long'
      });
    case 'PPPP':
    default:
      return formatLong.date({
        width: 'full'
      });
  }
};
var timeLongFormatter = function timeLongFormatter(pattern, formatLong) {
  switch (pattern) {
    case 'p':
      return formatLong.time({
        width: 'short'
      });
    case 'pp':
      return formatLong.time({
        width: 'medium'
      });
    case 'ppp':
      return formatLong.time({
        width: 'long'
      });
    case 'pppp':
    default:
      return formatLong.time({
        width: 'full'
      });
  }
};
var dateTimeLongFormatter = function dateTimeLongFormatter(pattern, formatLong) {
  var matchResult = pattern.match(/(P+)(p+)?/) || [];
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];
  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong);
  }
  var dateTimeFormat;
  switch (datePattern) {
    case 'P':
      dateTimeFormat = formatLong.dateTime({
        width: 'short'
      });
      break;
    case 'PP':
      dateTimeFormat = formatLong.dateTime({
        width: 'medium'
      });
      break;
    case 'PPP':
      dateTimeFormat = formatLong.dateTime({
        width: 'long'
      });
      break;
    case 'PPPP':
    default:
      dateTimeFormat = formatLong.dateTime({
        width: 'full'
      });
      break;
  }
  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));
};
var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};

var protectedDayOfYearTokens = ['D', 'DD'];
var protectedWeekYearTokens = ['YY', 'YYYY'];
function isProtectedDayOfYearToken(token) {
  return protectedDayOfYearTokens.indexOf(token) !== -1;
}
function isProtectedWeekYearToken(token) {
  return protectedWeekYearTokens.indexOf(token) !== -1;
}
function throwProtectedError(token, format, input) {
  if (token === 'YYYY') {
    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === 'YY') {
    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === 'D') {
    throw new RangeError("Use `d` instead of `D` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === 'DD') {
    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  }
}

var formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'less than a second',
    other: 'less than {{count}} seconds'
  },
  xSeconds: {
    one: '1 second',
    other: '{{count}} seconds'
  },
  halfAMinute: 'half a minute',
  lessThanXMinutes: {
    one: 'less than a minute',
    other: 'less than {{count}} minutes'
  },
  xMinutes: {
    one: '1 minute',
    other: '{{count}} minutes'
  },
  aboutXHours: {
    one: 'about 1 hour',
    other: 'about {{count}} hours'
  },
  xHours: {
    one: '1 hour',
    other: '{{count}} hours'
  },
  xDays: {
    one: '1 day',
    other: '{{count}} days'
  },
  aboutXWeeks: {
    one: 'about 1 week',
    other: 'about {{count}} weeks'
  },
  xWeeks: {
    one: '1 week',
    other: '{{count}} weeks'
  },
  aboutXMonths: {
    one: 'about 1 month',
    other: 'about {{count}} months'
  },
  xMonths: {
    one: '1 month',
    other: '{{count}} months'
  },
  aboutXYears: {
    one: 'about 1 year',
    other: 'about {{count}} years'
  },
  xYears: {
    one: '1 year',
    other: '{{count}} years'
  },
  overXYears: {
    one: 'over 1 year',
    other: 'over {{count}} years'
  },
  almostXYears: {
    one: 'almost 1 year',
    other: 'almost {{count}} years'
  }
};
var formatDistance$1 = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'in ' + result;
    } else {
      return result + ' ago';
    }
  }
  return result;
};

function buildFormatLongFn(args) {
  return function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    // TODO: Remove String()
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format = args.formats[width] || args.formats[args.defaultWidth];
    return format;
  };
}

var dateFormats = {
  full: 'EEEE, MMMM do, y',
  long: 'MMMM do, y',
  medium: 'MMM d, y',
  short: 'MM/dd/yyyy'
};
var timeFormats = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: 'full'
  })
};

var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: 'P'
};
var formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
};

function buildLocalizeFn(args) {
  return function (dirtyIndex, options) {
    var context = options !== null && options !== void 0 && options.context ? String(options.context) : 'standalone';
    var valuesArray;
    if (context === 'formatting' && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;
      var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }
    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
    // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!
    return valuesArray[index];
  };
}

var eraValues = {
  narrow: ['B', 'A'],
  abbreviated: ['BC', 'AD'],
  wide: ['Before Christ', 'Anno Domini']
};
var quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
var monthValues = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
};
var dayValues = {
  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
};
var dayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mi',
    noon: 'n',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mi',
    noon: 'n',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  }
};
var ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);

  // If ordinal numbers depend on context, for example,
  // if they are different for different grammatical genders,
  // use `options.unit`.
  //
  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
  // 'day', 'hour', 'minute', 'second'.

  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + 'st';
      case 2:
        return number + 'nd';
      case 3:
        return number + 'rd';
    }
  }
  return number + 'th';
};
var localize = {
  ordinalNumber: ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};

function buildMatchFn(args) {
  return function (string) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {
      return pattern.test(matchedString);
    }) : findKey(parsePatterns, function (pattern) {
      return pattern.test(matchedString);
    });
    var value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value: value,
      rest: rest
    };
  };
}
function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }
  return undefined;
}
function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
  return undefined;
}

function buildMatchPatternFn(args) {
  return function (string) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var matchResult = string.match(args.matchPattern);
    if (!matchResult) return null;
    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);
    if (!parseResult) return null;
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value: value,
      rest: rest
    };
  };
}

var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};

/**
 * @type {Locale}
 * @category Locales
 * @summary English locale (United States).
 * @language English
 * @iso-639-2 eng
 * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
 * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
 */
var locale = {
  code: 'en-US',
  formatDistance: formatDistance$1,
  formatLong: formatLong,
  formatRelative: formatRelative,
  localize: localize,
  match: match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};

function assign(target, object) {
  if (target == null) {
    throw new TypeError('assign requires that input parameter not be null or undefined');
  }
  for (var property in object) {
    if (Object.prototype.hasOwnProperty.call(object, property)) {
      target[property] = object[property];
    }
  }
  return target;
}

function cloneObject(object) {
  return assign({}, object);
}

var MINUTES_IN_DAY = 1440;
var MINUTES_IN_ALMOST_TWO_DAYS = 2520;
var MINUTES_IN_MONTH = 43200;
var MINUTES_IN_TWO_MONTHS = 86400;

/**
 * @name formatDistance
 * @category Common Helpers
 * @summary Return the distance between the given dates in words.
 *
 * @description
 * Return the distance between the given dates in words.
 *
 * | Distance between dates                                            | Result              |
 * |-------------------------------------------------------------------|---------------------|
 * | 0 ... 30 secs                                                     | less than a minute  |
 * | 30 secs ... 1 min 30 secs                                         | 1 minute            |
 * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |
 * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |
 * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |
 * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |
 * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |
 * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |
 * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |
 * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |
 * | 1 yr ... 1 yr 3 months                                            | about 1 year        |
 * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |
 * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |
 * | N yrs ... N yrs 3 months                                          | about N years       |
 * | N yrs 3 months ... N yrs 9 months                                 | over N years        |
 * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |
 *
 * With `options.includeSeconds == true`:
 * | Distance between dates | Result               |
 * |------------------------|----------------------|
 * | 0 secs ... 5 secs      | less than 5 seconds  |
 * | 5 secs ... 10 secs     | less than 10 seconds |
 * | 10 secs ... 20 secs    | less than 20 seconds |
 * | 20 secs ... 40 secs    | half a minute        |
 * | 40 secs ... 60 secs    | less than a minute   |
 * | 60 secs ... 90 secs    | 1 minute             |
 *
 * @param {Date|Number} date - the date
 * @param {Date|Number} baseDate - the date to compare with
 * @param {Object} [options] - an object with options.
 * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed
 * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @returns {String} the distance in words
 * @throws {TypeError} 2 arguments required
 * @throws {RangeError} `date` must not be Invalid Date
 * @throws {RangeError} `baseDate` must not be Invalid Date
 * @throws {RangeError} `options.locale` must contain `formatDistance` property
 *
 * @example
 * // What is the distance between 2 July 2014 and 1 January 2015?
 * const result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))
 * //=> '6 months'
 *
 * @example
 * // What is the distance between 1 January 2015 00:00:15
 * // and 1 January 2015 00:00:00, including seconds?
 * const result = formatDistance(
 *   new Date(2015, 0, 1, 0, 0, 15),
 *   new Date(2015, 0, 1, 0, 0, 0),
 *   { includeSeconds: true }
 * )
 * //=> 'less than 20 seconds'
 *
 * @example
 * // What is the distance from 1 January 2016
 * // to 1 January 2015, with a suffix?
 * const result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {
 *   addSuffix: true
 * })
 * //=> 'about 1 year ago'
 *
 * @example
 * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?
 * import { eoLocale } from 'date-fns/locale/eo'
 * const result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {
 *   locale: eoLocale
 * })
 * //=> 'pli ol 1 jaro'
 */

function formatDistance(dirtyDate, dirtyBaseDate, options) {
  var _ref, _options$locale;
  requiredArgs(2, arguments);
  var defaultOptions = getDefaultOptions();
  var locale$1 = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : locale;
  if (!locale$1.formatDistance) {
    throw new RangeError('locale must contain formatDistance property');
  }
  var comparison = compareAsc(dirtyDate, dirtyBaseDate);
  if (isNaN(comparison)) {
    throw new RangeError('Invalid time value');
  }
  var localizeOptions = assign(cloneObject(options), {
    addSuffix: Boolean(options === null || options === void 0 ? void 0 : options.addSuffix),
    comparison: comparison
  });
  var dateLeft;
  var dateRight;
  if (comparison > 0) {
    dateLeft = toDate(dirtyBaseDate);
    dateRight = toDate(dirtyDate);
  } else {
    dateLeft = toDate(dirtyDate);
    dateRight = toDate(dirtyBaseDate);
  }
  var seconds = differenceInSeconds(dateRight, dateLeft);
  var offsetInSeconds = (getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft)) / 1000;
  var minutes = Math.round((seconds - offsetInSeconds) / 60);
  var months;

  // 0 up to 2 mins
  if (minutes < 2) {
    if (options !== null && options !== void 0 && options.includeSeconds) {
      if (seconds < 5) {
        return locale$1.formatDistance('lessThanXSeconds', 5, localizeOptions);
      } else if (seconds < 10) {
        return locale$1.formatDistance('lessThanXSeconds', 10, localizeOptions);
      } else if (seconds < 20) {
        return locale$1.formatDistance('lessThanXSeconds', 20, localizeOptions);
      } else if (seconds < 40) {
        return locale$1.formatDistance('halfAMinute', 0, localizeOptions);
      } else if (seconds < 60) {
        return locale$1.formatDistance('lessThanXMinutes', 1, localizeOptions);
      } else {
        return locale$1.formatDistance('xMinutes', 1, localizeOptions);
      }
    } else {
      if (minutes === 0) {
        return locale$1.formatDistance('lessThanXMinutes', 1, localizeOptions);
      } else {
        return locale$1.formatDistance('xMinutes', minutes, localizeOptions);
      }
    }

    // 2 mins up to 0.75 hrs
  } else if (minutes < 45) {
    return locale$1.formatDistance('xMinutes', minutes, localizeOptions);

    // 0.75 hrs up to 1.5 hrs
  } else if (minutes < 90) {
    return locale$1.formatDistance('aboutXHours', 1, localizeOptions);

    // 1.5 hrs up to 24 hrs
  } else if (minutes < MINUTES_IN_DAY) {
    var hours = Math.round(minutes / 60);
    return locale$1.formatDistance('aboutXHours', hours, localizeOptions);

    // 1 day up to 1.75 days
  } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {
    return locale$1.formatDistance('xDays', 1, localizeOptions);

    // 1.75 days up to 30 days
  } else if (minutes < MINUTES_IN_MONTH) {
    var days = Math.round(minutes / MINUTES_IN_DAY);
    return locale$1.formatDistance('xDays', days, localizeOptions);

    // 1 month up to 2 months
  } else if (minutes < MINUTES_IN_TWO_MONTHS) {
    months = Math.round(minutes / MINUTES_IN_MONTH);
    return locale$1.formatDistance('aboutXMonths', months, localizeOptions);
  }
  months = differenceInMonths(dateRight, dateLeft);

  // 2 months up to 12 months
  if (months < 12) {
    var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH);
    return locale$1.formatDistance('xMonths', nearestMonth, localizeOptions);

    // 1 year up to max Date
  } else {
    var monthsSinceStartOfYear = months % 12;
    var years = Math.floor(months / 12);

    // N years up to 1 years 3 months
    if (monthsSinceStartOfYear < 3) {
      return locale$1.formatDistance('aboutXYears', years, localizeOptions);

      // N years 3 months up to N years 9 months
    } else if (monthsSinceStartOfYear < 9) {
      return locale$1.formatDistance('overXYears', years, localizeOptions);

      // N years 9 months up to N year 12 months
    } else {
      return locale$1.formatDistance('almostXYears', years + 1, localizeOptions);
    }
  }
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      var F = function F() {};
      return {
        s: F,
        n: function n() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function e(_e) {
          throw _e;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true,
    didErr = false,
    err;
  return {
    s: function s() {
      it = it.call(o);
    },
    n: function n() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function e(_e2) {
      didErr = true;
      err = _e2;
    },
    f: function f() {
      try {
        if (!normalCompletion && it["return"] != null) it["return"]();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}

function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

var TIMEZONE_UNIT_PRIORITY = 10;
var Setter = /*#__PURE__*/function () {
  function Setter() {
    _classCallCheck(this, Setter);
    _defineProperty(this, "priority", void 0);
    _defineProperty(this, "subPriority", 0);
  }
  _createClass(Setter, [{
    key: "validate",
    value: function validate(_utcDate, _options) {
      return true;
    }
  }]);
  return Setter;
}();
var ValueSetter = /*#__PURE__*/function (_Setter) {
  _inherits(ValueSetter, _Setter);
  var _super = _createSuper(ValueSetter);
  function ValueSetter(value, validateValue, setValue, priority, subPriority) {
    var _this;
    _classCallCheck(this, ValueSetter);
    _this = _super.call(this);
    _this.value = value;
    _this.validateValue = validateValue;
    _this.setValue = setValue;
    _this.priority = priority;
    if (subPriority) {
      _this.subPriority = subPriority;
    }
    return _this;
  }
  _createClass(ValueSetter, [{
    key: "validate",
    value: function validate(utcDate, options) {
      return this.validateValue(utcDate, this.value, options);
    }
  }, {
    key: "set",
    value: function set(utcDate, flags, options) {
      return this.setValue(utcDate, flags, this.value, options);
    }
  }]);
  return ValueSetter;
}(Setter);
var DateToSystemTimezoneSetter = /*#__PURE__*/function (_Setter2) {
  _inherits(DateToSystemTimezoneSetter, _Setter2);
  var _super2 = _createSuper(DateToSystemTimezoneSetter);
  function DateToSystemTimezoneSetter() {
    var _this2;
    _classCallCheck(this, DateToSystemTimezoneSetter);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super2.call.apply(_super2, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this2), "priority", TIMEZONE_UNIT_PRIORITY);
    _defineProperty(_assertThisInitialized(_this2), "subPriority", -1);
    return _this2;
  }
  _createClass(DateToSystemTimezoneSetter, [{
    key: "set",
    value: function set(date, flags) {
      if (flags.timestampIsSet) {
        return date;
      }
      var convertedDate = new Date(0);
      convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
      convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
      return convertedDate;
    }
  }]);
  return DateToSystemTimezoneSetter;
}(Setter);

var Parser = /*#__PURE__*/function () {
  function Parser() {
    _classCallCheck(this, Parser);
    _defineProperty(this, "incompatibleTokens", void 0);
    _defineProperty(this, "priority", void 0);
    _defineProperty(this, "subPriority", void 0);
  }
  _createClass(Parser, [{
    key: "run",
    value: function run(dateString, token, match, options) {
      var result = this.parse(dateString, token, match, options);
      if (!result) {
        return null;
      }
      return {
        setter: new ValueSetter(result.value, this.validate, this.set, this.priority, this.subPriority),
        rest: result.rest
      };
    }
  }, {
    key: "validate",
    value: function validate(_utcDate, _value, _options) {
      return true;
    }
  }]);
  return Parser;
}();

var EraParser = /*#__PURE__*/function (_Parser) {
  _inherits(EraParser, _Parser);
  var _super = _createSuper(EraParser);
  function EraParser() {
    var _this;
    _classCallCheck(this, EraParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 140);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['R', 'u', 't', 'T']);
    return _this;
  }
  _createClass(EraParser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      switch (token) {
        // AD, BC
        case 'G':
        case 'GG':
        case 'GGG':
          return match.era(dateString, {
            width: 'abbreviated'
          }) || match.era(dateString, {
            width: 'narrow'
          });
        // A, B
        case 'GGGGG':
          return match.era(dateString, {
            width: 'narrow'
          });
        // Anno Domini, Before Christ
        case 'GGGG':
        default:
          return match.era(dateString, {
            width: 'wide'
          }) || match.era(dateString, {
            width: 'abbreviated'
          }) || match.era(dateString, {
            width: 'narrow'
          });
      }
    }
  }, {
    key: "set",
    value: function set(date, flags, value) {
      flags.era = value;
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return EraParser;
}(Parser);

var numericPatterns = {
  month: /^(1[0-2]|0?\d)/,
  // 0 to 12
  date: /^(3[0-1]|[0-2]?\d)/,
  // 0 to 31
  dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
  // 0 to 366
  week: /^(5[0-3]|[0-4]?\d)/,
  // 0 to 53
  hour23h: /^(2[0-3]|[0-1]?\d)/,
  // 0 to 23
  hour24h: /^(2[0-4]|[0-1]?\d)/,
  // 0 to 24
  hour11h: /^(1[0-1]|0?\d)/,
  // 0 to 11
  hour12h: /^(1[0-2]|0?\d)/,
  // 0 to 12
  minute: /^[0-5]?\d/,
  // 0 to 59
  second: /^[0-5]?\d/,
  // 0 to 59

  singleDigit: /^\d/,
  // 0 to 9
  twoDigits: /^\d{1,2}/,
  // 0 to 99
  threeDigits: /^\d{1,3}/,
  // 0 to 999
  fourDigits: /^\d{1,4}/,
  // 0 to 9999

  anyDigitsSigned: /^-?\d+/,
  singleDigitSigned: /^-?\d/,
  // 0 to 9, -0 to -9
  twoDigitsSigned: /^-?\d{1,2}/,
  // 0 to 99, -0 to -99
  threeDigitsSigned: /^-?\d{1,3}/,
  // 0 to 999, -0 to -999
  fourDigitsSigned: /^-?\d{1,4}/ // 0 to 9999, -0 to -9999
};

var timezonePatterns = {
  basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
  basic: /^([+-])(\d{2})(\d{2})|Z/,
  basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
  extended: /^([+-])(\d{2}):(\d{2})|Z/,
  extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
};

function mapValue(parseFnResult, mapFn) {
  if (!parseFnResult) {
    return parseFnResult;
  }
  return {
    value: mapFn(parseFnResult.value),
    rest: parseFnResult.rest
  };
}
function parseNumericPattern(pattern, dateString) {
  var matchResult = dateString.match(pattern);
  if (!matchResult) {
    return null;
  }
  return {
    value: parseInt(matchResult[0], 10),
    rest: dateString.slice(matchResult[0].length)
  };
}
function parseTimezonePattern(pattern, dateString) {
  var matchResult = dateString.match(pattern);
  if (!matchResult) {
    return null;
  }

  // Input is 'Z'
  if (matchResult[0] === 'Z') {
    return {
      value: 0,
      rest: dateString.slice(1)
    };
  }
  var sign = matchResult[1] === '+' ? 1 : -1;
  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
  return {
    value: sign * (hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * millisecondsInSecond),
    rest: dateString.slice(matchResult[0].length)
  };
}
function parseAnyDigitsSigned(dateString) {
  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);
}
function parseNDigits(n, dateString) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigit, dateString);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigits, dateString);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigits, dateString);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigits, dateString);
    default:
      return parseNumericPattern(new RegExp('^\\d{1,' + n + '}'), dateString);
  }
}
function parseNDigitsSigned(n, dateString) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);
    default:
      return parseNumericPattern(new RegExp('^-?\\d{1,' + n + '}'), dateString);
  }
}
function dayPeriodEnumToHours(dayPeriod) {
  switch (dayPeriod) {
    case 'morning':
      return 4;
    case 'evening':
      return 17;
    case 'pm':
    case 'noon':
    case 'afternoon':
      return 12;
    case 'am':
    case 'midnight':
    case 'night':
    default:
      return 0;
  }
}
function normalizeTwoDigitYear(twoDigitYear, currentYear) {
  var isCommonEra = currentYear > 0;
  // Absolute number of the current year:
  // 1 -> 1 AC
  // 0 -> 1 BC
  // -1 -> 2 BC
  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
  var result;
  if (absCurrentYear <= 50) {
    result = twoDigitYear || 100;
  } else {
    var rangeEnd = absCurrentYear + 50;
    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;
    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
  }
  return isCommonEra ? result : 1 - result;
}
function isLeapYearIndex(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}

// From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns
// | Year     |     y | yy |   yyy |  yyyy | yyyyy |
// |----------|-------|----|-------|-------|-------|
// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
var YearParser = /*#__PURE__*/function (_Parser) {
  _inherits(YearParser, _Parser);
  var _super = _createSuper(YearParser);
  function YearParser() {
    var _this;
    _classCallCheck(this, YearParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'u', 'w', 'I', 'i', 'e', 'c', 't', 'T']);
    return _this;
  }
  _createClass(YearParser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      var valueCallback = function valueCallback(year) {
        return {
          year: year,
          isTwoDigitYear: token === 'yy'
        };
      };
      switch (token) {
        case 'y':
          return mapValue(parseNDigits(4, dateString), valueCallback);
        case 'yo':
          return mapValue(match.ordinalNumber(dateString, {
            unit: 'year'
          }), valueCallback);
        default:
          return mapValue(parseNDigits(token.length, dateString), valueCallback);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value.isTwoDigitYear || value.year > 0;
    }
  }, {
    key: "set",
    value: function set(date, flags, value) {
      var currentYear = date.getUTCFullYear();
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }
      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return YearParser;
}(Parser);

// Local week-numbering year
var LocalWeekYearParser = /*#__PURE__*/function (_Parser) {
  _inherits(LocalWeekYearParser, _Parser);
  var _super = _createSuper(LocalWeekYearParser);
  function LocalWeekYearParser() {
    var _this;
    _classCallCheck(this, LocalWeekYearParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['y', 'R', 'u', 'Q', 'q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']);
    return _this;
  }
  _createClass(LocalWeekYearParser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      var valueCallback = function valueCallback(year) {
        return {
          year: year,
          isTwoDigitYear: token === 'YY'
        };
      };
      switch (token) {
        case 'Y':
          return mapValue(parseNDigits(4, dateString), valueCallback);
        case 'Yo':
          return mapValue(match.ordinalNumber(dateString, {
            unit: 'year'
          }), valueCallback);
        default:
          return mapValue(parseNDigits(token.length, dateString), valueCallback);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value.isTwoDigitYear || value.year > 0;
    }
  }, {
    key: "set",
    value: function set(date, flags, value, options) {
      var currentYear = getUTCWeekYear(date, options);
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);
        date.setUTCHours(0, 0, 0, 0);
        return startOfUTCWeek(date, options);
      }
      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, options.firstWeekContainsDate);
      date.setUTCHours(0, 0, 0, 0);
      return startOfUTCWeek(date, options);
    }
  }]);
  return LocalWeekYearParser;
}(Parser);

var ISOWeekYearParser = /*#__PURE__*/function (_Parser) {
  _inherits(ISOWeekYearParser, _Parser);
  var _super = _createSuper(ISOWeekYearParser);
  function ISOWeekYearParser() {
    var _this;
    _classCallCheck(this, ISOWeekYearParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['G', 'y', 'Y', 'u', 'Q', 'q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']);
    return _this;
  }
  _createClass(ISOWeekYearParser, [{
    key: "parse",
    value: function parse(dateString, token) {
      if (token === 'R') {
        return parseNDigitsSigned(4, dateString);
      }
      return parseNDigitsSigned(token.length, dateString);
    }
  }, {
    key: "set",
    value: function set(_date, _flags, value) {
      var firstWeekOfYear = new Date(0);
      firstWeekOfYear.setUTCFullYear(value, 0, 4);
      firstWeekOfYear.setUTCHours(0, 0, 0, 0);
      return startOfUTCISOWeek(firstWeekOfYear);
    }
  }]);
  return ISOWeekYearParser;
}(Parser);

var ExtendedYearParser = /*#__PURE__*/function (_Parser) {
  _inherits(ExtendedYearParser, _Parser);
  var _super = _createSuper(ExtendedYearParser);
  function ExtendedYearParser() {
    var _this;
    _classCallCheck(this, ExtendedYearParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['G', 'y', 'Y', 'R', 'w', 'I', 'i', 'e', 'c', 't', 'T']);
    return _this;
  }
  _createClass(ExtendedYearParser, [{
    key: "parse",
    value: function parse(dateString, token) {
      if (token === 'u') {
        return parseNDigitsSigned(4, dateString);
      }
      return parseNDigitsSigned(token.length, dateString);
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return ExtendedYearParser;
}(Parser);

var QuarterParser = /*#__PURE__*/function (_Parser) {
  _inherits(QuarterParser, _Parser);
  var _super = _createSuper(QuarterParser);
  function QuarterParser() {
    var _this;
    _classCallCheck(this, QuarterParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 120);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']);
    return _this;
  }
  _createClass(QuarterParser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      switch (token) {
        // 1, 2, 3, 4
        case 'Q':
        case 'QQ':
          // 01, 02, 03, 04
          return parseNDigits(token.length, dateString);
        // 1st, 2nd, 3rd, 4th
        case 'Qo':
          return match.ordinalNumber(dateString, {
            unit: 'quarter'
          });
        // Q1, Q2, Q3, Q4
        case 'QQQ':
          return match.quarter(dateString, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.quarter(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
        // 1, 2, 3, 4 (narrow quarter; could be not numerical)
        case 'QQQQQ':
          return match.quarter(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
        // 1st quarter, 2nd quarter, ...
        case 'QQQQ':
        default:
          return match.quarter(dateString, {
            width: 'wide',
            context: 'formatting'
          }) || match.quarter(dateString, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.quarter(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 4;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return QuarterParser;
}(Parser);

var StandAloneQuarterParser = /*#__PURE__*/function (_Parser) {
  _inherits(StandAloneQuarterParser, _Parser);
  var _super = _createSuper(StandAloneQuarterParser);
  function StandAloneQuarterParser() {
    var _this;
    _classCallCheck(this, StandAloneQuarterParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 120);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'Q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']);
    return _this;
  }
  _createClass(StandAloneQuarterParser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      switch (token) {
        // 1, 2, 3, 4
        case 'q':
        case 'qq':
          // 01, 02, 03, 04
          return parseNDigits(token.length, dateString);
        // 1st, 2nd, 3rd, 4th
        case 'qo':
          return match.ordinalNumber(dateString, {
            unit: 'quarter'
          });
        // Q1, Q2, Q3, Q4
        case 'qqq':
          return match.quarter(dateString, {
            width: 'abbreviated',
            context: 'standalone'
          }) || match.quarter(dateString, {
            width: 'narrow',
            context: 'standalone'
          });
        // 1, 2, 3, 4 (narrow quarter; could be not numerical)
        case 'qqqqq':
          return match.quarter(dateString, {
            width: 'narrow',
            context: 'standalone'
          });
        // 1st quarter, 2nd quarter, ...
        case 'qqqq':
        default:
          return match.quarter(dateString, {
            width: 'wide',
            context: 'standalone'
          }) || match.quarter(dateString, {
            width: 'abbreviated',
            context: 'standalone'
          }) || match.quarter(dateString, {
            width: 'narrow',
            context: 'standalone'
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 4;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneQuarterParser;
}(Parser);

var MonthParser = /*#__PURE__*/function (_Parser) {
  _inherits(MonthParser, _Parser);
  var _super = _createSuper(MonthParser);
  function MonthParser() {
    var _this;
    _classCallCheck(this, MonthParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'L', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']);
    _defineProperty(_assertThisInitialized(_this), "priority", 110);
    return _this;
  }
  _createClass(MonthParser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      var valueCallback = function valueCallback(value) {
        return value - 1;
      };
      switch (token) {
        // 1, 2, ..., 12
        case 'M':
          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback);
        // 01, 02, ..., 12
        case 'MM':
          return mapValue(parseNDigits(2, dateString), valueCallback);
        // 1st, 2nd, ..., 12th
        case 'Mo':
          return mapValue(match.ordinalNumber(dateString, {
            unit: 'month'
          }), valueCallback);
        // Jan, Feb, ..., Dec
        case 'MMM':
          return match.month(dateString, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.month(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
        // J, F, ..., D
        case 'MMMMM':
          return match.month(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
        // January, February, ..., December
        case 'MMMM':
        default:
          return match.month(dateString, {
            width: 'wide',
            context: 'formatting'
          }) || match.month(dateString, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.month(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return MonthParser;
}(Parser);

var StandAloneMonthParser = /*#__PURE__*/function (_Parser) {
  _inherits(StandAloneMonthParser, _Parser);
  var _super = _createSuper(StandAloneMonthParser);
  function StandAloneMonthParser() {
    var _this;
    _classCallCheck(this, StandAloneMonthParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 110);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'M', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']);
    return _this;
  }
  _createClass(StandAloneMonthParser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      var valueCallback = function valueCallback(value) {
        return value - 1;
      };
      switch (token) {
        // 1, 2, ..., 12
        case 'L':
          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback);
        // 01, 02, ..., 12
        case 'LL':
          return mapValue(parseNDigits(2, dateString), valueCallback);
        // 1st, 2nd, ..., 12th
        case 'Lo':
          return mapValue(match.ordinalNumber(dateString, {
            unit: 'month'
          }), valueCallback);
        // Jan, Feb, ..., Dec
        case 'LLL':
          return match.month(dateString, {
            width: 'abbreviated',
            context: 'standalone'
          }) || match.month(dateString, {
            width: 'narrow',
            context: 'standalone'
          });
        // J, F, ..., D
        case 'LLLLL':
          return match.month(dateString, {
            width: 'narrow',
            context: 'standalone'
          });
        // January, February, ..., December
        case 'LLLL':
        default:
          return match.month(dateString, {
            width: 'wide',
            context: 'standalone'
          }) || match.month(dateString, {
            width: 'abbreviated',
            context: 'standalone'
          }) || match.month(dateString, {
            width: 'narrow',
            context: 'standalone'
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneMonthParser;
}(Parser);

function setUTCWeek(dirtyDate, dirtyWeek, options) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var week = toInteger(dirtyWeek);
  var diff = getUTCWeek(date, options) - week;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}

var LocalWeekParser = /*#__PURE__*/function (_Parser) {
  _inherits(LocalWeekParser, _Parser);
  var _super = _createSuper(LocalWeekParser);
  function LocalWeekParser() {
    var _this;
    _classCallCheck(this, LocalWeekParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 100);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']);
    return _this;
  }
  _createClass(LocalWeekParser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      switch (token) {
        case 'w':
          return parseNumericPattern(numericPatterns.week, dateString);
        case 'wo':
          return match.ordinalNumber(dateString, {
            unit: 'week'
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 53;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value, options) {
      return startOfUTCWeek(setUTCWeek(date, value, options), options);
    }
  }]);
  return LocalWeekParser;
}(Parser);

function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var isoWeek = toInteger(dirtyISOWeek);
  var diff = getUTCISOWeek(date) - isoWeek;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}

var ISOWeekParser = /*#__PURE__*/function (_Parser) {
  _inherits(ISOWeekParser, _Parser);
  var _super = _createSuper(ISOWeekParser);
  function ISOWeekParser() {
    var _this;
    _classCallCheck(this, ISOWeekParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 100);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']);
    return _this;
  }
  _createClass(ISOWeekParser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      switch (token) {
        case 'I':
          return parseNumericPattern(numericPatterns.week, dateString);
        case 'Io':
          return match.ordinalNumber(dateString, {
            unit: 'week'
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 53;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      return startOfUTCISOWeek(setUTCISOWeek(date, value));
    }
  }]);
  return ISOWeekParser;
}(Parser);

var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

// Day of the month
var DateParser = /*#__PURE__*/function (_Parser) {
  _inherits(DateParser, _Parser);
  var _super = _createSuper(DateParser);
  function DateParser() {
    var _this;
    _classCallCheck(this, DateParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "subPriority", 1);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']);
    return _this;
  }
  _createClass(DateParser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      switch (token) {
        case 'd':
          return parseNumericPattern(numericPatterns.date, dateString);
        case 'do':
          return match.ordinalNumber(dateString, {
            unit: 'date'
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(date, value) {
      var year = date.getUTCFullYear();
      var isLeapYear = isLeapYearIndex(year);
      var month = date.getUTCMonth();
      if (isLeapYear) {
        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
      } else {
        return value >= 1 && value <= DAYS_IN_MONTH[month];
      }
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCDate(value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DateParser;
}(Parser);

var DayOfYearParser = /*#__PURE__*/function (_Parser) {
  _inherits(DayOfYearParser, _Parser);
  var _super = _createSuper(DayOfYearParser);
  function DayOfYearParser() {
    var _this;
    _classCallCheck(this, DayOfYearParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "subpriority", 1);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'M', 'L', 'w', 'I', 'd', 'E', 'i', 'e', 'c', 't', 'T']);
    return _this;
  }
  _createClass(DayOfYearParser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      switch (token) {
        case 'D':
        case 'DD':
          return parseNumericPattern(numericPatterns.dayOfYear, dateString);
        case 'Do':
          return match.ordinalNumber(dateString, {
            unit: 'date'
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(date, value) {
      var year = date.getUTCFullYear();
      var isLeapYear = isLeapYearIndex(year);
      if (isLeapYear) {
        return value >= 1 && value <= 366;
      } else {
        return value >= 1 && value <= 365;
      }
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCMonth(0, value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DayOfYearParser;
}(Parser);

function setUTCDay(dirtyDate, dirtyDay, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(2, arguments);
  var defaultOptions = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);

  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }
  var date = toDate(dirtyDate);
  var day = toInteger(dirtyDay);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}

var DayParser = /*#__PURE__*/function (_Parser) {
  _inherits(DayParser, _Parser);
  var _super = _createSuper(DayParser);
  function DayParser() {
    var _this;
    _classCallCheck(this, DayParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['D', 'i', 'e', 'c', 't', 'T']);
    return _this;
  }
  _createClass(DayParser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      switch (token) {
        // Tue
        case 'E':
        case 'EE':
        case 'EEE':
          return match.day(dateString, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.day(dateString, {
            width: 'short',
            context: 'formatting'
          }) || match.day(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
        // T
        case 'EEEEE':
          return match.day(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
        // Tu
        case 'EEEEEE':
          return match.day(dateString, {
            width: 'short',
            context: 'formatting'
          }) || match.day(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
        // Tuesday
        case 'EEEE':
        default:
          return match.day(dateString, {
            width: 'wide',
            context: 'formatting'
          }) || match.day(dateString, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.day(dateString, {
            width: 'short',
            context: 'formatting'
          }) || match.day(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DayParser;
}(Parser);

var LocalDayParser = /*#__PURE__*/function (_Parser) {
  _inherits(LocalDayParser, _Parser);
  var _super = _createSuper(LocalDayParser);
  function LocalDayParser() {
    var _this;
    _classCallCheck(this, LocalDayParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'c', 't', 'T']);
    return _this;
  }
  _createClass(LocalDayParser, [{
    key: "parse",
    value: function parse(dateString, token, match, options) {
      var valueCallback = function valueCallback(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        // 3
        case 'e':
        case 'ee':
          // 03
          return mapValue(parseNDigits(token.length, dateString), valueCallback);
        // 3rd
        case 'eo':
          return mapValue(match.ordinalNumber(dateString, {
            unit: 'day'
          }), valueCallback);
        // Tue
        case 'eee':
          return match.day(dateString, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.day(dateString, {
            width: 'short',
            context: 'formatting'
          }) || match.day(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
        // T
        case 'eeeee':
          return match.day(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
        // Tu
        case 'eeeeee':
          return match.day(dateString, {
            width: 'short',
            context: 'formatting'
          }) || match.day(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
        // Tuesday
        case 'eeee':
        default:
          return match.day(dateString, {
            width: 'wide',
            context: 'formatting'
          }) || match.day(dateString, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.day(dateString, {
            width: 'short',
            context: 'formatting'
          }) || match.day(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return LocalDayParser;
}(Parser);

var StandAloneLocalDayParser = /*#__PURE__*/function (_Parser) {
  _inherits(StandAloneLocalDayParser, _Parser);
  var _super = _createSuper(StandAloneLocalDayParser);
  function StandAloneLocalDayParser() {
    var _this;
    _classCallCheck(this, StandAloneLocalDayParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'e', 't', 'T']);
    return _this;
  }
  _createClass(StandAloneLocalDayParser, [{
    key: "parse",
    value: function parse(dateString, token, match, options) {
      var valueCallback = function valueCallback(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        // 3
        case 'c':
        case 'cc':
          // 03
          return mapValue(parseNDigits(token.length, dateString), valueCallback);
        // 3rd
        case 'co':
          return mapValue(match.ordinalNumber(dateString, {
            unit: 'day'
          }), valueCallback);
        // Tue
        case 'ccc':
          return match.day(dateString, {
            width: 'abbreviated',
            context: 'standalone'
          }) || match.day(dateString, {
            width: 'short',
            context: 'standalone'
          }) || match.day(dateString, {
            width: 'narrow',
            context: 'standalone'
          });
        // T
        case 'ccccc':
          return match.day(dateString, {
            width: 'narrow',
            context: 'standalone'
          });
        // Tu
        case 'cccccc':
          return match.day(dateString, {
            width: 'short',
            context: 'standalone'
          }) || match.day(dateString, {
            width: 'narrow',
            context: 'standalone'
          });
        // Tuesday
        case 'cccc':
        default:
          return match.day(dateString, {
            width: 'wide',
            context: 'standalone'
          }) || match.day(dateString, {
            width: 'abbreviated',
            context: 'standalone'
          }) || match.day(dateString, {
            width: 'short',
            context: 'standalone'
          }) || match.day(dateString, {
            width: 'narrow',
            context: 'standalone'
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneLocalDayParser;
}(Parser);

function setUTCISODay(dirtyDate, dirtyDay) {
  requiredArgs(2, arguments);
  var day = toInteger(dirtyDay);
  if (day % 7 === 0) {
    day = day - 7;
  }
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}

var ISODayParser = /*#__PURE__*/function (_Parser) {
  _inherits(ISODayParser, _Parser);
  var _super = _createSuper(ISODayParser);
  function ISODayParser() {
    var _this;
    _classCallCheck(this, ISODayParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'E', 'e', 'c', 't', 'T']);
    return _this;
  }
  _createClass(ISODayParser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      var valueCallback = function valueCallback(value) {
        if (value === 0) {
          return 7;
        }
        return value;
      };
      switch (token) {
        // 2
        case 'i':
        case 'ii':
          // 02
          return parseNDigits(token.length, dateString);
        // 2nd
        case 'io':
          return match.ordinalNumber(dateString, {
            unit: 'day'
          });
        // Tue
        case 'iii':
          return mapValue(match.day(dateString, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.day(dateString, {
            width: 'short',
            context: 'formatting'
          }) || match.day(dateString, {
            width: 'narrow',
            context: 'formatting'
          }), valueCallback);
        // T
        case 'iiiii':
          return mapValue(match.day(dateString, {
            width: 'narrow',
            context: 'formatting'
          }), valueCallback);
        // Tu
        case 'iiiiii':
          return mapValue(match.day(dateString, {
            width: 'short',
            context: 'formatting'
          }) || match.day(dateString, {
            width: 'narrow',
            context: 'formatting'
          }), valueCallback);
        // Tuesday
        case 'iiii':
        default:
          return mapValue(match.day(dateString, {
            width: 'wide',
            context: 'formatting'
          }) || match.day(dateString, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.day(dateString, {
            width: 'short',
            context: 'formatting'
          }) || match.day(dateString, {
            width: 'narrow',
            context: 'formatting'
          }), valueCallback);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 7;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date = setUTCISODay(date, value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return ISODayParser;
}(Parser);

var AMPMParser = /*#__PURE__*/function (_Parser) {
  _inherits(AMPMParser, _Parser);
  var _super = _createSuper(AMPMParser);
  function AMPMParser() {
    var _this;
    _classCallCheck(this, AMPMParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['b', 'B', 'H', 'k', 't', 'T']);
    return _this;
  }
  _createClass(AMPMParser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      switch (token) {
        case 'a':
        case 'aa':
        case 'aaa':
          return match.dayPeriod(dateString, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.dayPeriod(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
        case 'aaaaa':
          return match.dayPeriod(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
        case 'aaaa':
        default:
          return match.dayPeriod(dateString, {
            width: 'wide',
            context: 'formatting'
          }) || match.dayPeriod(dateString, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.dayPeriod(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return AMPMParser;
}(Parser);

var AMPMMidnightParser = /*#__PURE__*/function (_Parser) {
  _inherits(AMPMMidnightParser, _Parser);
  var _super = _createSuper(AMPMMidnightParser);
  function AMPMMidnightParser() {
    var _this;
    _classCallCheck(this, AMPMMidnightParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['a', 'B', 'H', 'k', 't', 'T']);
    return _this;
  }
  _createClass(AMPMMidnightParser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      switch (token) {
        case 'b':
        case 'bb':
        case 'bbb':
          return match.dayPeriod(dateString, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.dayPeriod(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
        case 'bbbbb':
          return match.dayPeriod(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
        case 'bbbb':
        default:
          return match.dayPeriod(dateString, {
            width: 'wide',
            context: 'formatting'
          }) || match.dayPeriod(dateString, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.dayPeriod(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return AMPMMidnightParser;
}(Parser);

var DayPeriodParser = /*#__PURE__*/function (_Parser) {
  _inherits(DayPeriodParser, _Parser);
  var _super = _createSuper(DayPeriodParser);
  function DayPeriodParser() {
    var _this;
    _classCallCheck(this, DayPeriodParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['a', 'b', 't', 'T']);
    return _this;
  }
  _createClass(DayPeriodParser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      switch (token) {
        case 'B':
        case 'BB':
        case 'BBB':
          return match.dayPeriod(dateString, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.dayPeriod(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
        case 'BBBBB':
          return match.dayPeriod(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
        case 'BBBB':
        default:
          return match.dayPeriod(dateString, {
            width: 'wide',
            context: 'formatting'
          }) || match.dayPeriod(dateString, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.dayPeriod(dateString, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return DayPeriodParser;
}(Parser);

var Hour1to12Parser = /*#__PURE__*/function (_Parser) {
  _inherits(Hour1to12Parser, _Parser);
  var _super = _createSuper(Hour1to12Parser);
  function Hour1to12Parser() {
    var _this;
    _classCallCheck(this, Hour1to12Parser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['H', 'K', 'k', 't', 'T']);
    return _this;
  }
  _createClass(Hour1to12Parser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      switch (token) {
        case 'h':
          return parseNumericPattern(numericPatterns.hour12h, dateString);
        case 'ho':
          return match.ordinalNumber(dateString, {
            unit: 'hour'
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 12;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else if (!isPM && value === 12) {
        date.setUTCHours(0, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date;
    }
  }]);
  return Hour1to12Parser;
}(Parser);

var Hour0to23Parser = /*#__PURE__*/function (_Parser) {
  _inherits(Hour0to23Parser, _Parser);
  var _super = _createSuper(Hour0to23Parser);
  function Hour0to23Parser() {
    var _this;
    _classCallCheck(this, Hour0to23Parser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['a', 'b', 'h', 'K', 'k', 't', 'T']);
    return _this;
  }
  _createClass(Hour0to23Parser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      switch (token) {
        case 'H':
          return parseNumericPattern(numericPatterns.hour23h, dateString);
        case 'Ho':
          return match.ordinalNumber(dateString, {
            unit: 'hour'
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 23;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCHours(value, 0, 0, 0);
      return date;
    }
  }]);
  return Hour0to23Parser;
}(Parser);

var Hour0To11Parser = /*#__PURE__*/function (_Parser) {
  _inherits(Hour0To11Parser, _Parser);
  var _super = _createSuper(Hour0To11Parser);
  function Hour0To11Parser() {
    var _this;
    _classCallCheck(this, Hour0To11Parser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['h', 'H', 'k', 't', 'T']);
    return _this;
  }
  _createClass(Hour0To11Parser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      switch (token) {
        case 'K':
          return parseNumericPattern(numericPatterns.hour11h, dateString);
        case 'Ko':
          return match.ordinalNumber(dateString, {
            unit: 'hour'
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date;
    }
  }]);
  return Hour0To11Parser;
}(Parser);

var Hour1To24Parser = /*#__PURE__*/function (_Parser) {
  _inherits(Hour1To24Parser, _Parser);
  var _super = _createSuper(Hour1To24Parser);
  function Hour1To24Parser() {
    var _this;
    _classCallCheck(this, Hour1To24Parser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['a', 'b', 'h', 'H', 'K', 't', 'T']);
    return _this;
  }
  _createClass(Hour1To24Parser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      switch (token) {
        case 'k':
          return parseNumericPattern(numericPatterns.hour24h, dateString);
        case 'ko':
          return match.ordinalNumber(dateString, {
            unit: 'hour'
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 24;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      var hours = value <= 24 ? value % 24 : value;
      date.setUTCHours(hours, 0, 0, 0);
      return date;
    }
  }]);
  return Hour1To24Parser;
}(Parser);

var MinuteParser = /*#__PURE__*/function (_Parser) {
  _inherits(MinuteParser, _Parser);
  var _super = _createSuper(MinuteParser);
  function MinuteParser() {
    var _this;
    _classCallCheck(this, MinuteParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 60);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['t', 'T']);
    return _this;
  }
  _createClass(MinuteParser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      switch (token) {
        case 'm':
          return parseNumericPattern(numericPatterns.minute, dateString);
        case 'mo':
          return match.ordinalNumber(dateString, {
            unit: 'minute'
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 59;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCMinutes(value, 0, 0);
      return date;
    }
  }]);
  return MinuteParser;
}(Parser);

var SecondParser = /*#__PURE__*/function (_Parser) {
  _inherits(SecondParser, _Parser);
  var _super = _createSuper(SecondParser);
  function SecondParser() {
    var _this;
    _classCallCheck(this, SecondParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 50);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['t', 'T']);
    return _this;
  }
  _createClass(SecondParser, [{
    key: "parse",
    value: function parse(dateString, token, match) {
      switch (token) {
        case 's':
          return parseNumericPattern(numericPatterns.second, dateString);
        case 'so':
          return match.ordinalNumber(dateString, {
            unit: 'second'
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 59;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCSeconds(value, 0);
      return date;
    }
  }]);
  return SecondParser;
}(Parser);

var FractionOfSecondParser = /*#__PURE__*/function (_Parser) {
  _inherits(FractionOfSecondParser, _Parser);
  var _super = _createSuper(FractionOfSecondParser);
  function FractionOfSecondParser() {
    var _this;
    _classCallCheck(this, FractionOfSecondParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 30);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['t', 'T']);
    return _this;
  }
  _createClass(FractionOfSecondParser, [{
    key: "parse",
    value: function parse(dateString, token) {
      var valueCallback = function valueCallback(value) {
        return Math.floor(value * Math.pow(10, -token.length + 3));
      };
      return mapValue(parseNDigits(token.length, dateString), valueCallback);
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCMilliseconds(value);
      return date;
    }
  }]);
  return FractionOfSecondParser;
}(Parser);

var ISOTimezoneWithZParser = /*#__PURE__*/function (_Parser) {
  _inherits(ISOTimezoneWithZParser, _Parser);
  var _super = _createSuper(ISOTimezoneWithZParser);
  function ISOTimezoneWithZParser() {
    var _this;
    _classCallCheck(this, ISOTimezoneWithZParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 10);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['t', 'T', 'x']);
    return _this;
  }
  _createClass(ISOTimezoneWithZParser, [{
    key: "parse",
    value: function parse(dateString, token) {
      switch (token) {
        case 'X':
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
        case 'XX':
          return parseTimezonePattern(timezonePatterns.basic, dateString);
        case 'XXXX':
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
        case 'XXXXX':
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
        case 'XXX':
        default:
          return parseTimezonePattern(timezonePatterns.extended, dateString);
      }
    }
  }, {
    key: "set",
    value: function set(date, flags, value) {
      if (flags.timestampIsSet) {
        return date;
      }
      return new Date(date.getTime() - value);
    }
  }]);
  return ISOTimezoneWithZParser;
}(Parser);

var ISOTimezoneParser = /*#__PURE__*/function (_Parser) {
  _inherits(ISOTimezoneParser, _Parser);
  var _super = _createSuper(ISOTimezoneParser);
  function ISOTimezoneParser() {
    var _this;
    _classCallCheck(this, ISOTimezoneParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 10);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['t', 'T', 'X']);
    return _this;
  }
  _createClass(ISOTimezoneParser, [{
    key: "parse",
    value: function parse(dateString, token) {
      switch (token) {
        case 'x':
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
        case 'xx':
          return parseTimezonePattern(timezonePatterns.basic, dateString);
        case 'xxxx':
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
        case 'xxxxx':
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
        case 'xxx':
        default:
          return parseTimezonePattern(timezonePatterns.extended, dateString);
      }
    }
  }, {
    key: "set",
    value: function set(date, flags, value) {
      if (flags.timestampIsSet) {
        return date;
      }
      return new Date(date.getTime() - value);
    }
  }]);
  return ISOTimezoneParser;
}(Parser);

var TimestampSecondsParser = /*#__PURE__*/function (_Parser) {
  _inherits(TimestampSecondsParser, _Parser);
  var _super = _createSuper(TimestampSecondsParser);
  function TimestampSecondsParser() {
    var _this;
    _classCallCheck(this, TimestampSecondsParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 40);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", '*');
    return _this;
  }
  _createClass(TimestampSecondsParser, [{
    key: "parse",
    value: function parse(dateString) {
      return parseAnyDigitsSigned(dateString);
    }
  }, {
    key: "set",
    value: function set(_date, _flags, value) {
      return [new Date(value * 1000), {
        timestampIsSet: true
      }];
    }
  }]);
  return TimestampSecondsParser;
}(Parser);

var TimestampMillisecondsParser = /*#__PURE__*/function (_Parser) {
  _inherits(TimestampMillisecondsParser, _Parser);
  var _super = _createSuper(TimestampMillisecondsParser);
  function TimestampMillisecondsParser() {
    var _this;
    _classCallCheck(this, TimestampMillisecondsParser);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 20);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", '*');
    return _this;
  }
  _createClass(TimestampMillisecondsParser, [{
    key: "parse",
    value: function parse(dateString) {
      return parseAnyDigitsSigned(dateString);
    }
  }, {
    key: "set",
    value: function set(_date, _flags, value) {
      return [new Date(value), {
        timestampIsSet: true
      }];
    }
  }]);
  return TimestampMillisecondsParser;
}(Parser);

/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* | Milliseconds in day            |
 * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
 * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
 * |  d  | Day of month                   |  D  | Day of year                    |
 * |  e  | Local day of week              |  E  | Day of week                    |
 * |  f  |                                |  F* | Day of week in month           |
 * |  g* | Modified Julian day            |  G  | Era                            |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  i! | ISO day of week                |  I! | ISO week of year               |
 * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
 * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
 * |  l* | (deprecated)                   |  L  | Stand-alone month              |
 * |  m  | Minute                         |  M  | Month                          |
 * |  n  |                                |  N  |                                |
 * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |
 * |  p  |                                |  P  |                                |
 * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
 * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
 * |  u  | Extended year                  |  U* | Cyclic year                    |
 * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
 * |  w  | Local week of year             |  W* | Week of month                  |
 * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
 * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
 * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 *
 * Letters marked by ! are non-standard, but implemented by date-fns:
 * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)
 * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
 *   i.e. 7 for Sunday, 1 for Monday, etc.
 * - `I` is ISO week of year, as opposed to `w` which is local week of year.
 * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
 *   `R` is supposed to be used in conjunction with `I` and `i`
 *   for universal ISO week-numbering date, whereas
 *   `Y` is supposed to be used in conjunction with `w` and `e`
 *   for week-numbering date specific to the locale.
 */
var parsers = {
  G: new EraParser(),
  y: new YearParser(),
  Y: new LocalWeekYearParser(),
  R: new ISOWeekYearParser(),
  u: new ExtendedYearParser(),
  Q: new QuarterParser(),
  q: new StandAloneQuarterParser(),
  M: new MonthParser(),
  L: new StandAloneMonthParser(),
  w: new LocalWeekParser(),
  I: new ISOWeekParser(),
  d: new DateParser(),
  D: new DayOfYearParser(),
  E: new DayParser(),
  e: new LocalDayParser(),
  c: new StandAloneLocalDayParser(),
  i: new ISODayParser(),
  a: new AMPMParser(),
  b: new AMPMMidnightParser(),
  B: new DayPeriodParser(),
  h: new Hour1to12Parser(),
  H: new Hour0to23Parser(),
  K: new Hour0To11Parser(),
  k: new Hour1To24Parser(),
  m: new MinuteParser(),
  s: new SecondParser(),
  S: new FractionOfSecondParser(),
  X: new ISOTimezoneWithZParser(),
  x: new ISOTimezoneParser(),
  t: new TimestampSecondsParser(),
  T: new TimestampMillisecondsParser()
};

// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
//   (one of the certain letters followed by `o`)
// - (\w)\1* matches any sequences of the same letter
// - '' matches two quote characters in a row
// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
//   except a single quote symbol, which ends the sequence.
//   Two quote characters do not end the sequence.
//   If there is no matching single quote
//   then the sequence will continue until the end of the string.
// - . matches any single character unmatched by previous parts of the RegExps
var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;

// This RegExp catches symbols escaped by quotes, and also
// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var notWhitespaceRegExp = /\S/;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;

/**
 * @name parse
 * @category Common Helpers
 * @summary Parse the date.
 *
 * @description
 * Return the date parsed from string using the given format string.
 *
 * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
 * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * The characters in the format string wrapped between two single quotes characters (') are escaped.
 * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
 *
 * Format of the format string is based on Unicode Technical Standard #35:
 * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * with a few additions (see note 5 below the table).
 *
 * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited
 * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:
 *
 * ```javascript
 * parse('23 AM', 'HH a', new Date())
 * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time
 * ```
 *
 * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true
 *
 * Accepted format string patterns:
 * | Unit                            |Prior| Pattern | Result examples                   | Notes |
 * |---------------------------------|-----|---------|-----------------------------------|-------|
 * | Era                             | 140 | G..GGG  | AD, BC                            |       |
 * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |
 * |                                 |     | GGGGG   | A, B                              |       |
 * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |
 * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |
 * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |
 * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |
 * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |
 * |                                 |     | yyyyy   | ...                               | 2,4   |
 * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |
 * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |
 * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |
 * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |
 * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |
 * |                                 |     | YYYYY   | ...                               | 2,4   |
 * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |
 * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |
 * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |
 * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |
 * |                                 |     | RRRRR   | ...                               | 2,4,5 |
 * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |
 * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |
 * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |
 * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |
 * |                                 |     | uuuuu   | ...                               | 2,4   |
 * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |
 * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |
 * |                                 |     | QQ      | 01, 02, 03, 04                    |       |
 * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |
 * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |
 * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |
 * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |
 * |                                 |     | qq      | 01, 02, 03, 04                    |       |
 * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |
 * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |
 * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |
 * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |
 * |                                 |     | MM      | 01, 02, ..., 12                   |       |
 * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |
 * |                                 |     | MMMM    | January, February, ..., December  | 2     |
 * |                                 |     | MMMMM   | J, F, ..., D                      |       |
 * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |
 * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |
 * |                                 |     | LL      | 01, 02, ..., 12                   |       |
 * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |
 * |                                 |     | LLLL    | January, February, ..., December  | 2     |
 * |                                 |     | LLLLL   | J, F, ..., D                      |       |
 * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |
 * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |
 * |                                 |     | ww      | 01, 02, ..., 53                   |       |
 * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |
 * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |
 * |                                 |     | II      | 01, 02, ..., 53                   | 5     |
 * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |
 * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |
 * |                                 |     | dd      | 01, 02, ..., 31                   |       |
 * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |
 * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |
 * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |
 * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |
 * |                                 |     | DDDD    | ...                               | 2     |
 * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |
 * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |
 * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |
 * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |
 * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |
 * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |
 * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |
 * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 5     |
 * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |
 * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |
 * |                                 |     | ee      | 02, 03, ..., 01                   |       |
 * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |
 * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |
 * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |
 * |                                 |     | cc      | 02, 03, ..., 01                   |       |
 * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |
 * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |
 * |                                 |     | aaaa    | a.m., p.m.                        | 2     |
 * |                                 |     | aaaaa   | a, p                              |       |
 * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |
 * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |
 * |                                 |     | bbbbb   | a, p, n, mi                       |       |
 * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |
 * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |
 * |                                 |     | BBBBB   | at night, in the morning, ...     |       |
 * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |
 * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |
 * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |
 * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |
 * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |
 * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |
 * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |
 * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |
 * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |
 * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |
 * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |
 * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |
 * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |
 * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |
 * |                                 |     | mm      | 00, 01, ..., 59                   |       |
 * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |
 * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |
 * |                                 |     | ss      | 00, 01, ..., 59                   |       |
 * | Seconds timestamp               |  40 | t       | 512969520                         |       |
 * |                                 |     | tt      | ...                               | 2     |
 * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |
 * |                                 |     | SS      | 00, 01, ..., 99                   |       |
 * |                                 |     | SSS     | 000, 001, ..., 999                |       |
 * |                                 |     | SSSS    | ...                               | 2     |
 * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |
 * |                                 |     | TT      | ...                               | 2     |
 * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |
 * |                                 |     | XX      | -0800, +0530, Z                   |       |
 * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |
 * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |
 * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
 * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |
 * |                                 |     | xx      | -0800, +0530, +0000               |       |
 * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |
 * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |
 * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
 * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |
 * |                                 |     | PP      | May 29, 1453                      |       |
 * |                                 |     | PPP     | May 29th, 1453                    |       |
 * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |
 * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |
 * |                                 |     | pp      | 12:00:00 AM                       |       |
 * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |
 * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |
 * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |
 * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |
 * Notes:
 * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
 *    are the same as "stand-alone" units, but are different in some languages.
 *    "Formatting" units are declined according to the rules of the language
 *    in the context of a date. "Stand-alone" units are always nominative singular.
 *    In `format` function, they will produce different result:
 *
 *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
 *
 *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
 *
 *    `parse` will try to match both formatting and stand-alone units interchangably.
 *
 * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
 *    the single quote characters (see below).
 *    If the sequence is longer than listed in table:
 *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number
 *      as wide as the sequence
 *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.
 *      These variations are marked with "2" in the last column of the table.
 *
 * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
 *    These tokens represent the shortest form of the quarter.
 *
 * 4. The main difference between `y` and `u` patterns are B.C. years:
 *
 *    | Year | `y` | `u` |
 *    |------|-----|-----|
 *    | AC 1 |   1 |   1 |
 *    | BC 1 |   1 |   0 |
 *    | BC 2 |   2 |  -1 |
 *
 *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:
 *
 *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`
 *
 *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`
 *
 *    while `uu` will just assign the year as is:
 *
 *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`
 *
 *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`
 *
 *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
 *    except local week-numbering years are dependent on `options.weekStartsOn`
 *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}
 *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).
 *
 * 5. These patterns are not in the Unicode Technical Standard #35:
 *    - `i`: ISO day of week
 *    - `I`: ISO week of year
 *    - `R`: ISO week-numbering year
 *    - `o`: ordinal number modifier
 *    - `P`: long localized date
 *    - `p`: long localized time
 *
 * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
 *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.
 *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based
 *    on the given locale.
 *
 *    using `en-US` locale: `P` => `MM/dd/yyyy`
 *    using `en-US` locale: `p` => `hh:mm a`
 *    using `pt-BR` locale: `P` => `dd/MM/yyyy`
 *    using `pt-BR` locale: `p` => `HH:mm`
 *
 * Values will be assigned to the date in the descending order of its unit's priority.
 * Units of an equal priority overwrite each other in the order of appearance.
 *
 * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),
 * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.
 *
 * `referenceDate` must be passed for correct work of the function.
 * If you're not sure which `referenceDate` to supply, create a new instance of Date:
 * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`
 * In this case parsing will be done in the context of the current date.
 * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,
 * then `Invalid Date` will be returned.
 *
 * The result may vary by locale.
 *
 * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.
 *
 * If parsing failed, `Invalid Date` will be returned.
 * Invalid Date is a Date, whose time value is NaN.
 * Time value of Date: http://es5.github.io/#x15.9.1.1
 *
 * @param {String} dateString - the string to parse
 * @param {String} formatString - the string of tokens
 * @param {Date|Number} referenceDate - defines values missing from the parsed dateString
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year
 * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
 *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
 *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @returns {Date} the parsed date
 * @throws {TypeError} 3 arguments required
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
 * @throws {RangeError} `options.locale` must contain `match` property
 * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws {RangeError} format string contains an unescaped latin alphabet character
 *
 * @example
 * // Parse 11 February 2014 from middle-endian format:
 * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())
 * //=> Tue Feb 11 2014 00:00:00
 *
 * @example
 * // Parse 28th of February in Esperanto locale in the context of 2010 year:
 * import eo from 'date-fns/locale/eo'
 * var result = parse('28-a de februaro', "do 'de' MMMM", new Date(2010, 0, 1), {
 *   locale: eo
 * })
 * //=> Sun Feb 28 2010 00:00:00
 */
function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, options) {
  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
  requiredArgs(3, arguments);
  var dateString = String(dirtyDateString);
  var formatString = String(dirtyFormatString);
  var defaultOptions = getDefaultOptions();
  var locale$1 = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : locale;
  if (!locale$1.match) {
    throw new RangeError('locale must contain match property');
  }
  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);

  // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
  }
  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);

  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }
  if (formatString === '') {
    if (dateString === '') {
      return toDate(dirtyReferenceDate);
    } else {
      return new Date(NaN);
    }
  }
  var subFnOptions = {
    firstWeekContainsDate: firstWeekContainsDate,
    weekStartsOn: weekStartsOn,
    locale: locale$1
  };

  // If timezone isn't specified, it will be set to the system timezone
  var setters = [new DateToSystemTimezoneSetter()];
  var tokens = formatString.match(longFormattingTokensRegExp).map(function (substring) {
    var firstCharacter = substring[0];
    if (firstCharacter in longFormatters) {
      var longFormatter = longFormatters[firstCharacter];
      return longFormatter(substring, locale$1.formatLong);
    }
    return substring;
  }).join('').match(formattingTokensRegExp);
  var usedTokens = [];
  var _iterator = _createForOfIteratorHelper(tokens),
    _step;
  try {
    var _loop = function _loop() {
      var token = _step.value;
      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(token)) {
        throwProtectedError(token, formatString, dirtyDateString);
      }
      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(token)) {
        throwProtectedError(token, formatString, dirtyDateString);
      }
      var firstCharacter = token[0];
      var parser = parsers[firstCharacter];
      if (parser) {
        var incompatibleTokens = parser.incompatibleTokens;
        if (Array.isArray(incompatibleTokens)) {
          var incompatibleToken = usedTokens.find(function (usedToken) {
            return incompatibleTokens.includes(usedToken.token) || usedToken.token === firstCharacter;
          });
          if (incompatibleToken) {
            throw new RangeError("The format string mustn't contain `".concat(incompatibleToken.fullToken, "` and `").concat(token, "` at the same time"));
          }
        } else if (parser.incompatibleTokens === '*' && usedTokens.length > 0) {
          throw new RangeError("The format string mustn't contain `".concat(token, "` and any other token at the same time"));
        }
        usedTokens.push({
          token: firstCharacter,
          fullToken: token
        });
        var parseResult = parser.run(dateString, token, locale$1.match, subFnOptions);
        if (!parseResult) {
          return {
            v: new Date(NaN)
          };
        }
        setters.push(parseResult.setter);
        dateString = parseResult.rest;
      } else {
        if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
          throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
        }

        // Replace two single quote characters with one single quote character
        if (token === "''") {
          token = "'";
        } else if (firstCharacter === "'") {
          token = cleanEscapedString(token);
        }

        // Cut token from string, or, if string doesn't match the token, return Invalid Date
        if (dateString.indexOf(token) === 0) {
          dateString = dateString.slice(token.length);
        } else {
          return {
            v: new Date(NaN)
          };
        }
      }
    };
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _ret = _loop();
      if (_typeof(_ret) === "object") return _ret.v;
    }

    // Check if the remaining input contains something other than whitespace
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {
    return new Date(NaN);
  }
  var uniquePrioritySetters = setters.map(function (setter) {
    return setter.priority;
  }).sort(function (a, b) {
    return b - a;
  }).filter(function (priority, index, array) {
    return array.indexOf(priority) === index;
  }).map(function (priority) {
    return setters.filter(function (setter) {
      return setter.priority === priority;
    }).sort(function (a, b) {
      return b.subPriority - a.subPriority;
    });
  }).map(function (setterArray) {
    return setterArray[0];
  });
  var date = toDate(dirtyReferenceDate);
  if (isNaN(date.getTime())) {
    return new Date(NaN);
  }

  // Convert the date in system timezone to the same date in UTC+00:00 timezone.
  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));
  var flags = {};
  var _iterator2 = _createForOfIteratorHelper(uniquePrioritySetters),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var setter = _step2.value;
      if (!setter.validate(utcDate, subFnOptions)) {
        return new Date(NaN);
      }
      var result = setter.set(utcDate, flags, subFnOptions);
      // Result is tuple (date, flags)
      if (Array.isArray(result)) {
        utcDate = result[0];
        assign(flags, result[1]);
        // Result is date
      } else {
        utcDate = result;
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return utcDate;
}
function cleanEscapedString(input) {
  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
}

/**
 * @name subSeconds
 * @category Second Helpers
 * @summary Subtract the specified number of seconds from the given date.
 *
 * @description
 * Subtract the specified number of seconds from the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of seconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the seconds subtracted
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Subtract 30 seconds from 10 July 2014 12:45:00:
 * const result = subSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)
 * //=> Thu Jul 10 2014 12:44:30
 */
function subSeconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addSeconds(dirtyDate, -amount);
}

const dataGridCss = "/*!@.scl-body*/.scl-body.sc-scale-data-grid{margin:0;font:var(--telekom-text-style-body)}/*!@.scl-label*/.scl-label.sc-scale-data-grid{margin:0;font:var(--telekom-text-style-small)}/*!@.scl-h1*/.scl-h1.sc-scale-data-grid{margin:0;font:var(--telekom-text-style-heading-1)}/*!@.scl-h2*/.scl-h2.sc-scale-data-grid{margin:0;font:var(--telekom-text-style-heading-2)}/*!@.scl-h3*/.scl-h3.sc-scale-data-grid{margin:0;font:var(--telekom-text-style-heading-3)}/*!@.scl-h4*/.scl-h4.sc-scale-data-grid{margin:0;font:var(--telekom-text-style-heading-4)}/*!@.scl-h5*/.scl-h5.sc-scale-data-grid{margin:0;font:var(--telekom-text-style-heading-5)}/*!@.scl-h6*/.scl-h6.sc-scale-data-grid{margin:0;font:var(--telekom-text-style-heading-6)}/*!@:host*/.sc-scale-data-grid-h{font-family:var(--telekom-typography-font-family-sans);font-size:var(--telekom-typography-font-size-body);font-weight:var(--telekom-typography-font-weight-regular);line-height:var(--telekom-typography-line-spacing-standard);color:var(--telekom-color-text-and-icon-standard)}/*!@.data-grid input,\n.data-grid select*/.data-grid.sc-scale-data-grid input.sc-scale-data-grid,.data-grid.sc-scale-data-grid select.sc-scale-data-grid{letter-spacing:inherit;font-weight:inherit;font-family:inherit;line-height:inherit}/*!@.data-grid*/.data-grid.sc-scale-data-grid{position:relative;display:block;background:var(--telekom-color-ui-state-fill-standard);border-radius:var(--telekom-radius-large);border:1px solid var(--telekom-color-ui-faint);overflow:hidden}/*!@.data-grid--hide-border*/.data-grid--hide-border.sc-scale-data-grid{border:none}/*!@.data-grid__auto-width-check*/.data-grid__auto-width-check.sc-scale-data-grid{opacity:0}/*!@.data-grid__title-block*/.data-grid__title-block.sc-scale-data-grid{display:flex;align-items:center;justify-content:flex-end;padding-right:var(--telekom-spacing-composition-space-06);padding-left:var(--telekom-spacing-composition-space-08)}/*!@.data-grid__heading*/.data-grid__heading.sc-scale-data-grid{flex-grow:1}/*!@.data-grid__title-block ::slotted(*)*/.data-grid__title-block .sc-scale-data-grid-s>*{margin-left:var(--telekom-spacing-composition-space-04)}/*!@.data-grid__settings-menu*/.data-grid__settings-menu.sc-scale-data-grid{margin-left:var(--telekom-spacing-composition-space-04)}/*!@.data-grid__scroll-container*/.data-grid__scroll-container.sc-scale-data-grid{overflow:auto;overflow-x:overlay;overflow-y:overlay;ms-overflow-style:-ms-autohiding-scrollbar;scrollbar-gutter:stable}/*!@.data-grid__table*/.data-grid__table.sc-scale-data-grid{border-spacing:0;border-collapse:collapse;overflow:hidden}/*!@.data-grid--hide-menu .data-grid__settings-menu*/.data-grid--hide-menu.sc-scale-data-grid .data-grid__settings-menu.sc-scale-data-grid{display:none}/*!@.data-grid:not(.data-grid--hide-menu.data-grid--no-heading)\n  .data-grid__title-block*/.data-grid.sc-scale-data-grid:not(.data-grid--hide-menu.data-grid--no-heading) .data-grid__title-block.sc-scale-data-grid{min-height:var(--telekom-spacing-composition-space-18, 72px)}/*!@.data-grid--hide-menu .data-grid__title-block*/.data-grid--hide-menu.sc-scale-data-grid .data-grid__title-block.sc-scale-data-grid{padding-right:var(--telekom-spacing-composition-space-06)}/*!@.thead*/.thead.sc-scale-data-grid{display:block;white-space:nowrap;border-bottom:1px solid var(--telekom-color-ui-faint);position:relative;background:var(--telekom-color-ui-state-fill-standard);z-index:1}/*!@.data-grid--freeze-header .thead*/.data-grid--freeze-header.sc-scale-data-grid .thead.sc-scale-data-grid{z-index:30;background-color:var(--telekom-color-background-canvas)}/*!@.thead-sortable*/.thead-sortable.sc-scale-data-grid{cursor:pointer}/*!@.thead-sortable:focus*/.thead-sortable.sc-scale-data-grid:focus{box-shadow:inset 0 0 0 var(--telekom-spacing-composition-space-02)\n    var(--telekom-color-functional-focus-standard)}/*!@.thead__cell*/.thead__cell.sc-scale-data-grid{display:inline-flex;align-items:center;height:var(--telekom-spacing-composition-space-10);text-align:left;user-select:none;position:relative;padding:0 var(--telekom-spacing-composition-space-06);color:var(--telekom-color-text-and-icon-additional)}/*!@.thead__cell--numbered*/.thead__cell--numbered.sc-scale-data-grid{text-align:right;justify-content:flex-end}/*!@.thead__cell--selection*/.thead__cell--selection.sc-scale-data-grid{justify-content:center;text-align:center}/*!@.thead__cell--selection xds-checkbox::part(container)*/.thead__cell--selection.sc-scale-data-grid xds-checkbox.sc-scale-data-grid::part(container){justify-content:center}/*!@.thead__title*/.thead__title.sc-scale-data-grid{color:var(--telekom-color-text-and-icon-standard)}/*!@.thead__text*/.thead__text.sc-scale-data-grid{font-size:var(--telekom-typography-font-size-small);line-height:var(--telekom-typography-line-spacing-standard);position:relative}/*!@.thead__arrow-top,\n.thead__arrow-bottom*/.thead__arrow-top.sc-scale-data-grid,.thead__arrow-bottom.sc-scale-data-grid{position:absolute;display:none !important;top:-2px;left:-16px}/*!@.thead__sort-prompt*/.thead__sort-prompt.sc-scale-data-grid{position:absolute;top:0;left:0;width:100%;height:100%;margin:0;background:none;border:0;opacity:1;cursor:pointer}/*!@.thead__divider*/.thead__divider.sc-scale-data-grid{position:absolute;right:calc(-1 * var(--telekom-spacing-composition-space-04));bottom:0px;height:100%;padding:19px var(--telekom-spacing-composition-space-04) 0px;box-sizing:border-box;cursor:col-resize;z-index:1}/*!@.thead__divider-line*/.thead__divider-line.sc-scale-data-grid{pointer-events:none;height:100%;width:1px;background:var(--telekom-color-ui-faint)}/*!@.thead__cell:first-child*/.thead__cell.sc-scale-data-grid:first-child{padding-left:var(--telekom-spacing-composition-space-08)}/*!@.thead__cell:focus*/.thead__cell.sc-scale-data-grid:focus{outline:none}/*!@.thead__cell[aria-sort='ascending'] .thead__arrow-top*/.thead__cell[aria-sort='ascending'].sc-scale-data-grid .thead__arrow-top.sc-scale-data-grid{display:inline-flex !important}/*!@.thead__cell[aria-sort='descending'] .thead__arrow-bottom*/.thead__cell[aria-sort='descending'].sc-scale-data-grid .thead__arrow-bottom.sc-scale-data-grid{display:inline-flex !important}/*!@.thead__cell[aria-sort]:hover*/.thead__cell[aria-sort].sc-scale-data-grid:hover{color:var(--telekom-color-text-and-icon-primary-hovered)}/*!@.thead__cell[aria-sort='none']:hover .thead__arrow-top,\n.thead__cell[aria-sort='none']:hover .thead__arrow-bottom*/.thead__cell[aria-sort='none'].sc-scale-data-grid:hover .thead__arrow-top.sc-scale-data-grid,.thead__cell[aria-sort='none'].sc-scale-data-grid:hover .thead__arrow-bottom.sc-scale-data-grid{display:none !important}/*!@.thead__cell[aria-sort='ascending']:hover .thead__arrow-top*/.thead__cell[aria-sort='ascending'].sc-scale-data-grid:hover .thead__arrow-top.sc-scale-data-grid{color:var(--telekom-color-text-and-icon-primary-hovered)}/*!@.thead__cell[aria-sort='descending']:hover .thead__arrow-bottom*/.thead__cell[aria-sort='descending'].sc-scale-data-grid:hover .thead__arrow-bottom.sc-scale-data-grid{color:var(--telekom-color-text-and-icon-primary-hovered)}/*!@.tbody*/.tbody.sc-scale-data-grid{display:block}/*!@.tbody__row*/.tbody__row.sc-scale-data-grid{display:block;white-space:nowrap}/*!@.tbody__mobile-title*/.tbody__mobile-title.sc-scale-data-grid{display:none}/*!@.tbody__mobile-label*/.tbody__mobile-label.sc-scale-data-grid{display:none}/*!@.tbody__cell*/.tbody__cell.sc-scale-data-grid{display:inline-block;margin:8px;padding:8px;overflow:hidden}/*!@.tbody__cell--numbered*/.tbody__cell--numbered.sc-scale-data-grid{text-align:right}/*!@.tbody__cell--selection*/.tbody__cell--selection.sc-scale-data-grid{justify-content:center;text-align:center}/*!@.tbody__cell--selection scale-checkbox::part(container),\n.tbody__cell--selection scale-checkbox [part='container']*/.tbody__cell--selection.sc-scale-data-grid scale-checkbox.sc-scale-data-grid::part(container),.tbody__cell--selection.sc-scale-data-grid scale-checkbox.sc-scale-data-grid [part='container'].sc-scale-data-grid{justify-content:center}/*!@.tbody__cell scale-checkbox*/.tbody__cell.sc-scale-data-grid scale-checkbox.sc-scale-data-grid{width:auto}/*!@.tbody__nested*/.tbody__nested.sc-scale-data-grid{white-space:nowrap;padding:0px;margin:0px}/*!@.tbody__nested-cell*/.tbody__nested-cell.sc-scale-data-grid{display:block;padding:var(--telekom-spacing-composition-space-06);margin:0px}/*!@.tbody__cell:first-of-type*/.tbody__cell.sc-scale-data-grid:first-of-type{margin-left:var(--telekom-spacing-composition-space-06)}/*!@.tbody__nested-cell:first-child*/.tbody__nested-cell.sc-scale-data-grid:first-child{margin-left:0px}/*!@.data-grid--shade-alternate .tbody__row:nth-of-type(even),\n.data-grid--shade-alternate .tbody__nested:nth-of-type(even)*/.data-grid--shade-alternate.sc-scale-data-grid .tbody__row.sc-scale-data-grid:nth-of-type(even),.data-grid--shade-alternate.sc-scale-data-grid .tbody__nested.sc-scale-data-grid:nth-of-type(even){background:var(--telekom-color-background-surface-subtle)}/*!@.data-grid__auto-width-check .tbody__cell*/.data-grid__auto-width-check.sc-scale-data-grid .tbody__cell.sc-scale-data-grid{padding:0}/*!@.tbody__tag-list*/.tbody__tag-list.sc-scale-data-grid{list-style:none;padding:0;margin:0}/*!@.tbody__tag-list li*/.tbody__tag-list.sc-scale-data-grid li.sc-scale-data-grid{display:inline-block;margin-right:8px}/*!@.tbody__tag-list li:last-child*/.tbody__tag-list.sc-scale-data-grid li.sc-scale-data-grid:last-child{margin-right:0}/*!@.data-grid input[type='checkbox']*/.data-grid.sc-scale-data-grid input[type='checkbox'].sc-scale-data-grid{display:block;height:14px;margin:5px 4px}/*!@.tbody__text-cell*/.tbody__text-cell.sc-scale-data-grid{display:flex;align-items:center}/*!@.tbody__text-cell-prefix*/.tbody__text-cell-prefix.sc-scale-data-grid{display:inline-flex;align-items:center;margin-right:0.5em}/*!@.tbody__text-cell-suffix*/.tbody__text-cell-suffix.sc-scale-data-grid{display:inline-flex;align-items:center;margin-left:0.5em}/*!@.tbody__cell p*/.tbody__cell.sc-scale-data-grid p.sc-scale-data-grid{overflow:hidden;text-overflow:ellipsis}/*!@.tbody__cell scale-link*/.tbody__cell.sc-scale-data-grid scale-link.sc-scale-data-grid{overflow:hidden;text-overflow:ellipsis}/*!@.tbody__bar-cell*/.tbody__bar-cell.sc-scale-data-grid{display:inline-flex;width:100%}/*!@.tbody__cell scale-progress-bar*/.tbody__cell.sc-scale-data-grid scale-progress-bar.sc-scale-data-grid{flex-grow:1}/*!@.tbody__actions scale-button*/.tbody__actions.sc-scale-data-grid scale-button.sc-scale-data-grid{margin-right:var(--telekom-spacing-composition-space-04)}/*!@.data-grid-progress-bar::part(progress-bar)*/.data-grid-progress-bar.sc-scale-data-grid::part(progress-bar){min-width:50px;max-width:200px}/*!@.data-grid-progress-bar::part(status)*/.data-grid-progress-bar.sc-scale-data-grid::part(status){padding-top:0}/*!@.info*/.info.sc-scale-data-grid{height:44px;position:relative;border-top:var(--telekom-line-weight-standard) solid\n    var(--telekom-color-ui-subtle);display:flex;justify-content:center}/*!@.info__selection*/.info__selection.sc-scale-data-grid{position:absolute;bottom:0;line-height:54px;left:var(--telekom-spacing-composition-space-08)}/*!@.data-grid--hide-border:not(.data-grid--mobile) .info__pagination*/.data-grid--hide-border.sc-scale-data-grid:not(.data-grid--mobile) .info__pagination.sc-scale-data-grid{border-bottom:1px solid var(--telekom-color-ui-subtle);border-right:1px solid var(--telekom-color-ui-subtle)}/*!@.data-grid--mobile*/.data-grid--mobile.sc-scale-data-grid{border:none;background:none}/*!@.data-grid--mobile .data-grid__title-block*/.data-grid--mobile.sc-scale-data-grid .data-grid__title-block.sc-scale-data-grid{padding-left:0;padding-right:0}/*!@.data-grid--hide-menu.data-grid--mobile .data-grid__title-block*/.data-grid--hide-menu.data-grid--mobile.sc-scale-data-grid .data-grid__title-block.sc-scale-data-grid{padding-right:0}/*!@.data-grid--mobile .data-grid__settings-menu*/.data-grid--mobile.sc-scale-data-grid .data-grid__settings-menu.sc-scale-data-grid{right:0}/*!@.data-grid--mobile .data-grid__scroll-container*/.data-grid--mobile.sc-scale-data-grid .data-grid__scroll-container.sc-scale-data-grid{height:auto !important}/*!@.data-grid--mobile .data-grid__table*/.data-grid--mobile.sc-scale-data-grid .data-grid__table.sc-scale-data-grid{display:block;height:auto !important}/*!@.data-grid--mobile .thead*/.data-grid--mobile.sc-scale-data-grid .thead.sc-scale-data-grid{display:none}/*!@.data-grid--mobile .tbody*/.data-grid--mobile.sc-scale-data-grid .tbody.sc-scale-data-grid{display:block}/*!@.data-grid--mobile .tbody__row*/.data-grid--mobile.sc-scale-data-grid .tbody__row.sc-scale-data-grid{display:block;position:relative;white-space:initial;margin:0 0 var(--telekom-spacing-composition-space-04);padding:var(--telekom-spacing-composition-space-08);border-radius:var(--telekom-radius-standard);background:var(--telekom-color-background-surface);border:1px solid var(--telekom-color-ui-faint)}/*!@.data-grid--mobile .tbody__row:hover*/.data-grid--mobile.sc-scale-data-grid .tbody__row.sc-scale-data-grid:hover{background:var(--telekom-color-background-surface)}/*!@.data-grid--mobile .tbody__mobile-title*/.data-grid--mobile.sc-scale-data-grid .tbody__mobile-title.sc-scale-data-grid{display:block;margin-bottom:var(--telekom-spacing-composition-space-04)}/*!@.data-grid--mobile .tbody__mobile-label*/.data-grid--mobile.sc-scale-data-grid .tbody__mobile-label.sc-scale-data-grid{display:block}/*!@.data-grid--mobile .tbody__cell*/.data-grid--mobile.sc-scale-data-grid .tbody__cell.sc-scale-data-grid{display:flex;align-items:center;width:auto !important;padding:5px 0;margin:0;min-height:var(--telekom-spacing-composition-space-08);line-height:var(--telekom-spacing-composition-space-08);overflow:auto;overflow-x:hidden}/*!@.data-grid--mobile .tbody__cell--used-as-mobile-title*/.data-grid--mobile.sc-scale-data-grid .tbody__cell--used-as-mobile-title.sc-scale-data-grid{display:none}/*!@.data-grid--mobile .tbody__mobile-label*/.data-grid--mobile.sc-scale-data-grid .tbody__mobile-label.sc-scale-data-grid{display:block;width:100px;flex-shrink:0;color:var(--telekom-color-text-and-icon-additional);font-size:var(--telekom-typography-font-size-small);font-weight:var(--telekom-typography-font-weight-medium)}/*!@.data-grid--mobile .tbody__cell:first-child*/.data-grid--mobile.sc-scale-data-grid .tbody__cell.sc-scale-data-grid:first-child{margin-left:0px}/*!@.data-grid--mobile .tbody__cell--selection*/.data-grid--mobile.sc-scale-data-grid .tbody__cell--selection.sc-scale-data-grid{position:absolute;top:19px;right:12px}/*!@.data-grid--mobile .tbody__cell--numbered*/.data-grid--mobile.sc-scale-data-grid .tbody__cell--numbered.sc-scale-data-grid{position:absolute;top:19px;right:56px}/*!@.data-grid--mobile .tbody__cell scale-text-field,\n.data-grid--mobile .tbody__cell scale-dropdown*/.data-grid--mobile.sc-scale-data-grid .tbody__cell.sc-scale-data-grid scale-text-field.sc-scale-data-grid,.data-grid--mobile.sc-scale-data-grid .tbody__cell.sc-scale-data-grid scale-dropdown.sc-scale-data-grid{width:100%}/*!@.data-grid--mobile .tbody__nested*/.data-grid--mobile.sc-scale-data-grid .tbody__nested.sc-scale-data-grid{width:auto !important}/*!@.data-grid--mobile .tbody__nested-cell*/.data-grid--mobile.sc-scale-data-grid .tbody__nested-cell.sc-scale-data-grid{padding:0;margin-bottom:var(--telekom-spacing-composition-space-04)}/*!@.data-grid--mobile.data-grid--shade-alternate .tbody__row:nth-of-type(even)*/.data-grid--mobile.data-grid--shade-alternate.sc-scale-data-grid .tbody__row.sc-scale-data-grid:nth-of-type(even){background:var(--telekom-color-background-surface)}/*!@.data-grid--mobile .info*/.data-grid--mobile.sc-scale-data-grid .info.sc-scale-data-grid{height:auto;border-top:none;text-align:center}/*!@.data-grid--mobile .info__selection*/.data-grid--mobile.sc-scale-data-grid .info__selection.sc-scale-data-grid{position:relative;left:0}/*!@.data-grid--mobile .info__pagination*//*!@.sr-only*/.sr-only.sc-scale-data-grid{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border-width:0}";

/* Reused Private Variables */
let resizeObserver;
const name$1 = 'data-grid';
/* Component Declaration */
class DataGrid {
  /* 6. Lifecycle Events (call order) */
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleEdit = createEvent$1(this, "scale-edit", 7);
    this.scaleEditLegacy = createEvent$1(this, "scaleEdit", 7);
    this.scaleSort = createEvent$1(this, "scale-sort", 7);
    this.scaleSortLegacy = createEvent$1(this, "scaleSort", 7);
    /* 2. State Variables (alphabetical) */
    /** Used to force render after sorting/selection */
    this.forceRender = 0;
    /** Pagination starting index */
    this.paginationStart = 0;
    /** Table scroll value for frozen header  */
    this.scrollY = 0;
    /** (optional) Freeze header row from scrolling */
    this.freezeHeader = false;
    /** (optional) Heading string */
    this.heading = '';
    /** (optional) Set to true to remove border */
    this.hideBorder = false;
    /** (optional) Set to true to hide header row */
    this.hideHeader = false;
    /** (optional) Set to true to remove info footer block including pagination and selection status */
    this.hideInfo = false;
    /** (optional) Set to true to hide settings menu */
    this.hideMenu = false;
    /** (optional) Set to true to add numbers column */
    this.numbered = false;
    /** (optional) Set number of rows to display per pagination page */
    this.pageSize = Infinity;
    /** (optional) Set to true to add selection column */
    this.selectable = false;
    /** Read-only selection array - populated with raw data from selected rows */
    this.selection = [];
    /** (optional) Shade every second row darker */
    this.shadeAlternate = true;
    /** (optional) Set to false to hide table, used for nested tables to re-render upon toggle */
    this.visible = true;
    /** (optional) Title for sortable columns */
    this.sortableColumnTitle = 'Activate to sort column';
    /** Stored active sorting column index, for state removal */
    this.activeSortingIndex = -1;
    /** Track component width to constrict nested content, which is necessary with table layout */
    this.contentWidth = 100;
    /** Flag to know to check for data completeness */
    this.dataNeedsCheck = true;
    /** Flag to know if rendering can commence */
    this.hasData = false;
    /** Flag that is true when width below a certain limit */
    this.isMobile = false;
    /** Flag that enough data supplied to warrant pagination */
    this.isPagination = false;
    /** Flag that is true if any fields are sortable */
    this.isSortable = false;
    /** Track container width to avoid re-calculating column stretching */
    this.lastContainerWidth = 100;
    /** Index of field to use as mobile title, if any */
    this.mobileTitleIndex = -1;
    /** Determine if auto-width parsing needed */
    this.needsAutoWidthParse = false;
    /** Force column resize after render */
    this.needsColumnResize = false;
    /** Auto-calculated number column width */
    this.numberColumnWidth = 0;
    /** Selection column width */
    this.selectionColumnWidth = 22;
    this.handleMenuListClick = (event) => {
      const menuItems = ['sortBy', 'toggleVisibility'];
      const currentMenuItemsIndex = menuItems.indexOf(event.target.id);
      if (currentMenuItemsIndex > -1) {
        // check if there is already opened flyout menu list with different id, if opened, close it
        const inactiveMenuItem = this.hostElement.shadowRoot.querySelector(`#${menuItems[1 - currentMenuItemsIndex]}List`);
        if (inactiveMenuItem) {
          inactiveMenuItem.setAttribute('opened', 'false');
        }
      }
    };
    // Bind certain callbacks to scope
    this.onDividerMove = this.onDividerMove.bind(this);
    this.onDividerUp = this.onDividerUp.bind(this);
    this.applyResponsiveClasses = this.applyResponsiveClasses.bind(this);
    this.updateColumnStretching = this.updateColumnStretching.bind(this);
  }
  componentWillLoad() {
    this.fieldsHandler();
    this.rowsHandler();
  }
  componentWillUpdate() { }
  componentDidRender() {
    if (this.needsAutoWidthParse) {
      this.calculateAutoWidths();
    }
    // Wait a frame to avoid warning about possible infinite loop
    setTimeout(() => {
      if (this.needsColumnResize) {
        this.updateColumnStretching();
      }
    });
  }
  componentDidLoad() {
    this.addResizeObserver();
  }
  componentDidUpdate() { }
  disconnectedCallback() {
    this.removeResizeObserver();
  }
  /* 7. Listeners */
  fieldsHandler() {
    this.parseFields();
    this.checkForMobileTitle();
    this.checkForSortableFields();
    this.dataNeedsCheck = true;
  }
  rowsHandler() {
    // Reset pagination to the last page of the new records if new records are less than previous.
    if (this.paginationStart > this.rows.length) {
      this.paginationStart =
        this.rows.length - (this.rows.length % this.pageSize);
    }
    this.parseRows();
    this.setInitialRowProps();
    this.resetSortingToggle();
    this.dataNeedsCheck = true;
    // Set flag to dirty to redo column width with new data
    this.needsAutoWidthParse = true;
    this.needsColumnResize = true;
    if (
    // when we run out of items on the current page
    this.rows.length <= this.paginationStart &&
      // and we are NOT on the first page
      this.paginationStart - this.pageSize > -1) {
      // step back one page
      this.paginationStart = this.paginationStart - this.pageSize;
    }
  }
  /* 8. Public Methods */
  /* 9. Local Methods */
  parseFields() {
    if (this.fields && typeof this.fields === 'string') {
      this.fields = JSON.parse(this.fields);
    }
  }
  parseRows() {
    if (this.rows && typeof this.rows === 'string') {
      this.rows = JSON.parse(this.rows);
    }
  }
  setInitialRowProps() {
    if (!this.rows || !this.rows.length) {
      return;
    }
    this.rows.forEach((row, i) => {
      // Store indices of original order on rows for resetting sorting
      row.initialIndex = i;
      // Set initial selected flag
      row.selected = false;
    });
    // Determine if pagination will be required
    this.isPagination = this.pageSize <= this.rows.length - 1;
  }
  checkHasData() {
    // Need both fields and data content in order to populate
    if (!this.fields) {
      return false;
    }
    for (let i = 0; i < this.fields.length; i++) {
      // Use default type if none set
      if (!this.fields[i].type) {
        this.fields[i].type = DEFAULT_CELL_TYPE;
      }
      if (!CELL_TYPES[this.fields[i].type]) {
        // tslint:disable-next-line: no-console
        console.warn(`Unrecognised field type: "${this.fields[i].type}"`);
        return false;
      }
    }
    if (!this.rows || !this.rows.length) {
      return false;
    }
    for (let i = 0; i < this.rows.length; i++) {
      if (this.rows[i].length !== this.fields.length) {
        // tslint:disable-next-line: no-console
        console.warn(`Unable to render ${this.heading && `"${this.heading}" `}table: row data length not equal to supplied fields.`);
        return false;
      }
    }
    return true;
  }
  checkForMobileTitle() {
    // Reset for new data
    this.mobileTitleIndex = -1;
    if (!this.fields) {
      return;
    }
    this.fields.every(({ mobileTitle }, i) => {
      if (mobileTitle) {
        this.mobileTitleIndex = i;
        return false;
      }
      return true;
    });
  }
  checkForSortableFields() {
    this.isSortable = false;
    if (!this.fields) {
      return;
    }
    this.fields.forEach(({ sortable }) => {
      if (sortable) {
        this.isSortable = true;
      }
    });
  }
  getCssClassMap() {
    return classnames(name$1, !this.isMobile && `${name$1}--desktop`, this.isMobile && `${name$1}--mobile`, this.shadeAlternate && `${name$1}--shade-alternate`, this.freezeHeader && `${name$1}--freeze-header`, this.hideBorder && `${name$1}--hide-border`, this.hideMenu && `${name$1}--hide-menu`, !this.heading && `${name$1}--no-heading`);
  }
  polyfillMousePosition(e) {
    // For touch
    if (e.changedTouches && e.changedTouches.length) {
      e.x = e.changedTouches[0].pageX;
      e.y = e.changedTouches[0].pageY;
    }
    // For cross browser support
    if (e.x === undefined) {
      e.x = e.clientX;
      e.y = e.clientY;
    }
  }
  getDefaultLongestContent({ rows, columnIndex }) {
    let maxLength = 0;
    let longestContent;
    rows.forEach((row) => {
      const length = row[columnIndex].toString().length;
      if (length > maxLength) {
        longestContent = row[columnIndex];
        maxLength = length;
      }
    });
    return longestContent;
  }
  // Selection handlers
  toggleSelectAll() {
    if (!this.elToggleSelectAll) {
      return;
    }
    this.rows.forEach((row) => (row.selected = this.elToggleSelectAll.checked));
    this.updateReadableSelection();
    this.forceRender++;
  }
  toggleRowSelect({ target }, rowIndex) {
    this.rows[rowIndex].selected = target.checked;
    this.updateReadableSelection();
    this.forceRender++;
  }
  updateReadableSelection() {
    this.selection.length = 0;
    this.rows.forEach((row) => row.selected && this.selection.push(row));
    // Check header checkbox if any or none are selected
    const selectAll = this.hostElement.shadowRoot.querySelector('.thead__cell--selection scale-checkbox');
    selectAll.checked = !!this.selection.length;
    // selectAll.indeterminate = !!this.selection.length;
  }
  // Sorting handlers
  toggleTableSorting(sortDirection, columnIndex, type) {
    // Remove sorting from previous column index
    if (this.activeSortingIndex > -1 &&
      this.activeSortingIndex !== columnIndex) {
      this.fields[this.activeSortingIndex].sortDirection = 'none';
    }
    // Store new column index
    this.activeSortingIndex = columnIndex;
    const newSortDirection = sortDirection === 'none'
      ? 'ascending'
      : sortDirection === 'ascending'
        ? 'descending'
        : 'none';
    this.fields[columnIndex].sortDirection = newSortDirection;
    this.sortTable(newSortDirection, type, columnIndex);
  }
  sortTable(sortDirection, type, columnIndex) {
    const format = this.fields[columnIndex].format;
    if (sortDirection === 'none') {
      this.rows.sort((a, b) => {
        return a.initialIndex - b.initialIndex;
      });
    }
    else if (type === 'date' && format) {
      this.rows.sort((a, b) => {
        const getDateObject = (dateString) => {
          const parsed = parse(dateString, format, new Date());
          return parsed;
        };
        const dateObjectA = getDateObject(a[columnIndex]);
        const dateObjectB = getDateObject(b[columnIndex]);
        // valueOf here for typescript to not complain about dateObjectA and dateObjectB not being numbers
        return sortDirection === 'ascending'
          ? dateObjectA.valueOf() - dateObjectB.valueOf()
          : dateObjectB.valueOf() - dateObjectA.valueOf();
      });
    }
    else {
      switch ((CELL_TYPES[type] &&
        CELL_TYPES[type].defaults &&
        CELL_TYPES[type].defaults.sortBy) ||
        CELL_DEFAULTS.sortBy) {
        case 'text':
        case 'date':
          if (sortDirection === 'ascending') {
            this.rows.sort((a, b) => {
              const textA = a[columnIndex].toLowerCase();
              const textB = b[columnIndex].toLowerCase();
              return textA < textB ? -1 : textA > textB ? 1 : 0;
            });
          }
          else {
            this.rows.sort((a, b) => {
              const textA = a[columnIndex].toLowerCase();
              const textB = b[columnIndex].toLowerCase();
              return textA > textB ? -1 : textA < textB ? 1 : 0;
            });
          }
          break;
        case 'number':
          if (sortDirection === 'ascending') {
            this.rows.sort((a, b) => {
              return Number(a[columnIndex]) - Number(b[columnIndex]);
            });
          }
          else {
            this.rows.sort((a, b) => {
              return Number(b[columnIndex]) - Number(a[columnIndex]);
            });
          }
          break;
      }
    }
    this.forceRender++;
    // Trigger event
    this.triggerSortEvent(sortDirection, type, columnIndex);
  }
  resetSortingToggle() {
    if (this.activeSortingIndex > -1) {
      this.fields[this.activeSortingIndex].sortDirection = 'none';
    }
    this.activeSortingIndex = -1;
  }
  // Column resize handlers
  onDividerDown(e) {
    this.polyfillMousePosition(e);
    // For touch -  Prevent mousedown firing, and native scroll
    e.preventDefault();
    // Store divider elem for use in move and end events
    this.activeDivider = e.target;
    // Store initial value to calculate change
    e.target.downX = e.x;
    // Reset to avoid reapplying previous change
    this.activeDivider.interactiveWidth = 0;
    window.addEventListener('mousemove', this.onDividerMove);
    window.addEventListener('touchmove', this.onDividerMove);
    window.addEventListener('mouseup', this.onDividerUp);
    window.addEventListener('touchend', this.onDividerUp);
  }
  onDividerMove(e) {
    // TODO: calculate width stretchWidth to drop in correct location
    this.polyfillMousePosition(e);
    const { width, min, max } = this.activeDivider.dataset;
    const diff = e.x - this.activeDivider.downX;
    const newWidth = Math.min(Number(max), Math.max(Number(min), Number(width) + diff));
    const adjustedDiff = newWidth - Number(width);
    this.activeDivider.interactiveWidth = newWidth;
    // Give immediate visual feedback
    this.activeDivider.style.transform = `translateX(${adjustedDiff}px)`;
  }
  onDividerUp() {
    const { index } = this.activeDivider.dataset;
    // Store new width on the field data
    if (this.activeDivider.interactiveWidth) {
      this.fields[Number(index)].width = this.activeDivider.interactiveWidth;
    }
    // Reset visual feedback
    this.activeDivider.style.transform = `translateX(0px)`;
    window.removeEventListener('mousemove', this.onDividerMove);
    window.removeEventListener('touchmove', this.onDividerMove);
    window.removeEventListener('mouseup', this.onDividerUp);
    window.removeEventListener('touchend', this.onDividerUp);
    // Update column stretching before rendering
    this.needsColumnResize = true;
    this.updateColumnStretching();
    // Render to apply change
    this.forceRender++;
  }
  // Column visibility toggle handlers
  toggleVisibilityMenu(e) {
    e.preventDefault();
    // TODO: replace this with contextual menu component, when available
    const visibilityToggle = this.hostElement.shadowRoot.querySelector('.visibility-toggle');
    const menu = visibilityToggle.children[1];
    // By default
    if (visibilityToggle.style.display === 'none') {
      visibilityToggle.style.display = 'block';
      menu.style.transform = `translate(${e.clientX}px, ${e.clientY}px)`;
    }
    else {
      visibilityToggle.style.display = 'none';
    }
  }
  toggleColumnVisibility(value, columnIndex) {
    this.fields[columnIndex].visible = value;
    this.forceRender++;
    // Update column stretching
    this.needsColumnResize = true;
    this.updateColumnStretching();
  }
  // Resize handlers
  addResizeObserver() {
    if (!resizeObserver) {
      // @ts-ignore
      resizeObserver = new ResizeObserver((entries) => {
        for (const entry of entries) {
          // Skip if table not visible/attached
          if (entry.target.offsetParent === null) {
            return;
          }
          entry.target.applyResponsiveClasses(entry);
          entry.target.updateColumnStretching();
        }
      });
    }
    this.elMmainContainer = this.hostElement.shadowRoot.querySelector(`.${name$1}`);
    // Add this instance's callbacks, as resizeObserver is reused
    this.elMmainContainer.applyResponsiveClasses = this.applyResponsiveClasses;
    this.elMmainContainer.updateColumnStretching = this.updateColumnStretching;
    resizeObserver.observe(this.elMmainContainer);
  }
  removeResizeObserver() {
    if (this.elMmainContainer) {
      resizeObserver.unobserve(this.elMmainContainer);
    }
  }
  applyResponsiveClasses() {
    // Apply container-scoped media-query-style classes
    const newIsMobile = this.elMmainContainer.offsetWidth <= 500;
    if (this.isMobile !== newIsMobile) {
      this.forceRender++;
    }
    this.isMobile = newIsMobile;
  }
  updateColumnStretching() {
    // NOTE: any styling padding/margin width changes need to be adjusted here as well
    // Ignore auto-width-check content renders
    if (this.needsAutoWidthParse) {
      return;
    }
    const container = this.elMmainContainer;
    // Minus 2 for border
    const containerWidth = container.offsetWidth - 2;
    const hasContainerWidthChanged = this.lastContainerWidth !== containerWidth;
    // If width hasn't changed, don't re-calculate
    if (!hasContainerWidthChanged && !this.needsColumnResize) {
      return;
    }
    this.needsColumnResize = false;
    this.lastContainerWidth = containerWidth;
    // Don't calculate when mobile layout
    if (container.offsetWidth <= 500) {
      return;
    }
    // The theoretical target width - ignoring any previously applied stretching
    const targetContentWidth = (() => {
      let total = 0;
      // Extra margin on first column
      total += 8;
      if (this.numbered) {
        // 32 for padding+margin
        total += this.numberColumnWidth + 32;
        // this.selectionColumnWidth;
      }
      if (this.selectable) {
        // 32 for padding+margin
        total += this.selectionColumnWidth + 32;
        // If both selectable and numbered - adjust for reduced margin between
        if (this.numbered) {
          total -= 16;
        }
      }
      // Add each visible column's target width
      this.fields.forEach(({ visible = true, width }) => {
        if (visible) {
          // 32 for padding+margin
          total += width + 32;
        }
      });
      return total;
    })();
    // Update value passed to nested content to overcome table display layout
    this.contentWidth = Math.max(targetContentWidth, containerWidth);
    const diff = containerWidth - targetContentWidth;
    if (diff <= 0) {
      // content larger than container (scrollbar), remove all stretching
      this.fields.forEach((field) => (field.stretchWidth = 0));
    }
    else {
      // container larger than content (gap to the right), calculate stretching
      // If stretchWeight set, divide value between total to get final weight
      // If stretchWeight unset, share remainder of 1 (if any) between all unset cols
      let totalSetWeight = 0;
      let unsetColsCount = 0;
      this.fields.forEach(({ visible = true, stretchWeight }) => {
        // Disregard invisible columns
        if (!visible) {
          return;
        }
        if (typeof stretchWeight === 'number') {
          totalSetWeight += stretchWeight;
        }
        else {
          unsetColsCount++;
        }
      });
      const remainderWeight = Math.max(0, 1 - totalSetWeight);
      // Set total to be divided against to be above 1 to keep total set/unset weights equal to 1
      totalSetWeight = Math.max(1, totalSetWeight);
      this.fields.forEach((field) => {
        const { visible = true, stretchWeight } = field;
        if (!visible) {
          return;
        }
        // Actual stretch weight, out of a total 1 for all columns
        let weight = 0;
        if (typeof stretchWeight === 'number') {
          weight = stretchWeight / totalSetWeight;
        }
        else if (remainderWeight > 0) {
          weight = remainderWeight / unsetColsCount;
        }
        // Apply stretching with the weight percentage
        field.stretchWidth = diff * weight;
      });
    }
    this.forceRender++;
  }
  // Auto column width handlers
  calculateAutoWidths() {
    let isVisible = false;
    const columns = this.hostElement.shadowRoot.querySelectorAll(`.${name$1}__auto-width-check td`);
    columns.forEach((cell) => {
      // Make sure table is actually rendered (eg not display:none etc)
      if (!isVisible && cell.offsetParent !== null) {
        isVisible = true;
      }
      if (!isVisible) {
        return;
      }
      // Update field width with that of largest content
      this.fields[cell.dataset.columnindex].width = cell.clientWidth;
    });
    if (!isVisible) {
      return;
    }
    // Wrap in setTimeout to avoid warning about forcing render within render callback
    setTimeout(() => {
      this.needsAutoWidthParse = false;
      this.forceRender++;
    });
  }
  // Event triggers
  triggerSortEvent(sortDirection, type, columnIndex) {
    const data = {
      rows: this.rows,
      type,
      sortDirection,
      columnIndex,
    };
    emitEvent$1(this, 'scaleSort', data);
  }
  triggerEditEvent(value, rowIndex, columnIndex) {
    const data = {
      rows: this.rows,
      rowIndex,
      columnIndex,
      value,
    };
    emitEvent$1(this, 'scaleEdit', data);
    // Force render for checkboxes
    this.forceRender++;
  }
  onTableScroll() {
    if (!this.freezeHeader || this.hideHeader) {
      return;
    }
    // Freeze header
    const scrollY = this.elScrollContainer.scrollTop;
    this.elTableHead.style.transform = `translateY(${scrollY}px)`;
  }
  renderSettingsMenu() {
    var _a, _b, _c;
    return (hAsync("scale-menu-flyout", { class: `${name$1}__settings-menu` }, hAsync("scale-button", { slot: "trigger", variant: "secondary", "icon-only": true, "data-sortable": this.isSortable }, hAsync("scale-icon-service-settings", { accessibilityTitle: "Table options" })), hAsync("scale-menu-flyout-list", null, this.isSortable && (hAsync("scale-menu-flyout-item", { id: "sortBy", onClick: this.handleMenuListClick }, hAsync("scale-icon-action-sort", { slot: "prefix" }), ((_a = this.localization) === null || _a === void 0 ? void 0 : _a.sortBy) || 'Sort By', hAsync("scale-menu-flyout-list", { slot: "sublist", id: "sortByList" }, this.fields.map(({ label, type, sortable, sortDirection = 'none' }, columnIndex) => {
      if (!sortable) {
        return '';
      }
      return (hAsync("scale-menu-flyout-item", { "onScale-select": () => this.toggleTableSorting(sortDirection, columnIndex, type) }, sortDirection === 'ascending' && (hAsync("scale-icon-navigation-collapse-up", { size: 16, slot: "prefix" })), sortDirection === 'descending' && (hAsync("scale-icon-navigation-collapse-down", { size: 16, slot: "prefix" })), sortDirection === 'none' && (hAsync("scale-icon-navigation-collapse-up", { size: 16, slot: "prefix", style: { opacity: '0' } })), label || type));
    })))), hAsync("scale-menu-flyout-item", { id: "toggleVisibility", onClick: this.handleMenuListClick }, hAsync("scale-icon-action-hide-password", { slot: "prefix" }), ((_b = this.localization) === null || _b === void 0 ? void 0 : _b.toggle) || 'Toggle Visibility', hAsync("scale-menu-flyout-list", { slot: "sublist", "close-on-select": "false", id: "toggleVisibilityList" }, this.fields.map(({ label, type, visible = CELL_TYPES[type].defaults.visible !== undefined
      ? CELL_TYPES[type].defaults.visible
      : CELL_DEFAULTS.visible, }, columnIndex) => {
      return (hAsync("scale-menu-flyout-item", { checkable: "checkbox", checked: !!visible, "onScale-select": () => this.toggleColumnVisibility(!visible, columnIndex) }, label || type));
    }))), this.selectable && (hAsync("scale-menu-flyout-item", { "onScale-select": () => {
        this.elToggleSelectAll.checked =
          !this.elToggleSelectAll.checked;
        this.toggleSelectAll();
      } }, hAsync("scale-icon", { slot: "prefix", path: "M20.9328 10.6668C20.5132 10.6668 20.1731 11.0069 20.1731 11.4265V20.3269H1.5194V1.67309H16.5049C16.9245 1.67309 17.2646 1.33292 17.2646 0.913386C17.2646 0.49385 16.9245 0.153687 16.5049 0.153687H0.759699C0.340163 0.153687 0 0.49385 0 0.913386V21.0866C0 21.5062 0.340163 21.8463 0.759699 21.8463H20.9328C21.3523 21.8463 21.6925 21.5062 21.6925 21.0866V11.4265C21.6925 11.0069 21.3524 10.6668 20.9328 10.6668ZM23.7774 0.653387C23.4807 0.356739 22.9997 0.356739 22.703 0.653387L10.3293 13.0272L7.25501 9.9529C6.9583 9.65625 6.47732 9.65625 6.18061 9.9529C5.88396 10.2496 5.88396 10.7306 6.18061 11.0273L9.7921 14.6388C9.94045 14.7871 10.1349 14.8613 10.3293 14.8613C10.5237 14.8613 10.7181 14.7871 10.8665 14.6388L23.7774 1.72778C24.0741 1.43108 24.0741 0.950095 23.7774 0.653387Z" }), ((_c = this.localization) === null || _c === void 0 ? void 0 : _c.select) || 'Select / Deselect All')), hAsync("slot", { name: "menu" }))));
  }
  renderTable() {
    if (this.needsAutoWidthParse) {
      return this.renderAutoWidthCheck();
    }
    return (hAsync("div", { ref: (el) => (this.elScrollContainer = el), class: `${name$1}__scroll-container`, style: { height: this.height || 'auto' }, onScroll: () => this.onTableScroll() }, hAsync("table", { class: `${name$1}__table` }, this.renderTableHead(), this.renderTableBody())));
  }
  renderAutoWidthCheck() {
    // Calculate number column width
    this.numberColumnWidth = this.rows.length.toString().length * 9;
    // Get columns with width option set to 'auto'
    const autoCols = [];
    this.fields.forEach(({ type, width = CELL_TYPES[type].defaults.width || CELL_DEFAULTS.width, }, columnIndex) => {
      if (width === 'auto') {
        autoCols.push(columnIndex);
      }
    });
    if (!autoCols.length) {
      this.needsAutoWidthParse = false;
      return this.renderTable();
    }
    return (hAsync("table", { class: `${name$1}__auto-width-check ${name$1}__table` }, hAsync("tr", { class: `tbody__row` }, autoCols.map((columnIndex) => {
      const field = this.fields[columnIndex];
      const { type, cell = CELL_TYPES[type] } = field;
      // Find largest content of each type. Use custom getter if exists
      const getLongestContent = cell.getLongestContent || this.getDefaultLongestContent;
      const content = getLongestContent({
        rows: this.rows,
        columnIndex,
        field,
      });
      return (hAsync("td", { class: `tbody__cell`, style: { width: 'auto' }, "data-columnindex": columnIndex }, cell.render({
        field,
        content,
        component: this,
        isAutoWidthCheck: true,
      })));
    }))));
  }
  renderTableHead() {
    return (hAsync("thead", { ref: (el) => (this.elTableHead = el), class: `thead ${this.hideHeader ? 'sr-only' : ''}` }, hAsync("tr", { class: `thead__row` }, this.numbered && this.renderTableHeadNumberedCell(), this.selectable && this.renderTableHeadSelectableCell(), this.fields.map(({ type, label = '', 
    // Params can be set optionally in the fields options, in the cell type
    // descriptor class, or falls back to common defaults
    visible = CELL_TYPES[type].defaults.visible !== undefined
      ? CELL_TYPES[type].defaults.visible
      : CELL_DEFAULTS.visible, sortable, sortDirection = 'none', resizable = CELL_TYPES[type].defaults.resizable !== undefined
      ? CELL_TYPES[type].defaults.resizable
      : CELL_DEFAULTS.resizable, width = CELL_TYPES[type].defaults.width || CELL_DEFAULTS.width, minWidth = CELL_TYPES[type].defaults.minWidth ||
      CELL_DEFAULTS.minWidth, maxWidth = CELL_TYPES[type].defaults.maxWidth ||
      CELL_DEFAULTS.maxWidth, textAlign = CELL_TYPES[type].defaults.textAlign ||
      CELL_DEFAULTS.textAlign, stretchWidth = 0, }, columnIndex) => {
      if (!visible) {
        return;
      }
      const props = {
        class: `thead__cell`,
        style: {
          width: `calc(${width}px + ${stretchWidth}px)`,
          'justify-content': textAlign,
        },
        'data-type': type,
      };
      if (sortable) {
        props['aria-sort'] = sortDirection;
      }
      return (hAsync("th", Object.assign({ title: sortable ? this.sortableColumnTitle : undefined }, props, (sortable
        ? {
          onKeyDown: (event) => {
            if (['Enter', ' '].includes(event.key)) {
              this.toggleTableSorting(sortDirection, columnIndex, type);
            }
          },
          onClick: (e) => {
            const clickedElement = e.target;
            if (!clickedElement.matches('.thead__divider')) {
              this.toggleTableSorting(sortDirection, columnIndex, type);
            }
          },
          tabindex: 0,
          class: `${props.class} thead-sortable`,
        }
        : {})), hAsync("div", { class: `thead__title` }, hAsync("span", { class: `thead__text` }, sortable && (hAsync("scale-icon-content-sort-indicator-up", { size: 16, class: `thead__arrow-top` })), sortable && (hAsync("scale-icon-content-sort-indicator-down", { size: 16, class: `thead__arrow-bottom` })), label)), resizable && (hAsync("div", { class: `thead__divider`, "data-index": columnIndex, "data-width": width, "data-min": minWidth, "data-max": maxWidth, onMouseDown: (e) => this.onDividerDown(e), onTouchStart: (e) => this.onDividerDown(e), "aria-hidden": "true" }, hAsync("div", { class: `thead__divider-line` })))));
    }))));
  }
  renderTableHeadNumberedCell() {
    return (hAsync("th", { class: `thead__cell  thead__cell--numbered`, style: { width: this.numberColumnWidth + 'px' } }, hAsync("span", { class: "scl-body" }, "#")));
  }
  renderTableHeadSelectableCell() {
    const style = {
      width: this.selectionColumnWidth + 'px',
    };
    // Make selection and numbered cells closer than regular padding
    if (this.numbered) {
      style.paddingLeft = '0px';
    }
    return (hAsync("th", { class: `thead__cell thead__cell--selection`, style: style, title: "Select" }, hAsync("scale-checkbox", { ref: (el) => (this.elToggleSelectAll = el), onScaleChange: () => this.toggleSelectAll(), hideLabel: true, "aria-label": "Select" })));
  }
  renderTableBody() {
    return (hAsync("tbody", { class: `tbody` }, (() => {
      const rows = [];
      // Pagination functionality
      const total = this.rows.length;
      const start = this.paginationStart;
      const end = Math.min(total, this.paginationStart + this.pageSize);
      for (let rowIndex = start; rowIndex < end; rowIndex++) {
        const rowData = this.rows[rowIndex];
        const rowNestedContent = [];
        let isNestedExpanded = false;
        rows.push(hAsync("tr", { class: `tbody__row` }, this.renderMobileTitle(rowData), this.numbered && this.renderTableBodyNumberedCell(rowIndex), this.selectable &&
          this.renderTableBodySelectableCell(rowIndex), rowData.map((cellContent, columnIndex) => {
          const field = this.fields[columnIndex];
          const visible = field.visible !== undefined
            ? field.visible
            : CELL_TYPES[field.type].defaults.visible !== undefined
              ? CELL_TYPES[field.type].defaults.visible
              : CELL_DEFAULTS.visible;
          if (!visible) {
            return;
          }
          // Add rows nested tables to array
          if (field.type === 'html') {
            if (!cellContent) {
              return this.renderTableCell(field, null, rowIndex, columnIndex);
            }
            if (!!cellContent.isExpanded) {
              isNestedExpanded = true;
            }
            rowNestedContent.push({
              content: cellContent,
            });
          }
          return this.renderTableCell(field, cellContent, rowIndex, columnIndex);
        })));
        // Add second row for nested content if any within the row are expanded
        if (rowNestedContent.length) {
          rows.push(hAsync("div", { class: `tbody__nested`, style: {
              width: this.contentWidth + 'px',
              display: isNestedExpanded ? 'block' : 'none',
            } }, hAsync("td", { class: `tbody__nested-cell` }, rowNestedContent.map(({ content }) => {
            return (content && (hAsync("div", { ref: (el) => {
                if (el) {
                  // Remove content from other pages
                  let child = el.lastElementChild;
                  while (child) {
                    el.removeChild(child);
                    child = el.lastElementChild;
                  }
                  // Append actual content
                  el.appendChild(content);
                }
              } })));
          }))));
        }
      }
      return rows;
    })()));
  }
  renderMobileTitle(rowData) {
    if (this.mobileTitleIndex === -1) {
      return hAsync("h5", { class: `tbody__mobile-title scl-h5` }, "\u00A0");
    }
    return (hAsync("h5", { class: `tbody__mobile-title scl-h5` }, rowData[this.mobileTitleIndex]));
  }
  renderTableBodyNumberedCell(rowIndex) {
    return (hAsync("td", { class: `tbody__cell tbody__cell--numbered`, style: { width: this.numberColumnWidth + 'px' } }, hAsync("p", { class: "scl-body" }, rowIndex + 1)));
  }
  renderTableBodySelectableCell(rowIndex) {
    const style = {
      width: this.selectionColumnWidth + 'px',
    };
    if (this.numbered) {
      style.marginLeft = '0px';
      style.paddingLeft = '0px';
    }
    return (hAsync("td", { title: this.rows[rowIndex][0], class: `tbody__cell tbody__cell--selection`, style: style }, hAsync("scale-checkbox", { checked: this.rows[rowIndex].selected, onScaleChange: (e) => this.toggleRowSelect(e, rowIndex), hideLabel: true })));
  }
  renderTableCell(field, content, rowIndex, columnIndex) {
    const cell = CELL_TYPES[field.type];
    const { label, 
    // Use custom field, or default defined in class, or fallback default
    width = cell.defaults.width || CELL_DEFAULTS.width, stretchWidth = 0, mobileTitle, // For text cells
     } = field;
    return (hAsync("td", { class: `tbody__cell${mobileTitle ? ` tbody__cell--used-as-mobile-title` : ``}`, style: { width: `calc(${width}px + ${stretchWidth}px)` } }, hAsync("div", { class: `tbody__mobile-label` }, label), cell.render({
      field,
      content,
      component: this,
      rowIndex,
      columnIndex,
    })));
  }
  renderTableInfo() {
    return (hAsync("div", { class: `info` }, this.selectable && !!this.selection.length && (hAsync("div", { class: `info__selection` }, `${this.selection.length} row${this.selection.length > 1 ? 's' : ''} selected`)), this.isPagination && (hAsync("scale-pagination", { class: `info__pagination`, hideBorder: !this.isMobile, startElement: this.paginationStart, totalElements: this.rows.length, pageSize: this.pageSize, onScalePagination: ({ detail }) => (this.paginationStart = detail.startElement) }))));
  }
  /* 10. Render */
  render() {
    if (this.dataNeedsCheck) {
      this.hasData = this.checkHasData();
    }
    return (hAsync(Host$1, { style: {
        display: this.visible ? 'block' : 'none',
      } }, this.styles && hAsync("style", null, this.styles), hAsync("div", { class: this.getCssClassMap() }, hAsync("div", { class: `${name$1}__title-block` }, this.heading && (hAsync("h4", { class: `${name$1}__heading scl-h5` }, this.heading)), hAsync("div", null, hAsync("slot", null)), this.hasData && this.renderSettingsMenu()), this.hasData && this.renderTable(), this.hasData &&
      !this.hideInfo &&
      !this.needsAutoWidthParse &&
      (this.selectable || this.isPagination) &&
      this.renderTableInfo())));
  }
  get hostElement() { return getElement$1(this); }
  static get watchers() { return {
    "fields": ["fieldsHandler"],
    "rows": ["rowsHandler"]
  }; }
  static get style() { return dataGridCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-data-grid",
    "$members$": {
      "fields": [8],
      "freezeHeader": [4, "freeze-header"],
      "heading": [1],
      "height": [1],
      "hideBorder": [4, "hide-border"],
      "hideHeader": [4, "hide-header"],
      "hideInfo": [4, "hide-info"],
      "hideMenu": [4, "hide-menu"],
      "numbered": [4],
      "pageSize": [2, "page-size"],
      "rows": [8],
      "selectable": [4],
      "selection": [16],
      "shadeAlternate": [4, "shade-alternate"],
      "styles": [8],
      "visible": [4],
      "sortableColumnTitle": [1, "sortable-column-title"],
      "localization": [16],
      "forceRender": [32],
      "paginationStart": [32],
      "scrollY": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

let scopeId;
let contentRef;
let hostTagName;
let useNativeShadowDom = false;
let checkSlotFallbackVisibility = false;
let checkSlotRelocate = false;
let isSvgMode = false;
let queuePending = false;
const win = typeof window !== 'undefined' ? window : {};
const doc = win.document || { head: {} };
const plt = {
    $flags$: 0,
    $resourcesUrl$: '',
    jmp: (h) => h(),
    raf: (h) => requestAnimationFrame(h),
    ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),
    rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),
    ce: (eventName, opts) => new CustomEvent(eventName, opts),
};
const supportsShadow = /*@__PURE__*/ (() => (doc.head.attachShadow + '').indexOf('[native') > -1)()
    ;
const promiseResolve = (v) => Promise.resolve(v);
const addHostEventListeners = (elm, hostRef, listeners, attachParentListeners) => {
    if (listeners) {
        listeners.map(([flags, name, method]) => {
            const target = getHostListenerTarget(elm, flags) ;
            const handler = hostListenerProxy(hostRef, method);
            const opts = hostListenerOpts(flags);
            plt.ael(target, name, handler, opts);
            (hostRef.$rmListeners$ = hostRef.$rmListeners$ || []).push(() => plt.rel(target, name, handler, opts));
        });
    }
};
const hostListenerProxy = (hostRef, methodName) => (ev) => {
    try {
        {
            if (hostRef.$flags$ & 256 /* isListenReady */) {
                // instance is ready, let's call it's member method for this event
                hostRef.$lazyInstance$[methodName](ev);
            }
            else {
                (hostRef.$queuedListeners$ = hostRef.$queuedListeners$ || []).push([methodName, ev]);
            }
        }
    }
    catch (e) {
        consoleError(e);
    }
};
const getHostListenerTarget = (elm, flags) => {
    if (flags & 4 /* TargetDocument */)
        return doc;
    if (flags & 8 /* TargetWindow */)
        return win;
    return elm;
};
// prettier-ignore
const hostListenerOpts = (flags) => (flags & 2 /* Capture */) !== 0;
const CONTENT_REF_ID = 'r';
const ORG_LOCATION_ID = 'o';
const SLOT_NODE_ID = 's';
const TEXT_NODE_ID = 't';
const HYDRATE_ID = 's-id';
const HYDRATED_STYLE_ID = 'sty-id';
const HYDRATE_CHILD_ID = 'c-id';
const XLINK_NS = 'http://www.w3.org/1999/xlink';
const createTime = (fnName, tagName = '') => {
    {
        return () => {
            return;
        };
    }
};
const uniqueTime = (key, measureText) => {
    {
        return () => {
            return;
        };
    }
};
const rootAppliedStyles = new WeakMap();
const registerStyle = (scopeId, cssText, allowCS) => {
    let style = styles.get(scopeId);
    {
        style = cssText;
    }
    styles.set(scopeId, style);
};
const addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {
    let scopeId = getScopeId(cmpMeta);
    const style = styles.get(scopeId);
    // if an element is NOT connected then getRootNode() will return the wrong root node
    // so the fallback is to always use the document for the root node in those cases
    styleContainerNode = styleContainerNode.nodeType === 11 /* DocumentFragment */ ? styleContainerNode : doc;
    if (style) {
        if (typeof style === 'string') {
            styleContainerNode = styleContainerNode.head || styleContainerNode;
            let appliedStyles = rootAppliedStyles.get(styleContainerNode);
            let styleElm;
            if (!appliedStyles) {
                rootAppliedStyles.set(styleContainerNode, (appliedStyles = new Set()));
            }
            if (!appliedStyles.has(scopeId)) {
                if (styleContainerNode.host &&
                    (styleElm = styleContainerNode.querySelector(`[${HYDRATED_STYLE_ID}="${scopeId}"]`))) {
                    // This is only happening on native shadow-dom, do not needs CSS var shim
                    styleElm.innerHTML = style;
                }
                else {
                    {
                        styleElm = doc.createElement('style');
                        styleElm.innerHTML = style;
                    }
                    {
                        styleElm.setAttribute(HYDRATED_STYLE_ID, scopeId);
                    }
                    styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));
                }
                if (appliedStyles) {
                    appliedStyles.add(scopeId);
                }
            }
        }
    }
    return scopeId;
};
const attachStyles = (hostRef) => {
    const cmpMeta = hostRef.$cmpMeta$;
    const elm = hostRef.$hostElement$;
    const flags = cmpMeta.$flags$;
    const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);
    const scopeId = addStyle(supportsShadow && elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta);
    if (flags & 10 /* needsScopedEncapsulation */) {
        // only required when we're NOT using native shadow dom (slot)
        // or this browser doesn't support native shadow dom
        // and this host element was NOT created with SSR
        // let's pick out the inner content for slot projection
        // create a node to represent where the original
        // content was first placed, which is useful later on
        // DOM WRITE!!
        elm['s-sc'] = scopeId;
        elm.classList.add(scopeId + '-h');
    }
    endAttachStyles();
};
const getScopeId = (cmp, mode) => 'sc-' + (cmp.$tagName$);
/**
 * Default style mode id
 */
/**
 * Reusable empty obj/array
 * Don't add values to these!!
 */
const EMPTY_OBJ = {};
/**
 * Namespaces
 */
const SVG_NS = 'http://www.w3.org/2000/svg';
const HTML_NS = 'http://www.w3.org/1999/xhtml';
const isDef = (v) => v != null;
const isComplexType = (o) => {
    // https://jsperf.com/typeof-fn-object/5
    o = typeof o;
    return o === 'object' || o === 'function';
};
/**
 * Production h() function based on Preact by
 * Jason Miller (@developit)
 * Licensed under the MIT License
 * https://github.com/developit/preact/blob/master/LICENSE
 *
 * Modified for Stencil's compiler and vdom
 */
// const stack: any[] = [];
// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;
// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;
const h = (nodeName, vnodeData, ...children) => {
    let child = null;
    let key = null;
    let slotName = null;
    let simple = false;
    let lastSimple = false;
    const vNodeChildren = [];
    const walk = (c) => {
        for (let i = 0; i < c.length; i++) {
            child = c[i];
            if (Array.isArray(child)) {
                walk(child);
            }
            else if (child != null && typeof child !== 'boolean') {
                if ((simple = typeof nodeName !== 'function' && !isComplexType(child))) {
                    child = String(child);
                }
                if (simple && lastSimple) {
                    // If the previous child was simple (string), we merge both
                    vNodeChildren[vNodeChildren.length - 1].$text$ += child;
                }
                else {
                    // Append a new vNode, if it's text, we create a text vNode
                    vNodeChildren.push(simple ? newVNode(null, child) : child);
                }
                lastSimple = simple;
            }
        }
    };
    walk(children);
    if (vnodeData) {
        // normalize class / classname attributes
        if (vnodeData.key) {
            key = vnodeData.key;
        }
        if (vnodeData.name) {
            slotName = vnodeData.name;
        }
        {
            const classData = vnodeData.className || vnodeData.class;
            if (classData) {
                vnodeData.class =
                    typeof classData !== 'object'
                        ? classData
                        : Object.keys(classData)
                            .filter((k) => classData[k])
                            .join(' ');
            }
        }
    }
    if (typeof nodeName === 'function') {
        // nodeName is a functional component
        return nodeName(vnodeData === null ? {} : vnodeData, vNodeChildren, vdomFnUtils);
    }
    const vnode = newVNode(nodeName, null);
    vnode.$attrs$ = vnodeData;
    if (vNodeChildren.length > 0) {
        vnode.$children$ = vNodeChildren;
    }
    {
        vnode.$key$ = key;
    }
    {
        vnode.$name$ = slotName;
    }
    return vnode;
};
const newVNode = (tag, text) => {
    const vnode = {
        $flags$: 0,
        $tag$: tag,
        $text$: text,
        $elm$: null,
        $children$: null,
    };
    {
        vnode.$attrs$ = null;
    }
    {
        vnode.$key$ = null;
    }
    {
        vnode.$name$ = null;
    }
    return vnode;
};
const Host = {};
const isHost = (node) => node && node.$tag$ === Host;
const vdomFnUtils = {
    forEach: (children, cb) => children.map(convertToPublic).forEach(cb),
    map: (children, cb) => children.map(convertToPublic).map(cb).map(convertToPrivate),
};
const convertToPublic = (node) => ({
    vattrs: node.$attrs$,
    vchildren: node.$children$,
    vkey: node.$key$,
    vname: node.$name$,
    vtag: node.$tag$,
    vtext: node.$text$,
});
const convertToPrivate = (node) => {
    if (typeof node.vtag === 'function') {
        const vnodeData = Object.assign({}, node.vattrs);
        if (node.vkey) {
            vnodeData.key = node.vkey;
        }
        if (node.vname) {
            vnodeData.name = node.vname;
        }
        return h(node.vtag, vnodeData, ...(node.vchildren || []));
    }
    const vnode = newVNode(node.vtag, node.vtext);
    vnode.$attrs$ = node.vattrs;
    vnode.$children$ = node.vchildren;
    vnode.$key$ = node.vkey;
    vnode.$name$ = node.vname;
    return vnode;
};
/**
 * Production setAccessor() function based on Preact by
 * Jason Miller (@developit)
 * Licensed under the MIT License
 * https://github.com/developit/preact/blob/master/LICENSE
 *
 * Modified for Stencil's compiler and vdom
 */
const setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {
    if (oldValue !== newValue) {
        let isProp = isMemberInElement(elm, memberName);
        let ln = memberName.toLowerCase();
        if (memberName === 'class') {
            const classList = elm.classList;
            const oldClasses = parseClassList(oldValue);
            const newClasses = parseClassList(newValue);
            classList.remove(...oldClasses.filter((c) => c && !newClasses.includes(c)));
            classList.add(...newClasses.filter((c) => c && !oldClasses.includes(c)));
        }
        else if (memberName === 'style') {
            // update style attribute, css properties and values
            {
                for (const prop in oldValue) {
                    if (!newValue || newValue[prop] == null) {
                        {
                            elm.style[prop] = '';
                        }
                    }
                }
            }
            for (const prop in newValue) {
                if (!oldValue || newValue[prop] !== oldValue[prop]) {
                    {
                        elm.style[prop] = newValue[prop];
                    }
                }
            }
        }
        else if (memberName === 'key')
            ;
        else if (memberName === 'ref') {
            // minifier will clean this up
            if (newValue) {
                newValue(elm);
            }
        }
        else if ((!isProp ) &&
            memberName[0] === 'o' &&
            memberName[1] === 'n') {
            // Event Handlers
            // so if the member name starts with "on" and the 3rd characters is
            // a capital letter, and it's not already a member on the element,
            // then we're assuming it's an event listener
            if (memberName[2] === '-') {
                // on- prefixed events
                // allows to be explicit about the dom event to listen without any magic
                // under the hood:
                // <my-cmp on-click> // listens for "click"
                // <my-cmp on-Click> // listens for "Click"
                // <my-cmp on-ionChange> // listens for "ionChange"
                // <my-cmp on-EVENTS> // listens for "EVENTS"
                memberName = memberName.slice(3);
            }
            else if (isMemberInElement(win, ln)) {
                // standard event
                // the JSX attribute could have been "onMouseOver" and the
                // member name "onmouseover" is on the window's prototype
                // so let's add the listener "mouseover", which is all lowercased
                memberName = ln.slice(2);
            }
            else {
                // custom event
                // the JSX attribute could have been "onMyCustomEvent"
                // so let's trim off the "on" prefix and lowercase the first character
                // and add the listener "myCustomEvent"
                // except for the first character, we keep the event name case
                memberName = ln[2] + memberName.slice(3);
            }
            if (oldValue) {
                plt.rel(elm, memberName, oldValue, false);
            }
            if (newValue) {
                plt.ael(elm, memberName, newValue, false);
            }
        }
        else {
            // Set property if it exists and it's not a SVG
            const isComplex = isComplexType(newValue);
            if ((isProp || (isComplex && newValue !== null)) && !isSvg) {
                try {
                    if (!elm.tagName.includes('-')) {
                        const n = newValue == null ? '' : newValue;
                        // Workaround for Safari, moving the <input> caret when re-assigning the same valued
                        if (memberName === 'list') {
                            isProp = false;
                        }
                        else if (oldValue == null || elm[memberName] != n) {
                            elm[memberName] = n;
                        }
                    }
                    else {
                        elm[memberName] = newValue;
                    }
                }
                catch (e) { }
            }
            /**
             * Need to manually update attribute if:
             * - memberName is not an attribute
             * - if we are rendering the host element in order to reflect attribute
             * - if it's a SVG, since properties might not work in <svg>
             * - if the newValue is null/undefined or 'false'.
             */
            let xlink = false;
            {
                if (ln !== (ln = ln.replace(/^xlink\:?/, ''))) {
                    memberName = ln;
                    xlink = true;
                }
            }
            if (newValue == null || newValue === false) {
                if (newValue !== false || elm.getAttribute(memberName) === '') {
                    if (xlink) {
                        elm.removeAttributeNS(XLINK_NS, memberName);
                    }
                    else {
                        elm.removeAttribute(memberName);
                    }
                }
            }
            else if ((!isProp || flags & 4 /* isHost */ || isSvg) && !isComplex) {
                newValue = newValue === true ? '' : newValue;
                if (xlink) {
                    elm.setAttributeNS(XLINK_NS, memberName, newValue);
                }
                else {
                    elm.setAttribute(memberName, newValue);
                }
            }
        }
    }
};
const parseClassListRegex = /\s/;
const parseClassList = (value) => (!value ? [] : value.split(parseClassListRegex));
const updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {
    // if the element passed in is a shadow root, which is a document fragment
    // then we want to be adding attrs/props to the shadow root's "host" element
    // if it's not a shadow root, then we add attrs/props to the same element
    const elm = newVnode.$elm$.nodeType === 11 /* DocumentFragment */ && newVnode.$elm$.host
        ? newVnode.$elm$.host
        : newVnode.$elm$;
    const oldVnodeAttrs = (oldVnode && oldVnode.$attrs$) || EMPTY_OBJ;
    const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;
    {
        // remove attributes no longer present on the vnode by setting them to undefined
        for (memberName in oldVnodeAttrs) {
            if (!(memberName in newVnodeAttrs)) {
                setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);
            }
        }
    }
    // add new & update changed attributes
    for (memberName in newVnodeAttrs) {
        setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);
    }
};
const createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {
    // tslint:disable-next-line: prefer-const
    const newVNode = newParentVNode.$children$[childIndex];
    let i = 0;
    let elm;
    let childNode;
    let oldVNode;
    if (!useNativeShadowDom) {
        // remember for later we need to check to relocate nodes
        checkSlotRelocate = true;
        if (newVNode.$tag$ === 'slot') {
            if (scopeId) {
                // scoped css needs to add its scoped id to the parent element
                parentElm.classList.add(scopeId + '-s');
            }
            newVNode.$flags$ |= newVNode.$children$
                ? // slot element has fallback content
                    2 /* isSlotFallback */
                : // slot element does not have fallback content
                    1 /* isSlotReference */;
        }
    }
    if (newVNode.$text$ !== null) {
        // create text node
        elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);
    }
    else if (newVNode.$flags$ & 1 /* isSlotReference */) {
        // create a slot reference node
        elm = newVNode.$elm$ =
            slotReferenceDebugNode(newVNode) ;
    }
    else {
        if (!isSvgMode) {
            isSvgMode = newVNode.$tag$ === 'svg';
        }
        // create element
        elm = newVNode.$elm$ = (doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS, newVNode.$flags$ & 2 /* isSlotFallback */
                ? 'slot-fb'
                : newVNode.$tag$)
            );
        if (isSvgMode && newVNode.$tag$ === 'foreignObject') {
            isSvgMode = false;
        }
        // add css classes, attrs, props, listeners, etc.
        {
            updateElement(null, newVNode, isSvgMode);
        }
        if (isDef(scopeId) && elm['s-si'] !== scopeId) {
            // if there is a scopeId and this is the initial render
            // then let's add the scopeId as a css class
            elm.classList.add((elm['s-si'] = scopeId));
        }
        if (newVNode.$children$) {
            for (i = 0; i < newVNode.$children$.length; ++i) {
                // create the node
                childNode = createElm(oldParentVNode, newVNode, i, elm);
                // return node could have been null
                if (childNode) {
                    // append our new node
                    elm.appendChild(childNode);
                }
            }
        }
        {
            if (newVNode.$tag$ === 'svg') {
                // Only reset the SVG context when we're exiting <svg> element
                isSvgMode = false;
            }
            else if (elm.tagName === 'foreignObject') {
                // Reenter SVG context when we're exiting <foreignObject> element
                isSvgMode = true;
            }
        }
    }
    {
        elm['s-hn'] = hostTagName;
        if (newVNode.$flags$ & (2 /* isSlotFallback */ | 1 /* isSlotReference */)) {
            // remember the content reference comment
            elm['s-sr'] = true;
            // remember the content reference comment
            elm['s-cr'] = contentRef;
            // remember the slot name, or empty string for default slot
            elm['s-sn'] = newVNode.$name$ || '';
            // check if we've got an old vnode for this slot
            oldVNode = oldParentVNode && oldParentVNode.$children$ && oldParentVNode.$children$[childIndex];
            if (oldVNode && oldVNode.$tag$ === newVNode.$tag$ && oldParentVNode.$elm$) {
                // we've got an old slot vnode and the wrapper is being replaced
                // so let's move the old slot content back to it's original location
                putBackInOriginalLocation(oldParentVNode.$elm$, false);
            }
        }
    }
    return elm;
};
const putBackInOriginalLocation = (parentElm, recursive) => {
    plt.$flags$ |= 1 /* isTmpDisconnected */;
    const oldSlotChildNodes = parentElm.childNodes;
    for (let i = oldSlotChildNodes.length - 1; i >= 0; i--) {
        const childNode = oldSlotChildNodes[i];
        if (childNode['s-hn'] !== hostTagName && childNode['s-ol']) {
            // // this child node in the old element is from another component
            // // remove this node from the old slot's parent
            // childNode.remove();
            // and relocate it back to it's original location
            parentReferenceNode(childNode).insertBefore(childNode, referenceNode(childNode));
            // remove the old original location comment entirely
            // later on the patch function will know what to do
            // and move this to the correct spot in need be
            childNode['s-ol'].remove();
            childNode['s-ol'] = undefined;
            checkSlotRelocate = true;
        }
        if (recursive) {
            putBackInOriginalLocation(childNode, recursive);
        }
    }
    plt.$flags$ &= ~1 /* isTmpDisconnected */;
};
const addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {
    let containerElm = ((parentElm['s-cr'] && parentElm['s-cr'].parentNode) || parentElm);
    let childNode;
    if (containerElm.shadowRoot && containerElm.tagName === hostTagName) {
        containerElm = containerElm.shadowRoot;
    }
    for (; startIdx <= endIdx; ++startIdx) {
        if (vnodes[startIdx]) {
            childNode = createElm(null, parentVNode, startIdx, parentElm);
            if (childNode) {
                vnodes[startIdx].$elm$ = childNode;
                containerElm.insertBefore(childNode, referenceNode(before) );
            }
        }
    }
};
const removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {
    for (; startIdx <= endIdx; ++startIdx) {
        if ((vnode = vnodes[startIdx])) {
            elm = vnode.$elm$;
            callNodeRefs(vnode);
            {
                // we're removing this element
                // so it's possible we need to show slot fallback content now
                checkSlotFallbackVisibility = true;
                if (elm['s-ol']) {
                    // remove the original location comment
                    elm['s-ol'].remove();
                }
                else {
                    // it's possible that child nodes of the node
                    // that's being removed are slot nodes
                    putBackInOriginalLocation(elm, true);
                }
            }
            // remove the vnode's element from the dom
            elm.remove();
        }
    }
};
const updateChildren = (parentElm, oldCh, newVNode, newCh) => {
    let oldStartIdx = 0;
    let newStartIdx = 0;
    let idxInOld = 0;
    let i = 0;
    let oldEndIdx = oldCh.length - 1;
    let oldStartVnode = oldCh[0];
    let oldEndVnode = oldCh[oldEndIdx];
    let newEndIdx = newCh.length - 1;
    let newStartVnode = newCh[0];
    let newEndVnode = newCh[newEndIdx];
    let node;
    let elmToMove;
    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
        if (oldStartVnode == null) {
            // Vnode might have been moved left
            oldStartVnode = oldCh[++oldStartIdx];
        }
        else if (oldEndVnode == null) {
            oldEndVnode = oldCh[--oldEndIdx];
        }
        else if (newStartVnode == null) {
            newStartVnode = newCh[++newStartIdx];
        }
        else if (newEndVnode == null) {
            newEndVnode = newCh[--newEndIdx];
        }
        else if (isSameVnode(oldStartVnode, newStartVnode)) {
            patch(oldStartVnode, newStartVnode);
            oldStartVnode = oldCh[++oldStartIdx];
            newStartVnode = newCh[++newStartIdx];
        }
        else if (isSameVnode(oldEndVnode, newEndVnode)) {
            patch(oldEndVnode, newEndVnode);
            oldEndVnode = oldCh[--oldEndIdx];
            newEndVnode = newCh[--newEndIdx];
        }
        else if (isSameVnode(oldStartVnode, newEndVnode)) {
            // Vnode moved right
            if ((oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {
                putBackInOriginalLocation(oldStartVnode.$elm$.parentNode, false);
            }
            patch(oldStartVnode, newEndVnode);
            parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);
            oldStartVnode = oldCh[++oldStartIdx];
            newEndVnode = newCh[--newEndIdx];
        }
        else if (isSameVnode(oldEndVnode, newStartVnode)) {
            // Vnode moved left
            if ((oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {
                putBackInOriginalLocation(oldEndVnode.$elm$.parentNode, false);
            }
            patch(oldEndVnode, newStartVnode);
            parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);
            oldEndVnode = oldCh[--oldEndIdx];
            newStartVnode = newCh[++newStartIdx];
        }
        else {
            // createKeyToOldIdx
            idxInOld = -1;
            {
                for (i = oldStartIdx; i <= oldEndIdx; ++i) {
                    if (oldCh[i] && oldCh[i].$key$ !== null && oldCh[i].$key$ === newStartVnode.$key$) {
                        idxInOld = i;
                        break;
                    }
                }
            }
            if (idxInOld >= 0) {
                elmToMove = oldCh[idxInOld];
                if (elmToMove.$tag$ !== newStartVnode.$tag$) {
                    node = createElm(oldCh && oldCh[newStartIdx], newVNode, idxInOld, parentElm);
                }
                else {
                    patch(elmToMove, newStartVnode);
                    oldCh[idxInOld] = undefined;
                    node = elmToMove.$elm$;
                }
                newStartVnode = newCh[++newStartIdx];
            }
            else {
                // new element
                node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx, parentElm);
                newStartVnode = newCh[++newStartIdx];
            }
            if (node) {
                {
                    parentReferenceNode(oldStartVnode.$elm$).insertBefore(node, referenceNode(oldStartVnode.$elm$));
                }
            }
        }
    }
    if (oldStartIdx > oldEndIdx) {
        addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);
    }
    else if (newStartIdx > newEndIdx) {
        removeVnodes(oldCh, oldStartIdx, oldEndIdx);
    }
};
const isSameVnode = (vnode1, vnode2) => {
    // compare if two vnode to see if they're "technically" the same
    // need to have the same element tag, and same key to be the same
    if (vnode1.$tag$ === vnode2.$tag$) {
        if (vnode1.$tag$ === 'slot') {
            return vnode1.$name$ === vnode2.$name$;
        }
        {
            return vnode1.$key$ === vnode2.$key$;
        }
    }
    return false;
};
const referenceNode = (node) => {
    // this node was relocated to a new location in the dom
    // because of some other component's slot
    // but we still have an html comment in place of where
    // it's original location was according to it's original vdom
    return (node && node['s-ol']) || node;
};
const parentReferenceNode = (node) => (node['s-ol'] ? node['s-ol'] : node).parentNode;
const patch = (oldVNode, newVNode) => {
    const elm = (newVNode.$elm$ = oldVNode.$elm$);
    const oldChildren = oldVNode.$children$;
    const newChildren = newVNode.$children$;
    const tag = newVNode.$tag$;
    const text = newVNode.$text$;
    let defaultHolder;
    if (text === null) {
        {
            // test if we're rendering an svg element, or still rendering nodes inside of one
            // only add this to the when the compiler sees we're using an svg somewhere
            isSvgMode = tag === 'svg' ? true : tag === 'foreignObject' ? false : isSvgMode;
        }
        // element node
        {
            if (tag === 'slot')
                ;
            else {
                // either this is the first render of an element OR it's an update
                // AND we already know it's possible it could have changed
                // this updates the element's css classes, attrs, props, listeners, etc.
                updateElement(oldVNode, newVNode, isSvgMode);
            }
        }
        if (oldChildren !== null && newChildren !== null) {
            // looks like there's child vnodes for both the old and new vnodes
            updateChildren(elm, oldChildren, newVNode, newChildren);
        }
        else if (newChildren !== null) {
            // no old child vnodes, but there are new child vnodes to add
            if (oldVNode.$text$ !== null) {
                // the old vnode was text, so be sure to clear it out
                elm.textContent = '';
            }
            // add the new vnode children
            addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);
        }
        else if (oldChildren !== null) {
            // no new child vnodes, but there are old child vnodes to remove
            removeVnodes(oldChildren, 0, oldChildren.length - 1);
        }
        if (isSvgMode && tag === 'svg') {
            isSvgMode = false;
        }
    }
    else if ((defaultHolder = elm['s-cr'])) {
        // this element has slotted content
        defaultHolder.parentNode.textContent = text;
    }
    else if (oldVNode.$text$ !== text) {
        // update the text content for the text only vnode
        // and also only if the text is different than before
        elm.data = text;
    }
};
const updateFallbackSlotVisibility = (elm) => {
    // tslint:disable-next-line: prefer-const
    const childNodes = elm.childNodes;
    let childNode;
    let i;
    let ilen;
    let j;
    let slotNameAttr;
    let nodeType;
    for (i = 0, ilen = childNodes.length; i < ilen; i++) {
        childNode = childNodes[i];
        if (childNode.nodeType === 1 /* ElementNode */) {
            if (childNode['s-sr']) {
                // this is a slot fallback node
                // get the slot name for this slot reference node
                slotNameAttr = childNode['s-sn'];
                // by default always show a fallback slot node
                // then hide it if there are other slots in the light dom
                childNode.hidden = false;
                for (j = 0; j < ilen; j++) {
                    nodeType = childNodes[j].nodeType;
                    if (childNodes[j]['s-hn'] !== childNode['s-hn'] || slotNameAttr !== '') {
                        // this sibling node is from a different component OR is a named fallback slot node
                        if (nodeType === 1 /* ElementNode */ && slotNameAttr === childNodes[j].getAttribute('slot')) {
                            childNode.hidden = true;
                            break;
                        }
                    }
                    else {
                        // this is a default fallback slot node
                        // any element or text node (with content)
                        // should hide the default fallback slot node
                        if (nodeType === 1 /* ElementNode */ ||
                            (nodeType === 3 /* TextNode */ && childNodes[j].textContent.trim() !== '')) {
                            childNode.hidden = true;
                            break;
                        }
                    }
                }
            }
            // keep drilling down
            updateFallbackSlotVisibility(childNode);
        }
    }
};
const relocateNodes = [];
const relocateSlotContent = (elm) => {
    // tslint:disable-next-line: prefer-const
    let childNode;
    let node;
    let hostContentNodes;
    let slotNameAttr;
    let relocateNodeData;
    let j;
    let i = 0;
    const childNodes = elm.childNodes;
    const ilen = childNodes.length;
    for (; i < ilen; i++) {
        childNode = childNodes[i];
        if (childNode['s-sr'] && (node = childNode['s-cr']) && node.parentNode) {
            // first got the content reference comment node
            // then we got it's parent, which is where all the host content is in now
            hostContentNodes = node.parentNode.childNodes;
            slotNameAttr = childNode['s-sn'];
            for (j = hostContentNodes.length - 1; j >= 0; j--) {
                node = hostContentNodes[j];
                if (!node['s-cn'] && !node['s-nr'] && node['s-hn'] !== childNode['s-hn']) {
                    // let's do some relocating to its new home
                    // but never relocate a content reference node
                    // that is suppose to always represent the original content location
                    if (isNodeLocatedInSlot(node, slotNameAttr)) {
                        // it's possible we've already decided to relocate this node
                        relocateNodeData = relocateNodes.find((r) => r.$nodeToRelocate$ === node);
                        // made some changes to slots
                        // let's make sure we also double check
                        // fallbacks are correctly hidden or shown
                        checkSlotFallbackVisibility = true;
                        node['s-sn'] = node['s-sn'] || slotNameAttr;
                        if (relocateNodeData) {
                            // previously we never found a slot home for this node
                            // but turns out we did, so let's remember it now
                            relocateNodeData.$slotRefNode$ = childNode;
                        }
                        else {
                            // add to our list of nodes to relocate
                            relocateNodes.push({
                                $slotRefNode$: childNode,
                                $nodeToRelocate$: node,
                            });
                        }
                        if (node['s-sr']) {
                            relocateNodes.map((relocateNode) => {
                                if (isNodeLocatedInSlot(relocateNode.$nodeToRelocate$, node['s-sn'])) {
                                    relocateNodeData = relocateNodes.find((r) => r.$nodeToRelocate$ === node);
                                    if (relocateNodeData && !relocateNode.$slotRefNode$) {
                                        relocateNode.$slotRefNode$ = relocateNodeData.$slotRefNode$;
                                    }
                                }
                            });
                        }
                    }
                    else if (!relocateNodes.some((r) => r.$nodeToRelocate$ === node)) {
                        // so far this element does not have a slot home, not setting slotRefNode on purpose
                        // if we never find a home for this element then we'll need to hide it
                        relocateNodes.push({
                            $nodeToRelocate$: node,
                        });
                    }
                }
            }
        }
        if (childNode.nodeType === 1 /* ElementNode */) {
            relocateSlotContent(childNode);
        }
    }
};
const isNodeLocatedInSlot = (nodeToRelocate, slotNameAttr) => {
    if (nodeToRelocate.nodeType === 1 /* ElementNode */) {
        if (nodeToRelocate.getAttribute('slot') === null && slotNameAttr === '') {
            return true;
        }
        if (nodeToRelocate.getAttribute('slot') === slotNameAttr) {
            return true;
        }
        return false;
    }
    if (nodeToRelocate['s-sn'] === slotNameAttr) {
        return true;
    }
    return slotNameAttr === '';
};
const callNodeRefs = (vNode) => {
    {
        vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(null);
        vNode.$children$ && vNode.$children$.map(callNodeRefs);
    }
};
const renderVdom = (hostRef, renderFnResults) => {
    const hostElm = hostRef.$hostElement$;
    const cmpMeta = hostRef.$cmpMeta$;
    const oldVNode = hostRef.$vnode$ || newVNode(null, null);
    const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);
    hostTagName = hostElm.tagName;
    if (cmpMeta.$attrsToReflect$) {
        rootVnode.$attrs$ = rootVnode.$attrs$ || {};
        cmpMeta.$attrsToReflect$.map(([propName, attribute]) => (rootVnode.$attrs$[attribute] = hostElm[propName]));
    }
    rootVnode.$tag$ = null;
    rootVnode.$flags$ |= 4 /* isHost */;
    hostRef.$vnode$ = rootVnode;
    rootVnode.$elm$ = oldVNode.$elm$ = (hostElm.shadowRoot || hostElm );
    {
        scopeId = hostElm['s-sc'];
    }
    {
        contentRef = hostElm['s-cr'];
        useNativeShadowDom = supportsShadow && (cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) !== 0;
        // always reset
        checkSlotFallbackVisibility = false;
    }
    // synchronous patch
    patch(oldVNode, rootVnode);
    {
        // while we're moving nodes around existing nodes, temporarily disable
        // the disconnectCallback from working
        plt.$flags$ |= 1 /* isTmpDisconnected */;
        if (checkSlotRelocate) {
            relocateSlotContent(rootVnode.$elm$);
            let relocateData;
            let nodeToRelocate;
            let orgLocationNode;
            let parentNodeRef;
            let insertBeforeNode;
            let refNode;
            let i = 0;
            for (; i < relocateNodes.length; i++) {
                relocateData = relocateNodes[i];
                nodeToRelocate = relocateData.$nodeToRelocate$;
                if (!nodeToRelocate['s-ol']) {
                    // add a reference node marking this node's original location
                    // keep a reference to this node for later lookups
                    orgLocationNode =
                        originalLocationDebugNode(nodeToRelocate)
                            ;
                    orgLocationNode['s-nr'] = nodeToRelocate;
                    nodeToRelocate.parentNode.insertBefore((nodeToRelocate['s-ol'] = orgLocationNode), nodeToRelocate);
                }
            }
            for (i = 0; i < relocateNodes.length; i++) {
                relocateData = relocateNodes[i];
                nodeToRelocate = relocateData.$nodeToRelocate$;
                if (relocateData.$slotRefNode$) {
                    // by default we're just going to insert it directly
                    // after the slot reference node
                    parentNodeRef = relocateData.$slotRefNode$.parentNode;
                    insertBeforeNode = relocateData.$slotRefNode$.nextSibling;
                    orgLocationNode = nodeToRelocate['s-ol'];
                    while ((orgLocationNode = orgLocationNode.previousSibling)) {
                        refNode = orgLocationNode['s-nr'];
                        if (refNode && refNode['s-sn'] === nodeToRelocate['s-sn'] && parentNodeRef === refNode.parentNode) {
                            refNode = refNode.nextSibling;
                            if (!refNode || !refNode['s-nr']) {
                                insertBeforeNode = refNode;
                                break;
                            }
                        }
                    }
                    if ((!insertBeforeNode && parentNodeRef !== nodeToRelocate.parentNode) ||
                        nodeToRelocate.nextSibling !== insertBeforeNode) {
                        // we've checked that it's worth while to relocate
                        // since that the node to relocate
                        // has a different next sibling or parent relocated
                        if (nodeToRelocate !== insertBeforeNode) {
                            if (!nodeToRelocate['s-hn'] && nodeToRelocate['s-ol']) {
                                // probably a component in the index.html that doesn't have it's hostname set
                                nodeToRelocate['s-hn'] = nodeToRelocate['s-ol'].parentNode.nodeName;
                            }
                            // add it back to the dom but in its new home
                            parentNodeRef.insertBefore(nodeToRelocate, insertBeforeNode);
                        }
                    }
                }
                else {
                    // this node doesn't have a slot home to go to, so let's hide it
                    if (nodeToRelocate.nodeType === 1 /* ElementNode */) {
                        nodeToRelocate.hidden = true;
                    }
                }
            }
        }
        if (checkSlotFallbackVisibility) {
            updateFallbackSlotVisibility(rootVnode.$elm$);
        }
        // done moving nodes around
        // allow the disconnect callback to work again
        plt.$flags$ &= ~1 /* isTmpDisconnected */;
        // always reset
        relocateNodes.length = 0;
    }
};
// slot comment debug nodes only created with the `--debug` flag
// otherwise these nodes are text nodes w/out content
const slotReferenceDebugNode = (slotVNode) => doc.createComment(`<slot${slotVNode.$name$ ? ' name="' + slotVNode.$name$ + '"' : ''}> (host=${hostTagName.toLowerCase()})`);
const originalLocationDebugNode = (nodeToRelocate) => doc.createComment(`org-location for ` +
    (nodeToRelocate.localName
        ? `<${nodeToRelocate.localName}> (host=${nodeToRelocate['s-hn']})`
        : `[${nodeToRelocate.textContent}]`));
const getElement = (ref) => (getHostRef(ref).$hostElement$ );
const createEvent = (ref, name, flags) => {
    const elm = getElement(ref);
    return {
        emit: (detail) => {
            return emitEvent(elm, name, {
                bubbles: !!(flags & 4 /* Bubbles */),
                composed: !!(flags & 2 /* Composed */),
                cancelable: !!(flags & 1 /* Cancellable */),
                detail,
            });
        },
    };
};
/**
 * Helper function to create & dispatch a custom Event on a provided target
 * @param elm the target of the Event
 * @param name the name to give the custom Event
 * @param opts options for configuring a custom Event
 * @returns the custom Event
 */
const emitEvent = (elm, name, opts) => {
    const ev = plt.ce(name, opts);
    elm.dispatchEvent(ev);
    return ev;
};
const attachToAncestor = (hostRef, ancestorComponent) => {
    if (ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {
        ancestorComponent['s-p'].push(new Promise((r) => (hostRef.$onRenderResolve$ = r)));
    }
};
const scheduleUpdate = (hostRef, isInitialLoad) => {
    {
        hostRef.$flags$ |= 16 /* isQueuedForUpdate */;
    }
    if (hostRef.$flags$ & 4 /* isWaitingForChildren */) {
        hostRef.$flags$ |= 512 /* needsRerender */;
        return;
    }
    attachToAncestor(hostRef, hostRef.$ancestorComponent$);
    // there is no ancestor component or the ancestor component
    // has already fired off its lifecycle update then
    // fire off the initial update
    const dispatch = () => dispatchHooks(hostRef, isInitialLoad);
    return writeTask(dispatch) ;
};
const dispatchHooks = (hostRef, isInitialLoad) => {
    const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);
    const instance = hostRef.$lazyInstance$ ;
    let promise;
    if (isInitialLoad) {
        {
            hostRef.$flags$ |= 256 /* isListenReady */;
            if (hostRef.$queuedListeners$) {
                hostRef.$queuedListeners$.map(([methodName, event]) => safeCall(instance, methodName, event));
                hostRef.$queuedListeners$ = null;
            }
        }
        {
            promise = safeCall(instance, 'componentWillLoad');
        }
    }
    else {
        {
            promise = safeCall(instance, 'componentWillUpdate');
        }
    }
    {
        promise = then(promise, () => safeCall(instance, 'componentWillRender'));
    }
    endSchedule();
    return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));
};
const updateComponent = async (hostRef, instance, isInitialLoad) => {
    // updateComponent
    const elm = hostRef.$hostElement$;
    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);
    const rc = elm['s-rc'];
    if (isInitialLoad) {
        // DOM WRITE!
        attachStyles(hostRef);
    }
    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);
    {
        await callRender(hostRef, instance);
    }
    {
        try {
            // manually connected child components during server-side hydrate
            serverSideConnected(elm);
            if (isInitialLoad) {
                // using only during server-side hydrate
                if (hostRef.$cmpMeta$.$flags$ & 1 /* shadowDomEncapsulation */) {
                    elm['s-en'] = '';
                }
                else if (hostRef.$cmpMeta$.$flags$ & 2 /* scopedCssEncapsulation */) {
                    elm['s-en'] = 'c';
                }
            }
        }
        catch (e) {
            consoleError(e, elm);
        }
    }
    if (rc) {
        // ok, so turns out there are some child host elements
        // waiting on this parent element to load
        // let's fire off all update callbacks waiting
        rc.map((cb) => cb());
        elm['s-rc'] = undefined;
    }
    endRender();
    endUpdate();
    {
        const childrenPromises = elm['s-p'];
        const postUpdate = () => postUpdateComponent(hostRef);
        if (childrenPromises.length === 0) {
            postUpdate();
        }
        else {
            Promise.all(childrenPromises).then(postUpdate);
            hostRef.$flags$ |= 4 /* isWaitingForChildren */;
            childrenPromises.length = 0;
        }
    }
};
const callRender = (hostRef, instance, elm) => {
    try {
        instance = instance.render() ;
        {
            hostRef.$flags$ &= ~16 /* isQueuedForUpdate */;
        }
        {
            hostRef.$flags$ |= 2 /* hasRendered */;
        }
        {
            {
                // looks like we've got child nodes to render into this host element
                // or we need to update the css class/attrs on the host element
                // DOM WRITE!
                {
                    return Promise.resolve(instance).then((value) => renderVdom(hostRef, value));
                }
            }
        }
    }
    catch (e) {
        consoleError(e, hostRef.$hostElement$);
    }
    return null;
};
const postUpdateComponent = (hostRef) => {
    const tagName = hostRef.$cmpMeta$.$tagName$;
    const elm = hostRef.$hostElement$;
    const endPostUpdate = createTime('postUpdate', tagName);
    const instance = hostRef.$lazyInstance$ ;
    const ancestorComponent = hostRef.$ancestorComponent$;
    {
        safeCall(instance, 'componentDidRender');
    }
    if (!(hostRef.$flags$ & 64 /* hasLoadedComponent */)) {
        hostRef.$flags$ |= 64 /* hasLoadedComponent */;
        {
            // DOM WRITE!
            addHydratedFlag(elm);
        }
        {
            safeCall(instance, 'componentDidLoad');
        }
        endPostUpdate();
        {
            hostRef.$onReadyResolve$(elm);
            if (!ancestorComponent) {
                appDidLoad();
            }
        }
    }
    else {
        {
            safeCall(instance, 'componentDidUpdate');
        }
        endPostUpdate();
    }
    {
        hostRef.$onInstanceResolve$(elm);
    }
    // load events fire from bottom to top
    // the deepest elements load first then bubbles up
    {
        if (hostRef.$onRenderResolve$) {
            hostRef.$onRenderResolve$();
            hostRef.$onRenderResolve$ = undefined;
        }
        if (hostRef.$flags$ & 512 /* needsRerender */) {
            nextTick(() => scheduleUpdate(hostRef, false));
        }
        hostRef.$flags$ &= ~(4 /* isWaitingForChildren */ | 512 /* needsRerender */);
    }
    // ( •_•)
    // ( •_•)>⌐■-■
    // (⌐■_■)
};
const appDidLoad = (who) => {
    // on appload
    // we have finish the first big initial render
    {
        addHydratedFlag(doc.documentElement);
    }
    nextTick(() => emitEvent(win, 'appload', { detail: { namespace: NAMESPACE } }));
};
const safeCall = (instance, method, arg) => {
    if (instance && instance[method]) {
        try {
            return instance[method](arg);
        }
        catch (e) {
            consoleError(e);
        }
    }
    return undefined;
};
const then = (promise, thenFn) => {
    return promise && promise.then ? promise.then(thenFn) : thenFn();
};
const addHydratedFlag = (elm) => elm.classList.add('hydrated')
    ;
const serverSideConnected = (elm) => {
    const children = elm.children;
    if (children != null) {
        for (let i = 0, ii = children.length; i < ii; i++) {
            const childElm = children[i];
            if (typeof childElm.connectedCallback === 'function') {
                childElm.connectedCallback();
            }
            serverSideConnected(childElm);
        }
    }
};
const initializeClientHydrate = (hostElm, tagName, hostId, hostRef) => {
    const endHydrate = createTime('hydrateClient', tagName);
    const shadowRoot = hostElm.shadowRoot;
    const childRenderNodes = [];
    const slotNodes = [];
    const shadowRootNodes = shadowRoot ? [] : null;
    const vnode = (hostRef.$vnode$ = newVNode(tagName, null));
    if (!plt.$orgLocNodes$) {
        initializeDocumentHydrate(doc.body, (plt.$orgLocNodes$ = new Map()));
    }
    hostElm[HYDRATE_ID] = hostId;
    hostElm.removeAttribute(HYDRATE_ID);
    clientHydrate(vnode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, hostElm, hostId);
    childRenderNodes.map((c) => {
        const orgLocationId = c.$hostId$ + '.' + c.$nodeId$;
        const orgLocationNode = plt.$orgLocNodes$.get(orgLocationId);
        const node = c.$elm$;
        if (orgLocationNode && supportsShadow && orgLocationNode['s-en'] === '') {
            orgLocationNode.parentNode.insertBefore(node, orgLocationNode.nextSibling);
        }
        if (!shadowRoot) {
            node['s-hn'] = tagName;
            if (orgLocationNode) {
                node['s-ol'] = orgLocationNode;
                node['s-ol']['s-nr'] = node;
            }
        }
        plt.$orgLocNodes$.delete(orgLocationId);
    });
    if (shadowRoot) {
        shadowRootNodes.map((shadowRootNode) => {
            if (shadowRootNode) {
                shadowRoot.appendChild(shadowRootNode);
            }
        });
    }
    endHydrate();
};
const clientHydrate = (parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node, hostId) => {
    let childNodeType;
    let childIdSplt;
    let childVNode;
    let i;
    if (node.nodeType === 1 /* ElementNode */) {
        childNodeType = node.getAttribute(HYDRATE_CHILD_ID);
        if (childNodeType) {
            // got the node data from the element's attribute
            // `${hostId}.${nodeId}.${depth}.${index}`
            childIdSplt = childNodeType.split('.');
            if (childIdSplt[0] === hostId || childIdSplt[0] === '0') {
                childVNode = {
                    $flags$: 0,
                    $hostId$: childIdSplt[0],
                    $nodeId$: childIdSplt[1],
                    $depth$: childIdSplt[2],
                    $index$: childIdSplt[3],
                    $tag$: node.tagName.toLowerCase(),
                    $elm$: node,
                    $attrs$: null,
                    $children$: null,
                    $key$: null,
                    $name$: null,
                    $text$: null,
                };
                childRenderNodes.push(childVNode);
                node.removeAttribute(HYDRATE_CHILD_ID);
                // this is a new child vnode
                // so ensure its parent vnode has the vchildren array
                if (!parentVNode.$children$) {
                    parentVNode.$children$ = [];
                }
                // add our child vnode to a specific index of the vnode's children
                parentVNode.$children$[childVNode.$index$] = childVNode;
                // this is now the new parent vnode for all the next child checks
                parentVNode = childVNode;
                if (shadowRootNodes && childVNode.$depth$ === '0') {
                    shadowRootNodes[childVNode.$index$] = childVNode.$elm$;
                }
            }
        }
        // recursively drill down, end to start so we can remove nodes
        for (i = node.childNodes.length - 1; i >= 0; i--) {
            clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.childNodes[i], hostId);
        }
        if (node.shadowRoot) {
            // keep drilling down through the shadow root nodes
            for (i = node.shadowRoot.childNodes.length - 1; i >= 0; i--) {
                clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.shadowRoot.childNodes[i], hostId);
            }
        }
    }
    else if (node.nodeType === 8 /* CommentNode */) {
        // `${COMMENT_TYPE}.${hostId}.${nodeId}.${depth}.${index}`
        childIdSplt = node.nodeValue.split('.');
        if (childIdSplt[1] === hostId || childIdSplt[1] === '0') {
            // comment node for either the host id or a 0 host id
            childNodeType = childIdSplt[0];
            childVNode = {
                $flags$: 0,
                $hostId$: childIdSplt[1],
                $nodeId$: childIdSplt[2],
                $depth$: childIdSplt[3],
                $index$: childIdSplt[4],
                $elm$: node,
                $attrs$: null,
                $children$: null,
                $key$: null,
                $name$: null,
                $tag$: null,
                $text$: null,
            };
            if (childNodeType === TEXT_NODE_ID) {
                childVNode.$elm$ = node.nextSibling;
                if (childVNode.$elm$ && childVNode.$elm$.nodeType === 3 /* TextNode */) {
                    childVNode.$text$ = childVNode.$elm$.textContent;
                    childRenderNodes.push(childVNode);
                    // remove the text comment since it's no longer needed
                    node.remove();
                    if (!parentVNode.$children$) {
                        parentVNode.$children$ = [];
                    }
                    parentVNode.$children$[childVNode.$index$] = childVNode;
                    if (shadowRootNodes && childVNode.$depth$ === '0') {
                        shadowRootNodes[childVNode.$index$] = childVNode.$elm$;
                    }
                }
            }
            else if (childVNode.$hostId$ === hostId) {
                // this comment node is specifcally for this host id
                if (childNodeType === SLOT_NODE_ID) {
                    // `${SLOT_NODE_ID}.${hostId}.${nodeId}.${depth}.${index}.${slotName}`;
                    childVNode.$tag$ = 'slot';
                    if (childIdSplt[5]) {
                        node['s-sn'] = childVNode.$name$ = childIdSplt[5];
                    }
                    else {
                        node['s-sn'] = '';
                    }
                    node['s-sr'] = true;
                    if (shadowRootNodes) {
                        // browser support shadowRoot and this is a shadow dom component
                        // create an actual slot element
                        childVNode.$elm$ = doc.createElement(childVNode.$tag$);
                        if (childVNode.$name$) {
                            // add the slot name attribute
                            childVNode.$elm$.setAttribute('name', childVNode.$name$);
                        }
                        // insert the new slot element before the slot comment
                        node.parentNode.insertBefore(childVNode.$elm$, node);
                        // remove the slot comment since it's not needed for shadow
                        node.remove();
                        if (childVNode.$depth$ === '0') {
                            shadowRootNodes[childVNode.$index$] = childVNode.$elm$;
                        }
                    }
                    slotNodes.push(childVNode);
                    if (!parentVNode.$children$) {
                        parentVNode.$children$ = [];
                    }
                    parentVNode.$children$[childVNode.$index$] = childVNode;
                }
                else if (childNodeType === CONTENT_REF_ID) {
                    // `${CONTENT_REF_ID}.${hostId}`;
                    if (shadowRootNodes) {
                        // remove the content ref comment since it's not needed for shadow
                        node.remove();
                    }
                    else {
                        hostElm['s-cr'] = node;
                        node['s-cn'] = true;
                    }
                }
            }
        }
    }
    else if (parentVNode && parentVNode.$tag$ === 'style') {
        const vnode = newVNode(null, node.textContent);
        vnode.$elm$ = node;
        vnode.$index$ = '0';
        parentVNode.$children$ = [vnode];
    }
};
const initializeDocumentHydrate = (node, orgLocNodes) => {
    if (node.nodeType === 1 /* ElementNode */) {
        let i = 0;
        for (; i < node.childNodes.length; i++) {
            initializeDocumentHydrate(node.childNodes[i], orgLocNodes);
        }
        if (node.shadowRoot) {
            for (i = 0; i < node.shadowRoot.childNodes.length; i++) {
                initializeDocumentHydrate(node.shadowRoot.childNodes[i], orgLocNodes);
            }
        }
    }
    else if (node.nodeType === 8 /* CommentNode */) {
        const childIdSplt = node.nodeValue.split('.');
        if (childIdSplt[0] === ORG_LOCATION_ID) {
            orgLocNodes.set(childIdSplt[1] + '.' + childIdSplt[2], node);
            node.nodeValue = '';
            // useful to know if the original location is
            // the root light-dom of a shadow dom component
            node['s-en'] = childIdSplt[3];
        }
    }
};
/**
 * Parse a new property value for a given property type.
 *
 * While the prop value can reasonably be expected to be of `any` type as far as TypeScript's type checker is concerned,
 * it is not safe to assume that the string returned by evaluating `typeof propValue` matches:
 *   1. `any`, the type given to `propValue` in the function signature
 *   2. the type stored from `propType`.
 *
 * This function provides the capability to parse/coerce a property's value to potentially any other JavaScript type.
 *
 * Property values represented in TSX preserve their type information. In the example below, the number 0 is passed to
 * a component. This `propValue` will preserve its type information (`typeof propValue === 'number'`). Note that is
 * based on the type of the value being passed in, not the type declared of the class member decorated with `@Prop`.
 * ```tsx
 * <my-cmp prop-val={0}></my-cmp>
 * ```
 *
 * HTML prop values on the other hand, will always a string
 *
 * @param propValue the new value to coerce to some type
 * @param propType the type of the prop, expressed as a binary number
 * @returns the parsed/coerced value
 */
const parsePropertyValue = (propValue, propType) => {
    // ensure this value is of the correct prop type
    if (propValue != null && !isComplexType(propValue)) {
        if (propType & 4 /* Boolean */) {
            // per the HTML spec, any string value means it is a boolean true value
            // but we'll cheat here and say that the string "false" is the boolean false
            return propValue === 'false' ? false : propValue === '' || !!propValue;
        }
        if (propType & 2 /* Number */) {
            // force it to be a number
            return parseFloat(propValue);
        }
        if (propType & 1 /* String */) {
            // could have been passed as a number or boolean
            // but we still want it as a string
            return String(propValue);
        }
        // redundant return here for better minification
        return propValue;
    }
    // not sure exactly what type we want
    // so no need to change to a different type
    return propValue;
};
const getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);
const setValue = (ref, propName, newVal, cmpMeta) => {
    // check our new property value against our internal value
    const hostRef = getHostRef(ref);
    const elm = hostRef.$hostElement$ ;
    const oldVal = hostRef.$instanceValues$.get(propName);
    const flags = hostRef.$flags$;
    const instance = hostRef.$lazyInstance$ ;
    newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);
    // explicitly check for NaN on both sides, as `NaN === NaN` is always false
    const areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);
    const didValueChange = newVal !== oldVal && !areBothNaN;
    if ((!(flags & 8 /* isConstructingInstance */) || oldVal === undefined) && didValueChange) {
        // gadzooks! the property's value has changed!!
        // set our new value!
        hostRef.$instanceValues$.set(propName, newVal);
        if (instance) {
            // get an array of method names of watch functions to call
            if (cmpMeta.$watchers$ && flags & 128 /* isWatchReady */) {
                const watchMethods = cmpMeta.$watchers$[propName];
                if (watchMethods) {
                    // this instance is watching for when this property changed
                    watchMethods.map((watchMethodName) => {
                        try {
                            // fire off each of the watch methods that are watching this property
                            instance[watchMethodName](newVal, oldVal, propName);
                        }
                        catch (e) {
                            consoleError(e, elm);
                        }
                    });
                }
            }
            if ((flags & (2 /* hasRendered */ | 16 /* isQueuedForUpdate */)) === 2 /* hasRendered */) {
                // looks like this value actually changed, so we've got work to do!
                // but only if we've already rendered, otherwise just chill out
                // queue that we need to do an update, but don't worry about queuing
                // up millions cuz this function ensures it only runs once
                scheduleUpdate(hostRef, false);
            }
        }
    }
};
const proxyComponent = (Cstr, cmpMeta, flags) => {
    if (cmpMeta.$members$) {
        if (Cstr.watchers) {
            cmpMeta.$watchers$ = Cstr.watchers;
        }
        // It's better to have a const than two Object.entries()
        const members = Object.entries(cmpMeta.$members$);
        const prototype = Cstr.prototype;
        members.map(([memberName, [memberFlags]]) => {
            if ((memberFlags & 31 /* Prop */ ||
                    ((flags & 2 /* proxyState */) && memberFlags & 32 /* State */))) {
                // proxyComponent - prop
                Object.defineProperty(prototype, memberName, {
                    get() {
                        // proxyComponent, get value
                        return getValue(this, memberName);
                    },
                    set(newValue) {
                        // proxyComponent, set value
                        setValue(this, memberName, newValue, cmpMeta);
                    },
                    configurable: true,
                    enumerable: true,
                });
            }
            else if (flags & 1 /* isElementConstructor */ &&
                memberFlags & 64 /* Method */) {
                // proxyComponent - method
                Object.defineProperty(prototype, memberName, {
                    value(...args) {
                        const ref = getHostRef(this);
                        return ref.$onInstancePromise$.then(() => ref.$lazyInstance$[memberName](...args));
                    },
                });
            }
        });
        if ((flags & 1 /* isElementConstructor */)) {
            const attrNameToPropName = new Map();
            prototype.attributeChangedCallback = function (attrName, _oldValue, newValue) {
                plt.jmp(() => {
                    const propName = attrNameToPropName.get(attrName);
                    //  In a web component lifecycle the attributeChangedCallback runs prior to connectedCallback
                    //  in the case where an attribute was set inline.
                    //  ```html
                    //    <my-component some-attribute="some-value"></my-component>
                    //  ```
                    //
                    //  There is an edge case where a developer sets the attribute inline on a custom element and then
                    //  programmatically changes it before it has been upgraded as shown below:
                    //
                    //  ```html
                    //    <!-- this component has _not_ been upgraded yet -->
                    //    <my-component id="test" some-attribute="some-value"></my-component>
                    //    <script>
                    //      // grab non-upgraded component
                    //      el = document.querySelector("#test");
                    //      el.someAttribute = "another-value";
                    //      // upgrade component
                    //      customElements.define('my-component', MyComponent);
                    //    </script>
                    //  ```
                    //  In this case if we do not unshadow here and use the value of the shadowing property, attributeChangedCallback
                    //  will be called with `newValue = "some-value"` and will set the shadowed property (this.someAttribute = "another-value")
                    //  to the value that was set inline i.e. "some-value" from above example. When
                    //  the connectedCallback attempts to unshadow it will use "some-value" as the initial value rather than "another-value"
                    //
                    //  The case where the attribute was NOT set inline but was not set programmatically shall be handled/unshadowed
                    //  by connectedCallback as this attributeChangedCallback will not fire.
                    //
                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties
                    //
                    //  TODO(STENCIL-16) we should think about whether or not we actually want to be reflecting the attributes to
                    //  properties here given that this goes against best practices outlined here
                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#avoid-reentrancy
                    if (this.hasOwnProperty(propName)) {
                        newValue = this[propName];
                        delete this[propName];
                    }
                    else if (prototype.hasOwnProperty(propName) &&
                        typeof this[propName] === 'number' &&
                        this[propName] == newValue) {
                        // if the propName exists on the prototype of `Cstr`, this update may be a result of Stencil using native
                        // APIs to reflect props as attributes. Calls to `setAttribute(someElement, propName)` will result in
                        // `propName` to be converted to a `DOMString`, which may not be what we want for other primitive props.
                        return;
                    }
                    this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;
                });
            };
            // create an array of attributes to observe
            // and also create a map of html attribute name to js property name
            Cstr.observedAttributes = members
                .filter(([_, m]) => m[0] & 15 /* HasAttribute */) // filter to only keep props that should match attributes
                .map(([propName, m]) => {
                const attrName = m[1] || propName;
                attrNameToPropName.set(attrName, propName);
                if (m[0] & 512 /* ReflectAttr */) {
                    cmpMeta.$attrsToReflect$.push([propName, attrName]);
                }
                return attrName;
            });
        }
    }
    return Cstr;
};
const initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId, Cstr) => {
    // initializeComponent
    if ((hostRef.$flags$ & 32 /* hasInitializedComponent */) === 0) {
        {
            // we haven't initialized this element yet
            hostRef.$flags$ |= 32 /* hasInitializedComponent */;
            // lazy loaded components
            // request the component's implementation to be
            // wired up with the host element
            Cstr = loadModule(cmpMeta);
            if (Cstr.then) {
                // Await creates a micro-task avoid if possible
                const endLoad = uniqueTime();
                Cstr = await Cstr;
                endLoad();
            }
            if (!Cstr.isProxied) {
                // we've never proxied this Constructor before
                // let's add the getters/setters to its prototype before
                // the first time we create an instance of the implementation
                {
                    cmpMeta.$watchers$ = Cstr.watchers;
                }
                proxyComponent(Cstr, cmpMeta, 2 /* proxyState */);
                Cstr.isProxied = true;
            }
            const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);
            // ok, time to construct the instance
            // but let's keep track of when we start and stop
            // so that the getters/setters don't incorrectly step on data
            {
                hostRef.$flags$ |= 8 /* isConstructingInstance */;
            }
            // construct the lazy-loaded component implementation
            // passing the hostRef is very important during
            // construction in order to directly wire together the
            // host element and the lazy-loaded instance
            try {
                new Cstr(hostRef);
            }
            catch (e) {
                consoleError(e);
            }
            {
                hostRef.$flags$ &= ~8 /* isConstructingInstance */;
            }
            {
                hostRef.$flags$ |= 128 /* isWatchReady */;
            }
            endNewInstance();
            fireConnectedCallback(hostRef.$lazyInstance$);
        }
        if (Cstr.style) {
            // this component has styles but we haven't registered them yet
            let style = Cstr.style;
            const scopeId = getScopeId(cmpMeta);
            if (!styles.has(scopeId)) {
                const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);
                registerStyle(scopeId, style);
                endRegisterStyles();
            }
        }
    }
    // we've successfully created a lazy instance
    const ancestorComponent = hostRef.$ancestorComponent$;
    const schedule = () => scheduleUpdate(hostRef, true);
    if (ancestorComponent && ancestorComponent['s-rc']) {
        // this is the initial load and this component it has an ancestor component
        // but the ancestor component has NOT fired its will update lifecycle yet
        // so let's just cool our jets and wait for the ancestor to continue first
        // this will get fired off when the ancestor component
        // finally gets around to rendering its lazy self
        // fire off the initial update
        ancestorComponent['s-rc'].push(schedule);
    }
    else {
        schedule();
    }
};
const fireConnectedCallback = (instance) => {
    {
        safeCall(instance, 'connectedCallback');
    }
};
const connectedCallback = (elm) => {
    if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {
        const hostRef = getHostRef(elm);
        const cmpMeta = hostRef.$cmpMeta$;
        const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);
        if (!(hostRef.$flags$ & 1 /* hasConnected */)) {
            // first time this component has connected
            hostRef.$flags$ |= 1 /* hasConnected */;
            let hostId;
            {
                hostId = elm.getAttribute(HYDRATE_ID);
                if (hostId) {
                    if (supportsShadow && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {
                        const scopeId = addStyle(elm.shadowRoot, cmpMeta);
                        elm.classList.remove(scopeId + '-h', scopeId + '-s');
                    }
                    initializeClientHydrate(elm, cmpMeta.$tagName$, hostId, hostRef);
                }
            }
            if (!hostId) {
                // initUpdate
                // if the slot polyfill is required we'll need to put some nodes
                // in here to act as original content anchors as we move nodes around
                // host element has been connected to the DOM
                {
                    setContentReference(elm);
                }
            }
            {
                // find the first ancestor component (if there is one) and register
                // this component as one of the actively loading child components for its ancestor
                let ancestorComponent = elm;
                while ((ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host)) {
                    // climb up the ancestors looking for the first
                    // component that hasn't finished its lifecycle update yet
                    if ((ancestorComponent.nodeType === 1 /* ElementNode */ &&
                        ancestorComponent.hasAttribute('s-id') &&
                        ancestorComponent['s-p']) ||
                        ancestorComponent['s-p']) {
                        // we found this components first ancestor component
                        // keep a reference to this component's ancestor component
                        attachToAncestor(hostRef, (hostRef.$ancestorComponent$ = ancestorComponent));
                        break;
                    }
                }
            }
            {
                initializeComponent(elm, hostRef, cmpMeta);
            }
        }
        else {
            // not the first time this has connected
            // reattach any event listeners to the host
            // since they would have been removed when disconnected
            addHostEventListeners(elm, hostRef, cmpMeta.$listeners$);
            // fire off connectedCallback() on component instance
            fireConnectedCallback(hostRef.$lazyInstance$);
        }
        endConnected();
    }
};
const setContentReference = (elm) => {
    // only required when we're NOT using native shadow dom (slot)
    // or this browser doesn't support native shadow dom
    // and this host element was NOT created with SSR
    // let's pick out the inner content for slot projection
    // create a node to represent where the original
    // content was first placed, which is useful later on
    const contentRefElm = (elm['s-cr'] = doc.createComment(''));
    contentRefElm['s-cn'] = true;
    elm.insertBefore(contentRefElm, elm.firstChild);
};
const disconnectedCallback = (elm) => {
    if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {
        const hostRef = getHostRef(elm);
        const instance = hostRef.$lazyInstance$ ;
        {
            if (hostRef.$rmListeners$) {
                hostRef.$rmListeners$.map((rmListener) => rmListener());
                hostRef.$rmListeners$ = undefined;
            }
        }
        {
            safeCall(instance, 'disconnectedCallback');
        }
    }
};
const proxyCustomElement = (Cstr, compactMeta) => {
    const cmpMeta = {
        $flags$: compactMeta[0],
        $tagName$: compactMeta[1],
    };
    {
        cmpMeta.$members$ = compactMeta[2];
    }
    {
        cmpMeta.$listeners$ = compactMeta[3];
    }
    {
        cmpMeta.$watchers$ = Cstr.$watchers$;
    }
    {
        cmpMeta.$attrsToReflect$ = [];
    }
    if (!supportsShadow && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {
        cmpMeta.$flags$ |= 8 /* needsShadowDomShim */;
    }
    const originalConnectedCallback = Cstr.prototype.connectedCallback;
    const originalDisconnectedCallback = Cstr.prototype.disconnectedCallback;
    Object.assign(Cstr.prototype, {
        __registerHost() {
            registerHost(this, cmpMeta);
        },
        connectedCallback() {
            connectedCallback(this);
            if (originalConnectedCallback) {
                originalConnectedCallback.call(this);
            }
        },
        disconnectedCallback() {
            disconnectedCallback(this);
            if (originalDisconnectedCallback) {
                originalDisconnectedCallback.call(this);
            }
        },
        __attachShadow() {
            if (supportsShadow) {
                {
                    this.attachShadow({ mode: 'open' });
                }
            }
            else {
                this.shadowRoot = this;
            }
        },
    });
    Cstr.is = cmpMeta.$tagName$;
    return proxyComponent(Cstr, cmpMeta, 1 /* isElementConstructor */ | 2 /* proxyState */);
};
const hostRefs = new WeakMap();
const getHostRef = (ref) => hostRefs.get(ref);
const registerHost = (elm, cmpMeta) => {
    const hostRef = {
        $flags$: 0,
        $hostElement$: elm,
        $cmpMeta$: cmpMeta,
        $instanceValues$: new Map(),
    };
    {
        hostRef.$onInstancePromise$ = new Promise((r) => (hostRef.$onInstanceResolve$ = r));
    }
    {
        hostRef.$onReadyPromise$ = new Promise((r) => (hostRef.$onReadyResolve$ = r));
        elm['s-p'] = [];
        elm['s-rc'] = [];
    }
    addHostEventListeners(elm, hostRef, cmpMeta.$listeners$);
    return hostRefs.set(elm, hostRef);
};
const isMemberInElement = (elm, memberName) => memberName in elm;
const consoleError = (e, el) => (0, console.error)(e, el);
const cmpModules = /*@__PURE__*/ new Map();
const loadModule = (cmpMeta, hostRef, hmrVersionId) => {
    // loadModuleImport
    const exportName = cmpMeta.$tagName$.replace(/-/g, '_');
    const bundleId = cmpMeta.$lazyBundleId$;
    const module = cmpModules.get(bundleId) ;
    if (module) {
        return module[exportName];
    }
    /*!__STENCIL_STATIC_IMPORT_SWITCH__*/
    return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require(
    /* @vite-ignore */
    /* webpackInclude: /\.entry\.js$/ */
    /* webpackExclude: /\.system\.entry\.js$/ */
    /* webpackMode: "lazy" */
    `./${bundleId}.entry.js${''}`)); }).then((importedModule) => {
        {
            cmpModules.set(bundleId, importedModule);
        }
        return importedModule[exportName];
    }, consoleError);
};
const styles = new Map();
const queueDomReads = [];
const queueDomWrites = [];
const queueTask = (queue, write) => (cb) => {
    queue.push(cb);
    if (!queuePending) {
        queuePending = true;
        if (write && plt.$flags$ & 4 /* queueSync */) {
            nextTick(flush);
        }
        else {
            plt.raf(flush);
        }
    }
};
const consume = (queue) => {
    for (let i = 0; i < queue.length; i++) {
        try {
            queue[i](performance.now());
        }
        catch (e) {
            consoleError(e);
        }
    }
    queue.length = 0;
};
const flush = () => {
    // always force a bunch of medium callbacks to run, but still have
    // a throttle on how many can run in a certain time
    // DOM READS!!!
    consume(queueDomReads);
    // DOM WRITES!!!
    {
        consume(queueDomWrites);
        if ((queuePending = queueDomReads.length > 0)) {
            // still more to do yet, but we've run out of time
            // let's let this thing cool off and try again in the next tick
            plt.raf(flush);
        }
    }
};
const nextTick = /*@__PURE__*/ (cb) => promiseResolve().then(cb);
const writeTask = /*@__PURE__*/ queueTask(queueDomWrites, true);

const ISO_DATE_FORMAT$1 = /^(\d{4})-(\d{2})-(\d{2})$/;
var DaysOfWeek$1;
(function (DaysOfWeek) {
  DaysOfWeek[DaysOfWeek["Sunday"] = 0] = "Sunday";
  DaysOfWeek[DaysOfWeek["Monday"] = 1] = "Monday";
  DaysOfWeek[DaysOfWeek["Tuesday"] = 2] = "Tuesday";
  DaysOfWeek[DaysOfWeek["Wednesday"] = 3] = "Wednesday";
  DaysOfWeek[DaysOfWeek["Thursday"] = 4] = "Thursday";
  DaysOfWeek[DaysOfWeek["Friday"] = 5] = "Friday";
  DaysOfWeek[DaysOfWeek["Saturday"] = 6] = "Saturday";
})(DaysOfWeek$1 || (DaysOfWeek$1 = {}));
function createDate$1(year, month, day) {
  var dayInt = parseInt(day, 10);
  var monthInt = parseInt(month, 10);
  var yearInt = parseInt(year, 10);
  const isValid = Number.isInteger(yearInt) && // all parts should be integers
    Number.isInteger(monthInt) &&
    Number.isInteger(dayInt) &&
    monthInt > 0 && // month must be 1-12
    monthInt <= 12 &&
    dayInt > 0 && // day must be 1-31
    dayInt <= 31 &&
    yearInt > 0;
  if (isValid) {
    return new Date(yearInt, monthInt - 1, dayInt);
  }
}
/**
 * @param value date string in ISO format YYYY-MM-DD
 */
function parseISODate$1(value) {
  if (!value) {
    return;
  }
  const matches = value.match(ISO_DATE_FORMAT$1);
  if (matches) {
    return createDate$1(matches[1], matches[2], matches[3]);
  }
}
/**
 * print date in format YYYY-MM-DD
 * @param date
 */
function printISODate$1(date) {
  if (!date) {
    return "";
  }
  var d = date.getDate().toString(10);
  var m = (date.getMonth() + 1).toString(10);
  var y = date.getFullYear().toString(10);
  // days are not zero-indexed, so pad if less than 10
  if (date.getDate() < 10) {
    d = `0${d}`;
  }
  // months *are* zero-indexed, pad if less than 9!
  if (date.getMonth() < 9) {
    m = `0${m}`;
  }
  return `${y}-${m}-${d}`;
}
/**
 * Compare if two dates are equal in terms of day, month, and year
 */
function isEqual$1(a, b) {
  if (a == null || b == null) {
    return false;
  }
  return a.getFullYear() === b.getFullYear() && a.getMonth() === b.getMonth() && a.getDate() === b.getDate();
}
function addDays$1(date, days) {
  var d = new Date(date);
  d.setDate(d.getDate() + days);
  return d;
}
function startOfWeek$1(date, firstDayOfWeek = DaysOfWeek$1.Monday) {
  var d = new Date(date);
  var day = d.getDay();
  var diff = (day < firstDayOfWeek ? 7 : 0) + day - firstDayOfWeek;
  d.setDate(d.getDate() - diff);
  return d;
}
function endOfWeek$1(date, firstDayOfWeek = DaysOfWeek$1.Monday) {
  var d = new Date(date);
  var day = d.getDay();
  var diff = (day < firstDayOfWeek ? -7 : 0) + 6 - (day - firstDayOfWeek);
  d.setDate(d.getDate() + diff);
  return d;
}
function startOfMonth$1(date) {
  return new Date(date.getFullYear(), date.getMonth(), 1);
}
function endOfMonth$1(date) {
  return new Date(date.getFullYear(), date.getMonth() + 1, 0);
}
function setMonth$1(date, month) {
  const d = new Date(date);
  d.setMonth(month);
  return d;
}
function setYear$1(date, year) {
  const d = new Date(date);
  d.setFullYear(year);
  return d;
}
/**
 * Check if date is within a min and max
 */
function inRange$1(date, min, max) {
  return clamp$2(date, min, max) === date;
}
/**
 * Ensures date is within range, returns min or max if out of bounds
 */
function clamp$2(date, min, max) {
  const time = date.getTime();
  if (min && min instanceof Date && time < min.getTime()) {
    return min;
  }
  if (max && max instanceof Date && time > max.getTime()) {
    return max;
  }
  return date;
}
/**
 * given start and end date, return an (inclusive) array of all dates in between
 * @param start
 * @param end
 */
function getDaysInRange$1(start, end) {
  const days = [];
  let current = start;
  while (!isEqual$1(current, end)) {
    days.push(current);
    current = addDays$1(current, 1);
  }
  days.push(current);
  return days;
}
/**
 * given a date, return an array of dates from a calendar perspective
 * @param date
 * @param firstDayOfWeek
 */
function getViewOfMonth$1(date, firstDayOfWeek = DaysOfWeek$1.Monday) {
  const start = startOfWeek$1(startOfMonth$1(date), firstDayOfWeek);
  const end = endOfWeek$1(endOfMonth$1(date), firstDayOfWeek);
  return getDaysInRange$1(start, end);
}
/**
 * Form random hash
 */
function chr4$1() {
  return Math.random()
    .toString(16)
    .slice(-4);
}
/**
 * Create random identifier with a prefix
 * @param prefix
 */
function createIdentifier$1(prefix) {
  return `${prefix}-${chr4$1()}${chr4$1()}-${chr4$1()}-${chr4$1()}-${chr4$1()}-${chr4$1()}${chr4$1()}${chr4$1()}`;
}

const DatePickerInput$1 = ({ onClick, dateFormatter, localization, name, formattedValue, valueAsDate, value, identifier, disabled, required, role, buttonRef, inputRef, onInput, onBlur, onFocus, }) => {
  return (h("div", { class: "duet-date__input-wrapper" },
    h("input", { class: "duet-date__input", value: formattedValue, placeholder: localization.placeholder, id: identifier, disabled: disabled, role: role, required: required ? true : undefined, "aria-autocomplete": "none", onInput: onInput, onFocus: onFocus, onBlur: onBlur, autoComplete: "off", ref: inputRef }),
    h("input", { type: "hidden", name: name, value: value }),
    h("button", { class: "duet-date__toggle", onClick: onClick, disabled: disabled, ref: buttonRef, type: "button" },
      h("span", { class: "duet-date__toggle-icon" },
        h("svg", { "aria-hidden": "true", height: "24", viewBox: "0 0 21 21", width: "24", xmlns: "http://www.w3.org/2000/svg" },
          h("g", { fill: "none", "fill-rule": "evenodd", transform: "translate(2 2)" },
            h("path", { d: "m2.5.5h12c1.1045695 0 2 .8954305 2 2v12c0 1.1045695-.8954305 2-2 2h-12c-1.1045695 0-2-.8954305-2-2v-12c0-1.1045695.8954305-2 2-2z", stroke: "currentColor", "stroke-linecap": "round", "stroke-linejoin": "round" }),
            h("path", { d: "m.5 4.5h16", stroke: "currentColor", "stroke-linecap": "round", "stroke-linejoin": "round" }),
            h("g", { fill: "currentColor" },
              h("circle", { cx: "8.5", cy: "8.5", r: "1" }),
              h("circle", { cx: "4.5", cy: "8.5", r: "1" }),
              h("circle", { cx: "12.5", cy: "8.5", r: "1" }),
              h("circle", { cx: "8.5", cy: "12.5", r: "1" }),
              h("circle", { cx: "4.5", cy: "12.5", r: "1" }),
              h("circle", { cx: "12.5", cy: "12.5", r: "1" }))))),
      h("span", { class: "duet-date__vhidden" },
        localization.buttonLabel,
        valueAsDate && (h("span", null,
          ", ",
          localization.selectedDateMessage,
          " ",
          dateFormatter.format(valueAsDate)))))));
};

const DatePickerDay$1 = ({ focusedDay, today, day, onDaySelect, onKeyboardNavigation, focusedDayRef, inRange, isSelected, dateFormatter, }) => {
  const isToday = isEqual$1(day, today);
  const isFocused = isEqual$1(day, focusedDay);
  const isDisabled = day.getMonth() !== focusedDay.getMonth();
  const isOutsideRange = !inRange;
  function handleClick(e) {
    onDaySelect(e, day);
  }
  return (h("button", { class: {
      "duet-date__day": true,
      "is-outside": isOutsideRange,
      "is-disabled": isDisabled,
      "is-today": isToday,
    }, tabIndex: isFocused ? 0 : -1, onClick: handleClick, onKeyDown: onKeyboardNavigation, disabled: isOutsideRange || isDisabled, type: "button", "aria-pressed": isSelected ? "true" : "false", ref: el => {
      if (isFocused && el && focusedDayRef) {
        focusedDayRef(el);
      }
    } },
    h("span", { "aria-hidden": "true" }, day.getDate()),
    h("span", { class: "duet-date__vhidden" }, dateFormatter.format(day))));
};

function chunk$1(array, chunkSize) {
  const result = [];
  for (let i = 0; i < array.length; i += chunkSize) {
    result.push(array.slice(i, i + chunkSize));
  }
  return result;
}
function mapWithOffset$1(array, startingOffset, mapFn) {
  return array.map((_, i) => {
    const adjustedIndex = (i + startingOffset) % array.length;
    return mapFn(array[adjustedIndex]);
  });
}
const DatePickerMonth$1 = ({ selectedDate, focusedDate, labelledById, localization, firstDayOfWeek, min, max, dateFormatter, onDateSelect, onKeyboardNavigation, focusedDayRef, }) => {
  const today = new Date();
  const days = getViewOfMonth$1(focusedDate, firstDayOfWeek);
  return (h("table", { class: "duet-date__table", "aria-labelledby": labelledById },
    h("thead", null,
      h("tr", null, mapWithOffset$1(localization.dayNames, firstDayOfWeek, dayName => (h("th", { class: "duet-date__table-header", scope: "col" },
        h("span", { "aria-hidden": "true" }, dayName.substr(0, 2)),
        h("span", { class: "duet-date__vhidden" }, dayName)))))),
    h("tbody", null, chunk$1(days, 7).map(week => (h("tr", { class: "duet-date__row" }, week.map(day => (h("td", { class: "duet-date__cell" },
      h(DatePickerDay$1, { day: day, today: today, focusedDay: focusedDate, isSelected: isEqual$1(day, selectedDate), inRange: inRange$1(day, min, max), onDaySelect: onDateSelect, dateFormatter: dateFormatter, onKeyboardNavigation: onKeyboardNavigation, focusedDayRef: focusedDayRef }))))))))));
};

const localization$1 = {
  buttonLabel: "Choose date",
  placeholder: "YYYY-MM-DD",
  selectedDateMessage: "Selected date is",
  prevMonthLabel: "Previous month",
  nextMonthLabel: "Next month",
  monthSelectLabel: "Month",
  yearSelectLabel: "Year",
  closeLabel: "Close window",
  keyboardInstruction: "You can use arrow keys to navigate dates",
  calendarHeading: "Choose a date",
  dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  monthNames: [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ],
  monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  locale: "en-GB",
};

const isoAdapter$1 = { parse: parseISODate$1, format: printISODate$1 };

const duetDatePickerCss$1 = ".duet-date *,.duet-date *::before,.duet-date *::after{box-sizing:border-box;margin:0;width:auto}.duet-date{box-sizing:border-box;color:var(--duet-color-text);display:block;font-family:var(--duet-font);margin:0;position:relative;text-align:left;width:100%}.duet-date__input{-webkit-appearance:none;appearance:none;background:var(--duet-color-surface);border:1px solid var(--duet-color-text);border-radius:var(--duet-radius);color:var(--duet-color-text);float:none;font-family:var(--duet-font);font-size:100%;line-height:normal;padding:14px 60px 14px 14px;width:100%}.duet-date__input:focus{border-color:var(--duet-color-primary);box-shadow:0 0 0 1px var(--duet-color-primary);outline:0}.duet-date__input::-webkit-input-placeholder{color:var(--duet-color-placeholder);opacity:1}.duet-date__input:-moz-placeholder{color:var(--duet-color-placeholder);opacity:1}.duet-date__input:-ms-input-placeholder{color:var(--duet-color-placeholder)}.duet-date__input-wrapper{position:relative;width:100%}.duet-date__toggle{-moz-appearance:none;-webkit-appearance:none;-webkit-user-select:none;align-items:center;appearance:none;background:var(--duet-color-button);border:0;border-radius:0;border-bottom-right-radius:var(--duet-radius);border-top-right-radius:var(--duet-radius);box-shadow:inset 1px 0 0 rgba(0, 0, 0, 0.1);color:var(--duet-color-text);cursor:pointer;display:flex;height:calc(100% - 2px);justify-content:center;padding:0;position:absolute;right:1px;top:1px;user-select:none;width:48px;z-index:2}.duet-date__toggle:focus{box-shadow:0 0 0 2px var(--duet-color-primary);outline:0}.duet-date__toggle-icon{display:flex;flex-basis:100%;justify-content:center;align-items:center}.duet-date__dialog{display:flex;left:0;min-width:320px;opacity:0;position:absolute;top:100%;transform:scale(0.96) translateZ(0) translateY(-20px);transform-origin:top right;transition:transform 300ms ease, opacity 300ms ease, visibility 300ms ease;visibility:hidden;width:100%;will-change:transform, opacity, visibility;z-index:var(--duet-z-index)}@media (max-width: 35.9375em){.duet-date__dialog{background:var(--duet-color-overlay);bottom:0;position:fixed;right:0;top:0;transform:translateZ(0);transform-origin:bottom center}}.duet-date__dialog.is-left{left:auto;right:0;width:auto}.duet-date__dialog.is-active{opacity:1;transform:scale(1.0001) translateZ(0) translateY(0);visibility:visible}.duet-date__dialog-content{background:var(--duet-color-surface);border:1px solid rgba(0, 0, 0, 0.1);border-radius:var(--duet-radius);box-shadow:0 4px 10px 0 rgba(0, 0, 0, 0.1);margin-left:auto;margin-top:8px;max-width:310px;min-width:290px;padding:16px 16px 20px;position:relative;transform:none;width:100%;z-index:var(--duet-z-index)}@media (max-width: 35.9375em){.duet-date__dialog-content{border:0;border-radius:0;border-top-left-radius:var(--duet-radius);border-top-right-radius:var(--duet-radius);bottom:0;left:0;margin:0;max-width:none;min-height:26em;opacity:0;padding:0 8% 20px;position:absolute;transform:translateZ(0) translateY(100%);transition:transform 400ms ease, opacity 400ms ease, visibility 400ms ease;visibility:hidden;will-change:transform, opacity, visibility}.is-active .duet-date__dialog-content{opacity:1;transform:translateZ(0) translateY(0);visibility:visible}}.duet-date__table{border-collapse:collapse;border-spacing:0;color:var(--duet-color-text);font-size:1rem;font-weight:var(--duet-font-normal);line-height:1.25;text-align:center;width:100%}.duet-date__table-header{font-size:0.75rem;font-weight:var(--duet-font-bold);letter-spacing:1px;line-height:1.25;padding-bottom:8px;text-decoration:none;text-transform:uppercase}.duet-date__cell{text-align:center}.duet-date__day{-moz-appearance:none;-webkit-appearance:none;appearance:none;background:transparent;border:0;border-radius:50%;color:var(--duet-color-text);cursor:pointer;display:inline-block;font-family:var(--duet-font);font-size:0.875rem;font-variant-numeric:tabular-nums;font-weight:var(--duet-font-normal);height:36px;line-height:1.25;padding:0 0 1px;position:relative;text-align:center;vertical-align:middle;width:36px;z-index:1}.duet-date__day.is-today{box-shadow:0 0 0 1px var(--duet-color-primary);position:relative;z-index:200}.duet-date__day:hover::before,.duet-date__day.is-today::before{background:var(--duet-color-primary);border-radius:50%;bottom:0;content:\"\";left:0;opacity:0.06;position:absolute;right:0;top:0}.duet-date__day[aria-pressed=true],.duet-date__day:focus{background:var(--duet-color-primary);box-shadow:none;color:var(--duet-color-text-active);outline:0}.duet-date__day:active{background:var(--duet-color-primary);box-shadow:0 0 5px var(--duet-color-primary);color:var(--duet-color-text-active);z-index:200}.duet-date__day:focus{box-shadow:0 0 5px var(--duet-color-primary);z-index:200}.duet-date__day.is-disabled{background:transparent;box-shadow:none;color:var(--duet-color-text);cursor:default;opacity:0.5}.duet-date__day.is-disabled::before{display:none}.duet-date__day.is-outside{background:var(--duet-color-button);box-shadow:none;color:var(--duet-color-text);cursor:default;opacity:0.6;pointer-events:none}.duet-date__day.is-outside::before{display:none}.duet-date__header{align-items:center;display:flex;justify-content:space-between;margin-bottom:16px;width:100%}.duet-date__nav{white-space:nowrap}.duet-date__prev,.duet-date__next{-moz-appearance:none;-webkit-appearance:none;align-items:center;appearance:none;background:var(--duet-color-button);border:0;border-radius:50%;color:var(--duet-color-text);cursor:pointer;display:inline-flex;height:32px;justify-content:center;margin-left:8px;padding:0;transition:background-color 300ms ease;width:32px}@media (max-width: 35.9375em){.duet-date__prev,.duet-date__next{height:40px;width:40px}}.duet-date__prev:focus,.duet-date__next:focus{box-shadow:0 0 0 2px var(--duet-color-primary);outline:0}.duet-date__prev:active:focus,.duet-date__next:active:focus{box-shadow:none}.duet-date__prev:disabled,.duet-date__next:disabled{cursor:default;opacity:0.5}.duet-date__prev svg,.duet-date__next svg{margin:0 auto}.duet-date__select{display:inline-flex;margin-top:4px;position:relative}.duet-date__select span{margin-right:4px}.duet-date__select select{cursor:pointer;font-size:1rem;height:100%;left:0;opacity:0;position:absolute;top:0;width:100%;z-index:2}.duet-date__select select:focus+.duet-date__select-label{box-shadow:0 0 0 2px var(--duet-color-primary)}.duet-date__select-label{align-items:center;border-radius:var(--duet-radius);color:var(--duet-color-text);display:flex;font-size:1.25rem;font-weight:var(--duet-font-bold);line-height:1.25;padding:0 4px 0 8px;pointer-events:none;position:relative;width:100%;z-index:1}.duet-date__select-label svg{width:16px;height:16px}.duet-date__mobile{align-items:center;border-bottom:1px solid rgba(0, 0, 0, 0.12);display:flex;justify-content:space-between;margin-bottom:20px;margin-left:-10%;overflow:hidden;padding:12px 20px;position:relative;text-overflow:ellipsis;white-space:nowrap;width:120%}@media (min-width: 36em){.duet-date__mobile{border:0;margin:0;overflow:visible;padding:0;position:absolute;right:-8px;top:-8px;width:auto}}.duet-date__mobile-heading{display:inline-block;font-weight:var(--duet-font-bold);max-width:84%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}@media (min-width: 36em){.duet-date__mobile-heading{display:none}}.duet-date__close{-webkit-appearance:none;align-items:center;appearance:none;background:var(--duet-color-button);border:0;border-radius:50%;color:var(--duet-color-text);cursor:pointer;display:flex;height:24px;justify-content:center;padding:0;width:24px}@media (min-width: 36em){.duet-date__close{opacity:0}}.duet-date__close:focus{box-shadow:0 0 0 2px var(--duet-color-primary);outline:none}@media (min-width: 36em){.duet-date__close:focus{opacity:1}}.duet-date__close svg{margin:0 auto}.duet-date__vhidden{border:0;clip:rect(1px, 1px, 1px, 1px);height:1px;overflow:hidden;padding:0;position:absolute;top:0;width:1px}";

function range$1(from, to) {
  var result = [];
  for (var i = from; i <= to; i++) {
    result.push(i);
  }
  return result;
}
const keyCode$1 = {
  TAB: 9,
  ESC: 27,
  SPACE: 32,
  PAGE_UP: 33,
  PAGE_DOWN: 34,
  END: 35,
  HOME: 36,
  LEFT: 37,
  UP: 38,
  RIGHT: 39,
  DOWN: 40,
};
const DISALLOWED_CHARACTERS$1 = /[^0-9\.\/\-]+/g;
const TRANSITION_MS$1 = 300;
const DuetDatePicker$1 = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.duetChange = createEvent(this, "duetChange", 7);
    this.duetBlur = createEvent(this, "duetBlur", 7);
    this.duetFocus = createEvent(this, "duetFocus", 7);
    /**
     * Own Properties
     */
    this.monthSelectId = createIdentifier$1("DuetDateMonth");
    this.yearSelectId = createIdentifier$1("DuetDateYear");
    this.dialogLabelId = createIdentifier$1("DuetDateLabel");
    this.initialTouchX = null;
    this.initialTouchY = null;
    /**
     * State() variables
     */
    this.activeFocus = false;
    this.focusedDay = new Date();
    this.open = false;
    /**
     * Public Property API
     */
    /**
     * Name of the date picker input.
     */
    this.name = "date";
    /**
     * Adds a unique identifier for the date picker input. Use this instead of html `id` attribute.
     */
    this.identifier = "";
    /**
     * Makes the date picker input component disabled. This prevents users from being able to
     * interact with the input, and conveys its inactive state to assistive technologies.
     */
    this.disabled = false;
    /**
     * Forces the opening direction of the calendar modal to be always left or right.
     * This setting can be useful when the input is smaller than the opening date picker
     * would be as by default the picker always opens towards right.
     */
    this.direction = "right";
    /**
     * Should the input be marked as required?
     */
    this.required = false;
    /**
     * Date value. Must be in IS0-8601 format: YYYY-MM-DD.
     */
    this.value = "";
    /**
     * Minimum date allowed to be picked. Must be in IS0-8601 format: YYYY-MM-DD.
     * This setting can be used alone or together with the max property.
     */
    this.min = "";
    /**
     * Maximum date allowed to be picked. Must be in IS0-8601 format: YYYY-MM-DD.
     * This setting can be used alone or together with the min property.
     */
    this.max = "";
    /**
     * Which day is considered first day of the week? `0` for Sunday, `1` for Monday, etc.
     * Default is Monday.
     */
    this.firstDayOfWeek = DaysOfWeek$1.Monday;
    /**
     * Button labels, day names, month names, etc, used for localization.
     * Default is English.
     */
    this.localization = localization$1;
    /**
     * Date adapter, for custom parsing/formatting.
     * Must be object with a `parse` function which accepts a `string` and returns a `Date`,
     * and a `format` function which accepts a `Date` and returns a `string`.
     * Default is IS0-8601 parsing and formatting.
     */
    this.dateAdapter = isoAdapter$1;
    /**
     * Local methods.
     */
    this.enableActiveFocus = () => {
      this.activeFocus = true;
    };
    this.disableActiveFocus = () => {
      this.activeFocus = false;
    };
    this.toggleOpen = (e) => {
      e.preventDefault();
      this.open ? this.hide(false) : this.show();
    };
    this.handleEscKey = (event) => {
      if (event.keyCode === keyCode$1.ESC) {
        this.hide();
      }
    };
    this.handleBlur = (event) => {
      event.stopPropagation();
      this.duetBlur.emit({
        component: "duet-date-picker",
      });
    };
    this.handleFocus = (event) => {
      event.stopPropagation();
      this.duetFocus.emit({
        component: "duet-date-picker",
      });
    };
    this.handleTouchStart = (event) => {
      const touch = event.changedTouches[0];
      this.initialTouchX = touch.pageX;
      this.initialTouchY = touch.pageY;
    };
    this.handleTouchMove = (event) => {
      event.preventDefault();
    };
    this.handleTouchEnd = (event) => {
      const touch = event.changedTouches[0];
      const distX = touch.pageX - this.initialTouchX; // get horizontal dist traveled
      const distY = touch.pageY - this.initialTouchY; // get vertical dist traveled
      const threshold = 70;
      const isHorizontalSwipe = Math.abs(distX) >= threshold && Math.abs(distY) <= threshold;
      const isDownwardsSwipe = Math.abs(distY) >= threshold && Math.abs(distX) <= threshold && distY > 0;
      if (isHorizontalSwipe) {
        this.addMonths(distX < 0 ? 1 : -1);
      }
      else if (isDownwardsSwipe) {
        this.hide(false);
        event.preventDefault();
      }
      this.initialTouchY = null;
      this.initialTouchX = null;
    };
    this.handleNextMonthClick = (event) => {
      event.preventDefault();
      this.addMonths(1);
    };
    this.handlePreviousMonthClick = (event) => {
      event.preventDefault();
      this.addMonths(-1);
    };
    this.handleFirstFocusableKeydown = (event) => {
      // this ensures focus is trapped inside the dialog
      if (event.keyCode === keyCode$1.TAB && event.shiftKey) {
        this.focusedDayNode.focus();
        event.preventDefault();
      }
    };
    this.handleKeyboardNavigation = (event) => {
      // handle tab separately, since it needs to be treated
      // differently to other keyboard interactions
      if (event.keyCode === keyCode$1.TAB && !event.shiftKey) {
        event.preventDefault();
        this.firstFocusableElement.focus();
        return;
      }
      var handled = true;
      switch (event.keyCode) {
        case keyCode$1.RIGHT:
          this.addDays(1);
          break;
        case keyCode$1.LEFT:
          this.addDays(-1);
          break;
        case keyCode$1.DOWN:
          this.addDays(7);
          break;
        case keyCode$1.UP:
          this.addDays(-7);
          break;
        case keyCode$1.PAGE_UP:
          if (event.shiftKey) {
            this.addYears(-1);
          }
          else {
            this.addMonths(-1);
          }
          break;
        case keyCode$1.PAGE_DOWN:
          if (event.shiftKey) {
            this.addYears(1);
          }
          else {
            this.addMonths(1);
          }
          break;
        case keyCode$1.HOME:
          this.startOfWeek();
          break;
        case keyCode$1.END:
          this.endOfWeek();
          break;
        default:
          handled = false;
      }
      if (handled) {
        event.preventDefault();
        this.enableActiveFocus();
      }
    };
    this.handleDaySelect = (_event, day) => {
      if (!inRange$1(day, parseISODate$1(this.min), parseISODate$1(this.max))) {
        return;
      }
      if (day.getMonth() === this.focusedDay.getMonth()) {
        this.setValue(day);
        this.hide();
      }
      else {
        this.setFocusedDay(day);
      }
    };
    this.handleMonthSelect = e => {
      this.setMonth(parseInt(e.target.value, 10));
    };
    this.handleYearSelect = e => {
      this.setYear(parseInt(e.target.value, 10));
    };
    this.handleInputChange = (e) => {
      const target = e.target;
      // clean up any invalid characters
      target.value = target.value.replace(DISALLOWED_CHARACTERS$1, "");
      const parsed = this.dateAdapter.parse(target.value, createDate$1);
      if (parsed || target.value === "") {
        this.setValue(parsed);
      }
    };
    this.processFocusedDayNode = (element) => {
      this.focusedDayNode = element;
      if (this.activeFocus && this.open) {
        setTimeout(() => element.focus(), 0);
      }
    };
  }
  connectedCallback() {
    this.createDateFormatters();
  }
  createDateFormatters() {
    this.dateFormatShort = new Intl.DateTimeFormat(this.localization.locale, { day: "numeric", month: "long" });
    this.dateFormatLong = new Intl.DateTimeFormat(this.localization.locale, {
      day: "numeric",
      month: "long",
      year: "numeric",
    });
  }
  /**
   * Component event handling.
   */
  handleDocumentClick(e) {
    if (!this.open) {
      return;
    }
    const target = e.target;
    // TODO: stopPropagation only on open??
    // the dialog and the button aren't considered clicks outside.
    // dialog for obvious reasons, but the button needs to be skipped
    // so that two things are possible:
    //
    // a) clicking again on the button when dialog is open should close the modal.
    //    without skipping the button here, we would see a click outside
    //    _and_ a click on the button, so the `open` state goes
    //    open -> close (click outside) -> open (click button)
    //
    // b) clicking another date picker's button should close the current calendar
    //    and open the new one. this means we can't stopPropagation() on the button itself
    //
    // this was the only satisfactory combination of things to get the above to work
    if (this.dialogWrapperNode.contains(target) || this.datePickerButton.contains(target)) {
      return;
    }
    this.hide(false);
  }
  /**
   * Public methods API
   */
  /**
   * Sets focus on the date picker's input. Use this method instead of the global `focus()`.
   */
  async setFocus() {
    return this.datePickerInput.focus();
  }
  /**
   * Show the calendar modal, moving focus to the calendar inside.
   */
  async show() {
    this.open = true;
    this.setFocusedDay(parseISODate$1(this.value) || new Date());
    clearTimeout(this.focusTimeoutId);
    this.focusTimeoutId = setTimeout(() => this.monthSelectNode.focus(), TRANSITION_MS$1);
  }
  /**
   * Hide the calendar modal. Set `moveFocusToButton` to false to prevent focus
   * returning to the date picker's button. Default is true.
   */
  async hide(moveFocusToButton = true) {
    this.open = false;
    // in cases where calendar is quickly shown and hidden
    // we should avoid moving focus to the button
    clearTimeout(this.focusTimeoutId);
    if (moveFocusToButton) {
      // iOS VoiceOver needs to wait for all transitions to finish.
      setTimeout(() => this.datePickerButton.focus(), TRANSITION_MS$1 + 200);
    }
  }
  addDays(days) {
    this.setFocusedDay(addDays$1(this.focusedDay, days));
  }
  addMonths(months) {
    this.setMonth(this.focusedDay.getMonth() + months);
  }
  addYears(years) {
    this.setYear(this.focusedDay.getFullYear() + years);
  }
  startOfWeek() {
    this.setFocusedDay(startOfWeek$1(this.focusedDay, this.firstDayOfWeek));
  }
  endOfWeek() {
    this.setFocusedDay(endOfWeek$1(this.focusedDay, this.firstDayOfWeek));
  }
  setMonth(month) {
    const min = setMonth$1(startOfMonth$1(this.focusedDay), month);
    const max = endOfMonth$1(min);
    const date = setMonth$1(this.focusedDay, month);
    this.setFocusedDay(clamp$2(date, min, max));
  }
  setYear(year) {
    const min = setYear$1(startOfMonth$1(this.focusedDay), year);
    const max = endOfMonth$1(min);
    const date = setYear$1(this.focusedDay, year);
    this.setFocusedDay(clamp$2(date, min, max));
  }
  setFocusedDay(day) {
    this.focusedDay = clamp$2(day, parseISODate$1(this.min), parseISODate$1(this.max));
  }
  setValue(date) {
    this.value = printISODate$1(date);
    this.duetChange.emit({
      component: "duet-date-picker",
      value: this.value,
      valueAsDate: date,
    });
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    const valueAsDate = parseISODate$1(this.value);
    const formattedDate = valueAsDate && this.dateAdapter.format(valueAsDate);
    const selectedYear = (valueAsDate || this.focusedDay).getFullYear();
    const focusedMonth = this.focusedDay.getMonth();
    const focusedYear = this.focusedDay.getFullYear();
    const minDate = parseISODate$1(this.min);
    const maxDate = parseISODate$1(this.max);
    const prevMonthDisabled = minDate != null && minDate.getMonth() === focusedMonth && minDate.getFullYear() === focusedYear;
    const nextMonthDisabled = maxDate != null && maxDate.getMonth() === focusedMonth && maxDate.getFullYear() === focusedYear;
    const minYear = minDate ? minDate.getFullYear() : selectedYear - 10;
    const maxYear = maxDate ? maxDate.getFullYear() : selectedYear + 10;
    return (h(Host, null, h("div", { class: "duet-date" }, h(DatePickerInput$1, { dateFormatter: this.dateFormatLong, value: this.value, valueAsDate: valueAsDate, formattedValue: formattedDate, onInput: this.handleInputChange, onBlur: this.handleBlur, onFocus: this.handleFocus, onClick: this.toggleOpen, name: this.name, disabled: this.disabled, role: this.role, required: this.required, identifier: this.identifier, localization: this.localization, buttonRef: element => (this.datePickerButton = element), inputRef: element => (this.datePickerInput = element) }), h("div", { class: {
        "duet-date__dialog": true,
        "is-left": this.direction === "left",
        "is-active": this.open,
      }, role: "dialog", "aria-modal": "true", "aria-hidden": this.open ? "false" : "true", "aria-labelledby": this.dialogLabelId, onTouchMove: this.handleTouchMove, onTouchStart: this.handleTouchStart, onTouchEnd: this.handleTouchEnd }, h("div", { class: "duet-date__dialog-content", onKeyDown: this.handleEscKey, ref: element => (this.dialogWrapperNode = element) }, h("div", { class: "duet-date__vhidden duet-date__instructions", "aria-live": "polite" }, this.localization.keyboardInstruction), h("div", { class: "duet-date__mobile", onFocusin: this.disableActiveFocus }, h("label", { class: "duet-date__mobile-heading" }, this.localization.calendarHeading), h("button", { class: "duet-date__close", ref: element => (this.firstFocusableElement = element), onKeyDown: this.handleFirstFocusableKeydown, onClick: () => this.hide(), type: "button" }, h("svg", { "aria-hidden": "true", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 24 24" }, h("path", { d: "M0 0h24v24H0V0z", fill: "none" }), h("path", { d: "M18.3 5.71c-.39-.39-1.02-.39-1.41 0L12 10.59 7.11 5.7c-.39-.39-1.02-.39-1.41 0-.39.39-.39 1.02 0 1.41L10.59 12 5.7 16.89c-.39.39-.39 1.02 0 1.41.39.39 1.02.39 1.41 0L12 13.41l4.89 4.89c.39.39 1.02.39 1.41 0 .39-.39.39-1.02 0-1.41L13.41 12l4.89-4.89c.38-.38.38-1.02 0-1.4z" })), h("span", { class: "duet-date__vhidden" }, this.localization.closeLabel))), h("div", { class: "duet-date__header", onFocusin: this.disableActiveFocus }, h("div", null, h("h2", { id: this.dialogLabelId, class: "duet-date__vhidden", "aria-live": "polite", "aria-atomic": "true" }, this.localization.monthNames[focusedMonth], " ", this.focusedDay.getFullYear()), h("label", { htmlFor: this.monthSelectId, class: "duet-date__vhidden" }, this.localization.monthSelectLabel), h("div", { class: "duet-date__select" }, h("select", { id: this.monthSelectId, class: "duet-date__select--month", ref: element => (this.monthSelectNode = element), onChange: this.handleMonthSelect }, this.localization.monthNames.map((month, i) => (h("option", { key: month, value: i, selected: i === focusedMonth }, month)))), h("div", { class: "duet-date__select-label", "aria-hidden": "true" }, h("span", null, this.localization.monthNamesShort[focusedMonth]), h("svg", { fill: "currentColor", xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 24 24" }, h("path", { d: "M8.12 9.29L12 13.17l3.88-3.88c.39-.39 1.02-.39 1.41 0 .39.39.39 1.02 0 1.41l-4.59 4.59c-.39.39-1.02.39-1.41 0L6.7 10.7c-.39-.39-.39-1.02 0-1.41.39-.38 1.03-.39 1.42 0z" })))), h("label", { htmlFor: this.yearSelectId, class: "duet-date__vhidden" }, this.localization.yearSelectLabel), h("div", { class: "duet-date__select" }, h("select", { id: this.yearSelectId, class: "duet-date__select--year", onChange: this.handleYearSelect }, range$1(minYear, maxYear).map(year => (h("option", { key: year, selected: year === focusedYear }, year)))), h("div", { class: "duet-date__select-label", "aria-hidden": "true" }, h("span", null, this.focusedDay.getFullYear()), h("svg", { fill: "currentColor", xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 24 24" }, h("path", { d: "M8.12 9.29L12 13.17l3.88-3.88c.39-.39 1.02-.39 1.41 0 .39.39.39 1.02 0 1.41l-4.59 4.59c-.39.39-1.02.39-1.41 0L6.7 10.7c-.39-.39-.39-1.02 0-1.41.39-.38 1.03-.39 1.42 0z" }))))), h("div", { class: "duet-date__nav" }, h("button", { class: "duet-date__prev", onClick: this.handlePreviousMonthClick, disabled: prevMonthDisabled, type: "button" }, h("svg", { "aria-hidden": "true", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg", width: "21", height: "21", viewBox: "0 0 24 24" }, h("path", { d: "M14.71 15.88L10.83 12l3.88-3.88c.39-.39.39-1.02 0-1.41-.39-.39-1.02-.39-1.41 0L8.71 11.3c-.39.39-.39 1.02 0 1.41l4.59 4.59c.39.39 1.02.39 1.41 0 .38-.39.39-1.03 0-1.42z" })), h("span", { class: "duet-date__vhidden" }, this.localization.prevMonthLabel)), h("button", { class: "duet-date__next", onClick: this.handleNextMonthClick, disabled: nextMonthDisabled, type: "button" }, h("svg", { "aria-hidden": "true", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg", width: "21", height: "21", viewBox: "0 0 24 24" }, h("path", { d: "M9.29 15.88L13.17 12 9.29 8.12c-.39-.39-.39-1.02 0-1.41.39-.39 1.02-.39 1.41 0l4.59 4.59c.39.39.39 1.02 0 1.41L10.7 17.3c-.39.39-1.02.39-1.41 0-.38-.39-.39-1.03 0-1.42z" })), h("span", { class: "duet-date__vhidden" }, this.localization.nextMonthLabel)))), h(DatePickerMonth$1, { dateFormatter: this.dateFormatShort, selectedDate: valueAsDate, focusedDate: this.focusedDay, onDateSelect: this.handleDaySelect, onKeyboardNavigation: this.handleKeyboardNavigation, labelledById: this.dialogLabelId, localization: this.localization, firstDayOfWeek: this.firstDayOfWeek, focusedDayRef: this.processFocusedDayNode, min: minDate, max: maxDate }))))));
  }
  get element() { return this; }
  static get watchers() { return {
    "localization": ["createDateFormatters"]
  }; }
  static get style() { return duetDatePickerCss$1; }
};

const DuetDatePicker$1$1 = /*@__PURE__*/proxyCustomElement(DuetDatePicker$1, [0,"duet-date-picker",{"name":[1],"identifier":[1],"disabled":[516],"role":[1],"direction":[1],"required":[4],"value":[513],"min":[1],"max":[1],"firstDayOfWeek":[2,"first-day-of-week"],"localization":[16],"dateAdapter":[16],"activeFocus":[32],"focusedDay":[32],"open":[32]},[[6,"click","handleDocumentClick"]]]);

const datePickerCss = "duet-date-picker{--duet-color-primary:var(--telekom-color-primary-standard);--duet-color-text:var(--telekom-color-text-and-icon-standard);--duet-color-overlay:var(--telekom-color-background-surface);--duet-font:var(--telekom-typography-font-family-sans);--duet-font-normal:var(--telekom-typography-font-weight-regular);--duet-font-bold:var(--telekom-typography-font-weight-medium);--duet-color-placeholder:var(--telekom-color-ui-regular);--duet-radius:var(--telekom-radius-standard);--duet-radius-toggle-focus:6px;--duet-color-text-active:var(--telekom-color-text-and-icon-white-standard);--duet-color-button:var(--telekom-color-background-surface);--duet-color-surface:var(--telekom-color-background-surface);--duet-z-index:600;--duet-z-index-toggle:2;--spacing-x:var(--telekom-spacing-composition-space-05);--spacing-heading:0 0 var(--telekom-spacing-composition-space-06) 0;--font-size-heading:var(--telekom-typography-font-size-body);--radius-day:var(--telekom-radius-standard);--font-size-day:var(--telekom-typography-font-size-body);--font-size-table-header:var(--telekom-typography-font-size-caption);--font-weight-table-header:var(--telekom-typography-font-weight-extra-bold);--focus-outline:var(--telekom-line-weight-highlight) solid\n    var(--telekom-color-functional-focus-standard);--z-index-label:10}duet-date-picker .duet-date__input{border:var(--telekom-line-weight-standard) solid\n    var(--telekom-color-ui-border-standard);background-color:var(--telekom-color-ui-state-fill-standard);padding:1.125rem calc(2rem - var(--telekom-spacing-composition-space-01))\n    0.25rem calc(var(--spacing-x) - var(--telekom-spacing-composition-space-01));height:var(--telekom-spacing-composition-space-13);font:var(--telekom-text-style-body)}duet-date-picker .duet-date__input:hover{border:var(--telekom-spacing-composition-space-01) solid\n    var(--telekom-color-ui-border-hovered);background-color:var(--telekom-color-ui-state-fill-hovered)}duet-date-picker .duet-date__input:focus{border:var(--telekom-line-weight-standard) solid\n    var(--telekom-color-ui-border-pressed);outline:var(--focus-outline);box-shadow:none;outline-offset:1px}duet-date-picker .duet-date__toggle{border-radius:0 var(--duet-radius-toggle-focus)\n    var(--duet-radius-toggle-focus) 0;background:transparent;z-index:var(--duet-z-index-toggle);box-shadow:inset 1px 0 0 var(--telekom-color-ui-faint);width:var(--telekom-spacing-composition-space-13)}duet-date-picker .duet-date__toggle:focus{outline:var(--focus-outline);outline-offset:2px;box-shadow:none}.scale-date-picker:not(.scale-date-picker--disabled) duet-date-picker .duet-date__toggle:hover{background-color:var(--telekom-color-ui-state-fill-hovered)}.scale-date-picker:not(.scale-date-picker--disabled) duet-date-picker .duet-date__toggle:active{background-color:var(--telekom-color-ui-state-fill-pressed)}duet-date-picker .duet-date__toggle:hover scale-icon-content-calendar{color:var(--telekom-color-text-and-icon-standard)}duet-date-picker .duet-date__toggle:active scale-icon-content-calendar{color:var(--telekom-color-text-and-icon-standard)}@media screen and (forced-colors: active), (-ms-high-contrast: active){duet-date-picker .duet-date__toggle scale-icon-content-calendar,duet-date-picker .duet-date__header .duet-date__select-label,duet-date-picker .duet-date__header .duet-date__nav svg{color:var(--telekom-color-text-and-icon-inverted-standard)}duet-date-picker .duet-date__day[aria-pressed='true']{border:1px solid transparent}duet-date-picker .duet-date__day.is-today::before{border:2px solid transparent}}.scale-date-picker{position:relative}.scale-date-picker .date-picker__helper-text{font-weight:var(--telekom-typography-font-weight-bold);transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);padding-left:var(--telekom-spacing-composition-space-05);font-size:var(--telekom-typography-font-size-small);line-height:var(--telekom-typography-line-spacing-standard);color:var(--telekom-color-text-and-icon-functional-informational)}.scale-date-picker .date-picker__label{top:0;left:0;color:var(--telekom-color-text-and-icon-additional);display:flex;z-index:var(--z-index-label);position:absolute;transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);pointer-events:none;font:var(--telekom-text-style-ui);transform:translate(var(--telekom-spacing-composition-space-05), 0.875rem)}duet-date-picker .duet-date__input::placeholder{visibility:hidden;color:transparent;transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard)}duet-date-picker .duet-date__header{margin-top:var(--telekom-spacing-composition-space-04);margin-bottom:var(--telekom-spacing-composition-space-04);font:var(--telekom-text-style-ui)}duet-date-picker .duet-date__select{height:var(--telekom-spacing-composition-space-10)}duet-date-picker .duet-date__prev,duet-date-picker .duet-date__next{width:var(--telekom-spacing-composition-space-10);height:var(--telekom-spacing-composition-space-10)}duet-date-picker .duet-date__day{width:var(--telekom-spacing-composition-space-13);height:var(--telekom-spacing-composition-space-13)}.scale-date-picker.scale-date-picker--focus .date-picker__label,.scale-date-picker.animated .date-picker__label{color:var(--telekom-color-text-and-icon-additional);transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);font:var(--telekom-text-style-small-bold);transform:translate(\n    0.75rem,\n    calc(0.25rem + var(--telekom-spacing-composition-space-01))\n  )}.scale-date-picker.animated .duet-date__input::placeholder,duet-date-picker .duet-date__input:focus::placeholder{visibility:initial;color:var(--telekom-color-text-and-icon-standard);transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard)}duet-date-picker .duet-date__table{margin-top:var(--telekom-spacing-composition-space-04)}.scale-date-picker--status-error duet-date-picker .duet-date__input{margin-top:-1px;margin-bottom:-1px;border:var(--telekom-line-weight-highlight) solid\n    var(--telekom-color-functional-danger-standard)}.scale-date-picker--status-error duet-date-picker .duet-date__input:hover{border:var(--telekom-line-weight-highlight) solid\n    var(--telekom-color-functional-danger-hovered)}.scale-date-picker--status-error duet-date-picker .duet-date__input:focus{outline:var(--focus-outline);outline-offset:1px;box-shadow:none}.scale-date-picker--status-error .duet-date__toggle{width:47px}.scale-date-picker.scale-date-picker--disabled input,.scale-date-picker.scale-date-picker--disabled .duet-date__toggle{cursor:not-allowed}.scale-date-picker.scale-date-picker--disabled input,.scale-date-picker.scale-date-picker--disabled input:hover{color:var(--telekom-color-text-and-icon-disabled);border-color:var(--telekom-color-ui-border-disabled);background:none}.scale-date-picker.scale-date-picker--disabled .duet-date__toggle{color:var(--telekom-color-text-and-icon-disabled);box-shadow:inset 1px 0 0 var(--telekom-color-ui-border-disabled)}.scale-date-picker.scale-date-picker--disabled .duet-date__toggle:hover,.scale-date-picker.scale-date-picker--disabled .duet-date__toggle:hover scale-icon-content-calendar{color:var(--telekom-color-text-and-icon-disabled)}.scale-date-picker.scale-date-picker--disabled .date-picker__label{color:var(--telekom-color-text-and-icon-disabled)}.scale-date-picker__popup-heading{text-align:center;padding:var(--spacing-heading);font-size:var(--font-size-heading);font:var(--telekom-text-style-heading-6);color:var(--telekom-color-text-and-icon-standard) !important}duet-date-picker .duet-date__dialog-content{border:none;box-shadow:var(--telekom-shadow-raised-standard);max-width:324px;padding:var(--telekom-spacing-composition-space-06)\n    var(--telekom-spacing-composition-space-04)\n    var(--telekom-spacing-composition-space-04)\n    var(--telekom-spacing-composition-space-04);margin-top:var(--telekom-spacing-composition-space-03)}duet-date-picker .duet-date__cell{padding:0}duet-date-picker .duet-date__mobile{margin-left:0;padding:var(--telekom-spacing-composition-space-03) 0\n    var(--telekom-spacing-composition-space-05) 0}duet-date-picker .duet-date__select{margin-top:0}duet-date-picker .duet-date__select:nth-of-type(1){margin-right:var(--telekom-spacing-composition-space-04)}duet-date-picker .duet-date__select-label{font:var(--telekom-text-style-ui)}duet-date-picker .duet-date__select-label svg{width:16px;height:16px;margin-left:var(--telekom-spacing-composition-space-04)}duet-date-picker .duet-date__select select:focus+.duet-date__select-label{outline:var(--focus-outline)}duet-date-picker .duet-date__select select:hover+.duet-date__select-label{background:var(--telekom-color-primary-hovered);color:var(--telekom-color-text-and-icon-white-standard)}duet-date-picker .duet-date__select select:active+.duet-date__select-label{box-shadow:none;background:var(--telekom-color-primary-pressed);color:var(--telekom-color-text-and-icon-white-standard)}duet-date-picker .duet-date__prev,duet-date-picker .duet-date__next{border-radius:var(--duet-radius);margin-left:var(--telekom-spacing-composition-space-02)}duet-date-picker .duet-date__prev:hover,duet-date-picker .duet-date__next:hover{background:var(--telekom-color-primary-hovered);color:var(--telekom-color-text-and-icon-white-standard)}duet-date-picker .duet-date__prev:active,duet-date-picker .duet-date__next:active{background:var(--telekom-color-primary-pressed);color:var(--telekom-color-text-and-icon-white-standard)}duet-date-picker .duet-date__prev:focus,duet-date-picker .duet-date__next:focus{outline:var(--focus-outline)}duet-date-picker .duet-date__close{border-radius:var(--duet-radius)}duet-date-picker .duet-date__close:focus{outline:var(--focus-outline)}duet-date-picker .duet-date__table-header{height:var(--telekom-spacing-composition-space-14);padding:0;font-size:var(--font-size-table-header);font-weight:var(--font-weight-table-header)}duet-date-picker .duet-date__day{padding:0;border-radius:var(--radius-day);font-size:var(--font-size-day);color:var(--telekom-color-text-and-icon-standard)}duet-date-picker .duet-date__day.is-today{box-shadow:none}duet-date-picker .duet-date__day.is-disabled{opacity:1;color:var(--telekom-color-text-and-icon-disabled);pointer-events:none}duet-date-picker .duet-date__day.is-today::before{content:'';display:inline-block;width:var(--telekom-spacing-composition-space-03);height:var(--telekom-spacing-composition-space-03);border-radius:var(--telekom-radius-standard);background-color:var(--telekom-color-primary-standard);opacity:1;left:var(--telekom-spacing-composition-space-07);top:var(--telekom-spacing-composition-space-10)}duet-date-picker [aria-selected='true'] .duet-date__day.is-today::before,duet-date-picker .duet-date__day.is-today:hover::before{background-color:var(--telekom-color-background-surface)}duet-date-picker .duet-date__day.is-today.is-disabled::before{background-color:var(--telekom-radius-standard)}duet-date-picker .duet-date__day:focus{background:var(--telekom-color-background-surface);color:var(--telekom-color-text-and-icon-standard);outline:var(--focus-outline);box-shadow:none}duet-date-picker .duet-date__day:hover{background:var(--telekom-color-primary-hovered);color:var(--telekom-color-text-and-icon-white-standard)}duet-date-picker .duet-date__day:active{box-shadow:none;background:var(--telekom-color-primary-pressed);color:var(--telekom-color-text-and-icon-white-standard)}duet-date-picker .duet-date__day:hover::before{border-radius:var(--duet-radius);opacity:1;background:transparent;color:var(--telekom-color-text-and-icon-white-standard)}duet-date-picker .scale-date-picker__popup-heading{padding:var(--telekom-spacing-composition-space-04)}scale-date-picker .has-helper-text scale-helper-text{display:block;margin-top:var(--telekom-spacing-composition-space-03)}@media (max-width: 35.9375em) and (orientation: landscape){duet-date-picker .duet-date__dialog-content{zoom:70%}}@media (max-width: 35.9375em){duet-date-picker .scale-date-picker__popup-heading{display:none}duet-date-picker .duet-date__dialog-content{max-width:none}}";

if (typeof window !== 'undefined' &&
  typeof window.Audio !== 'undefined' &&
  !customElements.get('duet-date-picker')) {
  customElements.define('duet-date-picker', DuetDatePicker$1$1);
}
const DEFAULT_ICON_SIZE$2 = 20;
class DatePicker {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleChange = createEvent$1(this, "scale-change", 7);
    this.scaleChangeLegacy = createEvent$1(this, "scaleChange", 7);
    this.scaleBlur = createEvent$1(this, "scale-blur", 7);
    this.scaleBlurLegacy = createEvent$1(this, "scaleBlur", 7);
    this.scaleFocus = createEvent$1(this, "scale-focus", 7);
    this.scaleFocusLegacy = createEvent$1(this, "scaleFocus", 7);
    /**
     * Name of the date picker input.
     */
    this.name = 'date';
    /** @deprecated in v3 in favor of localization.calendarHeading */
    this.popupTitle = 'Pick a date';
    /**
     * Makes the date picker input component disabled. This prevents users from being able to
     * interact with the input, and conveys its inactive state to assistive technologies.
     */
    this.disabled = false;
    /**
     * Forces the opening direction of the calendar modal to be always left or right.
     * This setting can be useful when the input is smaller than the opening date picker
     * would be as by default the picker always opens towards right.
     */
    this.direction = 'right';
    /**
     * Should the input be marked as required?
     */
    this.required = false;
    /**
     * Date value. Must be in IS0-8601 format: YYYY-MM-DD.
     */
    this.value = '';
    /**
     * Minimum date allowed to be picked. Must be in IS0-8601 format: YYYY-MM-DD.
     * This setting can be used alone or together with the max property.
     */
    this.min = '';
    /**
     * Maximum date allowed to be picked. Must be in IS0-8601 format: YYYY-MM-DD.
     * This setting can be used alone or together with the min property.
     */
    this.max = '';
    /** (optional) Helper text */
    this.helperText = '';
    /** @deprecated - invalid should replace status */
    this.status = '';
    /** (optional) Label */
    this.label = '';
    /** (optional) Input place holder */
    this.placeholder = '';
    this.variant = 'informational';
    /** Whether the input element has focus */
    this.hasFocus = false;
    /** Whether the input element has value */
    this.hasValue = this.value != null && this.value !== '';
    this.internalId = generateUniqueId();
    /**
     * Fix JAWS reading the day twice, e.g. "19 19. August"
     * It'd probably make sense to open a PR in duetds/date-picker
     * https://github.com/duetds/date-picker/blob/master/src/components/duet-date-picker/date-picker-day.tsx#L61
     */
    this.adjustButtonsLabelsForA11y = () => {
      const table = this.hostElement.querySelector('.duet-date__table');
      if (!table) {
        // The node we need does not exist yet. Wait and try again.
        setTimeout(this.adjustButtonsLabelsForA11y);
        return;
      }
      const options = { subtree: true, childList: true, attributes: true };
      const callback = () => {
        this.mo.disconnect(); // avoid a feedback loop
        const buttons = Array.from(this.hostElement.querySelectorAll('.duet-date__day'));
        buttons.forEach((button) => {
          const span = button.querySelector('.duet-date__vhidden');
          const text = span.textContent;
          button.setAttribute('aria-label', text);
          span.setAttribute('hidden', 'hidden');
        });
        this.mo.observe(table, options);
      };
      this.mo = new MutationObserver(callback);
      callback();
    };
  }
  /**
   * Public methods API
   */
  /**
   * Sets focus on the date picker's input. Use this method instead of the global `focus()`.
   */
  async setFocus() {
    return this.duetInput.setFocus();
  }
  /**
   * Show the calendar modal, moving focus to the calendar inside.
   */
  async show() {
    return this.duetInput.show();
  }
  /**
   * Hide the calendar modal. Set `moveFocusToButton` to false to prevent focus
   * returning to the date picker's button. Default is true.
   */
  async hide(moveFocusToButton = true) {
    return this.duetInput.hide(moveFocusToButton);
  }
  /**
   * Watch `value` property for changes and update `hasValue` based on that.
   */
  onValueChange() {
    this.hasValue = this.value != null && this.value !== '';
    // @ts-ignore
    this.duetInput.querySelector('.duet-date__input').value = this.value;
  }
  /**
   * Watch `placeholder` property for changes and update `placeholder` based on that.
   */
  onPlaceholderChange(newValue) {
    const input = this.duetInput.querySelector('.duet-date__input');
    if (input && this.placeholder) {
      input.setAttribute('placeholder', newValue);
    }
  }
  componentWillLoad() {
    if (this.popupTitle !== 'Pick a date') {
      statusNote({
        tag: 'deprecated',
        message: 'Property "popupTitle" is deprecate in favor of localization.calendarHeading.',
        type: 'warn',
        source: this.hostElement,
      });
    }
    this.handleKeyPress = this.handleKeyPress.bind(this);
    if (this.identifier == null) {
      this.identifier = 'scale-date-picker-' + this.internalId;
    }
  }
  componentDidLoad() {
    var _a, _b;
    const calendarIcon = this.duetInput.querySelector('.duet-date__toggle-icon');
    if (calendarIcon) {
      const icon = document.createElement('scale-icon-content-calendar');
      icon.size = DEFAULT_ICON_SIZE$2;
      calendarIcon.replaceWith(icon);
    }
    const navLeftIcon = this.duetInput.querySelector('.duet-date__prev svg');
    if (navLeftIcon) {
      const scaleNavLeftIcon = document.createElement('scale-icon-navigation-left');
      scaleNavLeftIcon.size = 16;
      navLeftIcon.replaceWith(scaleNavLeftIcon);
    }
    const navRightIcon = this.duetInput.querySelector('.duet-date__next svg');
    if (navRightIcon) {
      const scaleNavRightIcon = document.createElement('scale-icon-navigation-right');
      scaleNavRightIcon.size = 16;
      navRightIcon.replaceWith(scaleNavRightIcon);
    }
    const selectIcon = this.duetInput.querySelectorAll('.duet-date__select-label svg');
    if (selectIcon) {
      Array.from(selectIcon).forEach((icon) => icon.replaceWith(document.createElement('scale-icon-navigation-collapse-down')));
    }
    const input = this.duetInput.querySelector('.duet-date__input');
    if (input) {
      input.addEventListener('keyup', this.handleKeyPress);
    }
    if (input && this.helperText) {
      input.setAttribute('aria-describedby', `helper-message-${this.internalId}`);
    }
    if (input && this.placeholder) {
      input.setAttribute('placeholder', this.placeholder);
    }
    if (input && (this.status === 'error' || this.invalid)) {
      input.setAttribute('aria-invalid', 'true');
    }
    // Remove existing <h2> with `{Month} {Year}` text
    const dialog = this.hostElement.querySelector('.duet-date__dialog');
    let duetHeadingId = '';
    if (dialog) {
      duetHeadingId = dialog.getAttribute('aria-labelledby');
      if (duetHeadingId) {
        const duetHeading = this.hostElement.querySelector(`#${duetHeadingId}`);
        if (duetHeading) {
          duetHeading.parentElement.removeChild(duetHeading);
        }
      }
    }
    // Add custom <h2> heading
    const dialogContent = this.hostElement.querySelector('.duet-date__dialog-content');
    if (dialogContent) {
      const calendarHeading = ((_a = this.localization) === null || _a === void 0 ? void 0 : _a.calendarHeading) || this.popupTitle || 'Pick a date';
      const heading = document.createElement('h2');
      heading.id = duetHeadingId; // link to .duet-date__dialog[aria-labelledby]
      heading.className = 'scale-date-picker__popup-heading';
      heading.innerHTML = calendarHeading;
      dialogContent.insertBefore(heading, dialogContent.firstChild);
    }
    // truncate table headings to a single character
    const tableHeadings = this.hostElement.querySelectorAll('.duet-date__table-header span[aria-hidden="true"]');
    if (tableHeadings) {
      Array.from(tableHeadings).forEach((item) => (item.innerHTML = item.innerHTML[0]));
    }
    const today = this.hostElement.querySelector('.duet-date__day.is-today span.duet-date__vhidden');
    if (today) {
      today.innerHTML = `${today.innerHTML}, ${((_b = this.localization) === null || _b === void 0 ? void 0 : _b.today) || 'today'}`;
    }
    this.adjustButtonsLabelsForA11y();
  }
  componentDidRender() {
    if (this.status !== '') {
      statusNote({
        tag: 'deprecated',
        message: 'Property "status" is deprecated. Please use the "invalid" property!',
        type: 'warn',
        source: this.hostElement,
      });
    }
    if (this.size) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "size" is deprecated. Please use css overwrite!',
        type: 'warn',
        source: this.hostElement,
      });
    }
  }
  disconnectedCallback() {
    if (this.duetInput) {
      const input = this.duetInput.querySelector('.duet-date__input');
      if (input) {
        input.removeEventListener('keyup', this.handleKeyPress);
      }
    }
    if (this.mo) {
      this.mo.disconnect();
    }
  }
  handleKeyPress(e) {
    this.hasValue = e.target.value != null && e.target.value !== '';
  }
  render() {
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { class: classnames('scale-date-picker', this.status && `scale-date-picker--status-${this.status}`, this.invalid && `scale-date-picker--status-error`, this.hasFocus && 'scale-date-picker--focus', this.disabled && 'scale-date-picker--disabled', this.hasValue && 'animated', this.helperText && 'has-helper-text') }, hAsync("label", { class: "date-picker__label", htmlFor: this.identifier }, this.label), hAsync("duet-date-picker", { onDuetChange: (e) => {
        emitEvent$1(this, 'scaleChange', e.detail);
        this.handleKeyPress(e);
      }, onDuetFocus: (e) => {
        emitEvent$1(this, 'scaleFocus', e.detail);
        this.hasFocus = true;
      }, onDuetBlur: (e) => {
        emitEvent$1(this, 'scaleBlur', e.detail);
        this.hasFocus = false;
      }, name: this.name, identifier: this.identifier, role: this.innerRole, direction: this.direction, required: this.required, min: this.min, max: this.max, firstDayOfWeek: this.firstDayOfWeek, localization: this.localization, dateAdapter: this.dateAdapter, disabled: this.disabled, value: this.value, ref: (element) => (this.duetInput = element) }), this.helperText && (hAsync("scale-helper-text", { helperText: this.helperText, variant: this.invalid ? 'danger' : this.variant })))));
  }
  get hostElement() { return getElement$1(this); }
  static get watchers() { return {
    "value": ["onValueChange"],
    "placeholder": ["onPlaceholderChange"]
  }; }
  static get style() { return datePickerCss; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-date-picker",
    "$members$": {
      "name": [1],
      "popupTitle": [1, "popup-title"],
      "identifier": [1025],
      "disabled": [516],
      "innerRole": [1, "inner-role"],
      "direction": [1],
      "required": [4],
      "value": [1537],
      "min": [1],
      "max": [1],
      "firstDayOfWeek": [8, "first-day-of-week"],
      "localization": [16],
      "dateAdapter": [8, "date-adapter"],
      "helperText": [1, "helper-text"],
      "status": [1],
      "invalid": [4],
      "label": [1],
      "styles": [1],
      "placeholder": [1],
      "size": [1],
      "variant": [1],
      "hasFocus": [32],
      "hasValue": [32],
      "setFocus": [64],
      "show": [64],
      "hide": [64]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["disabled", "disabled"], ["value", "value"]]
  }; }
}

const iconCss$2a = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceAddDevice {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M8 6a3 3 0 012.995 2.824L11 9v3.22a7.97 7.97 0 00-.335 10.155 3 3 0 01-2.468 1.618L8 24H3a3 3 0 01-2.995-2.824L0 21V9a3 3 0 012.824-2.995L3 6h5zm9 5a6.5 6.5 0 110 13 6.5 6.5 0 010-13zm0 1.5a5 5 0 100 10 5 5 0 000-10zM5.5 19.75a1 1 0 100 2 1 1 0 000-2zm11.5-5.5a.75.75 0 01.743.648l.007.102v1.75h1.75a.75.75 0 01.102 1.493l-.102.007h-1.75V20a.75.75 0 01-1.493.102L16.25 20v-1.75H14.5a.75.75 0 01-.102-1.493l.102-.007h1.75V15a.75.75 0 01.75-.75zM17 1a3 3 0 012.995 2.824L20 4v6.085a8 8 0 00-7.252.638l-.248.162V9a4.5 4.5 0 00-4.288-4.495L8 4.5H3.47V4a3 3 0 012.824-2.995L6.47 1H17zM7 7.5H4V9h3V7.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M8 6a3.01 3.01 0 012.995 2.824L11 9v3.25a7.284 7.284 0 00-1.378 2.187l-.122.313V9c0-.8-.576-1.423-1.352-1.493L8 7.5H7V9H4V7.5H3c-.8 0-1.423.576-1.493 1.352L1.5 9v12c0 .8.576 1.423 1.352 1.493L3 22.5h5c.8 0 1.423-.576 1.493-1.352L9.5 21v-.75c.25.75.65 1.45 1.15 2.1a2.949 2.949 0 01-2.449 1.643L8 24H3a3.01 3.01 0 01-2.995-2.824L0 21V9a3.01 3.01 0 012.824-2.995L3 6h5zm9 5c3.6 0 6.5 2.9 6.5 6.5S20.6 24 17 24s-6.5-2.9-6.5-6.5S13.4 11 17 11zM5.5 19.75a1 1 0 110 2 1 1 0 010-2zm11.5-5.5a.772.772 0 00-.743.651L16.25 15v1.75H14.5c-.4 0-.75.35-.75.75 0 .367.294.691.651.743l.099.007h1.75V20c0 .4.35.75.75.75a.772.772 0 00.743-.651L17.75 20v-1.75h1.75c.4 0 .75-.35.75-.75a.772.772 0 00-.651-.743l-.099-.007h-1.75V15c0-.4-.35-.75-.75-.75zM17 1a3.01 3.01 0 012.995 2.824L20 4v6.1a8.728 8.728 0 00-1.125-.366L18.5 9.65V4c0-.8-.576-1.423-1.352-1.493L17 2.5H6.5c-.8 0-1.423.576-1.493 1.352L5 4v.5H3.5V4a3.01 3.01 0 012.824-2.995L6.5 1H17z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2a; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-add-device",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$29 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceCamera {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M21.78 7L20 8.785V5H2v1.5H.5v4H2V17a3 3 0 003 3h12a3 3 0 003-3v-1.785L21.78 17h1.72V7h-1.72zM9 15.775v-6.55l5 3.275-5 3.275z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M20 5v3.8L21.8 7h1.7v10h-1.7L20 15.2V17a3.01 3.01 0 01-2.824 2.995L17 20H5a3.01 3.01 0 01-2.995-2.824L2 17v-6.5H.5v-4H2V5h18zm-1.5 1.5h-15V17c0 .8.576 1.423 1.352 1.493L5 18.5h12c.8 0 1.423-.576 1.493-1.352L18.5 17V6.5zM9 9.25l5 3.25-5 3.25v-6.5zm13-.35l-2 2v2.2l2 2V8.9z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$29; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-camera",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$28 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceChangeCamera {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M13.777 1.154l.103.011A11 11 0 0123 12a10.965 10.965 0 01-3.844 8.343l-.256.212L20.5 23h-6.685l2.685-6.13 1.57 2.44a9.5 9.5 0 00-4.46-16.645.762.762 0 01.167-1.511zM10.185 1L7.5 7.13 5.93 4.715a9.5 9.5 0 004.166 16.589l.294.056-.015-.025a.762.762 0 01-.27 1.5A11 11 0 014.863 3.651l.242-.201L3.5 1h6.685zM14.5 9v1.765L15.825 9.5h.675V14h-.675L14.5 12.735V13a1.5 1.5 0 01-1.356 1.493L13 14.5H9.5a1.5 1.5 0 01-1.493-1.356L8 13V9h6.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M13.794 1.141l.106.009C19.05 2.1 23 6.6 23 12c0 3.335-1.495 6.343-3.853 8.392l-.247.208 1.6 2.4h-6.7l2.7-6.1 1.55 2.4c2.1-1.75 3.45-4.35 3.45-7.3 0-4.65-3.4-8.55-7.9-9.4-.42-.047-.71-.485-.583-.91l.033-.09c.09-.315.423-.468.744-.459zM10.2 1L7.55 7.1l-1.6-2.4C3.85 6.45 2.5 9.05 2.5 12c0 4.65 3.4 8.55 7.9 9.35.45.05.75.55.55 1.05-.1.35-.5.5-.85.45C4.95 21.9 1 17.4 1 12a10.94 10.94 0 013.853-8.346L5.1 3.45 3.5 1h6.7zm4.3 8v1.75l1.35-1.25h.65V14h-.65l-1.35-1.25V13c0 .8-.576 1.423-1.352 1.493L13 14.5H9.5a1.47 1.47 0 01-1.493-1.352L8 13V9h6.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$28; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-change-camera",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$27 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceComputer {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M24 18c0 1.05-.82 1.918-1.851 1.994L22 20H2C.95 20 .082 19.18.006 18.149L0 18h24zM18.5 4.5a3.01 3.01 0 012.995 2.824l.005.176v9h-19v-9a3.01 3.01 0 012.824-2.995L5.5 4.5h13zm-11 4.25l3.65 3.55-1.65-.15 1 2.4-.95.4-1-2.4-1.05 1.3v-5.1z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M24 18c0 1.05-.82 1.918-1.851 1.994L22 20H2C.95 20 .082 19.18.006 18.149L0 18h24zM18.5 4.5a3.01 3.01 0 012.995 2.824l.005.176v9H20v-9c0-.8-.576-1.423-1.352-1.493L18.5 6h-13c-.8 0-1.423.576-1.493 1.352L4 7.5v9H2.5v-9a3.01 3.01 0 012.824-2.995L5.5 4.5h13zm-11 4.25l3.65 3.55-1.65-.15 1 2.4-.95.4-1-2.4-1.05 1.3v-5.1z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$27; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-computer",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$26 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceDeviceController {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M18.003 7v10.5a6 6 0 01-11.995.225l-.005-.225V7h12zm-6 3.5a3 3 0 100 6 3 3 0 000-6zm0 1.5a1.501 1.501 0 010 3c-.826 0-1.5-.673-1.5-1.5s.674-1.5 1.5-1.5zm0-8.442c1.2 0 2.291.469 3.105 1.23l.17.168-1.106 1.009a3.043 3.043 0 00-4.194-.136l-.143.136-1.107-1.01a4.534 4.534 0 013.276-1.397zm0-3.002a7.52 7.52 0 015.29 2.175l.2.205-1.106 1.009a6.026 6.026 0 00-8.578-.19l-.189.19-1.106-1.009a7.528 7.528 0 015.49-2.38z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M8.725 4.955l1.107 1.01a3.043 3.043 0 014.336 0l1.107-1.009a4.537 4.537 0 00-6.55 0zM12 2.056c1.725 0 3.279.728 4.383 1.889l1.107-1.009A7.528 7.528 0 0012 .556a7.528 7.528 0 00-5.49 2.38l1.107 1.009A6.033 6.033 0 0112 2.056zM6 7v10.5a6 6 0 0012 0V7H6zm10.5 10.5c0 2.482-2.018 4.5-4.5 4.5a4.505 4.505 0 01-4.5-4.5v-9h9v9zm-4.5-1a3 3 0 100-6 3 3 0 000 6zm0-4.5c.827 0 1.5.673 1.5 1.5S12.827 15 12 15s-1.5-.673-1.5-1.5.673-1.5 1.5-1.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$26; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-device-controller",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$25 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceDeviceEthernet {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M18 3v6.5h-3l-5-1.511V7H6.75a3.254 3.254 0 00-3.25 3.25c0 1.73 1.36 3.15 3.066 3.245l.184.005H14c2.206 0 4 1.794 4 4a4.005 4.005 0 01-3.8 3.995l-.2.005H3.75a.75.75 0 01-.102-1.493L3.75 20H14c1.379 0 2.5-1.122 2.5-2.5a2.503 2.503 0 00-2.336-2.495L14 15H6.75A4.756 4.756 0 012 10.25a4.756 4.756 0 014.533-4.745L6.75 5.5H10v-.989L15 3h3zm4 1v4.5h-2.5V4H22z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M18 3v6.5h-3l-5-1.511V7H6.75a3.254 3.254 0 00-3.25 3.25c0 1.73 1.36 3.15 3.066 3.245l.184.005H14c2.206 0 4 1.794 4 4a4.005 4.005 0 01-3.8 3.995l-.2.005H3.75a.75.75 0 01-.102-1.493L3.75 20H14c1.379 0 2.5-1.122 2.5-2.5a2.503 2.503 0 00-2.336-2.495L14 15H6.75A4.756 4.756 0 012 10.25a4.756 4.756 0 014.533-4.745L6.75 5.5H10v-.989L15 3h3zm4 1v4.5h-2.5V4H22z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$25; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-device-ethernet",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$24 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceDeviceMesh {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12.004 1.5c5.798 0 10.5 4.701 10.5 10.5a10.46 10.46 0 01-2.982 7.32l-.224.223 2.155 1.099a.749.749 0 01-.57 1.382l-.112-.047-2.733-1.393a10.44 10.44 0 01-6.034 1.916c-2.117 0-4.082-.632-5.73-1.71l-.305-.206-2.733 1.393a.75.75 0 01-.77-1.284l.089-.051 2.154-1.1A10.462 10.462 0 011.504 12c0-5.799 4.7-10.5 10.5-10.5zm0 12.5a1 1 0 100 2 1 1 0 000-2zm0-3a3.995 3.995 0 00-3.353 1.827l-.114.186 1.168 1.007a2.502 2.502 0 012.299-1.52c.97 0 1.811.555 2.225 1.365l.073.155 1.168-1.007A3.999 3.999 0 0012.004 11zm0-3a6.991 6.991 0 00-5.607 2.818l-.156.217 1.146.987A5.496 5.496 0 0112.003 9.5c1.85 0 3.488.921 4.485 2.327l.131.195 1.146-.987A6.995 6.995 0 0012.004 8z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 14a1 1 0 100 2 1 1 0 000-2zm9.449 6.642l-2.155-1.099A10.462 10.462 0 0022.5 12c0-5.799-4.701-10.5-10.5-10.5S1.5 6.201 1.5 12c0 2.963 1.232 5.634 3.205 7.543l-2.154 1.099a.75.75 0 10.682 1.335l2.732-1.393A10.437 10.437 0 0012 22.5a10.44 10.44 0 006.035-1.916l2.732 1.393a.75.75 0 10.682-1.335zM12 21c-4.963 0-9-4.038-9-9 0-4.963 4.037-9 9-9 4.962 0 9 4.037 9 9 0 4.962-4.038 9-9 9zm0-10a3.999 3.999 0 00-3.466 2.013L9.7 14.02A2.502 2.502 0 0112 12.5c1.03 0 1.916.627 2.299 1.52l1.168-1.007A3.999 3.999 0 0012 11zm0-3a6.996 6.996 0 00-5.763 3.035l1.146.987A5.496 5.496 0 0112 9.5a5.496 5.496 0 014.617 2.522l1.145-.987A6.995 6.995 0 0012 8z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$24; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-device-mesh",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$23 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceDevicePhone {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M16 .5a3 3 0 012.995 2.824L19 3.5v17a3 3 0 01-2.824 2.995L16 23.5H8a3 3 0 01-2.995-2.824L5 20.5v-17A3 3 0 017.824.505L8 .5h8zm-4 17.75a1.5 1.5 0 100 3 1.5 1.5 0 000-3zm0 .5a1 1 0 110 2 1 1 0 010-2zm2-16.5h-4v1h4v-1z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M16 .5a3.01 3.01 0 012.995 2.824L19 3.5v17a3.01 3.01 0 01-2.824 2.995L16 23.5H8a3.01 3.01 0 01-2.995-2.824L5 20.5v-17A3.01 3.01 0 017.824.505L8 .5h8zM10 2H8c-.8 0-1.423.576-1.493 1.352L6.5 3.5v17c0 .8.576 1.423 1.352 1.493L8 22h8c.8 0 1.423-.576 1.493-1.352l.007-.148v-17c0-.8-.576-1.423-1.352-1.493L16 2h-2v1.5h-4V2zm2 16.5a1.25 1.25 0 110 2.5 1.25 1.25 0 010-2.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$23; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-device-phone",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$22 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceDeviceRouter {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M19.5 7h-2.3L13 10.635l-1 .865-1-.845L6.8 7H4.5a3 3 0 00-3 3v10a3 3 0 003 3h15a3 3 0 003-3V10a3 3 0 00-3-3zM13 19h-2v-2h2v2zM12 3a5.5 5.5 0 014.615 2.5l1.145-1a7 7 0 00-11.525 0l1.15 1A5.5 5.5 0 0112 3zm2.3 4.5l1.165-1a4 4 0 00-6.93 0l1.165 1a2.5 2.5 0 014.6 0zm-3.3 1a1 1 0 102 0 1 1 0 00-2 0z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M6.8 7l1.75 1.5H4.5c-.8 0-1.423.576-1.493 1.352L3 10v10c0 .8.576 1.423 1.352 1.493l.148.007h15c.8 0 1.423-.576 1.493-1.352L21 20V10c0-.8-.576-1.423-1.352-1.493L19.5 8.5h-4.05L17.2 7h2.3a3.01 3.01 0 012.995 2.824L22.5 10v10a3.01 3.01 0 01-2.824 2.995L19.5 23h-15a3.01 3.01 0 01-2.995-2.824L1.5 20V10a3.01 3.01 0 012.824-2.995L4.5 7h2.3zM13 17v2h-2v-2h2zm-1-9.5a1 1 0 110 2 1 1 0 010-2zm0-3c1.374 0 2.613.718 3.335 1.814l.115.186-1.15 1C13.9 6.65 13.05 6 12 6c-.984 0-1.793.527-2.22 1.335L9.7 7.5l-1.15-1c.65-1.2 2-2 3.45-2zm0-3a6.985 6.985 0 015.596 2.787l.154.213-1.15 1C15.65 4 13.95 3 12 3a5.357 5.357 0 00-4.472 2.351L7.4 5.55l-1.15-1A6.904 6.904 0 0112 1.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$22; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-device-router",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$21 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceDeviceTv {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M1 3.5V16a3 3 0 003 3h5.44l-.11.21A1.5 1.5 0 018 20H5.5v1.5h13V20H16a1.5 1.5 0 01-1.325-.79L14.56 19H20a3 3 0 003-3V3.5H1zm8.5 11.35v-7.2l5.5 3.6-5.5 3.6z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M23 3.5V16a3.01 3.01 0 01-2.824 2.995L20 19h-5.45l.2.2c.227.455.661.744 1.151.793l.149.007h2.5v1.5h-13V20h2.5c.5 0 .959-.248 1.226-.669l.074-.131.1-.2H4a3.01 3.01 0 01-2.995-2.824L1 16V3.5h22zM21.5 5h-19v11c0 .8.576 1.423 1.352 1.493L4 17.5h16c.8 0 1.423-.576 1.493-1.352L21.5 16V5zm-12 2.65l5.5 3.6-5.5 3.6v-7.2z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$21; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-device-tv",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$20 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceDeviceWatch {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M17.19 20.875l-.08.3a2.5 2.5 0 01-2.234 1.82L14.7 23H9.3a2.5 2.5 0 01-2.357-1.657l-.053-.168-.08-.3h10.38zM15.97 3.5a4 4 0 013.995 3.8l.005.2v9a4 4 0 01-3.8 3.995l-.2.005H8.03a4 4 0 01-3.995-3.8l-.005-.2v-9a4 4 0 013.8-3.995l.2-.005h7.94zm5.53 7v3h-1.05v-3h1.05zM14.7.955a2.5 2.5 0 012.357 1.657l.053.168.08.3H6.81l.08-.3A2.5 2.5 0 019.124.96L9.3.956h5.4z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M21.5 10.5H20v-3c0-1.75-1.1-3.2-2.65-3.75l-.25-.9C16.8 1.75 15.8 1 14.7 1H9.3c-1.1 0-2.1.75-2.4 1.8l-.25.9C5.1 4.3 4 5.75 4 7.5v9c0 1.75 1.1 3.2 2.65 3.75l.25.9c.3 1.1 1.3 1.8 2.4 1.8h5.4c1.1 0 2.1-.75 2.4-1.8l.25-.9A4.004 4.004 0 0020 16.5v-3h1.5v-3zm-3 6c0 1.4-1.1 2.5-2.5 2.5H8c-1.4 0-2.5-1.1-2.5-2.5v-9C5.5 6.1 6.6 5 8 5h8c1.4 0 2.5 1.1 2.5 2.5v9z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$20; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-device-watch",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1$ = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceDongle {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("g", { "fill-rule": "evenodd" }, hAsync("path", { d: "M17.501 15.5h4.5v-7h-4.5v7zm-7.275 1.142l-1.12-.995a5.466 5.466 0 000-7.295l1.12-.994A6.964 6.964 0 0112.001 12a6.964 6.964 0 01-1.775 4.642zm-2.24-1.99l-1.125-.999A2.48 2.48 0 007.501 12c0-.636-.247-1.212-.64-1.653l1.125-.999A3.977 3.977 0 019.001 12a3.977 3.977 0 01-1.015 2.652zM5.001 13a1 1 0 110-2 1 1 0 010 2zm12.5-6V5h-14a3 3 0 00-3 3v8a3 3 0 003 3h14v-2h6V7h-6z" }), hAsync("path", { d: "M19.001 11h1.5V9.5h-1.5zm0 3.5h1.5V13h-1.5z" })))) : (hAsync("g", null, hAsync("path", { d: "M7.986 14.652a3.976 3.976 0 000-5.304l-1.125 1c.393.44.639 1.016.639 1.652a2.48 2.48 0 01-.639 1.653l1.125 1zm2.239 1.99a6.959 6.959 0 000-9.284l-1.119.994A5.475 5.475 0 0110.5 12c0 1.4-.53 2.675-1.394 3.647l1.119.995zM5 13a1 1 0 100-2 1 1 0 000 2zm14 1.5h1.5V13H19v1.5zm0-3.5h1.5V9.5H19V11zm-1.5 4.5H22v-7h-4.5v7zm-1.5 2H3.5c-.827 0-1.5-.674-1.5-1.5V8c0-.827.673-1.5 1.5-1.5H16v11zM17.5 7V5h-14a3 3 0 00-3 3v8a3 3 0 003 3h14v-2h6V7h-6z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1$; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-dongle",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1_ = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceFax {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M.501 9.507v10c0 1.65 1.35 3 3 3h3.5v-16h-3.5c-1.65 0-3 1.35-3 3zm9.507-3h9.512V3.022h-9.512v3.485zm1.993 6.993h6.5V10h-6.5v3.5zm5.75 3a.75.75 0 110-1.5.75.75 0 010 1.5zm0 2.5a.75.75 0 110-1.5.75.75 0 010 1.5zm-2.5-2.5a.75.75 0 110-1.5.75.75 0 010 1.5zm0 2.5a.75.75 0 110-1.5.75.75 0 010 1.5zm-2.5-2.5a.75.75 0 110-1.5.75.75 0 010 1.5zm0 2.5a.75.75 0 110-1.5.75.75 0 010 1.5zm8.184-12.457h.085V1.522H8.508v4.985h-.007v16h12c1.65 0 3-1.35 3-3v-10a3.008 3.008 0 00-2.566-2.964z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M15.251 17.5a.75.75 0 100 1.5.75.75 0 000-1.5zm-2.5-2.5a.75.75 0 100 1.5.75.75 0 000-1.5zm2.5 0a.75.75 0 100 1.5.75.75 0 000-1.5zm-2.5 2.5a.75.75 0 100 1.5.75.75 0 000-1.5zm5-2.5a.75.75 0 100 1.5.75.75 0 000-1.5zm-5.75-1.5h6.5V10h-6.5v3.5zm5.75 4a.75.75 0 100 1.5.75.75 0 000-1.5zm4.25 2.007c0 .85-.65 1.5-1.5 1.5h-12v-13h12c.85 0 1.5.65 1.5 1.5v10zm-15 1.5h-3.5c-.85 0-1.5-.65-1.5-1.5v-10c0-.85.65-1.5 1.5-1.5h3.5v13zm3.007-14.501h9.512V3.021h-9.512v3.485zm10.677.011h.335V1.521H8.508v4.986H3.501c-1.65 0-3 1.35-3 3v10c0 1.65 1.35 3 3 3h17c1.65 0 3-1.35 3-3v-10a3.005 3.005 0 00-2.816-2.99z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1_; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-fax",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1Z = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceFixedLineServices {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M20 11.5a3 3 0 012.995 2.824L23 14.5V24H1.5v-9.5a3 3 0 012.824-2.995L4.5 11.5V13a1.5 1.5 0 00-1.493 1.356L3 14.5v8h18.5v-8a1.5 1.5 0 00-1.356-1.493L20 13v-1.5zM15.5 0a3 3 0 012.995 2.824L18.5 3v15a3 3 0 01-2.824 2.995L15.5 21H9a3 3 0 01-2.995-2.824L6 18V3A3 3 0 018.824.005L9 0h6.5zm-3.25 15a.75.75 0 100 1.5.75.75 0 000-1.5zm2.5 0a.75.75 0 100 1.5.75.75 0 000-1.5zm-5 0a.75.75 0 100 1.5.75.75 0 000-1.5zm2.5-2.5a.75.75 0 100 1.5.75.75 0 000-1.5zm2.5 0a.75.75 0 100 1.5.75.75 0 000-1.5zm-5 0a.75.75 0 100 1.5.75.75 0 000-1.5zm2.5-2.5a.75.75 0 100 1.5.75.75 0 000-1.5zm2.5 0a.75.75 0 100 1.5.75.75 0 000-1.5zm-5 0a.75.75 0 100 1.5.75.75 0 000-1.5zm5.75-5H9v3.5h6.5V5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M20 11.5a3.01 3.01 0 012.995 2.824L23 14.5V24H1.5v-9.5a3.01 3.01 0 012.824-2.995L4.5 11.5V13c-.8 0-1.423.576-1.493 1.352L3 14.5v8h18.5v-8c0-.8-.576-1.423-1.352-1.493L20 13v-1.5zM15.5 0a3.01 3.01 0 012.995 2.824L18.5 3v15a3.01 3.01 0 01-2.824 2.995L15.5 21H9a3.01 3.01 0 01-2.995-2.824L6 18V3A3.01 3.01 0 018.824.005L9 0h6.5zm0 1.5H9c-.8 0-1.423.576-1.493 1.352L7.5 3v15c0 .8.576 1.423 1.352 1.493L9 19.5h6.5c.8 0 1.423-.576 1.493-1.352L17 18V3c0-.8-.576-1.423-1.352-1.493L15.5 1.5zM14.75 15a.75.75 0 110 1.5.75.75 0 010-1.5zm-5 0a.75.75 0 110 1.5.75.75 0 010-1.5zm2.5 0a.75.75 0 110 1.5.75.75 0 010-1.5zm2.5-2.5a.75.75 0 110 1.5.75.75 0 010-1.5zm-5 0a.75.75 0 110 1.5.75.75 0 010-1.5zm2.5 0a.75.75 0 110 1.5.75.75 0 010-1.5zM9.75 10a.75.75 0 110 1.5.75.75 0 010-1.5zm2.5 0a.75.75 0 110 1.5.75.75 0 010-1.5zm2.5 0a.75.75 0 110 1.5.75.75 0 010-1.5zm.75-5v3.5H9V5h6.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1Z; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-fixed-line-services",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1Y = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceGameController {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M19 15.5a1.25 1.25 0 10-2.5 0 1.25 1.25 0 002.5 0M16 13a1.25 1.25 0 10-2.5 0 1.25 1.25 0 002.5 0m-5.25 1.25a.75.75 0 00-.75-.75H8.5V12A.75.75 0 107 12v1.5H5.5a.75.75 0 100 1.5H7v1.5a.75.75 0 001.5 0V15H10a.75.75 0 00.75-.75m12.562 7.129a4.11 4.11 0 01-2.561 2.035 4.176 4.176 0 01-4.215-1.271L14.66 20H9.34l-1.874 2.143a4.175 4.175 0 01-4.216 1.271 4.113 4.113 0 01-2.56-2.035 4.12 4.12 0 01-.292-3.259L3.707 8h16.588l3.309 10.12a4.115 4.115 0 01-.292 3.259M12 2.056c1.724 0 3.279.728 4.383 1.889l1.107-1.009A7.527 7.527 0 0012 .556a7.527 7.527 0 00-5.49 2.38l1.107 1.009A6.034 6.034 0 0112 2.056m0 1.503c1.285 0 2.446.537 3.275 1.397l-1.107 1.009A3.037 3.037 0 0012 5.058a3.04 3.04 0 00-2.168.906L8.726 4.956A4.53 4.53 0 0112 3.559", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M17.75 14.25a1.25 1.25 0 10-.001 2.498 1.25 1.25 0 00.002-2.498m-3-2.5a1.25 1.25 0 10-.002 2.498 1.25 1.25 0 00.002-2.498M10 13.5H8.5V12A.75.75 0 107 12v1.5H5.5a.75.75 0 100 1.5H7v1.5a.75.75 0 101.5 0V15H10a.75.75 0 100-1.5m11.99 7.167a2.625 2.625 0 01-1.635 1.3 2.667 2.667 0 01-2.692-.811L15.34 18.5H8.66l-2.323 2.655a2.667 2.667 0 01-2.692.812 2.63 2.63 0 01-1.636-1.3 2.626 2.626 0 01-.185-2.08L4.795 9.5h14.412l2.97 9.087a2.618 2.618 0 01-.186 2.08m1.612-2.547L20.295 8H3.707L.397 18.12a4.119 4.119 0 00.293 3.259 4.112 4.112 0 002.562 2.035 4.171 4.171 0 004.214-1.271L9.34 20h5.32l1.875 2.143a4.173 4.173 0 004.215 1.271 4.113 4.113 0 002.56-2.035 4.11 4.11 0 00.292-3.259M12 2.056c1.725 0 3.279.729 4.383 1.889l1.107-1.009A7.533 7.533 0 0012 .556a7.531 7.531 0 00-5.49 2.38l1.107 1.009A6.032 6.032 0 0112 2.056m-3.275 2.9l1.106 1.008a3.045 3.045 0 014.338.001l1.106-1.009a4.537 4.537 0 00-6.55 0", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1Y; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-game-controller",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1X = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceMediaReceiver {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M23.5 13v5a3 3 0 01-2.824 2.995L20.5 21h-17a3 3 0 01-2.995-2.824L.5 18v-5h23zM19 16h-2v2h2v-2zm.175-11.53l1.06 1.06A11.42 11.42 0 0112.1 8.9a11.41 11.41 0 01-7.878-3.124L3.97 5.53l1.06-1.06A9.93 9.93 0 0012.1 7.4a9.935 9.935 0 006.838-2.699l.237-.231zm-2.83-2.83l1.06 1.06A7.44 7.44 0 0112.1 4.9a7.435 7.435 0 01-5.086-1.993L6.8 2.7l1.06-1.06A5.95 5.95 0 0012.1 3.4a5.96 5.96 0 004.043-1.566l.202-.194z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M23.5 13v5a3.01 3.01 0 01-2.824 2.995L20.5 21h-17a3.01 3.01 0 01-2.995-2.824L.5 18v-5h23zM22 14.5H2V18c0 .8.576 1.423 1.352 1.493l.148.007h17c.8 0 1.423-.576 1.493-1.352L22 18v-3.5zM19 16v2h-2v-2h2zm.2-11.5l1.05 1.05C18.05 7.7 15.3 8.9 12.2 8.9c-2.98 0-5.777-1.11-7.899-3.106L4.05 5.55 5.1 4.5c1.85 1.9 4.4 2.95 7.05 2.95 2.54 0 4.941-.964 6.81-2.717l.24-.233zm-2.85-2.85L17.4 2.7c-1.4 1.4-3.3 2.2-5.3 2.2a7.49 7.49 0 01-5.086-1.995L6.8 2.7l1.05-1.05A5.935 5.935 0 0012.1 3.4a5.933 5.933 0 004.043-1.553l.207-.197z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1X; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-media-receiver",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1W = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceMobileData {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M11.5.5a3 3 0 012.995 2.824l.005.176v3.001l-4.906.006-.17.024A1.75 1.75 0 009.75 10h4.194l-8.02 5.25 8.556 5.6a3 3 0 01-2.804 2.645l-.176.005h-8a3 3 0 01-2.995-2.824L.5 20.5v-17A3 3 0 013.324.505L3.5.5h8zm-4 17.75a1.5 1.5 0 100 3 1.5 1.5 0 000-3zm0 .5a1 1 0 110 2 1 1 0 010-2zm7-7.918V14.5h6.25a.75.75 0 01.102 1.493L20.75 16H14.5v3.668L7.75 15.25l6.75-4.418zm1.5-7l6.75 4.418L16 12.668V9H9.75a.75.75 0 01-.102-1.493L9.75 7.5H16V3.832zM9.5 2.25v1h-4v-1h4z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M11.5.5a3 3 0 012.995 2.824l.005.176V6H13V3.5c0-.778-.596-1.42-1.356-1.493L11.5 2h-2v1.5h-4V2h-2c-.778 0-1.42.596-1.493 1.356L2 3.5v17c0 .778.596 1.42 1.356 1.493L3.5 22h8c.778 0 1.42-.596 1.493-1.356L13 20.48l1.37.896a3.002 3.002 0 01-2.678 2.119l-.192.006h-8a3 3 0 01-2.995-2.824L.5 20.5v-17A3 3 0 013.324.505L3.5.5h8zm-4 18a1.25 1.25 0 110 2.5 1.25 1.25 0 010-2.5zm7-7.668V14.5h6.25a.75.75 0 01.102 1.493L20.75 16H14.5v3.668L7.75 15.25l6.75-4.418zm1.5-7l6.75 4.418L16 12.668V9H9.75a.75.75 0 01-.102-1.493L9.75 7.5H16V3.832z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1W; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-mobile-data",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1V = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceMobileDevicesCombination {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M10 6a2.5 2.5 0 012.495 2.336l.005.164v13a2.5 2.5 0 01-2.336 2.495L10 24H4a2.5 2.5 0 01-2.492-2.302L1.5 21.5v-13a2.5 2.5 0 012.336-2.495L4 6h6zM7 19.75a1 1 0 100 2 1 1 0 000-2zM19.5 0a3 3 0 012.995 2.824L22.5 3v14.5a3 3 0 01-2.824 2.995l-.176.005H14V19h5.5a1.5 1.5 0 001.493-1.356L21 17.5V3a1.5 1.5 0 00-1.356-1.493L19.5 1.5H10a1.5 1.5 0 00-1.493 1.356L8.5 3v1.5H7V3A3 3 0 019.824.005L10 0h9.5zm-4.75 16a1 1 0 110 2 1 1 0 010-2zM8.5 7.5h-3V9h3V7.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M10 6a2.473 2.473 0 012.495 2.333l.005.167v13a2.473 2.473 0 01-2.333 2.495L10 24H4a2.473 2.473 0 01-2.495-2.333L1.5 21.5v-13a2.473 2.473 0 012.333-2.495L4 6h6zM5.5 7.5H4c-.51 0-.935.388-.993.884L3 8.5v13c0 .51.388.935.884.993L4 22.5h6c.51 0 .935-.388.993-.884L11 21.5v-13c0-.51-.388-.935-.884-.993L10 7.5H8.5V9h-3V7.5zM7 19.75a1 1 0 110 2 1 1 0 010-2zM19.5 0a3.01 3.01 0 012.995 2.824L22.5 3v14.5a3.01 3.01 0 01-2.824 2.995l-.176.005H14V19h5.5c.8 0 1.423-.576 1.493-1.352L21 17.5V3c0-.8-.576-1.423-1.352-1.493L19.5 1.5H10c-.8 0-1.423.576-1.493 1.352L8.5 3v1.5H7V3A3.01 3.01 0 019.824.005L10 0h9.5zm-4.75 16a1 1 0 110 2 1 1 0 010-2z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1V; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-mobile-devices-combination",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1U = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceMobileEquipment {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M18.83 6.5c.728 0 1.368.484 1.565 1.185l.29 1.03a2.915 2.915 0 011.815 2.7V13.5h1V16h-1v2.585a2.915 2.915 0 01-1.815 2.7l-.29 1.03A1.625 1.625 0 0118.83 23.5h-4.16a1.625 1.625 0 01-1.565-1.185l-.29-1.03a2.915 2.915 0 01-1.815-2.7v-7.17c0-1.185.717-2.253 1.815-2.7l.29-1.03A1.625 1.625 0 0114.67 6.5zM10.9.5A3.105 3.105 0 0114 3.58v1.5a3.13 3.13 0 00-2.34 2.2l-.115.415a4.41 4.41 0 00-2.045 3.72v7.17A4.36 4.36 0 0010.225 21H4.6a3.105 3.105 0 01-3.1-3.1V3.6A3.105 3.105 0 014.6.5zm8.685 9.5h-5.67c-.781 0-1.415.634-1.415 1.415v7.17c0 .781.634 1.415 1.415 1.415h5.67c.781 0 1.415-.634 1.415-1.415v-7.17c0-.781-.634-1.415-1.415-1.415zM7.75 16a1.25 1.25 0 100 2.5 1.25 1.25 0 000-2.5zm0 .5a.75.75 0 110 1.5.75.75 0 010-1.5zM9.5 2.25H6v1h3.5v-1z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M18.83 6.5c.681 0 1.284.422 1.52 1.048l.045.137.29 1.03a2.918 2.918 0 011.808 2.498l.007.202V13.5h1V16h-1v2.585a2.92 2.92 0 01-1.636 2.622l-.174.078-.29 1.03a1.633 1.633 0 01-1.421 1.179l-.144.006H14.67a1.624 1.624 0 01-1.52-1.048l-.045-.137-.29-1.03a2.918 2.918 0 01-1.808-2.498L11 18.585v-7.17a2.92 2.92 0 011.636-2.622l.174-.078.29-1.03a1.633 1.633 0 011.421-1.179l.144-.006h4.165zM10.9.5a3.103 3.103 0 013.095 2.924L14 3.6v1.485c-.499.11-.955.337-1.34.66l-.16.145V3.6c0-.831-.642-1.52-1.455-1.593L10.9 2H9.5v1.5H6V2H4.6c-.831 0-1.52.642-1.593 1.455L3 3.6v14.3c0 .831.642 1.52 1.455 1.593l.145.007h5c.096.454.261.88.484 1.27l.141.23H4.6a3.103 3.103 0 01-3.095-2.924L1.5 17.9V3.6A3.103 3.103 0 014.424.505L4.6.5h6.3zm8.685 9.5h-5.67c-.734 0-1.34.562-1.409 1.279l-.006.136v7.17c0 .734.562 1.34 1.279 1.409l.136.006h5.67c.734 0 1.34-.562 1.409-1.279l.006-.136v-7.17c0-.734-.562-1.34-1.279-1.409L19.585 10zM7.75 16a1.25 1.25 0 110 2.5 1.25 1.25 0 010-2.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1U; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-mobile-equipment",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1T = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceMobilePhoneInsurance {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M16 .5a3 3 0 012.995 2.824L19 3.5v1.955L9.03 11l4.05 2.19-3.785 2.31.81 1.275 6-3.675-3.94-2.1L19 7.17V20.5a3 3 0 01-2.824 2.995L16 23.5H8a3 3 0 01-2.995-2.824L5 20.5v-17A3 3 0 017.824.505L8 .5h8zm-4 17.75a1.5 1.5 0 100 3 1.5 1.5 0 000-3zm0 .5a1 1 0 110 2 1 1 0 010-2zm2-16.5h-4v1h4v-1z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M16 .5a3.01 3.01 0 012.995 2.824L19 3.5v17a3.01 3.01 0 01-2.824 2.995L16 23.5H8a3.01 3.01 0 01-2.995-2.824L5 20.5v-17A3.01 3.01 0 017.824.505L8 .5h8zM10 2H8c-.8 0-1.423.576-1.493 1.352L6.5 3.5v17c0 .8.576 1.423 1.352 1.493L8 22h8c.8 0 1.423-.576 1.493-1.352l.007-.148V7.9L12.2 11l3.95 2.1-6.05 3.7-.8-1.3 3.8-2.35L9.05 11l8.45-4.8V3.5c0-.8-.576-1.423-1.352-1.493L16 2h-2v1.5h-4V2zm2 16.5a1.25 1.25 0 110 2.5 1.25 1.25 0 010-2.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1T; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-mobile-phone-insurance",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1S = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceMobileServices {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M11.5.5a3 3 0 012.995 2.824l.005.176v1l-.165.855-.18 1-.845-.585-.685-.5-2.26 2.26-.59.595.475.685.57.855L9 10v4l.83.2 1 .185-1.055 1.53 2.85 2.85.685-.5.845-.585.18 1 .165.82v1a3 3 0 01-2.824 2.995l-.176.005h-8a3 3 0 01-2.995-2.824L.5 20.5v-17A3 3 0 013.324.505L3.5.5h8zm-4 17.75a1.5 1.5 0 100 3 1.5 1.5 0 000-3zm0 .5a1 1 0 110 2 1 1 0 010-2zM17.685 5.5L18 7.135a.595.595 0 00.816.41L18.9 7.5l1.375-.93 1.67 1.67L21 9.605a.59.59 0 00.279.867l.091.028 1.635.32v2.38l-1.635.3a.59.59 0 00-.415.81l.045.085.935 1.38-1.67 1.67L18.9 16.5a.595.595 0 00-.871.279L18 16.87l-.315 1.63H15.32l-.295-1.615a.595.595 0 00-.833-.434l-.087.049-1.38.93-1.67-1.67.945-1.365a.59.59 0 00-.268-.908l-.097-.027-1.63-.3V10.8l1.63-.3a.59.59 0 00.41-.811L12 9.605l-.93-1.365 1.67-1.67 1.365.94a.59.59 0 00.894-.284l.026-.096.295-1.63h2.365zM16.5 10a2 2 0 100 4 2 2 0 000-4zm-7-7.75h-4v1h4v-1z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M11.5.5a3.01 3.01 0 012.995 2.824l.005.176v.75c-.4.12-.8.24-1.2.411L13 4.8V3.5c0-.8-.576-1.423-1.352-1.493L11.5 2h-2v1.5h-4V2h-2c-.8 0-1.423.576-1.493 1.352L2 3.5v17c0 .8.576 1.423 1.352 1.493L3.5 22h8c.8 0 1.423-.576 1.493-1.352L13 20.5v-1.3c.4.2.8.336 1.2.46l.3.09v.75a3.01 3.01 0 01-2.824 2.995l-.176.005h-8a3.01 3.01 0 01-2.995-2.824L.5 20.5v-17A3.01 3.01 0 013.324.505L3.5.5h8zm-4 18a1.25 1.25 0 110 2.5 1.25 1.25 0 010-2.5zm7.85-13h2.35l.3 1.6c.046.418.48.62.823.447L18.9 7.5l1.35-.9 1.65 1.65-.95 1.35a.617.617 0 00.311.87l.089.03 1.65.35v2.35l-1.65.3c-.371.046-.57.48-.397.823L21 14.4l.85 1.3-1.65 1.65-1.35-.95a.617.617 0 00-.87.311l-.03.089-.3 1.65H15.3L15 16.8a.566.566 0 00-.823-.447l-.077.047-1.35.95-1.65-1.65.95-1.35a.617.617 0 00-.311-.87l-.089-.03-1.65-.3V10.8l1.65-.3a.566.566 0 00.447-.823L12.05 9.6l-.95-1.35 1.65-1.65 1.35.95a.617.617 0 00.87-.311L15 7.15l.35-1.65zM16.5 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1S; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-mobile-services",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1R = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceNoCamera {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M4.396 2.255a.75.75 0 01.66.145l.074.07 18 18a.745.745 0 010 1.06.75.75 0 01-.976.073l-.084-.073-18-18a.75.75 0 01.326-1.275zM3.42 5l14.76 14.76a3 3 0 01-.937.23L17 20H5a3 3 0 01-2.995-2.824L2 17v-6.5H.5v-4H2V5h1.42zM20 5v3.785L21.78 7h1.72v10h-1.72L20 15.215v.005L9.78 5H20z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M4.1 2.45a.722.722 0 01.965-.074l.085.074 18.05 18c.3.3.3.75 0 1.05-.15.15-.35.2-.55.2a.798.798 0 01-.471-.133L22.1 21.5l-18-18c-.3-.3-.3-.75 0-1.05zM3.4 5l1.5 1.5H3.5V17c0 .8.576 1.423 1.352 1.493L5 18.5h11.9l1.3 1.25c-.32.12-.64.208-.96.238L17 20H5a3.01 3.01 0 01-2.995-2.824L2 17v-6.5H.5v-4H2V5h1.4zM20 5v3.8L21.8 7h1.7v10h-1.7l-3.3-3.3V6.5h-7.2L9.8 5H20zm2 3.9l-2 2v2.2l2 2V8.9z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1R; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-no-camera",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1Q = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DevicePhoneWithMobilePlan {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12.001 21a1.25 1.25 0 110-2.5 1.25 1.25 0 010 2.5zm3.114-13.5v2.556h-.447v-.075c0-1.203-.671-1.955-1.94-1.955h-.074v5.414c0 .751.298 1.052 1.044 1.052h.224v.527h-3.879v-.527h.224c.746 0 1.044-.3 1.044-1.052V8.026h-.074c-1.268 0-1.94.752-1.94 1.955v.075H8.85V7.5h6.265zm0 3.342v1.67h-1.67v-1.67h1.67zm-4.594 0v1.67H8.85v-1.67h1.67zM14 2v1.5h-4V2h4zm2-1.5H8a3 3 0 00-3 3v17a3 3 0 003 3h8a3 3 0 003-3v-17a3 3 0 00-3-3z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("g", { "fill-rule": "evenodd" }, hAsync("path", { d: "M12.001 18.5a1.25 1.25 0 100 2.5 1.25 1.25 0 000-2.5zm5.5 2c0 .826-.673 1.5-1.5 1.5h-8c-.827 0-1.5-.674-1.5-1.5v-17c0-.826.673-1.5 1.5-1.5h2v1.5h4V2h2c.827 0 1.5.674 1.5 1.5v17zm-1.5-20h-8a3 3 0 00-3 3v17a3 3 0 003 3h8a3 3 0 003-3v-17a3 3 0 00-3-3z" }), hAsync("path", { d: "M15.115 7.5v2.556h-.447v-.075c0-1.203-.671-1.955-1.94-1.955h-.074v5.414c0 .751.298 1.052 1.044 1.052h.224v.527h-3.879v-.527h.224c.746 0 1.044-.3 1.044-1.052V8.026h-.074c-1.268 0-1.94.752-1.94 1.955v.075H8.85V7.5h6.265zm0 3.342v1.67h-1.67v-1.67h1.67zm-4.594 0v1.67H8.85v-1.67h1.67z" }))))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1Q; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-phone-with-mobile-plan",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1P = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DevicePhoneWithoutMobilePlan {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M14.69 14.689a.75.75 0 01-1.06 0L12 13.06l-1.628 1.629a.751.751 0 01-1.061-1.061L10.94 12l-1.63-1.629a.749.749 0 111.06-1.06L12 10.939l1.629-1.628a.75.75 0 011.06 1.06L13.06 12l1.63 1.628a.75.75 0 010 1.061zM12 21a1.25 1.25 0 11.001-2.5 1.25 1.25 0 010 2.5zM10 3.5h4V2h-4v1.5zm6-3H8a3 3 0 00-3 3v17a3 3 0 003 3h8a3 3 0 003-3v-17a3 3 0 00-3-3z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M14.69 9.311a.75.75 0 00-1.061 0l-1.628 1.628-1.629-1.628a.75.75 0 10-1.061 1.061L10.94 12l-1.629 1.628a.75.75 0 101.061 1.061l1.629-1.629 1.628 1.629a.751.751 0 001.062-1.061L13.061 12l1.629-1.628a.75.75 0 000-1.061zM12.001 18.5a1.25 1.25 0 10-.002 2.498 1.25 1.25 0 00.002-2.498zm5.5 2c0 .827-.674 1.5-1.5 1.5h-8c-.827 0-1.5-.673-1.5-1.5v-17c0-.827.673-1.5 1.5-1.5h2v1.5h4V2h2c.826 0 1.5.673 1.5 1.5v17zm-1.5-20h-8a3 3 0 00-3 3v17a3 3 0 003 3h8a3 3 0 003-3v-17a3 3 0 00-3-3z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1P; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-phone-without-mobile-plan",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1O = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DevicePhotoCamera {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M20 6.25h-2.25l-1.5-2.5h-8.5l-1.5 2.5H4A2.245 2.245 0 001.75 8.5V17A2.245 2.245 0 004 19.25h16A2.245 2.245 0 0022.25 17V8.5A2.245 2.245 0 0020 6.25zm-8 9.42a3.67 3.67 0 110-7.34 3.67 3.67 0 010 7.34zm7-5.17a1 1 0 110-2 1 1 0 010 2z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M16.7 3l1.5 2.5H20a3.01 3.01 0 012.995 2.824L23 8.5V17a3.01 3.01 0 01-2.824 2.995L20 20H4a3.01 3.01 0 01-2.995-2.824L1 17V8.5a3.01 3.01 0 012.824-2.995L4 5.5h1.85L7.35 3h9.35zm-.9 1.5H8.15L6.65 7H4c-.8 0-1.423.576-1.493 1.352L2.5 8.5V17c0 .8.576 1.423 1.352 1.493L4 18.5h16c.8 0 1.423-.576 1.493-1.352L21.5 17V8.5c0-.8-.576-1.423-1.352-1.493L20 7h-2.7l-1.5-2.5zM12 7c2.75 0 5 2.25 5 5s-2.25 5-5 5-5-2.25-5-5 2.25-5 5-5zm0 1.5c-1.95 0-3.5 1.55-3.5 3.5s1.55 3.5 3.5 3.5 3.5-1.55 3.5-3.5-1.55-3.5-3.5-3.5zm7 0a1 1 0 110 2 1 1 0 010-2z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1O; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-photo-camera",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1N = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceRemoteController {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M10.255 5.985l7.78 7.785-8.13 8.13a5.46 5.46 0 01-3.89 1.61 5.46 5.46 0 01-3.89-1.61 5.508 5.508 0 01-.174-7.598l.174-.182 8.13-8.135zm-2.68 9.025c.39-.39 1.025-.39 1.415 0 .39.39.39 1.025 0 1.415-.39.39-1.025.39-1.415 0a1.002 1.002 0 010-1.415zm2.44-2.44c.39-.39 1.025-.39 1.415 0 .39.39.39 1.025 0 1.415-.39.39-1.025.39-1.415 0a1.002 1.002 0 010-1.415zm3.045-8.145a6.54 6.54 0 016.53 6.3l.005.235h-1.5a5.043 5.043 0 00-4.817-5.03l-.218-.005v-1.5zm0-3.43c5.397 0 9.808 4.32 9.956 9.682l.004.278h-1.5c0-4.58-3.658-8.322-8.206-8.456l-.254-.004v-1.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M10.255 5.985l7.78 7.785-8.13 8.13a5.46 5.46 0 01-3.89 1.61 5.46 5.46 0 01-3.89-1.61 5.508 5.508 0 01-.174-7.598l.174-.182 8.13-8.135zM10.25 8.11l-7.07 7.07a4.002 4.002 0 000 5.655 3.974 3.974 0 002.83 1.17c.994 0 1.931-.358 2.664-1.013l.166-.157 7.065-7.07L10.25 8.11zm-2.675 6.9c.39-.39 1.025-.39 1.415 0 .39.39.39 1.025 0 1.415-.39.39-1.025.39-1.415 0a1.002 1.002 0 010-1.415zm2.44-2.44c.39-.39 1.025-.39 1.415 0 .39.39.39 1.025 0 1.415-.39.39-1.025.39-1.415 0a1.002 1.002 0 010-1.415zm3.045-8.145a6.54 6.54 0 016.53 6.3l.005.235h-1.5a5.043 5.043 0 00-4.817-5.03l-.218-.005v-1.5zm0-3.43c5.397 0 9.808 4.32 9.956 9.682l.004.278h-1.5c0-4.58-3.658-8.322-8.206-8.456l-.254-.004v-1.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1N; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-remote-controller",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1M = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceReplacementMobilephone {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M7.03 3l-.023.25L7 3.5v1H4.5a1.5 1.5 0 00-1.493 1.356L3 6v14.5a1.5 1.5 0 001.356 1.493L4.5 22h2.765c.166.475.413.917.727 1.309l.163.191H4.5a3 3 0 01-2.995-2.824L1.5 20.5V6a3 3 0 012.824-2.995L4.5 3h2.53zM19.5.5a3 3 0 012.995 2.824l.005.176v17a3 3 0 01-2.824 2.995l-.176.005h-8a3 3 0 01-2.995-2.824L8.5 20.5v-6.25h2.25v3.5l7.62-5-7.62-5v3.5H8.5V3.5A3 3 0 0111.324.505L11.5.5h8zm-4 17.75a1.5 1.5 0 100 3 1.5 1.5 0 000-3zm0 .5a1 1 0 110 2 1 1 0 010-2zm-4-9.6l5.5 3.6-5.5 3.6V13.5H6.75a.75.75 0 01-.102-1.493L6.75 12h4.75V9.15zm6-6.9h-4v1h4v-1z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M7.05 3a1.339 1.339 0 00-.05.38V4.5H4.5c-.8 0-1.423.576-1.493 1.352L3 6v14.5c0 .8.576 1.423 1.352 1.493L4.5 22h2.75c.167.458.403.882.708 1.27l.192.23H4.5a3.01 3.01 0 01-2.995-2.824L1.5 20.5V6a3.01 3.01 0 012.824-2.995L4.5 3h2.55zM19.5.5a3.01 3.01 0 012.995 2.824l.005.176v17a3.01 3.01 0 01-2.824 2.995l-.176.005h-8a3.01 3.01 0 01-2.995-2.824L8.5 20.5V15H10v5.5c0 .8.576 1.423 1.352 1.493L11.5 22h8c.8 0 1.423-.576 1.493-1.352L21 20.5v-17c0-.8-.576-1.423-1.352-1.493L19.5 2h-2v1.5h-4V2h-2c-.8 0-1.423.576-1.493 1.352L10 3.5v7H8.5v-7A3.01 3.01 0 0111.324.505L11.5.5h8zm-4 18a1.25 1.25 0 110 2.5 1.25 1.25 0 010-2.5zm-4-9.35l5.5 3.6-5.5 3.6V13.5H6.75c-.4 0-.75-.35-.75-.75 0-.367.294-.691.651-.743L6.75 12h4.75V9.15z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1M; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-replacement-mobilephone",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1L = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceScreenRotate {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M22.153 12.678l.102.007a.76.76 0 01.665.85 11.075 11.075 0 01-4.637 7.505l-.283.19L19.125 23h-5.31l2.13-4.855L17.155 20a9.575 9.575 0 004.255-6.675.75.75 0 01.743-.647zM15.258 1.5a3 3 0 011.977.744l.145.136 4.24 4.24a3 3 0 01.136 4.1l-.136.145L10.865 21.62a3 3 0 01-4.1.136l-.145-.136-4.24-4.24a3 3 0 01-.136-4.1l.136-.145L13.135 2.38a3 3 0 012.123-.88zM8.12 15.85a1.255 1.255 0 00-1.77 0 1.26 1.26 0 000 1.77 1.255 1.255 0 001.668.09l.102-.09.015.015a1.26 1.26 0 00-.015-1.785zm-.87.15a.75.75 0 11-.001 1.5.75.75 0 01.001-1.5zm2.935-15l-2.13 4.88-1.21-1.855a9.575 9.575 0 00-4.255 6.65.745.745 0 01-.64.639l-.1.006-.105-.005a.76.76 0 01-.64-.85A11.075 11.075 0 015.742 2.95l.283-.19L4.875 1h5.31z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M22.153 12.678l.102.007c.41.06.695.44.645.845-.425 3.046-2.15 5.78-4.65 7.513l-.27.182 1.15 1.76-5.31-.01 2.13-4.86 1.21 1.855c2.285-1.485 3.87-3.92 4.25-6.645a.75.75 0 01.743-.647zM15.255 1.5c.7 0 1.4.244 1.957.724l.163.151L21.62 6.62a3.002 3.002 0 01.135 4.105l-.135.145-10.755 10.755a2.996 2.996 0 01-4.076.152l-.164-.152L2.38 17.38a3.006 3.006 0 01-.135-4.101l.135-.144L13.135 2.38a2.987 2.987 0 012.12-.88zm0 1.5c-.35 0-.68.119-.949.34l-.111.1L3.44 14.195a1.5 1.5 0 00-.103 2.006l.103.114 4.245 4.245c.285.285.66.44 1.06.44.35 0 .68-.119.949-.34l.111-.1L20.56 9.805a1.501 1.501 0 00.103-2.007l-.103-.113-4.245-4.245a1.486 1.486 0 00-1.06-.44zM4.875 1.01l5.305.015-2.13 4.86L6.84 4.03c-2.285 1.485-3.87 3.92-4.25 6.645a.744.744 0 01-.74.645l-.053-.001-.052-.009a.75.75 0 01-.64-.845c.425-3.046 2.15-5.78 4.65-7.513l.27-.182-1.15-1.76z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1L; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-screen-rotate",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1K = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceServer {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M21.002 16v3.5a3 3 0 01-2.824 2.995L18 22.5H6a3.001 3.001 0 01-2.994-2.824L3 19.5V16h18zm-5 1.5a1 1 0 100 2 1 1 0 000-2zm5-8v5h-18v-5h18zm-5 1.5a1 1 0 100 2 1 1 0 000-2zm2-9.5a3 3 0 012.994 2.824l.006.176V8h-18V4.5a3.001 3.001 0 012.823-2.995l.176-.005h12zm-2 3a1 1 0 100 2 1 1 0 000-2z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M18.002 1.5a3 3 0 012.995 2.824l.005.176v15a3 3 0 01-2.824 2.995l-.176.005h-12a3 3 0 01-2.995-2.824l-.005-.176v-15a3 3 0 012.823-2.995l.177-.005h12zm1.5 14.5h-15v3.5c0 .778.596 1.42 1.355 1.493l.145.007h12c.778 0 1.42-.596 1.493-1.356l.007-.144V16zm-3.5 1.5a1 1 0 110 2 1 1 0 010-2zm3.5-8h-15v5h15v-5zm-3.5 1.5a1 1 0 110 2 1 1 0 010-2zm2-8h-12c-.779 0-1.42.596-1.494 1.356l-.006.144V8h15V4.5c0-.827-.673-1.5-1.5-1.5zm-2 1.5a1 1 0 110 2 1 1 0 010-2z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1K; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-server",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1J = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceSmartSpeaker {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 7.55c1.711 0 3.422.363 4.663.712l.501.148.436.14h1.1c1.05 0 1.9.75 2 1.8l.223 2.86.077 1.062.067 1.056c.05.866.083 1.689.083 2.372 0 2.226-1.405 4.17-3.444 4.656l-.206.044v.1c0 .51-.388.935-.884.993l-.116.007h-9c-.51 0-.935-.388-.993-.884L6.5 22.5v-.05C4.35 22 2.85 20 2.85 17.7c0-.732.032-1.617.082-2.546L3 14.025c.012-.19.026-.379.039-.567l.084-1.113.044-.535.09-1.003.043-.457c.095-.95.867-1.72 1.844-1.794L5.3 8.55h1.15l.347-.113.408-.125.463-.132c1.14-.312 2.687-.63 4.332-.63zm1 9.95v2h-2v-2h2zM12.25 4c1.364 0 2.645.248 3.805.669l.345.131-.7 1.35a8.86 8.86 0 00-3.45-.7c-1.273 0-2.463.29-3.57.755l-.33.145-.7-1.3C9.05 4.4 10.6 4 12.25 4zm0-3.5c1.95 0 3.77.388 5.462 1.124l.388.176-.7 1.3C15.8 2.4 14.1 2 12.25 2c-1.857 0-3.628.388-5.233 1.124L6.65 3.3 5.95 2C7.85 1.05 10 .5 12.25.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 7.55c1.711 0 3.422.363 4.663.712l.501.148.436.14h1.1c1.05 0 1.9.75 2 1.8l.223 2.86.077 1.062.067 1.056c.05.866.083 1.689.083 2.372 0 2.226-1.405 4.17-3.444 4.656l-.206.044v.1c0 .51-.388.935-.884.993l-.116.007h-9c-.51 0-.935-.388-.993-.884L6.5 22.5v-.05C4.35 22 2.85 20 2.85 17.7c0-.732.032-1.617.082-2.546L3 14.025c.012-.19.026-.379.039-.567l.084-1.113.044-.535.09-1.003.043-.457c.095-.95.867-1.72 1.844-1.794L5.3 8.55h1.15l.347-.113.408-.125.463-.132c1.14-.312 2.687-.63 4.332-.63zM18.7 10H5.3c-.25 0-.5.2-.5.45l-.208 2.566-.073.984-.066.993-.054.97c-.03.63-.049 1.225-.049 1.737 0 1.786 1.212 3.2 2.826 3.295L7.35 21h9.3c1.7 0 3-1.45 3-3.3 0-.494-.017-1.057-.044-1.653l-.048-.915-.06-.935-.068-.93-.23-2.817c-.044-.219-.202-.4-.409-.44L18.7 10zM13 17.5v2h-2v-2h2zM12.25 4c1.364 0 2.645.248 3.805.669l.345.131-.7 1.35a8.86 8.86 0 00-3.45-.7c-1.273 0-2.463.29-3.57.755l-.33.145-.7-1.3C9.05 4.4 10.6 4 12.25 4zm0-3.5c1.95 0 3.77.388 5.462 1.124l.388.176-.7 1.3C15.8 2.4 14.1 2 12.25 2c-1.857 0-3.628.388-5.233 1.124L6.65 3.3 5.95 2C7.85 1.05 10 .5 12.25.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1J; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-smart-speaker",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1I = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceTablet {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M20 13.25a1 1 0 11.001-2 1 1 0 010 2m.5-9.75h-17a3 3 0 00-3 3v11a3 3 0 003 3h17a3 3 0 003-3v-11a3 3 0 00-3-3", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M20 11.25a1 1 0 100 2 1 1 0 000-2zm2 6.25c0 .827-.672 1.5-1.5 1.5h-17c-.827 0-1.5-.673-1.5-1.5v-11C2 5.673 2.673 5 3.5 5h17c.828 0 1.5.673 1.5 1.5v11zm-1.5-14h-17a3 3 0 00-3 3v11a3 3 0 003 3h17a3 3 0 003-3v-11a3 3 0 00-3-3z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1I; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-tablet",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1H = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceTvAndMobile {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M21.5 9.5a2 2 0 011.995 1.85l.005.15v10a2 2 0 01-1.85 1.995l-.15.005H17a2 2 0 01-1.995-1.85L15 21.5v-10a2 2 0 011.85-1.995L17 9.5h4.5zM18.09 11H17a.5.5 0 00-.492.41l-.008.09v10a.5.5 0 00.41.492L17 22h4.5a.5.5 0 00.492-.41L22 21.5v-10a.5.5 0 00-.41-.492L21.5 11h-1.09v1.035h-2.32V11zm1.16 9a.75.75 0 110 1.5.75.75 0 010-1.5zM14 17v1.5H5V17h9zM22.5.5v8.22a3 3 0 00-.796-.167l-.204-.008H17a3 3 0 00-2.995 2.824l-.005.176V16H3.5a3 3 0 01-2.995-2.824L.5 13V.5h22zM10 5.96v4.58l3.5-2.29L10 5.96z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M21.5 9.5c1.05 0 1.918.82 1.994 1.851l.006.149v10c0 1.05-.82 1.918-1.851 1.994l-.149.006H17c-1.05 0-1.918-.82-1.994-1.851L15 21.5v-10c0-1.05.82-1.918 1.851-1.994L17 9.5h4.5zM18 11h-1c-.267 0-.454.158-.493.404l-.007.096v10c0 .267.158.454.404.493L17 22h4.5c.267 0 .454-.158.493-.404L22 21.5v-10c0-.267-.158-.454-.404-.493L21.5 11h-1v1H18v-1zm1.25 9a.75.75 0 110 1.5.75.75 0 010-1.5zM22.5.5v7.65a3.092 3.092 0 00-.79-.144L21.5 8H21V2H2v11c0 .8.576 1.423 1.352 1.493l.148.007h10v4H5V17h2.498c.262-.003.814-.052 1.31-.843L8.9 16H3.5a3.01 3.01 0 01-2.995-2.824L.5 13V.5h22zM9 4.65l5.5 3.6-5.5 3.6v-7.2z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1H; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-tv-and-mobile",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1G = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceTwitchingClosedState {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M22.532 15.169a.75.75 0 111.436.43 12.812 12.812 0 01-5.043 6.891.75.75 0 11-.844-1.239 11.312 11.312 0 004.451-6.082zM5.01 10.51V15a4.504 4.504 0 004.286 4.495l.211.005h3.483l-2.121 2.123a2.993 2.993 0 01-4.074.152l-.164-.152-4.242-4.245a3.008 3.008 0 01-.135-4.102l.135-.143 2.62-2.623zm13.116 7.173a.749.749 0 111.127.989 9.582 9.582 0 01-3.921 2.68.749.749 0 11-.512-1.41 8.068 8.068 0 003.306-2.26zm-6.12-13.44a4.004 4.004 0 013.993 3.8l.005.2v1.244H17.5V15a3 3 0 01-2.822 2.995l-.176.005H9.506a2.999 2.999 0 01-2.993-2.824L6.508 15V9.487h1.5V8.243c0-2.205 1.793-4 3.997-4zm0 7.757a1.249 1.249 0 00-.857 2.153l.108.091V15.5h1.5v-1.256a1.245 1.245 0 00-.75-2.244zm3.25-10.502c.7 0 1.399.243 1.956.723l.162.152 4.243 4.245a3.003 3.003 0 01.135 4.105l-.135.145L19 13.485V7.987h-1.504a5.504 5.504 0 00-4.548-5.157l-.23-.035.418-.417a2.984 2.984 0 012.119-.88zm-3.25 4.245A2.502 2.502 0 009.512 8.08l-.005.164v1.244h4.997V8.243c0-1.378-1.121-2.5-2.499-2.5zM5.085 1.51a.75.75 0 11.845 1.24 11.304 11.304 0 00-4.45 6.082.75.75 0 01-1.437-.43A12.81 12.81 0 015.086 1.51zM8.68 2.648a.75.75 0 11.513 1.41 8.063 8.063 0 00-3.307 2.26.75.75 0 01-1.127-.99 9.58 9.58 0 013.921-2.68z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M22.532 15.169a.748.748 0 111.436.43 12.815 12.815 0 01-5.043 6.891.749.749 0 11-.844-1.239 11.313 11.313 0 004.451-6.082zM5.01 10.51v2.12l-1.562 1.563a1.5 1.5 0 00-.103 2.006l.103.114 4.242 4.245c.285.285.66.44 1.06.44.35 0 .68-.119.948-.34l.11-.1 1.058-1.058h2.123l-2.12 2.123a2.993 2.993 0 01-4.074.152l-.164-.152-4.242-4.245a3.008 3.008 0 01-.135-4.102l.135-.143 2.62-2.623zm13.116 7.173a.751.751 0 011.127.989 9.58 9.58 0 01-3.922 2.68.748.748 0 01-.96-.45.75.75 0 01.449-.96 8.068 8.068 0 003.306-2.26zm-6.12-13.44a4.004 4.004 0 013.993 3.8l.005.2v1.244H17.5V15a3 3 0 01-2.822 2.995l-.176.005H9.506a2.999 2.999 0 01-2.993-2.824L6.508 15V9.487h1.5V8.243c0-2.205 1.793-4 3.997-4zm3.996 6.744H8.007V15a1.5 1.5 0 001.354 1.493l.145.007h4.996a1.5 1.5 0 001.492-1.356l.007-.144v-4.013zM12.005 12c.69 0 1.25.56 1.25 1.25 0 .357-.152.676-.392.903l-.108.091V15.5h-1.5v-1.256a1.243 1.243 0 01-.499-.994c0-.69.56-1.25 1.25-1.25zm3.25-10.502c.699 0 1.398.243 1.955.724l.163.15 4.242 4.246a3.003 3.003 0 01.135 4.105l-.135.145-2.616 2.617V11.36l1.557-1.557a1.502 1.502 0 00.102-2.007l-.102-.113-4.242-4.245a1.485 1.485 0 00-1.938-.15 5.424 5.424 0 00-1.367-.447l-.29-.046.417-.417a2.984 2.984 0 012.118-.88zm-3.25 4.245A2.502 2.502 0 009.512 8.08l-.005.164v1.244h4.997V8.243c0-1.378-1.121-2.5-2.499-2.5zM5.086 1.51a.749.749 0 11.844 1.24 11.306 11.306 0 00-4.451 6.082.75.75 0 11-1.436-.43A12.814 12.814 0 015.086 1.51zm3.595 1.138a.749.749 0 11.511 1.41 8.068 8.068 0 00-3.306 2.26.749.749 0 11-1.127-.99 9.574 9.574 0 013.922-2.68z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1G; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-twitching-closed-state",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1F = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceTwitchingOpenState {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M22.532 15.168a.75.75 0 111.436.43 12.814 12.814 0 01-5.043 6.892.748.748 0 01-1.041-.198.75.75 0 01.197-1.041 11.309 11.309 0 004.451-6.083zM5.01 10.51V15a4.504 4.504 0 004.286 4.495l.21.005h3.484l-2.121 2.122a2.993 2.993 0 01-4.074.153l-.164-.153-4.242-4.245a3.008 3.008 0 01-.135-4.1l.135-.145 2.62-2.622zm13.116 7.172a.749.749 0 111.127.99 9.58 9.58 0 01-3.921 2.68.75.75 0 11-.512-1.41 8.063 8.063 0 003.306-2.26zm-6.12-13.439a4 4 0 013.623 2.315l.082.188-1.355.678a2.493 2.493 0 00-2.35-1.68 2.503 2.503 0 00-2.493 2.335l-.005.164v1.243H17.5V15a3 3 0 01-2.822 2.995l-.176.005H9.506a2.999 2.999 0 01-2.993-2.824L6.508 15V9.486h1.5V8.243c0-2.206 1.793-4 3.997-4zm0 7.757c-.69 0-1.248.56-1.248 1.25 0 .362.156.686.403.914l.096.08V15.5h1.5v-1.256A1.246 1.246 0 0012.006 12zm3.25-10.503c.7 0 1.399.244 1.956.724l.162.151 4.242 4.245a3.003 3.003 0 01.136 4.105l-.136.145L19 13.485V7.986h-1.504a5.505 5.505 0 00-4.548-5.156l-.23-.035.418-.418a2.984 2.984 0 012.119-.88zm-10.17.013a.75.75 0 01.845 1.239A11.307 11.307 0 001.48 8.83.75.75 0 11.043 8.4a12.809 12.809 0 015.043-6.89zM8.68 2.647a.75.75 0 01.513 1.41 8.068 8.068 0 00-3.307 2.26.748.748 0 01-1.058.07.75.75 0 01-.069-1.059 9.582 9.582 0 013.921-2.68z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M5.009 10.51v2.12l-1.562 1.562a1.5 1.5 0 00-.102 2.007l.102.113 4.243 4.245c.284.285.66.44 1.059.44.35 0 .68-.118.948-.339l.111-.1 1.057-1.058h2.124l-2.121 2.122a2.993 2.993 0 01-4.074.153l-.164-.153-4.242-4.245a3.008 3.008 0 01-.135-4.1l.135-.145 2.62-2.622zm13.116 7.172a.749.749 0 111.127.99 9.58 9.58 0 01-3.921 2.68.75.75 0 11-.512-1.41 8.063 8.063 0 003.306-2.26zm-6.12-13.439a4 4 0 013.623 2.315l.082.188-1.355.678a2.493 2.493 0 00-2.35-1.68 2.503 2.503 0 00-2.493 2.335l-.005.164v1.243H17.5V15a3 3 0 01-2.822 2.995l-.176.005H9.506a2.999 2.999 0 01-2.993-2.824L6.508 15V9.486h1.5V8.243c0-2.206 1.793-4 3.997-4zm3.997 6.743H8.007V15c0 .778.596 1.42 1.355 1.493l.144.007h4.997c.777 0 1.419-.596 1.492-1.356l.007-.144v-4.014zM12.006 12c.69 0 1.249.56 1.249 1.25 0 .362-.156.686-.403.914l-.097.08V15.5h-1.499v-1.256a1.244 1.244 0 01-.5-.994c0-.69.56-1.25 1.25-1.25zm3.249-10.503c.7 0 1.399.244 1.956.724l.162.151 4.242 4.245a3.003 3.003 0 01.136 4.105l-.136.145L19 13.485V11.36l1.556-1.558a1.502 1.502 0 00.103-2.007l-.103-.113-4.242-4.245a1.485 1.485 0 00-1.937-.15 5.456 5.456 0 00-1.367-.446l-.291-.046.417-.418a2.984 2.984 0 012.119-.88zm7.277 13.671a.75.75 0 111.436.43 12.814 12.814 0 01-5.043 6.892.748.748 0 01-1.041-.198.75.75 0 01.197-1.041 11.309 11.309 0 004.451-6.083zM5.086 1.51a.75.75 0 01.844 1.239A11.307 11.307 0 001.48 8.83.75.75 0 11.043 8.4a12.809 12.809 0 015.043-6.89zM9.64 3.097a.75.75 0 01-.448.96 8.068 8.068 0 00-3.307 2.26.748.748 0 01-1.058.07.75.75 0 01-.069-1.059 9.582 9.582 0 013.921-2.68c.39-.142.82.059.96.449z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1F; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-twitching-open-state",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const dividerCss = "/*!@:host*/.sc-scale-divider-h{--width:100%;--height:100%;--spacing:var(--telekom-spacing-composition-space-05);--color:var(--telekom-color-ui-faint);--border-width:var(--telekom-spacing-composition-space-01);--min-height-vertical:var(--telekom-spacing-composition-space-08);width:var(--width);height:var(--height)}/*!@.divider*/.divider.sc-scale-divider{padding:var(--spacing)}/*!@.divider--vertical*/.divider--vertical.sc-scale-divider{display:inline-flex;height:inherit}/*!@.divider__horizontal*/.divider__horizontal.sc-scale-divider{margin:0;border:0;border-top:var(--border-width) solid var(--color)}/*!@.divider__vertical*/.divider__vertical.sc-scale-divider{display:inline-flex;height:inherit;min-height:var(--min-height-vertical);border-left:var(--border-width) solid var(--color)}";

class Divider {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) Divider vertical */
    this.vertical = false;
  }
  render() {
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { class: this.getCssClassMap(), "aria-hidden": "true", part: classnames('base', this.vertical && 'vertical') }, !this.vertical ? (hAsync("hr", { class: "divider__horizontal", part: "rule-horizontal" })) : (hAsync("span", { class: "divider__vertical", part: "rule-vertical" })))));
  }
  getCssClassMap() {
    return classnames('divider', this.vertical && `divider--vertical`);
  }
  static get style() { return dividerCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-divider",
    "$members$": {
      "vertical": [4],
      "styles": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const dropdownCss = "scale-dropdown{--font-weight:var(--telekom-typography-font-weight-bold);--height:var(--telekom-spacing-composition-space-13);--spacing-x:var(--telekom-spacing-composition-space-05);--spacing-dropdown:18px var(--telekom-spacing-composition-space-12) 5px\n    calc(var(--spacing-x) - 1px);--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);--radius:var(--telekom-radius-standard);--border:var(--telekom-spacing-composition-space-01) solid\n    var(--telekom-color-ui-border-standard);--border-danger:var(--telekom-spacing-composition-space-02) solid\n    var(--telekom-color-functional-danger-standard);--border-success:var(--telekom-spacing-composition-space-02) solid\n    var(--telekom-color-functional-success-standard);--border-warning:var(--telekom-spacing-composition-space-02) solid\n    var(--telekom-color-functional-warning-standard);--border-color-hover:var(--telekom-color-ui-border-hovered);--border-color-focus:var(--telekom-color-ui-border-hovered);--border-color-disabled:var(--telekom-color-ui-border-disabled);--focus-outline:var(--telekom-line-weight-highlight) solid\n    var(--telekom-color-functional-focus-standard);--color-disabled:var(--telekom-color-text-and-icon-disabled);--background-disabled:none;--color:var(--telekom-color-text-and-icon-standard);--background-color:var(--telekom-color-ui-state-fill-standard);--margin-bottom-helper-text:var(--telekom-spacing-composition-space-03);--transition-input:var(--transition);--font-size-input:var(--telekom-typography-font-size-body);--spacing-y-meta:var(--telekom-spacing-composition-space-03);--color-meta:var(--telekom-color-text-and-icon-standard);--height-icon:var(--telekom-spacing-composition-space-07);--color-icon:var(--telekom-color-text-and-icon-standard);--color-icon-hover:var(--telekom-color-text-and-icon-standard);--color-icon-active:var(--telekom-color-text-and-icon-standard);--transition-icon:var(--transition);--color-label:var(--telekom-color-text-and-icon-additional);--z-index-label:var(--scl-z-index-10);--transition-label:var(--transition);--font-size-label:var(--telekom-typography-font-size-body);--font-weight-label:var(--telekom-typography-font-weight-medium);--font-size-label-focus:var(--telekom-typography-font-size-small);--font-weight-label-focus:var(--telekom-typography-font-weight-bold)}.dropdown{position:relative}.dropdown .input__dropdown{width:100%;height:var(--height);margin:0;display:flex;outline:none;padding:var(--spacing-dropdown);z-index:1;box-sizing:border-box;transition:var(--transition-input);font-family:inherit;font-size:var(--font-size-input);border-radius:var(--radius);border:var(--border);white-space:nowrap;line-height:var(--font-size-input);text-overflow:ellipsis;appearance:none;-webkit-appearance:none;background-color:var(--background-color);color:var(--color)}.dropdown--hide-label .input__dropdown{padding:5px var(--telekom-spacing-composition-space-12) 5px\n    calc(var(--spacing-x) - 1px)}.dropdown--hide-label .input__label{visibility:hidden}.dropdown .input__dropdown-wrapper{position:relative}.dropdown.dropdown--helper-text .input__dropdown-wrapper{margin-bottom:var(--margin-bottom-helper-text)}.dropdown .input__meta{display:flex;justify-content:space-between;margin-top:var(--spacing-y-meta);color:var(--color-meta)}.dropdown.dropdown--disabled .input__dropdown-wrapper .input__dropdown-icon{color:var(--color-disabled)}.dropdown:not(.dropdown--disabled):hover .input__dropdown-icon{color:var(--color-icon-hover)}.dropdown:not(.dropdown--disabled):active .input__dropdown-icon{color:var(--color-icon-active)}.dropdown:not(.dropdown--disabled):not(.dropdown--variant-danger) .input__dropdown:hover{border-color:var(--border-color-hover);background-color:var(--telekom-color-ui-state-fill-hovered)}.dropdown:not(.dropdown--disabled).dropdown--variant-danger .input__dropdown:hover{border-color:var(--telekom-color-functional-danger-hovered);background-color:var(--telekom-color-ui-state-fill-hovered)}.dropdown:not(.dropdown--disabled).dropdown--variant-warning .input__dropdown:hover{border-color:var(--telekom-color-functional-warning-hovered);background-color:var(--telekom-color-ui-state-fill-hovered)}.dropdown:not(.dropdown--disabled).dropdown--variant-success .input__dropdown:hover{border-color:var(--telekom-color-functional-success-hovered);background-color:var(--telekom-color-ui-state-fill-hovered)}.dropdown:not(.dropdown--disabled):not(.dropdown--variant-danger) .input__dropdown:focus{border-color:var(--border-color-focus)}.dropdown:not(.dropdown--disabled).dropdown--variant-danger .input__dropdown:focus{border-color:var(--telekom-color-functional-danger-hovered)}.dropdown:not(.dropdown--disabled).dropdown--variant-warning .input__dropdown:focus{border-color:var(--telekom-color-functional-warning-hovered)}.dropdown:not(.dropdown--disabled).dropdown--variant-success .input__dropdown:focus{border-color:var(--telekom-color-functional-success-hovered)}.dropdown:not(.dropdown--disabled) .input__dropdown:focus{outline:var(--focus-outline);outline-offset:1px}.dropdown .input__dropdown-wrapper .input__dropdown-icon{top:50%;right:var(--spacing-x);position:absolute;transform:translateY(-50%);pointer-events:none;height:var(--height-icon);color:var(--color-icon);transition:var(--transition-icon)}.input__label{top:-2px;color:var(--color-label);display:flex;z-index:var(--z-index-label);position:absolute;transition:var(--transition-label);pointer-events:none;font-size:var(--font-size-label);transform:translate(\n    var(--spacing-x),\n    calc(\n      (var(--telekom-spacing-composition-space-14) - var(--font-size-label)) / 2\n    )\n  );font-weight:var(--font-weight-label)}.animated .input__label{transform:translate(\n    var(--spacing-x),\n    var(--telekom-spacing-composition-space-04)\n  );font-size:var(--font-size-label-focus);font-weight:var(--font-weight-label-focus);line-height:var(--telekom-typography-font-size-small)}.dropdown--variant-danger .input__dropdown{border:var(--border-danger)}.dropdown--variant-warning .input__dropdown{border:var(--border-warning)}.dropdown--variant-success .input__dropdown{border:var(--border-success)}.dropdown--transparent .input__dropdown{background-color:transparent}.dropdown--disabled label,.dropdown--disabled .input__label,.dropdown--disabled input,.dropdown--disabled .input__dropdown{cursor:not-allowed;border-color:var(--border-color-disabled);color:var(--color-disabled);background:var(--background-disabled)}[data-mode='light'] .dropdown:not(.dropdown--disabled):not(.dropdown--variant-danger) .input__dropdown:hover{background-color:var(--telekom-color-ui-state-fill-hovered)}[data-mode='light'] .dropdown:not(.dropdown--disabled).dropdown--variant-danger .input__dropdown:hover{background-color:var(--telekom-color-ui-state-fill-hovered)}[data-mode='dark'] .dropdown .input__dropdown{background-color:var(--telekom-color-background-canvas)}[data-mode='dark'] .dropdown:not(.dropdown--disabled):not(.dropdown--variant-danger) .input__dropdown:hover{background-color:#1b1b1b}[data-mode='dark'] .dropdown:not(.dropdown--disabled).dropdown--variant-danger .input__dropdown:hover{background-color:#1b1b1b}[data-mode='dark'] .dropdown--disabled .input__dropdown{background-color:var(--telekom-color-background-canvas)}@media (prefers-color-scheme: dark){.dropdown .input__dropdown{background-color:var(--telekom-color-background-canvas)}.dropdown:not(.dropdown--disabled):not(.dropdown--status-error) .input__dropdown:hover{background-color:#1b1b1b}.dropdown:not(.dropdown--disabled).dropdown--status-error .input__dropdown:hover{background-color:#1b1b1b}.dropdown--disabled .input__dropdown{background-color:var(--telekom-color-background-canvas)}}";

class Dropdown {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleInput = createEvent$1(this, "scale-input", 7);
    this.scaleInputLegacy = createEvent$1(this, "scaleInput", 7);
    this.scaleChange = createEvent$1(this, "scale-change", 7);
    this.scaleChangeLegacy = createEvent$1(this, "scaleChange", 7);
    this.scaleFocus = createEvent$1(this, "scale-focus", 7);
    this.scaleFocusLegacy = createEvent$1(this, "scaleFocus", 7);
    this.scaleBlur = createEvent$1(this, "scale-blur", 7);
    this.scaleBlurLegacy = createEvent$1(this, "scaleBlur", 7);
    this.scaleKeyDown = createEvent$1(this, "scale-keydown", 7);
    this.scaleKeyDownLegacy = createEvent$1(this, "scaleKeydown", 7);
    /** (optional) Input name */
    this.name = '';
    /** (optional) Input label */
    this.label = '';
    /** (optional) Input helper text */
    this.helperText = '';
    /** @deprecated - invalid should replace status */
    this.status = '';
    /** (optional) Input status */
    this.invalid = false;
    /** (optional) Variant */
    this.variant = 'informational';
    /** (optional) Input value */
    this.value = '';
    /** (optional) Makes type `select` behave as a controlled component in React */
    this.controlled = false;
    /** (optional) to avoid displaying the label */
    this.hideLabelVisually = false;
    this.internalId = generateUniqueId();
    // Handle change on <select> independently
    // so we can allow "controlled" (React) behavior,
    // in which only the `value` changing does update
    // the actual <select> value, not the user's input.
    this.handleSelectChange = (event) => {
      const target = event.target;
      if (this.controlled) {
        emitEvent$1(this, 'scaleChange', { value: target.value });
        this.selectElement.value = String(this.value);
        this.forceUpdate = String(Date.now());
      }
      else {
        this.value = target.value || '';
        this.emitChange();
      }
    };
    this.handleInput = (event) => {
      const target = event.target;
      if (target) {
        this.value = target.value || '';
        this.emitChange();
      }
      emitEvent$1(this, 'scaleInput', event);
    };
    this.handleChange = (event) => {
      const target = event.target;
      if (target) {
        this.value = target.value || '';
        this.emitChange();
      }
    };
    this.handleFocus = () => {
      emitEvent$1(this, 'scaleFocus');
    };
    this.handleBlur = () => {
      emitEvent$1(this, 'scaleBlur');
    };
    this.handleKeyDown = (event) => {
      emitEvent$1(this, 'scaleKeyDown', event);
    };
  }
  componentWillLoad() {
    this.hasSlotIcon = !!this.hostElement.querySelector('[slot="icon"]');
    if (this.inputId == null) {
      this.inputId = 'input-dropdown-' + this.internalId;
    }
  }
  componentDidLoad() {
    // Keep this.value up-to-date for type="select".
    // This is important also for React, where `value` is used to control the element state.
    const select = this.selectElement;
    const selectedValue = select.selectedIndex > -1
      ? select.options[select.selectedIndex].value
      : null;
    // If we have a `value` passed, set it on the <select> element
    // Otherwise, if we have an <option selected>, set its value on `value`
    if (this.value) {
      select.value = String(this.value);
    }
    else if (selectedValue) {
      this.value = selectedValue;
    }
    // This is a workaroud to prevent a bug in Stencil:
    // when using slots without Shadow DOM (possible only with Stencil)
    // sometimes an update in the Light DOM does not trigger a re-render
    // thus causing unexpected results.
    // https://gitlab.com/scale-ds/scale-telekom/-/issues/16
    if (this.selectElement) {
      this.mutationObserver = new MutationObserver(() => {
        this.forceUpdate = String(Date.now());
      });
      this.mutationObserver.observe(this.hostElement, {
        childList: true,
        subtree: true,
      });
    }
  }
  componentDidUpdate() {
    this.hasSlotIcon = !!this.hostElement.querySelector('[slot="icon"]');
  }
  componentDidRender() {
    // When type `select` and `controlled` is true,
    // make sure the <select> is always in sync with the value.
    const value = this.value == null ? '' : this.value.toString();
    if (this.controlled && this.selectElement.value.toString() !== value) {
      this.selectElement.value = value;
    }
    if (this.status !== '') {
      statusNote({
        tag: 'deprecated',
        message: 'Property "status" is deprecated. Please use the "invalid" property!',
        type: 'warn',
        source: this.hostElement,
      });
    }
    if (this.size) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "size" is deprecated. Please use css overwrite!',
        type: 'warn',
        source: this.hostElement,
      });
    }
  }
  disconnectedCallback() {
    if (this.mutationObserver) {
      this.mutationObserver.disconnect();
    }
  }
  // We're not watching `value` like we used to
  // because we get unwanted `scaleChange` events
  // because how we keep this.value up-to-date for type="select"
  // `this.value = selectedValue`
  emitChange() {
    emitEvent$1(this, 'scaleChange', {
      value: this.value == null ? this.value : this.value.toString(),
    });
  }
  render() {
    const ariaInvalidAttr = this.status === 'error' || this.invalid ? { 'aria-invalid': 'true' } : {};
    const helperTextId = `helper-message-${this.internalId}`;
    const ariaDescribedByAttr = { 'aria-describedBy': helperTextId };
    return (hAsync(Host$1, null, hAsync("div", { class: this.getCssClassMap() }, hAsync("label", { class: "input__label", htmlFor: this.inputId }, this.label), hAsync("div", { class: "input__dropdown-wrapper" }, hAsync("select", Object.assign({ ref: (el) => (this.selectElement = el), class: "input__dropdown",
      // @ts-ignore
      value: this.value, onChange: this.handleSelectChange, onFocus: this.handleFocus, onBlur: this.handleBlur, onKeyDown: this.handleKeyDown, disabled: this.disabled, required: this.required, multiple: this.multiple, id: this.inputId, name: this.name, size: this.visibleSize }, ariaInvalidAttr, (this.helperText ? ariaDescribedByAttr : {})), hAsync("slot", null)), hAsync("div", { class: "input__dropdown-icon" }, this.hasSlotIcon ? (hAsync("slot", { name: "icon" })) : (hAsync("scale-icon-navigation-collapse-down", { size: 20, decorative: true })))), this.helperText && (hAsync("scale-helper-text", { helperText: this.helperText, variant: this.invalid ? 'danger' : this.variant })))));
  }
  getCssClassMap() {
    return classnames('dropdown', this.disabled && `dropdown--disabled`, this.transparent && 'dropdown--transparent', this.status && `dropdown--status-${this.status}`, this.helperText && 'dropdown--helper-text', this.variant &&
      `dropdown--variant-${this.invalid ? 'danger' : this.variant}`, this.value != null && this.value !== '' && 'animated', this.hideLabelVisually && 'dropdown--hide-label');
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return dropdownCss; }
  static get cmpMeta() { return {
    "$flags$": 4,
    "$tagName$": "scale-dropdown",
    "$members$": {
      "name": [1],
      "label": [1],
      "helperText": [1, "helper-text"],
      "status": [1],
      "size": [1],
      "invalid": [4],
      "variant": [1],
      "disabled": [4],
      "required": [4],
      "value": [1032],
      "inputId": [1, "input-id"],
      "multiple": [4],
      "visibleSize": [2, "visible-size"],
      "transparent": [4],
      "controlled": [4],
      "hideLabelVisually": [4, "hide-label-visually"],
      "styles": [1],
      "forceUpdate": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const min = Math.min;
const max = Math.max;
const round = Math.round;
const createCoords = v => ({
  x: v,
  y: v
});
const oppositeSideMap = {
  left: 'right',
  right: 'left',
  bottom: 'top',
  top: 'bottom'
};
const oppositeAlignmentMap = {
  start: 'end',
  end: 'start'
};
function clamp$1(start, value, end) {
  return max(start, min(value, end));
}
function evaluate(value, param) {
  return typeof value === 'function' ? value(param) : value;
}
function getSide(placement) {
  return placement.split('-')[0];
}
function getAlignment(placement) {
  return placement.split('-')[1];
}
function getOppositeAxis(axis) {
  return axis === 'x' ? 'y' : 'x';
}
function getAxisLength(axis) {
  return axis === 'y' ? 'height' : 'width';
}
function getSideAxis(placement) {
  return ['top', 'bottom'].includes(getSide(placement)) ? 'y' : 'x';
}
function getAlignmentAxis(placement) {
  return getOppositeAxis(getSideAxis(placement));
}
function getAlignmentSides(placement, rects, rtl) {
  if (rtl === void 0) {
    rtl = false;
  }
  const alignment = getAlignment(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const length = getAxisLength(alignmentAxis);
  let mainAlignmentSide = alignmentAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';
  if (rects.reference[length] > rects.floating[length]) {
    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
  }
  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
}
function getExpandedPlacements(placement) {
  const oppositePlacement = getOppositePlacement(placement);
  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
}
function getOppositeAlignmentPlacement(placement) {
  return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);
}
function getSideList(side, isStart, rtl) {
  const lr = ['left', 'right'];
  const rl = ['right', 'left'];
  const tb = ['top', 'bottom'];
  const bt = ['bottom', 'top'];
  switch (side) {
    case 'top':
    case 'bottom':
      if (rtl) return isStart ? rl : lr;
      return isStart ? lr : rl;
    case 'left':
    case 'right':
      return isStart ? tb : bt;
    default:
      return [];
  }
}
function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
  const alignment = getAlignment(placement);
  let list = getSideList(getSide(placement), direction === 'start', rtl);
  if (alignment) {
    list = list.map(side => side + "-" + alignment);
    if (flipAlignment) {
      list = list.concat(list.map(getOppositeAlignmentPlacement));
    }
  }
  return list;
}
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);
}
function expandPaddingObject(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding
  };
}
function getPaddingObject(padding) {
  return typeof padding !== 'number' ? expandPaddingObject(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}
function rectToClientRect(rect) {
  return {
    ...rect,
    top: rect.y,
    left: rect.x,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  };
}

function computeCoordsFromPlacement(_ref, placement, rtl) {
  let {
    reference,
    floating
  } = _ref;
  const sideAxis = getSideAxis(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const alignLength = getAxisLength(alignmentAxis);
  const side = getSide(placement);
  const isVertical = sideAxis === 'y';
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
  let coords;
  switch (side) {
    case 'top':
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case 'bottom':
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case 'right':
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case 'left':
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  switch (getAlignment(placement)) {
    case 'start':
      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case 'end':
      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}

/**
 * Computes the `x` and `y` coordinates that will place the floating element
 * next to a reference element when it is given a certain positioning strategy.
 *
 * This export does not have any `platform` interface logic. You will need to
 * write one for the platform you are using Floating UI with.
 */
const computePosition$1 = async (reference, floating, config) => {
  const {
    placement = 'bottom',
    strategy = 'absolute',
    middleware = [],
    platform
  } = config;
  const validMiddleware = middleware.filter(Boolean);
  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));
  let rects = await platform.getElementRects({
    reference,
    floating,
    strategy
  });
  let {
    x,
    y
  } = computeCoordsFromPlacement(rects, placement, rtl);
  let statefulPlacement = placement;
  let middlewareData = {};
  let resetCount = 0;
  for (let i = 0; i < validMiddleware.length; i++) {
    const {
      name,
      fn
    } = validMiddleware[i];
    const {
      x: nextX,
      y: nextY,
      data,
      reset
    } = await fn({
      x,
      y,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform,
      elements: {
        reference,
        floating
      }
    });
    x = nextX != null ? nextX : x;
    y = nextY != null ? nextY : y;
    middlewareData = {
      ...middlewareData,
      [name]: {
        ...middlewareData[name],
        ...data
      }
    };
    if (reset && resetCount <= 50) {
      resetCount++;
      if (typeof reset === 'object') {
        if (reset.placement) {
          statefulPlacement = reset.placement;
        }
        if (reset.rects) {
          rects = reset.rects === true ? await platform.getElementRects({
            reference,
            floating,
            strategy
          }) : reset.rects;
        }
        ({
          x,
          y
        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
      }
      i = -1;
      continue;
    }
  }
  return {
    x,
    y,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
};

/**
 * Resolves with an object of overflow side offsets that determine how much the
 * element is overflowing a given clipping boundary on each side.
 * - positive = overflowing the boundary by that number of pixels
 * - negative = how many pixels left before it will overflow
 * - 0 = lies flush with the boundary
 * @see https://floating-ui.com/docs/detectOverflow
 */
async function detectOverflow(state, options) {
  var _await$platform$isEle;
  if (options === void 0) {
    options = {};
  }
  const {
    x,
    y,
    platform,
    rects,
    elements,
    strategy
  } = state;
  const {
    boundary = 'clippingAncestors',
    rootBoundary = 'viewport',
    elementContext = 'floating',
    altBoundary = false,
    padding = 0
  } = evaluate(options, state);
  const paddingObject = getPaddingObject(padding);
  const altContext = elementContext === 'floating' ? 'reference' : 'floating';
  const element = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = rectToClientRect(await platform.getClippingRect({
    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),
    boundary,
    rootBoundary,
    strategy
  }));
  const rect = elementContext === 'floating' ? {
    ...rects.floating,
    x,
    y
  } : rects.reference;
  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));
  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  };
  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({
    rect,
    offsetParent,
    strategy
  }) : rect);
  return {
    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
  };
}

/**
 * Provides data to position an inner element of the floating element so that it
 * appears centered to the reference element.
 * @see https://floating-ui.com/docs/arrow
 */
const arrow = options => ({
  name: 'arrow',
  options,
  async fn(state) {
    const {
      x,
      y,
      placement,
      rects,
      platform,
      elements,
      middlewareData
    } = state;
    // Since `element` is required, we don't Partial<> the type.
    const {
      element,
      padding = 0
    } = evaluate(options, state) || {};
    if (element == null) {
      return {};
    }
    const paddingObject = getPaddingObject(padding);
    const coords = {
      x,
      y
    };
    const axis = getAlignmentAxis(placement);
    const length = getAxisLength(axis);
    const arrowDimensions = await platform.getDimensions(element);
    const isYAxis = axis === 'y';
    const minProp = isYAxis ? 'top' : 'left';
    const maxProp = isYAxis ? 'bottom' : 'right';
    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';
    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
    const startDiff = coords[axis] - rects.reference[axis];
    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));
    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;

    // DOM platform can return `window` as the `offsetParent`.
    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {
      clientSize = elements.floating[clientProp] || rects.floating[length];
    }
    const centerToReference = endDiff / 2 - startDiff / 2;

    // If the padding is large enough that it causes the arrow to no longer be
    // centered, modify the padding so that it is centered.
    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;
    const minPadding = min(paddingObject[minProp], largestPossiblePadding);
    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);

    // Make sure the arrow doesn't overflow the floating element if the center
    // point is outside the floating element's bounds.
    const min$1 = minPadding;
    const max = clientSize - arrowDimensions[length] - maxPadding;
    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
    const offset = clamp$1(min$1, center, max);

    // If the reference is small enough that the arrow's padding causes it to
    // to point to nothing for an aligned placement, adjust the offset of the
    // floating element itself. To ensure `shift()` continues to take action,
    // a single reset is performed when this is true.
    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center != offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;
    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max : 0;
    return {
      [axis]: coords[axis] + alignmentOffset,
      data: {
        [axis]: offset,
        centerOffset: center - offset - alignmentOffset,
        ...(shouldAddOffset && {
          alignmentOffset
        })
      },
      reset: shouldAddOffset
    };
  }
});

/**
 * Optimizes the visibility of the floating element by flipping the `placement`
 * in order to keep it in view when the preferred placement(s) will overflow the
 * clipping boundary. Alternative to `autoPlacement`.
 * @see https://floating-ui.com/docs/flip
 */
const flip = function (options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: 'flip',
    options,
    async fn(state) {
      var _middlewareData$arrow, _middlewareData$flip;
      const {
        placement,
        middlewareData,
        rects,
        initialPlacement,
        platform,
        elements
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true,
        fallbackPlacements: specifiedFallbackPlacements,
        fallbackStrategy = 'bestFit',
        fallbackAxisSideDirection = 'none',
        flipAlignment = true,
        ...detectOverflowOptions
      } = evaluate(options, state);

      // If a reset by the arrow was caused due to an alignment offset being
      // added, we should skip any logic now since `flip()` has already done its
      // work.
      // https://github.com/floating-ui/floating-ui/issues/2549#issuecomment-1719601643
      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      const side = getSide(placement);
      const isBasePlacement = getSide(initialPlacement) === initialPlacement;
      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));
      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {
        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
      }
      const placements = [initialPlacement, ...fallbackPlacements];
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const overflows = [];
      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
      if (checkMainAxis) {
        overflows.push(overflow[side]);
      }
      if (checkCrossAxis) {
        const sides = getAlignmentSides(placement, rects, rtl);
        overflows.push(overflow[sides[0]], overflow[sides[1]]);
      }
      overflowsData = [...overflowsData, {
        placement,
        overflows
      }];

      // One or more sides is overflowing.
      if (!overflows.every(side => side <= 0)) {
        var _middlewareData$flip2, _overflowsData$filter;
        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
        const nextPlacement = placements[nextIndex];
        if (nextPlacement) {
          // Try next placement and re-run the lifecycle.
          return {
            data: {
              index: nextIndex,
              overflows: overflowsData
            },
            reset: {
              placement: nextPlacement
            }
          };
        }

        // First, find the candidates that fit on the mainAxis side of overflow,
        // then find the placement that fits the best on the main crossAxis side.
        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;

        // Otherwise fallback.
        if (!resetPlacement) {
          switch (fallbackStrategy) {
            case 'bestFit':
              {
                var _overflowsData$map$so;
                const placement = (_overflowsData$map$so = overflowsData.map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];
                if (placement) {
                  resetPlacement = placement;
                }
                break;
              }
            case 'initialPlacement':
              resetPlacement = initialPlacement;
              break;
          }
        }
        if (placement !== resetPlacement) {
          return {
            reset: {
              placement: resetPlacement
            }
          };
        }
      }
      return {};
    }
  };
};

// For type backwards-compatibility, the `OffsetOptions` type was also
// Derivable.
async function convertValueToCoords(state, options) {
  const {
    placement,
    platform,
    elements
  } = state;
  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));
  const side = getSide(placement);
  const alignment = getAlignment(placement);
  const isVertical = getSideAxis(placement) === 'y';
  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;
  const crossAxisMulti = rtl && isVertical ? -1 : 1;
  const rawValue = evaluate(options, state);

  // eslint-disable-next-line prefer-const
  let {
    mainAxis,
    crossAxis,
    alignmentAxis
  } = typeof rawValue === 'number' ? {
    mainAxis: rawValue,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: 0,
    crossAxis: 0,
    alignmentAxis: null,
    ...rawValue
  };
  if (alignment && typeof alignmentAxis === 'number') {
    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;
  }
  return isVertical ? {
    x: crossAxis * crossAxisMulti,
    y: mainAxis * mainAxisMulti
  } : {
    x: mainAxis * mainAxisMulti,
    y: crossAxis * crossAxisMulti
  };
}

/**
 * Modifies the placement by translating the floating element along the
 * specified axes.
 * A number (shorthand for `mainAxis` or distance), or an axes configuration
 * object may be passed.
 * @see https://floating-ui.com/docs/offset
 */
const offset = function (options) {
  if (options === void 0) {
    options = 0;
  }
  return {
    name: 'offset',
    options,
    async fn(state) {
      const {
        x,
        y
      } = state;
      const diffCoords = await convertValueToCoords(state, options);
      return {
        x: x + diffCoords.x,
        y: y + diffCoords.y,
        data: diffCoords
      };
    }
  };
};

/**
 * Optimizes the visibility of the floating element by shifting it in order to
 * keep it in view when it will overflow the clipping boundary.
 * @see https://floating-ui.com/docs/shift
 */
const shift = function (options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: 'shift',
    options,
    async fn(state) {
      const {
        x,
        y,
        placement
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = false,
        limiter = {
          fn: _ref => {
            let {
              x,
              y
            } = _ref;
            return {
              x,
              y
            };
          }
        },
        ...detectOverflowOptions
      } = evaluate(options, state);
      const coords = {
        x,
        y
      };
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const crossAxis = getSideAxis(getSide(placement));
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      if (checkMainAxis) {
        const minSide = mainAxis === 'y' ? 'top' : 'left';
        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';
        const min = mainAxisCoord + overflow[minSide];
        const max = mainAxisCoord - overflow[maxSide];
        mainAxisCoord = clamp$1(min, mainAxisCoord, max);
      }
      if (checkCrossAxis) {
        const minSide = crossAxis === 'y' ? 'top' : 'left';
        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';
        const min = crossAxisCoord + overflow[minSide];
        const max = crossAxisCoord - overflow[maxSide];
        crossAxisCoord = clamp$1(min, crossAxisCoord, max);
      }
      const limitedCoords = limiter.fn({
        ...state,
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      });
      return {
        ...limitedCoords,
        data: {
          x: limitedCoords.x - x,
          y: limitedCoords.y - y
        }
      };
    }
  };
};

function getNodeName(node) {
  if (isNode(node)) {
    return (node.nodeName || '').toLowerCase();
  }
  // Mocked nodes in testing environments may not be instances of Node. By
  // returning `#document` an infinite loop won't occur.
  // https://github.com/floating-ui/floating-ui/issues/2317
  return '#document';
}
function getWindow(node) {
  var _node$ownerDocument;
  return (node == null ? void 0 : (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getDocumentElement(node) {
  var _ref;
  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
}
function isNode(value) {
  return value instanceof Node || value instanceof getWindow(value).Node;
}
function isElement(value) {
  return value instanceof Element || value instanceof getWindow(value).Element;
}
function isHTMLElement(value) {
  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
}
function isShadowRoot(value) {
  // Browsers without `ShadowRoot` support.
  if (typeof ShadowRoot === 'undefined') {
    return false;
  }
  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
}
function isOverflowElement(element) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle$1(element);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !['inline', 'contents'].includes(display);
}
function isTableElement(element) {
  return ['table', 'td', 'th'].includes(getNodeName(element));
}
function isContainingBlock(element) {
  const webkit = isWebKit();
  const css = getComputedStyle$1(element);

  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block
  return css.transform !== 'none' || css.perspective !== 'none' || (css.containerType ? css.containerType !== 'normal' : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== 'none' : false) || !webkit && (css.filter ? css.filter !== 'none' : false) || ['transform', 'perspective', 'filter'].some(value => (css.willChange || '').includes(value)) || ['paint', 'layout', 'strict', 'content'].some(value => (css.contain || '').includes(value));
}
function getContainingBlock(element) {
  let currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isContainingBlock(currentNode)) {
      return currentNode;
    } else {
      currentNode = getParentNode(currentNode);
    }
  }
  return null;
}
function isWebKit() {
  if (typeof CSS === 'undefined' || !CSS.supports) return false;
  return CSS.supports('-webkit-backdrop-filter', 'none');
}
function isLastTraversableNode(node) {
  return ['html', 'body', '#document'].includes(getNodeName(node));
}
function getComputedStyle$1(element) {
  return getWindow(element).getComputedStyle(element);
}
function getNodeScroll(element) {
  if (isElement(element)) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  return {
    scrollLeft: element.pageXOffset,
    scrollTop: element.pageYOffset
  };
}
function getParentNode(node) {
  if (getNodeName(node) === 'html') {
    return node;
  }
  const result =
  // Step into the shadow DOM of the parent of a slotted node.
  node.assignedSlot ||
  // DOM Element detected.
  node.parentNode ||
  // ShadowRoot detected.
  isShadowRoot(node) && node.host ||
  // Fallback.
  getDocumentElement(node);
  return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node) {
  const parentNode = getParentNode(node);
  if (isLastTraversableNode(parentNode)) {
    return node.ownerDocument ? node.ownerDocument.body : node.body;
  }
  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node, list, traverseIframes) {
  var _node$ownerDocument2;
  if (list === void 0) {
    list = [];
  }
  if (traverseIframes === void 0) {
    traverseIframes = true;
  }
  const scrollableAncestor = getNearestOverflowAncestor(node);
  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
  const win = getWindow(scrollableAncestor);
  if (isBody) {
    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], win.frameElement && traverseIframes ? getOverflowAncestors(win.frameElement) : []);
  }
  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
}

function getCssDimensions(element) {
  const css = getComputedStyle$1(element);
  // In testing environments, the `width` and `height` properties are empty
  // strings for SVG elements, returning NaN. Fallback to `0` in this case.
  let width = parseFloat(css.width) || 0;
  let height = parseFloat(css.height) || 0;
  const hasOffset = isHTMLElement(element);
  const offsetWidth = hasOffset ? element.offsetWidth : width;
  const offsetHeight = hasOffset ? element.offsetHeight : height;
  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    $: shouldFallback
  };
}

function unwrapElement(element) {
  return !isElement(element) ? element.contextElement : element;
}

function getScale(element) {
  const domElement = unwrapElement(element);
  if (!isHTMLElement(domElement)) {
    return createCoords(1);
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    $
  } = getCssDimensions(domElement);
  let x = ($ ? round(rect.width) : rect.width) / width;
  let y = ($ ? round(rect.height) : rect.height) / height;

  // 0, NaN, or Infinity should always fallback to 1.

  if (!x || !Number.isFinite(x)) {
    x = 1;
  }
  if (!y || !Number.isFinite(y)) {
    y = 1;
  }
  return {
    x,
    y
  };
}

const noOffsets = /*#__PURE__*/createCoords(0);
function getVisualOffsets(element) {
  const win = getWindow(element);
  if (!isWebKit() || !win.visualViewport) {
    return noOffsets;
  }
  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop
  };
}
function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
    return false;
  }
  return isFixed;
}

function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect = element.getBoundingClientRect();
  const domElement = unwrapElement(element);
  let scale = createCoords(1);
  if (includeScale) {
    if (offsetParent) {
      if (isElement(offsetParent)) {
        scale = getScale(offsetParent);
      }
    } else {
      scale = getScale(element);
    }
  }
  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
  let x = (clientRect.left + visualOffsets.x) / scale.x;
  let y = (clientRect.top + visualOffsets.y) / scale.y;
  let width = clientRect.width / scale.x;
  let height = clientRect.height / scale.y;
  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
    let currentIFrame = win.frameElement;
    while (currentIFrame && offsetParent && offsetWin !== win) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css = getComputedStyle$1(currentIFrame);
      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
      x *= iframeScale.x;
      y *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x += left;
      y += top;
      currentIFrame = getWindow(currentIFrame).frameElement;
    }
  }
  return rectToClientRect({
    width,
    height,
    x,
    y
  });
}

function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  if (offsetParent === documentElement) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  let scale = createCoords(1);
  const offsets = createCoords(0);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== 'fixed') {
    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent);
      scale = getScale(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  return {
    width: rect.width * scale.x,
    height: rect.height * scale.y,
    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,
    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y
  };
}

function getClientRects(element) {
  return Array.from(element.getClientRects());
}

function getWindowScrollBarX(element) {
  // If <html> has a CSS width greater than the viewport, then this will be
  // incorrect for RTL.
  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;
}

// Gets the entire size of the scrollable document area, even extending outside
// of the `<html>` and `<body>` rect bounds if horizontally scrollable.
function getDocumentRect(element) {
  const html = getDocumentElement(element);
  const scroll = getNodeScroll(element);
  const body = element.ownerDocument.body;
  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
  let x = -scroll.scrollLeft + getWindowScrollBarX(element);
  const y = -scroll.scrollTop;
  if (getComputedStyle$1(body).direction === 'rtl') {
    x += max(html.clientWidth, body.clientWidth) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}

function getViewportRect(element, strategy) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x = 0;
  let y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const visualViewportBased = isWebKit();
    if (!visualViewportBased || visualViewportBased && strategy === 'fixed') {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x,
    y
  };
}

// Returns the inner client rect, subtracting scrollbars if present.
function getInnerBoundingClientRect(element, strategy) {
  const clientRect = getBoundingClientRect(element, true, strategy === 'fixed');
  const top = clientRect.top + element.clientTop;
  const left = clientRect.left + element.clientLeft;
  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);
  const width = element.clientWidth * scale.x;
  const height = element.clientHeight * scale.y;
  const x = left * scale.x;
  const y = top * scale.y;
  return {
    width,
    height,
    x,
    y
  };
}
function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
  let rect;
  if (clippingAncestor === 'viewport') {
    rect = getViewportRect(element, strategy);
  } else if (clippingAncestor === 'document') {
    rect = getDocumentRect(getDocumentElement(element));
  } else if (isElement(clippingAncestor)) {
    rect = getInnerBoundingClientRect(clippingAncestor, strategy);
  } else {
    const visualOffsets = getVisualOffsets(element);
    rect = {
      ...clippingAncestor,
      x: clippingAncestor.x - visualOffsets.x,
      y: clippingAncestor.y - visualOffsets.y
    };
  }
  return rectToClientRect(rect);
}
function hasFixedPositionAncestor(element, stopNode) {
  const parentNode = getParentNode(element);
  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
    return false;
  }
  return getComputedStyle$1(parentNode).position === 'fixed' || hasFixedPositionAncestor(parentNode, stopNode);
}

// A "clipping ancestor" is an `overflow` element with the characteristic of
// clipping (or hiding) child elements. This returns all clipping ancestors
// of the given element up the tree.
function getClippingElementAncestors(element, cache) {
  const cachedResult = cache.get(element);
  if (cachedResult) {
    return cachedResult;
  }
  let result = getOverflowAncestors(element, [], false).filter(el => isElement(el) && getNodeName(el) !== 'body');
  let currentContainingBlockComputedStyle = null;
  const elementIsFixed = getComputedStyle$1(element).position === 'fixed';
  let currentNode = elementIsFixed ? getParentNode(element) : element;

  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block
  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
    const computedStyle = getComputedStyle$1(currentNode);
    const currentNodeIsContaining = isContainingBlock(currentNode);
    if (!currentNodeIsContaining && computedStyle.position === 'fixed') {
      currentContainingBlockComputedStyle = null;
    }
    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === 'static' && !!currentContainingBlockComputedStyle && ['absolute', 'fixed'].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
    if (shouldDropCurrentNode) {
      // Drop non-containing blocks.
      result = result.filter(ancestor => ancestor !== currentNode);
    } else {
      // Record last containing block for next iteration.
      currentContainingBlockComputedStyle = computedStyle;
    }
    currentNode = getParentNode(currentNode);
  }
  cache.set(element, result);
  return result;
}

// Gets the maximum area that the element is visible in due to any number of
// clipping ancestors.
function getClippingRect(_ref) {
  let {
    element,
    boundary,
    rootBoundary,
    strategy
  } = _ref;
  const elementClippingAncestors = boundary === 'clippingAncestors' ? getClippingElementAncestors(element, this._c) : [].concat(boundary);
  const clippingAncestors = [...elementClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}

function getDimensions(element) {
  return getCssDimensions(element);
}

function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const isFixed = strategy === 'fixed';
  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = createCoords(0);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isOffsetParentAnElement) {
      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

function getTrueOffsetParent(element, polyfill) {
  if (!isHTMLElement(element) || getComputedStyle$1(element).position === 'fixed') {
    return null;
  }
  if (polyfill) {
    return polyfill(element);
  }
  return element.offsetParent;
}

// Gets the closest ancestor positioned element. Handles some edge cases,
// such as table ancestors and cross browser bugs.
function getOffsetParent(element, polyfill) {
  const window = getWindow(element);
  if (!isHTMLElement(element)) {
    return window;
  }
  let offsetParent = getTrueOffsetParent(element, polyfill);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === 'static') {
    offsetParent = getTrueOffsetParent(offsetParent, polyfill);
  }
  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle$1(offsetParent).position === 'static' && !isContainingBlock(offsetParent))) {
    return window;
  }
  return offsetParent || getContainingBlock(element) || window;
}

const getElementRects = async function (_ref) {
  let {
    reference,
    floating,
    strategy
  } = _ref;
  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
  const getDimensionsFn = this.getDimensions;
  return {
    reference: getRectRelativeToOffsetParent(reference, await getOffsetParentFn(floating), strategy),
    floating: {
      x: 0,
      y: 0,
      ...(await getDimensionsFn(floating))
    }
  };
};

function isRTL(element) {
  return getComputedStyle$1(element).direction === 'rtl';
}

const platform = {
  convertOffsetParentRelativeRectToViewportRelativeRect,
  getDocumentElement,
  getClippingRect,
  getOffsetParent,
  getElementRects,
  getClientRects,
  getDimensions,
  getScale,
  isElement,
  isRTL
};

/**
 * Computes the `x` and `y` coordinates that will place the floating element
 * next to a reference element when it is given a certain CSS positioning
 * strategy.
 */
const computePosition = (reference, floating, options) => {
  // This caches the expensive `getClippingElementAncestors` function so that
  // multiple lifecycle resets re-use the same result. It only lives for a
  // single call. If other functions become expensive, we can add them as well.
  const cache = new Map();
  const mergedOptions = {
    platform,
    ...options
  };
  const platformWithCache = {
    ...mergedOptions.platform,
    _c: cache
  };
  return computePosition$1(reference, floating, {
    ...mergedOptions,
    platform: platformWithCache
  });
};

const dropdownSelectCss = "/*!@:host*/.sc-scale-dropdown-select-h{--font-weight:var(--telekom-typography-font-weight-bold);--height:var(--telekom-spacing-composition-space-13);--color:var(--telekom-color-text-and-icon-standard);--color-disabled:var(--telekom-color-text-and-icon-disabled);--background-disabled:none;--background-hover:var(--telekom-color-ui-state-fill-hovered);--border:var(--telekom-spacing-composition-space-01) solid\n    var(--telekom-color-ui-border-standard);--border-color-hover:var(--telekom-color-ui-border-hovered);--border-color-focus:var(--telekom-color-ui-border-hovered);--border-color-disabled:var(--telekom-color-ui-border-disabled);--border-invalid:var(--telekom-spacing-composition-space-02) solid\n    var(--telekom-color-functional-danger-hovered);--focus-outline:var(--telekom-line-weight-highlight) solid\n    var(--telekom-color-functional-focus-standard);--spacing-x:var(--telekom-spacing-composition-space-05);--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);--radius:var(--telekom-radius-standard);--spacing-x-for-helper-text:var(--telekom-spacing-composition-space-03);--transition-combobox:var(--transition);--background-combobox:var(--telekom-color-ui-state-fill-standard);--spacing-combobox:1.125rem\n    calc(2rem - var(--telekom-spacing-composition-space-01)) 0.25rem\n    calc(0.75rem - var(--telekom-spacing-composition-space-01));--spacing-y-meta:var(--telekom-spacing-composition-space-03);--color-meta:var(--telekom-color-text-and-icon-standard);--height-icon:20px;--color-icon:var(--telekom-color-text-and-icon-standard);--color-icon-hover:var(--telekom-color-text-and-icon-standard);--color-icon-active:var(--telekom-color-text-and-icon-standard);--transition-icon:var(--transition);--color-label:var(--telekom-color-text-and-icon-additional);--z-index-label:var(--scl-z-index-10);--transition-label:var(--transition);--transform-label:translate(var(--spacing-x), 0.875rem);--transform-label-animated:translate(\n    var(--spacing-x),\n    calc(0.25rem + var(--telekom-spacing-composition-space-01))\n  );--background-listbox:var(--telekom-color-background-surface);--box-shadow-listbox:0 2px 4px 0 rgba(0, 0, 0, 0.1),\n    0 4px 16px 0 rgba(0, 0, 0, 0.1);--max-height-listbox:300px;--z-index-listbox:99}/*!@[part='combobox-container'] *,\n[part='combobox-container'] *::before,\n[part='combobox-container'] *::after*/[part='combobox-container'].sc-scale-dropdown-select *.sc-scale-dropdown-select,[part='combobox-container'].sc-scale-dropdown-select *.sc-scale-dropdown-select::before,[part='combobox-container'].sc-scale-dropdown-select *.sc-scale-dropdown-select::after{box-sizing:border-box}/*!@[part='combobox-container']*/[part='combobox-container'].sc-scale-dropdown-select{display:block;position:relative}/*!@[part='combobox']*/[part='combobox'].sc-scale-dropdown-select{width:100%;height:var(--height);margin:0;display:flex;align-items:center;outline:none;padding:var(--spacing-combobox);z-index:1;box-sizing:border-box;transition:var(--transition-combobox);font:var(--telekom-text-style-body);border-radius:var(--radius);border:var(--border);box-sizing:border-box;white-space:nowrap;text-overflow:ellipsis;appearance:none;-webkit-appearance:none;background-color:var(--background-combobox);color:var(--color)}/*!@[part='combobox-value']*/[part='combobox-value'].sc-scale-dropdown-select{overflow:hidden;text-overflow:ellipsis}/*!@[part~='select']:not([part~='disabled'])\n  [part='combobox']:hover\n  ~ [part='icon']*/[part~='select'].sc-scale-dropdown-select:not([part~='disabled']) [part='combobox'].sc-scale-dropdown-select:hover~[part='icon'].sc-scale-dropdown-select{color:var(--color-icon-hover)}/*!@[part~='select']:not([part~='disabled'])\n  [part='combobox']:active\n  ~ [part='icon']*/[part~='select'].sc-scale-dropdown-select:not([part~='disabled']) [part='combobox'].sc-scale-dropdown-select:active~[part='icon'].sc-scale-dropdown-select{color:var(--color-icon-active)}/*!@[part~='select']:not([part~='disabled']):not([part~='invalid'])\n  [part='combobox']:hover*/[part~='select'].sc-scale-dropdown-select:not([part~='disabled']):not([part~='invalid']) [part='combobox'].sc-scale-dropdown-select:hover{border-color:var(--border-color-hover);background-color:var(--background-hover)}/*!@[part~='select']:not([part~='disabled'])[part~='invalid']\n  [part='combobox']:hover*/[part~='select'].sc-scale-dropdown-select:not([part~='disabled'])[part~='invalid'] [part='combobox'].sc-scale-dropdown-select:hover{background-color:var(--background-hover)}/*!@[part~='select']:not([part~='disabled']):not([part~='invalid'])\n  [part='combobox']:focus*/[part~='select'].sc-scale-dropdown-select:not([part~='disabled']):not([part~='invalid']) [part='combobox'].sc-scale-dropdown-select:focus{border-color:var(--border-color-focus)}/*!@[part~='select']:not([part~='disabled']):not([part~='steal-focus'])\n  [part='combobox']:focus*/[part~='select'].sc-scale-dropdown-select:not([part~='disabled']):not([part~='steal-focus']) [part='combobox'].sc-scale-dropdown-select:focus{outline:var(--focus-outline);outline-offset:1px}/*!@[part~='invalid'] [part='combobox']*/[part~='invalid'].sc-scale-dropdown-select [part='combobox'].sc-scale-dropdown-select{border:var(--border-invalid)}/*!@[part~='transparent'] [part='combobox']*/[part~='transparent'].sc-scale-dropdown-select [part='combobox'].sc-scale-dropdown-select{background-color:transparent}/*!@[part~='disabled'] [part='combobox']*/[part~='disabled'].sc-scale-dropdown-select [part='combobox'].sc-scale-dropdown-select{cursor:not-allowed;border-color:var(--border-color-disabled);color:var(--color-disabled);background:var(--background-disabled)}/*!@[part='combobox_value']*/[part='combobox_value'].sc-scale-dropdown-select{width:calc(100%);overflow:hidden;text-overflow:ellipsis;white-space:nowrap;display:inline-block}/*!@[part='meta']*/[part='meta'].sc-scale-dropdown-select{display:flex;justify-content:space-between;margin-top:var(--spacing-y-meta);color:var(--color-meta)}/*!@[part='icon']*/[part='icon'].sc-scale-dropdown-select{top:50%;right:var(--spacing-x);position:absolute;transform:translateY(-50%);pointer-events:none;height:var(--height-icon);color:var(--color-icon);transition:var(--transition-icon)}/*!@[part~='disabled'] [part='icon']*/[part~='disabled'].sc-scale-dropdown-select [part='icon'].sc-scale-dropdown-select{color:var(--color-disabled)}/*!@[part='label']*/[part='label'].sc-scale-dropdown-select{width:calc(100% - 44px);overflow:hidden;text-overflow:ellipsis;white-space:nowrap;top:0;left:0;color:var(--color-label);display:inline-block;z-index:var(--z-index-label);position:absolute;transition:var(--transition-label);pointer-events:none;font:var(--telekom-text-style-ui);transform:var(--transform-label)}/*!@[part~='animated'] [part='label']*/[part~='animated'].sc-scale-dropdown-select [part='label'].sc-scale-dropdown-select{font:var(--telekom-text-style-small-bold);transform:var(--transform-label-animated)}/*!@[part~='disabled'] [part='label']*/[part~='disabled'].sc-scale-dropdown-select [part='label'].sc-scale-dropdown-select{cursor:not-allowed;border-color:var(--border-color-disabled);color:var(--color-disabled);background:var(--background-disabled)}/*!@[part~='hide-label'] [part='combobox']*/[part~='hide-label'].sc-scale-dropdown-select [part='combobox'].sc-scale-dropdown-select{padding-top:0.3125rem}/*!@[part~='hide-label'] [part='label']*/[part~='hide-label'].sc-scale-dropdown-select [part='label'].sc-scale-dropdown-select{visibility:hidden}/*!@[part='listbox']*/[part='listbox'].sc-scale-dropdown-select{position:relative}/*!@[part='listbox-scroll-container']*/[part='listbox-scroll-container'].sc-scale-dropdown-select{max-height:var(--max-height-listbox);overflow-y:auto}/*!@[part='listbox-pad']*/[part='listbox-pad'].sc-scale-dropdown-select{background:var(--background-listbox);box-shadow:var(--box-shadow-listbox);border-radius:var(--radius);padding:var(--radius) 0;margin-top:var(--telekom-spacing-composition-space-03);left:0;position:absolute;top:100%;width:100%;z-index:var(--z-index-listbox);display:none}/*!@[part~='open'] [part='listbox-pad']*/[part~='open'].sc-scale-dropdown-select [part='listbox-pad'].sc-scale-dropdown-select{display:block}/*!@[part~='strategy-fixed'] [part='listbox-pad']*/[part~='strategy-fixed'].sc-scale-dropdown-select [part='listbox-pad'].sc-scale-dropdown-select{position:fixed}/*!@[part~='transparent'] [part='listbox']*/[part~='transparent'].sc-scale-dropdown-select [part='listbox'].sc-scale-dropdown-select{background-color:transparent}/*!@[part~='option']*/[part~='option'].sc-scale-dropdown-select{color:var(--color)}/*!@[part~='option'][part~='disabled']*/[part~='option'][part~='disabled'].sc-scale-dropdown-select{color:var(--color-disabled);cursor:not-allowed}/*!@[part~='option']:not([part~='disabled']):hover*/[part~='option'].sc-scale-dropdown-select:not([part~='disabled']):hover{background-color:var(--background-hover)}/*!@[part~='option'][part~='current']*/[part~='option'][part~='current'].sc-scale-dropdown-select{outline:var(--focus-outline);outline-offset:-2px;border-radius:var(--radius)}/*!@[part~='option'][aria-selected='true']*/[part~='option'][aria-selected='true'].sc-scale-dropdown-select{padding-right:30px;position:relative}/*!@[part~='option'][aria-selected='true'] scale-icon-action-checkmark*/[part~='option'][aria-selected='true'].sc-scale-dropdown-select scale-icon-action-checkmark.sc-scale-dropdown-select{position:absolute;right:var(--telekom-spacing-composition-space-05);top:var(--telekom-spacing-composition-space-05)}/*!@[part~='option'] scale-dropdown-select-item::part(base)*/[part~='option'].sc-scale-dropdown-select scale-dropdown-select-item.sc-scale-dropdown-select::part(base){padding:var(--telekom-spacing-composition-space-05)}/*!@[part~='has-helper-text'] [part~='combobox-container']*/[part~='has-helper-text'].sc-scale-dropdown-select [part~='combobox-container'].sc-scale-dropdown-select{margin-bottom:var(--spacing-x-for-helper-text)}/*!@.sr-only*/.sr-only.sc-scale-dropdown-select{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border-width:0}/*!@.hcm-disabled*/.hcm-disabled.sc-scale-dropdown-select{display:none}@media screen and (forced-colors: active), (-ms-high-contrast: active){/*!@[part='listbox-pad']*/[part='listbox-pad'].sc-scale-dropdown-select{outline:var(--focus-outline);outline-offset:-2px;border-radius:var(--radius)}/*!@.hcm-disabled*/.hcm-disabled.sc-scale-dropdown-select{display:block}}";

var Actions;
(function (Actions) {
  Actions["Close"] = "Close";
  Actions["CloseSelect"] = "CloseSelect";
  Actions["First"] = "First";
  Actions["Last"] = "Last";
  Actions["Next"] = "Next";
  Actions["Open"] = "Open";
  Actions["PageDown"] = "PageDown";
  Actions["PageUp"] = "PageUp";
  Actions["Previous"] = "Previous";
  Actions["Select"] = "Select";
  Actions["Type"] = "Type";
})(Actions || (Actions = {}));
const DEFAULT_ICON_SIZE$1 = 20;
const isElementValue = (x) => typeof x.value === 'string';
const readValue = (element) => isElementValue(element) ? element.value : null;
const isElementDisabled = (x) => {
  return typeof x.disable === 'boolean';
};
const readDisabled = (element) => {
  const attr = element.getAttribute('disabled');
  return ((attr !== null && `${attr}` !== 'false') ||
    (isElementDisabled(element) ? element.disable : false));
};
const readOptions = (hostElement) => {
  const children = Array.from(hostElement.children);
  const options = children.filter((x) => x.tagName !== 'INPUT' && x.hidden === false);
  return options.map((x) => {
    var _a;
    return ({
      label: x.textContent.trim(),
      value: (_a = x.getAttribute('value')) !== null && _a !== void 0 ? _a : readValue(x),
      disabled: readDisabled(x),
      ItemElement: hAsync("span", { innerHTML: x.outerHTML }),
    });
  });
};
function getActionFromKey(event, open) {
  const { key, altKey, ctrlKey, metaKey } = event;
  if (!open && ['ArrowDown', 'ArrowUp', 'Enter', ' '].includes(key)) {
    return Actions['Open'];
  }
  if (key === 'Home') {
    return Actions['First'];
  }
  if (key === 'End') {
    return Actions['Last'];
  }
  if (['Backspace', 'Clear'].includes(key) ||
    (key.length === 1 && key !== ' ' && !altKey && !ctrlKey && !metaKey)) {
    return Actions['Type'];
  }
  if (!open) {
    return;
  }
  if (key === 'ArrowUp' && altKey) {
    return Actions['CloseSelect'];
  }
  if (key === 'ArrowDown' && !altKey) {
    return Actions['Next'];
  }
  switch (key) {
    case 'ArrowUp':
      return Actions['Previous'];
    case 'PageUp':
      return Actions['PageUp'];
    case 'PageDown':
      return Actions['PageDown'];
    case 'Escape':
      return Actions['Close'];
    case 'Enter':
      return Actions['CloseSelect'];
    case ' ':
      return Actions['CloseSelect'];
  }
}
function jumpToIndex(from, action, options) {
  var _a;
  const JUMP_SIZE = 10;
  const findNearestEnabled = (current, step) => {
    let nextIndex = current;
    let nextOption;
    do {
      nextIndex += step;
      nextOption = options[nextIndex];
      if (nextOption === undefined) {
        break;
      }
    } while (nextOption === null || nextOption === void 0 ? void 0 : nextOption.disabled);
    return nextOption ? nextIndex : current;
  };
  let nearest;
  switch (action) {
    case Actions['First']:
      return ((_a = options[0]) === null || _a === void 0 ? void 0 : _a.disabled) ? findNearestEnabled(-1, 1) : 0;
    case Actions['Last']:
      nearest = findNearestEnabled(options.length, -1);
      return nearest === options.length ? -1 : nearest; // rare case when all options are disabled
    case Actions['Previous']:
      nearest = findNearestEnabled(from, from === -1 ? 1 : -1);
      return nearest === options.length ? -1 : nearest; // rare case when all options are disabled
    case Actions['Next']:
      return findNearestEnabled(from, 1);
    case Actions['PageUp']:
      const lowerBound = Math.max(from - JUMP_SIZE, -1);
      return findNearestEnabled(lowerBound, 1);
    case Actions['PageDown']:
      const upperBound = Math.min(from + JUMP_SIZE, options.length);
      nearest = findNearestEnabled(upperBound, -1);
      return nearest === options.length ? -1 : nearest; // rare case when all options are disabled
    default:
      return from;
  }
}
function matchEnabledOptions(options = [], filter) {
  return options.filter((option) => !option.disabled &&
    option.label.toLowerCase().indexOf(filter.toLowerCase()) === 0);
}
function getIndexByChar(values, filter, startIndex = 0) {
  const sortedOptions = [
    ...values.slice(startIndex),
    ...values.slice(0, startIndex),
  ];
  const firstHit = matchEnabledOptions(sortedOptions, filter)[0];
  const allMatchingChars = (array) => array.every((char) => char === array[0]);
  if (firstHit) {
    return values.indexOf(firstHit);
  }
  if (allMatchingChars(filter.split(''))) {
    const hits = matchEnabledOptions(sortedOptions, filter[0]);
    return values.indexOf(hits[0]);
  }
  return -1;
}
function keepInView(activeElement, scrollParent) {
  const { offsetHeight, offsetTop } = activeElement;
  const { offsetHeight: parentOffsetHeight, scrollTop } = scrollParent;
  const isAboveParent = offsetTop < scrollTop;
  const isBelowParent = offsetTop + offsetHeight > scrollTop + parentOffsetHeight;
  if (isBelowParent) {
    return (scrollParent.scrollTop =
      offsetTop + offsetHeight - parentOffsetHeight);
  }
  if (isAboveParent) {
    return (scrollParent.scrollTop = offsetTop);
  }
}
function hasOverflow(element) {
  return element && element.clientHeight < element.scrollHeight;
}
function isInView(element) {
  const rect = element.getBoundingClientRect();
  const parentRect = {
    top: 0,
    left: 0,
    right: window.innerWidth || document.documentElement.clientWidth,
    bottom: window.innerHeight || document.documentElement.clientHeight,
  };
  return (rect.top >= parentRect.top &&
    rect.left >= parentRect.left &&
    rect.bottom <= parentRect.bottom &&
    rect.right <= parentRect.right);
}
class DropdownSelect {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleChange = createEvent$1(this, "scale-change", 7);
    this.scaleFocus = createEvent$1(this, "scale-focus", 7);
    this.scaleBlur = createEvent$1(this, "scale-blur", 7);
    this.scaleKeydown = createEvent$1(this, "scale-keydown", 7);
    this.comboboxId = 'combobox';
    this.helperText = '';
    this.invalid = false;
    this.variant = 'informational';
    /** @see {@url https://floating-ui.com/docs/computePosition#strategy} */
    this.floatingStrategy = 'absolute';
    /** (optional) to hide the label */
    this.hideLabelVisually = false;
    /** (optional) Screen reader text appended to the selected element */
    this.ariaLabelSelected = 'selected';
    /** (optional) Text displayed in high contrast mode only to indicate disabled state */
    this.hcmLabelDisabled = 'this field is disabled';
    this.options = '';
    this.open = false;
    this.currentIndex = -1;
    this.queryString = '';
    this.queryTimeout = null;
    this.hasFocus = false;
    this.selectOption = (index) => {
      this.currentIndex = index;
      this.value = readOptions(this.hostElement)[index].value;
      emitEvent$1(this, 'scaleChange', { value: this.value });
    };
    this.handleKeyDown = (event) => {
      var _a;
      const { key } = event;
      const options = readOptions(this.hostElement);
      const action = getActionFromKey(event, this.open);
      emitEvent$1(this, 'scaleKeydown', event);
      switch (action) {
        case Actions['Last']:
        case Actions['First']:
          this.setOpen(true);
        case Actions['Next']:
        case Actions['Previous']:
        case Actions['PageUp']:
        case Actions['PageDown']:
          event.preventDefault();
          return this.handleOptionChange(jumpToIndex(this.currentIndex, action, options));
        case Actions['CloseSelect']:
          event.preventDefault();
          if ((_a = options[this.currentIndex]) === null || _a === void 0 ? void 0 : _a.disabled) {
            return;
          }
          if (this.currentIndex !== -1) {
            this.selectOption(this.currentIndex);
          }
        case Actions['Close']:
          event.preventDefault();
          return this.setOpen(false);
        case Actions['Type']:
          return this.buildQueryString(key);
        case Actions['Open']:
          event.preventDefault();
          return this.setOpen(true);
      }
    };
    this.handleBlur = () => {
      this.setOpen(false);
      emitEvent$1(this, 'scaleBlur');
    };
    this.handleFocus = () => {
      emitEvent$1(this, 'scaleFocus');
    };
    this.handleClick = () => {
      this.setOpen(!this.open);
      const indexOfValue = readOptions(this.hostElement).findIndex(({ value }) => value === this.value);
      if (indexOfValue > -1) {
        setTimeout(() => {
          this.bringIntoView(indexOfValue);
        });
      }
    };
  }
  valueChange(newValue) {
    this.currentIndex = readOptions(this.hostElement).findIndex(({ value }) => value === newValue);
    this.updateInputHidden(newValue);
  }
  connectedCallback() {
    statusNote({ source: this.hostElement, tag: 'beta' });
    this.currentIndex =
      readOptions(this.hostElement).findIndex(({ value }) => value === this.value) || -1;
  }
  componentDidRender() {
    if (!this.open) {
      return;
    }
    if (this.floatingStrategy === 'fixed') {
      this.listboxPadEl.style.width = `${this.comboEl.getBoundingClientRect().width}px`;
    }
    computePosition(this.comboEl, this.listboxPadEl, {
      placement: 'bottom',
      strategy: this.floatingStrategy,
    }).then(({ x, y }) => {
      Object.assign(this.listboxPadEl.style, {
        left: `${x}px`,
        top: `${y}px`,
      });
    });
  }
  // this workaround is needed to make the component work with form
  // https://github.com/ionic-team/stencil/issues/2284
  componentDidLoad() {
    this.appendInputHidden();
  }
  appendInputHidden() {
    const input = document.createElement('input');
    input.name = this.name;
    input.id = this.name;
    input.value = this.value;
    input.type = 'hidden';
    this.hostElement.appendChild(input);
    this.hiddenInput = input;
  }
  updateInputHidden(value = this.value) {
    this.hiddenInput.value = value;
  }
  handleOptionChange(index) {
    this.currentIndex = index;
    if (index > -1) {
      this.bringIntoView(index);
    }
  }
  bringIntoView(index) {
    const options = this.listboxEl.querySelectorAll('[role=option]');
    if (hasOverflow(this.listboxEl)) {
      keepInView(options[index], this.listboxEl);
    }
    if (!isInView(options[index])) {
      options[index].scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }
  }
  setOpen(open) {
    if (this.open === open) {
      return;
    }
    if (this.disabled) {
      return;
    }
    this.open = open;
    if (!this.open) {
      this.comboEl.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
      this.comboEl.focus();
      this.currentIndex = -1;
    }
  }
  handleOptionClick(event, index) {
    event.stopPropagation();
    if (readOptions(this.hostElement)[index].disabled) {
      return;
    }
    this.handleOptionChange(index);
    this.selectOption(index);
    this.setOpen(false);
  }
  getSearchString(char) {
    if (typeof this.queryTimeout === 'number') {
      window.clearTimeout(this.queryTimeout);
    }
    this.queryTimeout = window.setTimeout(() => {
      this.queryString = '';
    }, 500);
    this.queryString += char;
    return this.queryString;
  }
  buildQueryString(char) {
    this.setOpen(true);
    const queryString = this.getSearchString(char);
    const queryIndex = getIndexByChar(readOptions(this.hostElement), queryString, this.currentIndex + 1);
    if (queryIndex >= 0) {
      this.handleOptionChange(queryIndex);
    }
    else {
      window.clearTimeout(this.queryTimeout);
      this.queryString = '';
    }
  }
  render() {
    var _a;
    const element = (_a = readOptions(this.hostElement).find(({ value }) => value === this.value)) !== null && _a !== void 0 ? _a : {};
    const ValueElement = element.ItemElement;
    const hasEmptyValueElement = element.value === '';
    const helperTextId = `helper-message-${generateUniqueId()}`;
    const ariaDescribedByAttr = { 'aria-describedBy': helperTextId };
    return (hAsync(Host$1, null, hAsync("div", { part: this.getBasePartMap() }, hAsync("div", { part: "combobox-container" }, hAsync("label", { id: `${this.comboboxId}-label`, part: "label" }, this.label), hAsync("div", Object.assign({ ref: (el) => (this.comboEl = el), "aria-controls": `${this.comboboxId}-listbox`, "aria-expanded": this.open ? 'true' : 'false', "aria-haspopup": "listbox", "aria-labelledby": `${this.comboboxId}-label`, id: this.comboboxId, part: "combobox", role: "combobox", tabindex: this.disabled ? '-1' : '0', onBlur: this.handleBlur, onFocus: this.handleFocus, onClick: this.handleClick, onKeyDown: this.handleKeyDown }, (this.open
      ? {
        'aria-activedescendant': (readOptions(this.hostElement)[this.currentIndex] ||
          {}).value,
      }
      : {}), (this.helperText ? ariaDescribedByAttr : {}), (this.invalid ? { 'aria-invalid': 'true' } : {})), hAsync("span", { part: "combobox-value" }, hasEmptyValueElement ? '' : ValueElement)), hAsync("div", { part: "listbox-pad", ref: (el) => (this.listboxPadEl = el) }, hAsync("div", { part: "listbox-scroll-container", onMouseDown: (e) => {
        e.preventDefault();
      } }, hAsync("div", { ref: (el) => (this.listboxEl = el), part: "listbox", role: "listbox", id: `${this.comboboxId}-listbox`, "aria-labelledby": `${this.comboboxId}-label`, tabindex: "-1" }, readOptions(this.hostElement).map(({ value, disabled, ItemElement }, index) => (hAsync("div", Object.assign({ role: "option", part: this.getOptionPartMap(index, disabled), id: value, onClick: (event) => {
        this.handleOptionClick(event, index);
      } }, (value === this.value
      ? { 'aria-selected': 'true' }
      : {}), (disabled ? { 'aria-disabled': 'true' } : {})), ItemElement, value === this.value ? (hAsync("div", null, hAsync("scale-icon-action-checkmark", { size: 16 }), hAsync("span", { class: "sr-only" }, this.ariaLabelSelected))) : null)))))), hAsync("div", { part: "icon" }, this.open ? (hAsync("scale-icon-navigation-collapse-up", { decorative: true, size: DEFAULT_ICON_SIZE$1 })) : (hAsync("scale-icon-navigation-collapse-down", { decorative: true, size: DEFAULT_ICON_SIZE$1 })))), this.helperText && (hAsync("scale-helper-text", { helperText: this.helperText, variant: this.invalid ? 'danger' : this.variant, id: helperTextId })), this.disabled && (hAsync("div", { class: "hcm-disabled" }, this.hcmLabelDisabled)))));
  }
  getBasePartMap() {
    const animated = this.value != null && this.value !== '';
    return classnames('select', this.open && `open`, this.disabled && `disabled`, this.readonly && `readonly`, this.transparent && 'transparent', this.invalid && `invalid`, this.currentIndex > -1 && `steal-focus`, animated && 'animated', this.helperText && 'has-helper-text', this.floatingStrategy && `strategy-${this.floatingStrategy}`, this.hideLabelVisually && 'hide-label');
  }
  getOptionPartMap(index, disabled) {
    return classnames('option', index === this.currentIndex && `current`, disabled && `disabled`);
  }
  get hostElement() { return getElement$1(this); }
  static get watchers() { return {
    "value": ["valueChange"]
  }; }
  static get style() { return dropdownSelectCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-dropdown-select",
    "$members$": {
      "comboboxId": [1, "combobox-id"],
      "label": [1],
      "name": [1],
      "helperText": [1, "helper-text"],
      "disabled": [4],
      "readonly": [4],
      "transparent": [4],
      "invalid": [4],
      "variant": [1],
      "value": [1544],
      "floatingStrategy": [1, "floating-strategy"],
      "hideLabelVisually": [4, "hide-label-visually"],
      "ariaLabelSelected": [1, "aria-label-selected"],
      "hcmLabelDisabled": [1, "hcm-label-disabled"],
      "options": [32],
      "open": [32],
      "currentIndex": [32],
      "queryString": [32],
      "queryTimeout": [32],
      "hasFocus": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["value", "value"]]
  }; }
}

const dropdownSelectItemCss = "/*!@:host*//*!@[part~='base']*/[part~='base'].sc-scale-dropdown-select-item{display:flex;justify-content:flex-start;align-items:center}/*!@[part~='prefix'],\n[part~='label'],\n[part~='suffix']*/[part~='prefix'].sc-scale-dropdown-select-item,[part~='label'].sc-scale-dropdown-select-item,[part~='suffix'].sc-scale-dropdown-select-item{display:inline-block;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;line-height:1}";

class DropdownSelectItem {
  constructor(hostRef) {
    registerInstance(this, hostRef);
  }
  render() {
    return (hAsync("div", { part: "base" }, hAsync("div", { part: "prefix" }, hAsync("slot", { name: "prefix" })), hAsync("div", { part: "label" }, hAsync("slot", null)), hAsync("div", { part: "suffix" }, hAsync("slot", { name: "suffix" }))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return dropdownSelectItemCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-dropdown-select-item",
    "$members$": {
      "selected": [4],
      "focused": [4],
      "value": [520],
      "disabled": [516]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["value", "value"], ["disabled", "disabled"]]
  }; }
}

const ISO_DATE_FORMAT = /^(\d{4})-(\d{2})-(\d{2})$/;
var DaysOfWeek;
(function (DaysOfWeek) {
  DaysOfWeek[DaysOfWeek["Sunday"] = 0] = "Sunday";
  DaysOfWeek[DaysOfWeek["Monday"] = 1] = "Monday";
  DaysOfWeek[DaysOfWeek["Tuesday"] = 2] = "Tuesday";
  DaysOfWeek[DaysOfWeek["Wednesday"] = 3] = "Wednesday";
  DaysOfWeek[DaysOfWeek["Thursday"] = 4] = "Thursday";
  DaysOfWeek[DaysOfWeek["Friday"] = 5] = "Friday";
  DaysOfWeek[DaysOfWeek["Saturday"] = 6] = "Saturday";
})(DaysOfWeek || (DaysOfWeek = {}));
function createDate(year, month, day) {
  var dayInt = parseInt(day, 10);
  var monthInt = parseInt(month, 10);
  var yearInt = parseInt(year, 10);
  const isValid = Number.isInteger(yearInt) && // all parts should be integers
    Number.isInteger(monthInt) &&
    Number.isInteger(dayInt) &&
    monthInt > 0 && // month must be 1-12
    monthInt <= 12 &&
    dayInt > 0 && // day must be 1-31
    dayInt <= 31 &&
    yearInt > 0;
  if (isValid) {
    return new Date(yearInt, monthInt - 1, dayInt);
  }
}
/**
 * @param value date string in ISO format YYYY-MM-DD
 */
function parseISODate(value) {
  if (!value) {
    return;
  }
  const matches = value.match(ISO_DATE_FORMAT);
  if (matches) {
    return createDate(matches[1], matches[2], matches[3]);
  }
}
/**
 * print date in format YYYY-MM-DD
 * @param date
 */
function printISODate(date) {
  if (!date) {
    return "";
  }
  var d = date.getDate().toString(10);
  var m = (date.getMonth() + 1).toString(10);
  var y = date.getFullYear().toString(10);
  // days are not zero-indexed, so pad if less than 10
  if (date.getDate() < 10) {
    d = `0${d}`;
  }
  // months *are* zero-indexed, pad if less than 9!
  if (date.getMonth() < 9) {
    m = `0${m}`;
  }
  return `${y}-${m}-${d}`;
}
/**
 * Compare if two dates are equal in terms of day, month, and year
 */
function isEqual(a, b) {
  if (a == null || b == null) {
    return false;
  }
  return a.getFullYear() === b.getFullYear() && a.getMonth() === b.getMonth() && a.getDate() === b.getDate();
}
function addDays(date, days) {
  var d = new Date(date);
  d.setDate(d.getDate() + days);
  return d;
}
function startOfWeek(date, firstDayOfWeek = DaysOfWeek.Monday) {
  var d = new Date(date);
  var day = d.getDay();
  var diff = (day < firstDayOfWeek ? 7 : 0) + day - firstDayOfWeek;
  d.setDate(d.getDate() - diff);
  return d;
}
function endOfWeek(date, firstDayOfWeek = DaysOfWeek.Monday) {
  var d = new Date(date);
  var day = d.getDay();
  var diff = (day < firstDayOfWeek ? -7 : 0) + 6 - (day - firstDayOfWeek);
  d.setDate(d.getDate() + diff);
  return d;
}
function startOfMonth(date) {
  return new Date(date.getFullYear(), date.getMonth(), 1);
}
function endOfMonth(date) {
  return new Date(date.getFullYear(), date.getMonth() + 1, 0);
}
function setMonth(date, month) {
  const d = new Date(date);
  d.setMonth(month);
  return d;
}
function setYear(date, year) {
  const d = new Date(date);
  d.setFullYear(year);
  return d;
}
/**
 * Check if date is within a min and max
 */
function inRange(date, min, max) {
  return clamp(date, min, max) === date;
}
/**
 * Ensures date is within range, returns min or max if out of bounds
 */
function clamp(date, min, max) {
  const time = date.getTime();
  if (min && min instanceof Date && time < min.getTime()) {
    return min;
  }
  if (max && max instanceof Date && time > max.getTime()) {
    return max;
  }
  return date;
}
/**
 * given start and end date, return an (inclusive) array of all dates in between
 * @param start
 * @param end
 */
function getDaysInRange(start, end) {
  const days = [];
  let current = start;
  while (!isEqual(current, end)) {
    days.push(current);
    current = addDays(current, 1);
  }
  days.push(current);
  return days;
}
/**
 * given a date, return an array of dates from a calendar perspective
 * @param date
 * @param firstDayOfWeek
 */
function getViewOfMonth(date, firstDayOfWeek = DaysOfWeek.Monday) {
  const start = startOfWeek(startOfMonth(date), firstDayOfWeek);
  const end = endOfWeek(endOfMonth(date), firstDayOfWeek);
  return getDaysInRange(start, end);
}
/**
 * Form random hash
 */
function chr4() {
  return Math.random()
    .toString(16)
    .slice(-4);
}
/**
 * Create random identifier with a prefix
 * @param prefix
 */
function createIdentifier(prefix) {
  return `${prefix}-${chr4()}${chr4()}-${chr4()}-${chr4()}-${chr4()}-${chr4()}${chr4()}${chr4()}`;
}

const DatePickerInput = ({ onClick, dateFormatter, localization, name, formattedValue, valueAsDate, value, identifier, disabled, required, role, buttonRef, inputRef, onInput, onBlur, onFocus, }) => {
  return (hAsync("div", { class: "duet-date__input-wrapper" },
    hAsync("input", { class: "duet-date__input", value: formattedValue, placeholder: localization.placeholder, id: identifier, disabled: disabled, role: role, required: required ? true : undefined, "aria-autocomplete": "none", onInput: onInput, onFocus: onFocus, onBlur: onBlur, autoComplete: "off", ref: inputRef }),
    hAsync("input", { type: "hidden", name: name, value: value }),
    hAsync("button", { class: "duet-date__toggle", onClick: onClick, disabled: disabled, ref: buttonRef, type: "button" },
      hAsync("span", { class: "duet-date__toggle-icon" },
        hAsync("svg", { "aria-hidden": "true", height: "24", viewBox: "0 0 21 21", width: "24", xmlns: "http://www.w3.org/2000/svg" },
          hAsync("g", { fill: "none", "fill-rule": "evenodd", transform: "translate(2 2)" },
            hAsync("path", { d: "m2.5.5h12c1.1045695 0 2 .8954305 2 2v12c0 1.1045695-.8954305 2-2 2h-12c-1.1045695 0-2-.8954305-2-2v-12c0-1.1045695.8954305-2 2-2z", stroke: "currentColor", "stroke-linecap": "round", "stroke-linejoin": "round" }),
            hAsync("path", { d: "m.5 4.5h16", stroke: "currentColor", "stroke-linecap": "round", "stroke-linejoin": "round" }),
            hAsync("g", { fill: "currentColor" },
              hAsync("circle", { cx: "8.5", cy: "8.5", r: "1" }),
              hAsync("circle", { cx: "4.5", cy: "8.5", r: "1" }),
              hAsync("circle", { cx: "12.5", cy: "8.5", r: "1" }),
              hAsync("circle", { cx: "8.5", cy: "12.5", r: "1" }),
              hAsync("circle", { cx: "4.5", cy: "12.5", r: "1" }),
              hAsync("circle", { cx: "12.5", cy: "12.5", r: "1" }))))),
      hAsync("span", { class: "duet-date__vhidden" },
        localization.buttonLabel,
        valueAsDate && (hAsync("span", null,
          ", ",
          localization.selectedDateMessage,
          " ",
          dateFormatter.format(valueAsDate)))))));
};

const DatePickerDay = ({ focusedDay, today, day, onDaySelect, onKeyboardNavigation, focusedDayRef, inRange, isSelected, dateFormatter, }) => {
  const isToday = isEqual(day, today);
  const isFocused = isEqual(day, focusedDay);
  const isDisabled = day.getMonth() !== focusedDay.getMonth();
  const isOutsideRange = !inRange;
  function handleClick(e) {
    onDaySelect(e, day);
  }
  return (hAsync("button", { class: {
      "duet-date__day": true,
      "is-outside": isOutsideRange,
      "is-disabled": isDisabled,
      "is-today": isToday,
    }, tabIndex: isFocused ? 0 : -1, onClick: handleClick, onKeyDown: onKeyboardNavigation, disabled: isOutsideRange || isDisabled, type: "button", "aria-pressed": isSelected ? "true" : "false", ref: el => {
      if (isFocused && el && focusedDayRef) {
        focusedDayRef(el);
      }
    } },
    hAsync("span", { "aria-hidden": "true" }, day.getDate()),
    hAsync("span", { class: "duet-date__vhidden" }, dateFormatter.format(day))));
};

function chunk(array, chunkSize) {
  const result = [];
  for (let i = 0; i < array.length; i += chunkSize) {
    result.push(array.slice(i, i + chunkSize));
  }
  return result;
}
function mapWithOffset(array, startingOffset, mapFn) {
  return array.map((_, i) => {
    const adjustedIndex = (i + startingOffset) % array.length;
    return mapFn(array[adjustedIndex]);
  });
}
const DatePickerMonth = ({ selectedDate, focusedDate, labelledById, localization, firstDayOfWeek, min, max, dateFormatter, onDateSelect, onKeyboardNavigation, focusedDayRef, }) => {
  const today = new Date();
  const days = getViewOfMonth(focusedDate, firstDayOfWeek);
  return (hAsync("table", { class: "duet-date__table", "aria-labelledby": labelledById },
    hAsync("thead", null,
      hAsync("tr", null, mapWithOffset(localization.dayNames, firstDayOfWeek, dayName => (hAsync("th", { class: "duet-date__table-header", scope: "col" },
        hAsync("span", { "aria-hidden": "true" }, dayName.substr(0, 2)),
        hAsync("span", { class: "duet-date__vhidden" }, dayName)))))),
    hAsync("tbody", null, chunk(days, 7).map(week => (hAsync("tr", { class: "duet-date__row" }, week.map(day => (hAsync("td", { class: "duet-date__cell" },
      hAsync(DatePickerDay, { day: day, today: today, focusedDay: focusedDate, isSelected: isEqual(day, selectedDate), inRange: inRange(day, min, max), onDaySelect: onDateSelect, dateFormatter: dateFormatter, onKeyboardNavigation: onKeyboardNavigation, focusedDayRef: focusedDayRef }))))))))));
};

const localization = {
  buttonLabel: "Choose date",
  placeholder: "YYYY-MM-DD",
  selectedDateMessage: "Selected date is",
  prevMonthLabel: "Previous month",
  nextMonthLabel: "Next month",
  monthSelectLabel: "Month",
  yearSelectLabel: "Year",
  closeLabel: "Close window",
  keyboardInstruction: "You can use arrow keys to navigate dates",
  calendarHeading: "Choose a date",
  dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  monthNames: [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ],
  monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  locale: "en-GB",
};

const isoAdapter = { parse: parseISODate, format: printISODate };

const duetDatePickerCss = ".duet-date *,.duet-date *::before,.duet-date *::after{box-sizing:border-box;margin:0;width:auto}.duet-date{box-sizing:border-box;color:var(--duet-color-text);display:block;font-family:var(--duet-font);margin:0;position:relative;text-align:left;width:100%}.duet-date__input{-webkit-appearance:none;appearance:none;background:var(--duet-color-surface);border:1px solid var(--duet-color-text);border-radius:var(--duet-radius);color:var(--duet-color-text);float:none;font-family:var(--duet-font);font-size:100%;line-height:normal;padding:14px 60px 14px 14px;width:100%}.duet-date__input:focus{border-color:var(--duet-color-primary);box-shadow:0 0 0 1px var(--duet-color-primary);outline:0}.duet-date__input::-webkit-input-placeholder{color:var(--duet-color-placeholder);opacity:1}.duet-date__input:-moz-placeholder{color:var(--duet-color-placeholder);opacity:1}.duet-date__input:-ms-input-placeholder{color:var(--duet-color-placeholder)}.duet-date__input-wrapper{position:relative;width:100%}.duet-date__toggle{-moz-appearance:none;-webkit-appearance:none;-webkit-user-select:none;align-items:center;appearance:none;background:var(--duet-color-button);border:0;border-radius:0;border-bottom-right-radius:var(--duet-radius);border-top-right-radius:var(--duet-radius);box-shadow:inset 1px 0 0 rgba(0, 0, 0, 0.1);color:var(--duet-color-text);cursor:pointer;display:flex;height:calc(100% - 2px);justify-content:center;padding:0;position:absolute;right:1px;top:1px;user-select:none;width:48px;z-index:2}.duet-date__toggle:focus{box-shadow:0 0 0 2px var(--duet-color-primary);outline:0}.duet-date__toggle-icon{display:flex;flex-basis:100%;justify-content:center;align-items:center}.duet-date__dialog{display:flex;left:0;min-width:320px;opacity:0;position:absolute;top:100%;transform:scale(0.96) translateZ(0) translateY(-20px);transform-origin:top right;transition:transform 300ms ease, opacity 300ms ease, visibility 300ms ease;visibility:hidden;width:100%;will-change:transform, opacity, visibility;z-index:var(--duet-z-index)}@media (max-width: 35.9375em){.duet-date__dialog{background:var(--duet-color-overlay);bottom:0;position:fixed;right:0;top:0;transform:translateZ(0);transform-origin:bottom center}}.duet-date__dialog.is-left{left:auto;right:0;width:auto}.duet-date__dialog.is-active{opacity:1;transform:scale(1.0001) translateZ(0) translateY(0);visibility:visible}.duet-date__dialog-content{background:var(--duet-color-surface);border:1px solid rgba(0, 0, 0, 0.1);border-radius:var(--duet-radius);box-shadow:0 4px 10px 0 rgba(0, 0, 0, 0.1);margin-left:auto;margin-top:8px;max-width:310px;min-width:290px;padding:16px 16px 20px;position:relative;transform:none;width:100%;z-index:var(--duet-z-index)}@media (max-width: 35.9375em){.duet-date__dialog-content{border:0;border-radius:0;border-top-left-radius:var(--duet-radius);border-top-right-radius:var(--duet-radius);bottom:0;left:0;margin:0;max-width:none;min-height:26em;opacity:0;padding:0 8% 20px;position:absolute;transform:translateZ(0) translateY(100%);transition:transform 400ms ease, opacity 400ms ease, visibility 400ms ease;visibility:hidden;will-change:transform, opacity, visibility}.is-active .duet-date__dialog-content{opacity:1;transform:translateZ(0) translateY(0);visibility:visible}}.duet-date__table{border-collapse:collapse;border-spacing:0;color:var(--duet-color-text);font-size:1rem;font-weight:var(--duet-font-normal);line-height:1.25;text-align:center;width:100%}.duet-date__table-header{font-size:0.75rem;font-weight:var(--duet-font-bold);letter-spacing:1px;line-height:1.25;padding-bottom:8px;text-decoration:none;text-transform:uppercase}.duet-date__cell{text-align:center}.duet-date__day{-moz-appearance:none;-webkit-appearance:none;appearance:none;background:transparent;border:0;border-radius:50%;color:var(--duet-color-text);cursor:pointer;display:inline-block;font-family:var(--duet-font);font-size:0.875rem;font-variant-numeric:tabular-nums;font-weight:var(--duet-font-normal);height:36px;line-height:1.25;padding:0 0 1px;position:relative;text-align:center;vertical-align:middle;width:36px;z-index:1}.duet-date__day.is-today{box-shadow:0 0 0 1px var(--duet-color-primary);position:relative;z-index:200}.duet-date__day:hover::before,.duet-date__day.is-today::before{background:var(--duet-color-primary);border-radius:50%;bottom:0;content:\"\";left:0;opacity:0.06;position:absolute;right:0;top:0}.duet-date__day[aria-pressed=true],.duet-date__day:focus{background:var(--duet-color-primary);box-shadow:none;color:var(--duet-color-text-active);outline:0}.duet-date__day:active{background:var(--duet-color-primary);box-shadow:0 0 5px var(--duet-color-primary);color:var(--duet-color-text-active);z-index:200}.duet-date__day:focus{box-shadow:0 0 5px var(--duet-color-primary);z-index:200}.duet-date__day.is-disabled{background:transparent;box-shadow:none;color:var(--duet-color-text);cursor:default;opacity:0.5}.duet-date__day.is-disabled::before{display:none}.duet-date__day.is-outside{background:var(--duet-color-button);box-shadow:none;color:var(--duet-color-text);cursor:default;opacity:0.6;pointer-events:none}.duet-date__day.is-outside::before{display:none}.duet-date__header{align-items:center;display:flex;justify-content:space-between;margin-bottom:16px;width:100%}.duet-date__nav{white-space:nowrap}.duet-date__prev,.duet-date__next{-moz-appearance:none;-webkit-appearance:none;align-items:center;appearance:none;background:var(--duet-color-button);border:0;border-radius:50%;color:var(--duet-color-text);cursor:pointer;display:inline-flex;height:32px;justify-content:center;margin-left:8px;padding:0;transition:background-color 300ms ease;width:32px}@media (max-width: 35.9375em){.duet-date__prev,.duet-date__next{height:40px;width:40px}}.duet-date__prev:focus,.duet-date__next:focus{box-shadow:0 0 0 2px var(--duet-color-primary);outline:0}.duet-date__prev:active:focus,.duet-date__next:active:focus{box-shadow:none}.duet-date__prev:disabled,.duet-date__next:disabled{cursor:default;opacity:0.5}.duet-date__prev svg,.duet-date__next svg{margin:0 auto}.duet-date__select{display:inline-flex;margin-top:4px;position:relative}.duet-date__select span{margin-right:4px}.duet-date__select select{cursor:pointer;font-size:1rem;height:100%;left:0;opacity:0;position:absolute;top:0;width:100%;z-index:2}.duet-date__select select:focus+.duet-date__select-label{box-shadow:0 0 0 2px var(--duet-color-primary)}.duet-date__select-label{align-items:center;border-radius:var(--duet-radius);color:var(--duet-color-text);display:flex;font-size:1.25rem;font-weight:var(--duet-font-bold);line-height:1.25;padding:0 4px 0 8px;pointer-events:none;position:relative;width:100%;z-index:1}.duet-date__select-label svg{width:16px;height:16px}.duet-date__mobile{align-items:center;border-bottom:1px solid rgba(0, 0, 0, 0.12);display:flex;justify-content:space-between;margin-bottom:20px;margin-left:-10%;overflow:hidden;padding:12px 20px;position:relative;text-overflow:ellipsis;white-space:nowrap;width:120%}@media (min-width: 36em){.duet-date__mobile{border:0;margin:0;overflow:visible;padding:0;position:absolute;right:-8px;top:-8px;width:auto}}.duet-date__mobile-heading{display:inline-block;font-weight:var(--duet-font-bold);max-width:84%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}@media (min-width: 36em){.duet-date__mobile-heading{display:none}}.duet-date__close{-webkit-appearance:none;align-items:center;appearance:none;background:var(--duet-color-button);border:0;border-radius:50%;color:var(--duet-color-text);cursor:pointer;display:flex;height:24px;justify-content:center;padding:0;width:24px}@media (min-width: 36em){.duet-date__close{opacity:0}}.duet-date__close:focus{box-shadow:0 0 0 2px var(--duet-color-primary);outline:none}@media (min-width: 36em){.duet-date__close:focus{opacity:1}}.duet-date__close svg{margin:0 auto}.duet-date__vhidden{border:0;clip:rect(1px, 1px, 1px, 1px);height:1px;overflow:hidden;padding:0;position:absolute;top:0;width:1px}";

function range(from, to) {
  var result = [];
  for (var i = from; i <= to; i++) {
    result.push(i);
  }
  return result;
}
const keyCode = {
  TAB: 9,
  ESC: 27,
  SPACE: 32,
  PAGE_UP: 33,
  PAGE_DOWN: 34,
  END: 35,
  HOME: 36,
  LEFT: 37,
  UP: 38,
  RIGHT: 39,
  DOWN: 40,
};
const DISALLOWED_CHARACTERS = /[^0-9\.\/\-]+/g;
const TRANSITION_MS = 300;
class DuetDatePicker {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.duetChange = createEvent$1(this, "duetChange", 7);
    this.duetBlur = createEvent$1(this, "duetBlur", 7);
    this.duetFocus = createEvent$1(this, "duetFocus", 7);
    /**
     * Own Properties
     */
    this.monthSelectId = createIdentifier("DuetDateMonth");
    this.yearSelectId = createIdentifier("DuetDateYear");
    this.dialogLabelId = createIdentifier("DuetDateLabel");
    this.initialTouchX = null;
    this.initialTouchY = null;
    /**
     * State() variables
     */
    this.activeFocus = false;
    this.focusedDay = new Date();
    this.open = false;
    /**
     * Public Property API
     */
    /**
     * Name of the date picker input.
     */
    this.name = "date";
    /**
     * Adds a unique identifier for the date picker input. Use this instead of html `id` attribute.
     */
    this.identifier = "";
    /**
     * Makes the date picker input component disabled. This prevents users from being able to
     * interact with the input, and conveys its inactive state to assistive technologies.
     */
    this.disabled = false;
    /**
     * Forces the opening direction of the calendar modal to be always left or right.
     * This setting can be useful when the input is smaller than the opening date picker
     * would be as by default the picker always opens towards right.
     */
    this.direction = "right";
    /**
     * Should the input be marked as required?
     */
    this.required = false;
    /**
     * Date value. Must be in IS0-8601 format: YYYY-MM-DD.
     */
    this.value = "";
    /**
     * Minimum date allowed to be picked. Must be in IS0-8601 format: YYYY-MM-DD.
     * This setting can be used alone or together with the max property.
     */
    this.min = "";
    /**
     * Maximum date allowed to be picked. Must be in IS0-8601 format: YYYY-MM-DD.
     * This setting can be used alone or together with the min property.
     */
    this.max = "";
    /**
     * Which day is considered first day of the week? `0` for Sunday, `1` for Monday, etc.
     * Default is Monday.
     */
    this.firstDayOfWeek = DaysOfWeek.Monday;
    /**
     * Button labels, day names, month names, etc, used for localization.
     * Default is English.
     */
    this.localization = localization;
    /**
     * Date adapter, for custom parsing/formatting.
     * Must be object with a `parse` function which accepts a `string` and returns a `Date`,
     * and a `format` function which accepts a `Date` and returns a `string`.
     * Default is IS0-8601 parsing and formatting.
     */
    this.dateAdapter = isoAdapter;
    /**
     * Local methods.
     */
    this.enableActiveFocus = () => {
      this.activeFocus = true;
    };
    this.disableActiveFocus = () => {
      this.activeFocus = false;
    };
    this.toggleOpen = (e) => {
      e.preventDefault();
      this.open ? this.hide(false) : this.show();
    };
    this.handleEscKey = (event) => {
      if (event.keyCode === keyCode.ESC) {
        this.hide();
      }
    };
    this.handleBlur = (event) => {
      event.stopPropagation();
      this.duetBlur.emit({
        component: "duet-date-picker",
      });
    };
    this.handleFocus = (event) => {
      event.stopPropagation();
      this.duetFocus.emit({
        component: "duet-date-picker",
      });
    };
    this.handleTouchStart = (event) => {
      const touch = event.changedTouches[0];
      this.initialTouchX = touch.pageX;
      this.initialTouchY = touch.pageY;
    };
    this.handleTouchMove = (event) => {
      event.preventDefault();
    };
    this.handleTouchEnd = (event) => {
      const touch = event.changedTouches[0];
      const distX = touch.pageX - this.initialTouchX; // get horizontal dist traveled
      const distY = touch.pageY - this.initialTouchY; // get vertical dist traveled
      const threshold = 70;
      const isHorizontalSwipe = Math.abs(distX) >= threshold && Math.abs(distY) <= threshold;
      const isDownwardsSwipe = Math.abs(distY) >= threshold && Math.abs(distX) <= threshold && distY > 0;
      if (isHorizontalSwipe) {
        this.addMonths(distX < 0 ? 1 : -1);
      }
      else if (isDownwardsSwipe) {
        this.hide(false);
        event.preventDefault();
      }
      this.initialTouchY = null;
      this.initialTouchX = null;
    };
    this.handleNextMonthClick = (event) => {
      event.preventDefault();
      this.addMonths(1);
    };
    this.handlePreviousMonthClick = (event) => {
      event.preventDefault();
      this.addMonths(-1);
    };
    this.handleFirstFocusableKeydown = (event) => {
      // this ensures focus is trapped inside the dialog
      if (event.keyCode === keyCode.TAB && event.shiftKey) {
        this.focusedDayNode.focus();
        event.preventDefault();
      }
    };
    this.handleKeyboardNavigation = (event) => {
      // handle tab separately, since it needs to be treated
      // differently to other keyboard interactions
      if (event.keyCode === keyCode.TAB && !event.shiftKey) {
        event.preventDefault();
        this.firstFocusableElement.focus();
        return;
      }
      var handled = true;
      switch (event.keyCode) {
        case keyCode.RIGHT:
          this.addDays(1);
          break;
        case keyCode.LEFT:
          this.addDays(-1);
          break;
        case keyCode.DOWN:
          this.addDays(7);
          break;
        case keyCode.UP:
          this.addDays(-7);
          break;
        case keyCode.PAGE_UP:
          if (event.shiftKey) {
            this.addYears(-1);
          }
          else {
            this.addMonths(-1);
          }
          break;
        case keyCode.PAGE_DOWN:
          if (event.shiftKey) {
            this.addYears(1);
          }
          else {
            this.addMonths(1);
          }
          break;
        case keyCode.HOME:
          this.startOfWeek();
          break;
        case keyCode.END:
          this.endOfWeek();
          break;
        default:
          handled = false;
      }
      if (handled) {
        event.preventDefault();
        this.enableActiveFocus();
      }
    };
    this.handleDaySelect = (_event, day) => {
      if (!inRange(day, parseISODate(this.min), parseISODate(this.max))) {
        return;
      }
      if (day.getMonth() === this.focusedDay.getMonth()) {
        this.setValue(day);
        this.hide();
      }
      else {
        this.setFocusedDay(day);
      }
    };
    this.handleMonthSelect = e => {
      this.setMonth(parseInt(e.target.value, 10));
    };
    this.handleYearSelect = e => {
      this.setYear(parseInt(e.target.value, 10));
    };
    this.handleInputChange = (e) => {
      const target = e.target;
      // clean up any invalid characters
      target.value = target.value.replace(DISALLOWED_CHARACTERS, "");
      const parsed = this.dateAdapter.parse(target.value, createDate);
      if (parsed || target.value === "") {
        this.setValue(parsed);
      }
    };
    this.processFocusedDayNode = (element) => {
      this.focusedDayNode = element;
      if (this.activeFocus && this.open) {
        setTimeout(() => element.focus(), 0);
      }
    };
  }
  connectedCallback() {
    this.createDateFormatters();
  }
  createDateFormatters() {
    this.dateFormatShort = new Intl.DateTimeFormat(this.localization.locale, { day: "numeric", month: "long" });
    this.dateFormatLong = new Intl.DateTimeFormat(this.localization.locale, {
      day: "numeric",
      month: "long",
      year: "numeric",
    });
  }
  /**
   * Component event handling.
   */
  handleDocumentClick(e) {
    if (!this.open) {
      return;
    }
    const target = e.target;
    // TODO: stopPropagation only on open??
    // the dialog and the button aren't considered clicks outside.
    // dialog for obvious reasons, but the button needs to be skipped
    // so that two things are possible:
    //
    // a) clicking again on the button when dialog is open should close the modal.
    //    without skipping the button here, we would see a click outside
    //    _and_ a click on the button, so the `open` state goes
    //    open -> close (click outside) -> open (click button)
    //
    // b) clicking another date picker's button should close the current calendar
    //    and open the new one. this means we can't stopPropagation() on the button itself
    //
    // this was the only satisfactory combination of things to get the above to work
    if (this.dialogWrapperNode.contains(target) || this.datePickerButton.contains(target)) {
      return;
    }
    this.hide(false);
  }
  /**
   * Public methods API
   */
  /**
   * Sets focus on the date picker's input. Use this method instead of the global `focus()`.
   */
  async setFocus() {
    return this.datePickerInput.focus();
  }
  /**
   * Show the calendar modal, moving focus to the calendar inside.
   */
  async show() {
    this.open = true;
    this.setFocusedDay(parseISODate(this.value) || new Date());
    clearTimeout(this.focusTimeoutId);
    this.focusTimeoutId = setTimeout(() => this.monthSelectNode.focus(), TRANSITION_MS);
  }
  /**
   * Hide the calendar modal. Set `moveFocusToButton` to false to prevent focus
   * returning to the date picker's button. Default is true.
   */
  async hide(moveFocusToButton = true) {
    this.open = false;
    // in cases where calendar is quickly shown and hidden
    // we should avoid moving focus to the button
    clearTimeout(this.focusTimeoutId);
    if (moveFocusToButton) {
      // iOS VoiceOver needs to wait for all transitions to finish.
      setTimeout(() => this.datePickerButton.focus(), TRANSITION_MS + 200);
    }
  }
  addDays(days) {
    this.setFocusedDay(addDays(this.focusedDay, days));
  }
  addMonths(months) {
    this.setMonth(this.focusedDay.getMonth() + months);
  }
  addYears(years) {
    this.setYear(this.focusedDay.getFullYear() + years);
  }
  startOfWeek() {
    this.setFocusedDay(startOfWeek(this.focusedDay, this.firstDayOfWeek));
  }
  endOfWeek() {
    this.setFocusedDay(endOfWeek(this.focusedDay, this.firstDayOfWeek));
  }
  setMonth(month) {
    const min = setMonth(startOfMonth(this.focusedDay), month);
    const max = endOfMonth(min);
    const date = setMonth(this.focusedDay, month);
    this.setFocusedDay(clamp(date, min, max));
  }
  setYear(year) {
    const min = setYear(startOfMonth(this.focusedDay), year);
    const max = endOfMonth(min);
    const date = setYear(this.focusedDay, year);
    this.setFocusedDay(clamp(date, min, max));
  }
  setFocusedDay(day) {
    this.focusedDay = clamp(day, parseISODate(this.min), parseISODate(this.max));
  }
  setValue(date) {
    this.value = printISODate(date);
    this.duetChange.emit({
      component: "duet-date-picker",
      value: this.value,
      valueAsDate: date,
    });
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    const valueAsDate = parseISODate(this.value);
    const formattedDate = valueAsDate && this.dateAdapter.format(valueAsDate);
    const selectedYear = (valueAsDate || this.focusedDay).getFullYear();
    const focusedMonth = this.focusedDay.getMonth();
    const focusedYear = this.focusedDay.getFullYear();
    const minDate = parseISODate(this.min);
    const maxDate = parseISODate(this.max);
    const prevMonthDisabled = minDate != null && minDate.getMonth() === focusedMonth && minDate.getFullYear() === focusedYear;
    const nextMonthDisabled = maxDate != null && maxDate.getMonth() === focusedMonth && maxDate.getFullYear() === focusedYear;
    const minYear = minDate ? minDate.getFullYear() : selectedYear - 10;
    const maxYear = maxDate ? maxDate.getFullYear() : selectedYear + 10;
    return (hAsync(Host$1, null, hAsync("div", { class: "duet-date" }, hAsync(DatePickerInput, { dateFormatter: this.dateFormatLong, value: this.value, valueAsDate: valueAsDate, formattedValue: formattedDate, onInput: this.handleInputChange, onBlur: this.handleBlur, onFocus: this.handleFocus, onClick: this.toggleOpen, name: this.name, disabled: this.disabled, role: this.role, required: this.required, identifier: this.identifier, localization: this.localization, buttonRef: element => (this.datePickerButton = element), inputRef: element => (this.datePickerInput = element) }), hAsync("div", { class: {
        "duet-date__dialog": true,
        "is-left": this.direction === "left",
        "is-active": this.open,
      }, role: "dialog", "aria-modal": "true", "aria-hidden": this.open ? "false" : "true", "aria-labelledby": this.dialogLabelId, onTouchMove: this.handleTouchMove, onTouchStart: this.handleTouchStart, onTouchEnd: this.handleTouchEnd }, hAsync("div", { class: "duet-date__dialog-content", onKeyDown: this.handleEscKey, ref: element => (this.dialogWrapperNode = element) }, hAsync("div", { class: "duet-date__vhidden duet-date__instructions", "aria-live": "polite" }, this.localization.keyboardInstruction), hAsync("div", { class: "duet-date__mobile", onFocusin: this.disableActiveFocus }, hAsync("label", { class: "duet-date__mobile-heading" }, this.localization.calendarHeading), hAsync("button", { class: "duet-date__close", ref: element => (this.firstFocusableElement = element), onKeyDown: this.handleFirstFocusableKeydown, onClick: () => this.hide(), type: "button" }, hAsync("svg", { "aria-hidden": "true", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 24 24" }, hAsync("path", { d: "M0 0h24v24H0V0z", fill: "none" }), hAsync("path", { d: "M18.3 5.71c-.39-.39-1.02-.39-1.41 0L12 10.59 7.11 5.7c-.39-.39-1.02-.39-1.41 0-.39.39-.39 1.02 0 1.41L10.59 12 5.7 16.89c-.39.39-.39 1.02 0 1.41.39.39 1.02.39 1.41 0L12 13.41l4.89 4.89c.39.39 1.02.39 1.41 0 .39-.39.39-1.02 0-1.41L13.41 12l4.89-4.89c.38-.38.38-1.02 0-1.4z" })), hAsync("span", { class: "duet-date__vhidden" }, this.localization.closeLabel))), hAsync("div", { class: "duet-date__header", onFocusin: this.disableActiveFocus }, hAsync("div", null, hAsync("h2", { id: this.dialogLabelId, class: "duet-date__vhidden", "aria-live": "polite", "aria-atomic": "true" }, this.localization.monthNames[focusedMonth], " ", this.focusedDay.getFullYear()), hAsync("label", { htmlFor: this.monthSelectId, class: "duet-date__vhidden" }, this.localization.monthSelectLabel), hAsync("div", { class: "duet-date__select" }, hAsync("select", { id: this.monthSelectId, class: "duet-date__select--month", ref: element => (this.monthSelectNode = element), onChange: this.handleMonthSelect }, this.localization.monthNames.map((month, i) => (hAsync("option", { key: month, value: i, selected: i === focusedMonth }, month)))), hAsync("div", { class: "duet-date__select-label", "aria-hidden": "true" }, hAsync("span", null, this.localization.monthNamesShort[focusedMonth]), hAsync("svg", { fill: "currentColor", xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 24 24" }, hAsync("path", { d: "M8.12 9.29L12 13.17l3.88-3.88c.39-.39 1.02-.39 1.41 0 .39.39.39 1.02 0 1.41l-4.59 4.59c-.39.39-1.02.39-1.41 0L6.7 10.7c-.39-.39-.39-1.02 0-1.41.39-.38 1.03-.39 1.42 0z" })))), hAsync("label", { htmlFor: this.yearSelectId, class: "duet-date__vhidden" }, this.localization.yearSelectLabel), hAsync("div", { class: "duet-date__select" }, hAsync("select", { id: this.yearSelectId, class: "duet-date__select--year", onChange: this.handleYearSelect }, range(minYear, maxYear).map(year => (hAsync("option", { key: year, selected: year === focusedYear }, year)))), hAsync("div", { class: "duet-date__select-label", "aria-hidden": "true" }, hAsync("span", null, this.focusedDay.getFullYear()), hAsync("svg", { fill: "currentColor", xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 24 24" }, hAsync("path", { d: "M8.12 9.29L12 13.17l3.88-3.88c.39-.39 1.02-.39 1.41 0 .39.39.39 1.02 0 1.41l-4.59 4.59c-.39.39-1.02.39-1.41 0L6.7 10.7c-.39-.39-.39-1.02 0-1.41.39-.38 1.03-.39 1.42 0z" }))))), hAsync("div", { class: "duet-date__nav" }, hAsync("button", { class: "duet-date__prev", onClick: this.handlePreviousMonthClick, disabled: prevMonthDisabled, type: "button" }, hAsync("svg", { "aria-hidden": "true", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg", width: "21", height: "21", viewBox: "0 0 24 24" }, hAsync("path", { d: "M14.71 15.88L10.83 12l3.88-3.88c.39-.39.39-1.02 0-1.41-.39-.39-1.02-.39-1.41 0L8.71 11.3c-.39.39-.39 1.02 0 1.41l4.59 4.59c.39.39 1.02.39 1.41 0 .38-.39.39-1.03 0-1.42z" })), hAsync("span", { class: "duet-date__vhidden" }, this.localization.prevMonthLabel)), hAsync("button", { class: "duet-date__next", onClick: this.handleNextMonthClick, disabled: nextMonthDisabled, type: "button" }, hAsync("svg", { "aria-hidden": "true", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg", width: "21", height: "21", viewBox: "0 0 24 24" }, hAsync("path", { d: "M9.29 15.88L13.17 12 9.29 8.12c-.39-.39-.39-1.02 0-1.41.39-.39 1.02-.39 1.41 0l4.59 4.59c.39.39.39 1.02 0 1.41L10.7 17.3c-.39.39-1.02.39-1.41 0-.38-.39-.39-1.03 0-1.42z" })), hAsync("span", { class: "duet-date__vhidden" }, this.localization.nextMonthLabel)))), hAsync(DatePickerMonth, { dateFormatter: this.dateFormatShort, selectedDate: valueAsDate, focusedDate: this.focusedDay, onDateSelect: this.handleDaySelect, onKeyboardNavigation: this.handleKeyboardNavigation, labelledById: this.dialogLabelId, localization: this.localization, firstDayOfWeek: this.firstDayOfWeek, focusedDayRef: this.processFocusedDayNode, min: minDate, max: maxDate }))))));
  }
  get element() { return getElement$1(this); }
  static get watchers() { return {
    "localization": ["createDateFormatters"]
  }; }
  static get style() { return duetDatePickerCss; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "duet-date-picker",
    "$members$": {
      "name": [1],
      "identifier": [1],
      "disabled": [516],
      "role": [1],
      "direction": [1],
      "required": [4],
      "value": [513],
      "min": [1],
      "max": [1],
      "firstDayOfWeek": [2, "first-day-of-week"],
      "localization": [16],
      "dateAdapter": [16],
      "activeFocus": [32],
      "focusedDay": [32],
      "open": [32],
      "setFocus": [64],
      "show": [64],
      "hide": [64]
    },
    "$listeners$": [[6, "click", "handleDocumentClick"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["disabled", "disabled"], ["value", "value"]]
  }; }
}

function createCssString(setProp) {
  const values = setProp.breakpointValues;
  if (!isBreakpointValuesEmpty(values)) {
    const filledArray = fillEmptyBreakpointValues(values);
    const valuesObj = transformBreakpointValuesData(filledArray);
    const stringSizesArray = Object.entries(valuesObj).map(([key, value]) => `--${setProp.propName}-${key}:${value}`);
    return stringSizesArray.join(';') + ';';
  }
}
function isBreakpointValuesEmpty(values) {
  let isEmpty = true;
  for (const value of values) {
    if (value.value) {
      isEmpty = false;
      break;
    }
  }
  return isEmpty;
}
function fillEmptyBreakpointValues(values) {
  const filledArray = [...values];
  for (let i = 1; i < filledArray.length; i++) {
    if (!filledArray[i].value) {
      filledArray[i].value = filledArray[i - 1].value;
    }
  }
  return filledArray;
}
function transformBreakpointValuesData(values) {
  return values.reduce((a, v) => (Object.assign(Object.assign({}, a), { [v.breakpointName]: v.value })), {});
}
function propsToBreakpointValuesArray(values) {
  return [
    { breakpointName: 'sm', value: values[0] },
    { breakpointName: 'md', value: values[1] },
    { breakpointName: 'lg', value: values[2] },
    { breakpointName: 'xl', value: values[3] },
    { breakpointName: 'xxl', value: values[4] },
  ];
}
function createBreakpointValuedProp(propName, values) {
  if (!propName || !values) {
    return;
  }
  return {
    propName,
    breakpointValues: propsToBreakpointValuesArray(values.split(',')),
  };
}

class Grid {
  constructor(hostRef) {
    registerInstance(this, hostRef);
  }
  componentWillLoad() {
    const sizedProps = [
      createBreakpointValuedProp('columns', this.columns),
      createBreakpointValuedProp('gutter-y', this.gutterY),
      createBreakpointValuedProp('gutter-x', this.gutterX),
      createBreakpointValuedProp('spacing', this.spacing),
    ].filter((sizeProp) => sizeProp);
    const sizableCssStrings = sizedProps.map((sizedProp) => createCssString(sizedProp));
    const maxWidthCssStirng = this.maxWidth
      ? `--max-width:${this.maxWidth};`
      : '';
    const styleString = sizableCssStrings.join('') + maxWidthCssStirng;
    this.hostElement.setAttribute('style', styleString);
  }
  render() {
    return (hAsync(Host$1, null, hAsync("slot", null)));
  }
  get hostElement() { return getElement$1(this); }
  static get cmpMeta() { return {
    "$flags$": 4,
    "$tagName$": "scale-grid",
    "$members$": {
      "columns": [1],
      "gutterY": [1, "gutter-y"],
      "gutterX": [1, "gutter-x"],
      "spacing": [1],
      "maxWidth": [1, "max-width"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

class GridItem {
  constructor(hostRef) {
    registerInstance(this, hostRef);
  }
  componentWillLoad() {
    const setProps = [
      createBreakpointValuedProp('size', this.size),
      createBreakpointValuedProp('offset', this.offset),
    ].filter((setProp) => setProp);
    const cssStrings = setProps.map((setProp) => createCssString(setProp));
    this.hostElement.setAttribute('style', cssStrings.join(''));
  }
  render() {
    return (hAsync(Host$1, null, hAsync("slot", null)));
  }
  get hostElement() { return getElement$1(this); }
  static get cmpMeta() { return {
    "$flags$": 4,
    "$tagName$": "scale-grid-item",
    "$members$": {
      "size": [1],
      "offset": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
const findSelected = (structure = [], id, parent) => structure.reduce((acc, item) => {
  if (item.id === id) {
    return { selected: item, parent };
  }
  if (item.children &&
    item.children.length &&
    !!findSelected(item.children, id, item).selected) {
    return findSelected(item.children, id, item);
  }
  return acc;
}, { selected: null, parent: null });
const findRootNode = (structure, id) => {
  let result = findSelected(structure, id);
  while (result.parent) {
    result = findSelected(structure, result.parent.id);
  }
  return result.selected;
};

const appHeaderCss = "scale-app-header{--header-nav-height:var(--telekom-spacing-composition-space-16);--header-brand-height:var(--telekom-spacing-composition-space-18);--header-border-radius:var(--telekom-radius-large);--header-transition-speed:var(--telekom-motion-duration-transition);--header-brand-collapsed-height:var(--telekom-spacing-composition-space-03);--header-max-width:inherit;--background:var(--telekom-color-primary-standard);--font-weight:var(--telekom-typography-font-weight-regular);--border:1px solid var(--telekom-color-ui-faint);--color-brand:var(--telekom-color-text-and-icon-inverted-standard);--background-brand:var(--telekom-color-primary-standard);--color-nav:var(--telekom-color-text-and-icon-standard);--background-nav:var(--telekom-color-background-canvas);--background-nav-sticky:var(--telekom-color-background-surface);--background-header-sticky:var(--telekom-color-background-canvas);--spacing-nav:0 var(--telekom-spacing-composition-space-06)}@keyframes keyframes-slideUp{from{top:0}to{top:-56px}}.header__container{background:var(--background-header-sticky);width:100%;height:128px}.header__user-menu--desktop{display:block}.header__user-menu--mobile{display:none}@media (max-width: 1039px){.header__container{width:100%;height:66px}.header__user-menu--desktop{display:none}.header__user-menu--mobile{display:block}}.header{width:100%;z-index:99;position:fixed;background:var(--background);font-weight:var(--font-weight)}.header .header__brand{color:var(--color-brand);background:var(--background-brand);display:flex;align-items:center}.header .header__nav{box-sizing:border-box;color:var(--color-nav);background:var(--background-nav);display:flex;align-items:center;border-top-left-radius:var(--header-border-radius);border-top-right-radius:var(--header-border-radius);border-bottom:1px solid transparent}.header__nav,.header.header--sticky .header__nav{border-bottom:var(--border);background:var(--background-nav-sticky)}.header .header__nav-content{width:100%;display:flex;align-items:center}.header .header__nav-menu-wrapper{width:100%;display:flex;align-items:center;justify-content:space-between}.header.header--sticky .header__nav-before,.header.header--sticky .header__nav-after{width:var(--header-border-radius);bottom:calc(-2 * var(--header-border-radius));height:calc(2 * var(--header-border-radius));position:absolute;border-top:var(--border);box-shadow:0 calc(-1 * var(--header-border-radius)) 0 0\n    var(--telekom-color-background-surface);background-color:transparent}.header.header--sticky.menu--open .header__nav-before,.header.header--sticky .header__nav-before{left:-1px;z-index:97;border-left:var(--border);border-top-left-radius:var(--header-border-radius)}.header.header--sticky.menu--open .header__nav-after,.header.header--sticky .header__nav-after{right:-1px;z-index:98;border-right:var(--border);border-top-right-radius:var(--header-border-radius)}.header *[slot='menu-icon'],.header .meta-navigation{display:flex;padding:0;list-style:none;align-items:center;margin-block-start:0;margin-block-end:0}@media (max-width: 1039px){.header{height:var(--header-nav-height)}.header.menu--open .header__nav-before,.header.header--sticky .header__nav-before,.header.header--sticky .header__nav-after,.header.menu--open .header__nav-after{top:51px}.header .sector-navigation,.header .addon-navigation,.header *[slot='menu-main'],.header .main-navigation{display:none !important}.header .header__brand{width:100%;height:var(--header-nav-height);display:flex;padding:var(--spacing-nav);z-index:96;position:absolute;transition:height var(--header-transition-speed) ease-in-out;align-items:center;animation-name:keyframes-slideUp;animation-delay:0.5s;justify-content:space-between;animation-duration:0.75s;animation-fill-mode:forwards;animation-timing-function:cubic-bezier(0.42, 0, 0.1, 1)}.header .header__nav{top:4px;width:100%;height:calc(var(--header-nav-height) - 4px);padding:var(--spacing-nav);z-index:95;position:absolute}.header.menu--open .header__nav{background-color:var(--telekom-color-background-surface)}.header .header__nav__mobile-menu{top:var(--header-nav-height);width:100%;display:none;position:relative}.header .header__nav__mobile-menu--opened{height:calc(100vh - var(--header-nav-height));display:block;overflow-y:auto;background:var(--telekom-color-background-surface)}.header .header__brand .header__brand-before,.header .header__brand .header__brand-after{width:var(--header-border-radius);bottom:calc(-2 * var(--header-border-radius));height:calc(2 * var(--header-border-radius));position:absolute;border-top:transparent;box-shadow:0 calc(-1 * var(--header-border-radius)) 0 0\n      var(--telekom-color-primary-standard);background-color:transparent}.header .header__brand .header__brand-before{left:-1px;z-index:97;border-left:transparent;border-top-left-radius:var(--header-border-radius)}.header .header__brand .header__brand-after{right:-1px;z-index:98;border-right:transparent;border-top-right-radius:var(--header-border-radius)}.header .header__brand .logo svg{width:auto;height:26px}}.header .header__nav .header__nav-logo svg path{fill:var(--telekom-color-text-and-icon-primary-standard) !important}@media (min-width: 1040px){.header .header__nav-before{top:55px}.header .header__nav-after{top:55px}.header .mobile-menu,.header .header__nav__mobile-menu{display:none}.header .header__brand{height:var(--header-brand-height);padding:0 var(--telekom-spacing-composition-space-08);transition:height var(--header-transition-speed) ease-in-out;justify-content:space-between}.header .header__brand-content{top:0;width:100%;display:flex;opacity:1;position:relative;transition:opacity var(--header-transition-speed) ease-in-out,\n      top var(--header-transition-speed) ease-in-out;align-items:center}.header .header__nav{height:var(--header-nav-height);padding:0 var(--telekom-spacing-composition-space-08);position:relative}.header .header__nav-logo{width:50px;opacity:0;transition:none;font-weight:var(--telekom-typography-font-weight-bold);margin-right:var(--telekom-spacing-composition-space-06);pointer-events:none}.header.header--sticky .header__nav-logo{pointer-events:all;margin-right:var(--telekom-spacing-composition-space-10)}.header scale-nav-main:first-child li{margin-left:0}.header *[slot='menu-main'],.header .main-navigation{height:var(--header-nav-height);margin:0;display:flex;padding:0;list-style:none;transition:margin-left var(--header-transition-speed) ease-in-out;align-items:center;margin-left:calc(-50px - var(--telekom-spacing-composition-space-06))}.header *[slot='menu-sector'],.header *[slot='menu-addon'],.header .sector-navigation{display:flex;padding:0}.header .addon-navigation{display:flex;list-style:none}.header .sector-navigation .segment-navigation__item-link{margin:0 7px}.header .addon-navigation .segment-navigation__item-link{margin:0 0 0 14px}.header.header--sticky{--header-brand-height:4px}.header.header--sticky .header__nav-logo{opacity:1;transition:opacity var(--header-transition-speed) ease-in-out}.header.header--sticky .header__brand-content{opacity:0;transition:opacity var(--header-transition-speed) ease-in-out,\n      top var(--header-transition-speed) ease-in-out}.header *[slot='menu-main'],.header.header--sticky .main-navigation{transition:margin-left var(--header-transition-speed) ease-in-out;margin-left:0}.header .sector-navigation .sector-navigation__portal-name{font-weight:var(--telekom-typography-font-weight-extra-bold);font-size:var(--telekom-typography-font-size-callout);list-style-type:none}.header *[slot='menu-main'],scale-nav-main{height:100%}.header *[slot='logo'],.header .header__brand-content .header__brand-branding{width:100%;display:flex;align-items:center;justify-content:flex-start}.header .header__brand-content .header__brand-sector{width:100%;display:flex;align-items:center;justify-content:center}.header .header__brand-content .header__brand-meta{width:100%;display:flex;align-items:center;justify-content:flex-end}}@media (min-width: 1552px){.header .header__nav-content,.header .header__brand-content{margin:0 auto;max-width:var(--header-max-width)}}";

const readData$3 = (data) => {
  let parsedData;
  try {
    parsedData = JSON.parse(data);
  }
  catch (error) {
    parsedData = data;
  }
  return parsedData;
};
class Header {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.portalName = '';
    this.mainNavigation = [];
    this.iconNavigation = [];
    this.userNavigation = [];
    this.sectorNavigation = [];
    this.addonNavigation = [];
    this.sticky = false;
    // DEPRECATED - megaMenuVisible should replace isMegaMenuVisible
    this.isMegaMenuVisible = false;
    this.megaMenuVisible = false;
    // DEPRECATED - mobileMenuVisible should replace isMobileMenuVisible
    this.isMobileMenuVisible = false;
    this.mobileMenuVisible = false;
    this.activeSegment = readData$3(this.sectorNavigation).find(({ id }) => id === this.activeSectorId) || readData$3(this.sectorNavigation)[0];
    this.mobileMenu = false;
    this.userMenu = false;
    this.userMenuMobile = false;
    this.visibleMegaMenu = '';
    this.scrolled = false;
  }
  megaMenuVisibleChange(isVisible) {
    this.visibleMegaMenu = isVisible;
  }
  // DEPRECATED - megaMenuVisible should replace isMegaMenuVisible
  isMegaMenuVisibleChange(isVisible) {
    this.visibleMegaMenu = isVisible;
  }
  onScroll() {
    this.scrolled = window.pageYOffset > 2;
  }
  handleCloseMenu() {
    if (this.mobileMenu) {
      this.mobileMenuToggle.focus();
    }
    this.mobileMenu = false;
  }
  handleCloseUserMenu() {
    if (this.userMenuToggle) {
      this.userMenuToggle.focus();
    }
    this.userMenu = false;
  }
  handleOpenUserMenu() {
    this.userMenu = true;
  }
  handleActiveSegment(newValue) {
    this.activeSegment =
      readData$3(this.sectorNavigation).find(({ id }) => id === newValue) || {};
  }
  componentWillLoad() {
    this.hasSlotMenuMain =
      !!this.hostElement.querySelector('[slot="menu-main"]');
    this.hasSlotMenuIcon =
      !!this.hostElement.querySelector('[slot="menu-icon"]');
    this.hasSlotMenuSector = !!this.hostElement.querySelector('[slot="menu-sector"]');
    this.hasSlotMenuAddon = !!this.hostElement.querySelector('[slot="menu-addon"]');
    this.hasSlotMenuMobile = !!this.hostElement.querySelector('[slot="menu-mobile"]');
    this.hasSlotLogo = !!this.hostElement.querySelector('[slot="logo"]');
    this.hasSlotLogoInverse = !!this.hostElement.querySelector('[slot="logo-inverse"]');
  }
  componentDidUpdate() {
    this.hasSlotMenuMain =
      !!this.hostElement.querySelector('[slot="menu-main"]');
    this.hasSlotMenuIcon =
      !!this.hostElement.querySelector('[slot="menu-icon"]');
    this.hasSlotMenuSector = !!this.hostElement.querySelector('[slot="menu-sector"]');
    this.hasSlotMenuAddon = !!this.hostElement.querySelector('[slot="menu-addon"]');
    this.hasSlotMenuMobile = !!this.hostElement.querySelector('[slot="menu-mobile"]');
    this.hasSlotLogo = !!this.hostElement.querySelector('[slot="logo"]');
    this.hasSlotLogoInverse = !!this.hostElement.querySelector('[slot="logo-inverse"]');
  }
  componentWillRender() {
    // make sure the deprecated props overwrite the actual ones if used
    // and show status note deprecated
    if (this.isMegaMenuVisible !== false) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "isMegaMenuVisible" is deprecated. Please use the "megaMenuVisible" property!',
        type: 'warn',
        source: this.hostElement,
      });
    }
    if (this.isMobileMenuVisible !== false) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "isMobileMenuVisible" is deprecated. Please use the "mobileMenuVisible" property!',
        type: 'warn',
        source: this.hostElement,
      });
    }
  }
  handleMobileMenu(event) {
    if (event) {
      event.preventDefault();
    }
    if (event && 'key' in event) {
      if (!['Escape', 'Enter'].includes(event.key)) {
        return;
      }
      if (event.key === 'Escape' && !this.mobileMenu) {
        return;
      }
      if (event.key === 'Enter' && this.mobileMenu) {
        return;
      }
    }
    this.userMenuMobile = false;
    this.mobileMenu = !this.mobileMenu;
  }
  handleSelectedSegment(event, item) {
    this.activeSegment = item;
    if (typeof item.onClick === 'function') {
      item.onClick(event);
    }
  }
  menuMain() {
    const rootNode = findRootNode(readData$3(this.mainNavigation), this.activeRouteId);
    const isActive = (item) => rootNode && rootNode.id === item.id;
    return (hAsync("ul", { class: "main-navigation", onKeyDown: (e) => {
        if (e.key === 'Escape') {
          this.visibleMegaMenu = '';
        }
      } }, this.hasSlotMenuMain ? (hAsync("slot", { name: "menu-main" })) : (readData$3(this.mainNavigation).map((item) => (hAsync("scale-nav-main", { href: item.href, active: isActive(item), megaMenuVisible: this.visibleMegaMenu === item.id, innerId: item.id, onMouseEnter: () => {
        this.visibleMegaMenu = item.children ? item.id : null;
      }, onMouseLeave: () => {
        this.visibleMegaMenu = '';
      }, clickLink: (event) => {
        if (item.href) {
          this.visibleMegaMenu = '';
        }
        if (typeof item.onClick === 'function') {
          item.onClick(event);
        }
        this.visibleMegaMenu = item.children ? item.id : null;
      }, name: item.name }, item.children && item.children.length > 0 && (hAsync("app-mega-menu", { navigation: item.children, hide: () => {
        this.visibleMegaMenu = '';
      }, activeRouteId: this.activeRouteId, active: this.visibleMegaMenu === item.id }))))))));
  }
  menuIcon() {
    const { defaultName, openedName } = readData$3(this.iconNavigation).find(({ id }) => id === 'menu') || { defaultName: 'Menu', openedName: 'Close' };
    const { shortName = 'Login', badge, badgeLabel, } = readData$3(this.userNavigation).find(({ type }) => type === 'userInfo') || {
      shortName: 'Login',
    };
    return (hAsync("ul", { class: "meta-navigation" }, this.hasSlotMenuIcon ? (hAsync("slot", { name: "menu-icon" })) : (readData$3(this.iconNavigation)
      .filter(({ id }) => id !== 'menu')
      .map((item) => (hAsync("scale-nav-icon", { icon: item.icon, href: item.href, badge: item.badge, badgeLabel: item.badgeLabel, clickLink: (event) => {
        if (typeof item.onClick === 'function') {
          item.onClick(event);
        }
      } }, item.name)))), readData$3(this.userNavigation).length > 0 && (hAsync("span", null, hAsync("span", { class: "header__user-menu--desktop", "aria-label": this.userMenuAriaLabel }, hAsync("scale-menu-flyout", null, hAsync("scale-nav-icon", { slot: "trigger", active: this.userMenu, icon: 'user-file-user', refUserMenuToggle: (el) => (this.userMenuToggle = el), badge: badge, badgeLabel: badgeLabel, onKeyDown: (event) => {
        // Handle Spacebar separately because actual trigger is an <a>
        if (event.key === ' ') {
          event.target.click();
          event.preventDefault();
        }
      } }, shortName), hAsync("scale-menu-flyout-list", null, hAsync("app-navigation-user-menu", { hide: () => {
        if (!this.userMenu) {
          return;
        }
        this.userMenu = false;
        this.userMenuToggle.focus();
        window.document.dispatchEvent(new Event('click'));
      }, navigation: readData$3(this.userNavigation) })))), hAsync("span", { class: "header__user-menu--mobile", "aria-label": this.userMenuAriaLabel }, hAsync("scale-nav-icon", { slot: "trigger", active: this.userMenuMobile, icon: 'user-file-user', refMobileUserMenuToggle: (el) => (this.userMenuMobileToggle = el), clickLink: () => {
        this.mobileMenu = false;
        this.userMenuMobile = !this.userMenuMobile;
      }, badge: badge, badgeLabel: badgeLabel, onKeyDown: (event) => {
        // Handle Spacebar separately because actual trigger is an <a>
        if (event.key === ' ') {
          event.target.click();
          event.preventDefault();
        }
      } }, shortName)))), (readData$3(this.mainNavigation).length > 0 ||
      this.hasSlotMenuMobile) && (hAsync("scale-nav-icon", { mobileMenuOpen: this.mobileMenu, icon: this.mobileMenu ? 'action-circle-close' : 'action-menu', clickLink: (event) => this.handleMobileMenu(event), refMobileMenuToggle: (el) => (this.mobileMenuToggle = el), active: this.mobileMenu }, this.mobileMenu ? openedName : defaultName))));
  }
  menuSector() {
    return (hAsync("ul", { class: "sector-navigation" }, this.hasSlotMenuSector ? (hAsync("slot", { name: "menu-sector" })) : this.portalName ? (hAsync("li", { class: "sector-navigation__portal-name" }, this.portalName)) : (readData$3(this.sectorNavigation).map((item) => (hAsync("scale-nav-segment", { active: this.activeSegment.id === item.id, href: item.href, onClick: (event) => this.handleSelectedSegment(event, item), onFocus: () => {
        window.scrollTo({ top: 0 });
      } }, item.name))))));
  }
  menuAddon() {
    return (hAsync("ul", { class: "addon-navigation" }, this.hasSlotMenuAddon ? (hAsync("slot", { name: "menu-addon" })) : (readData$3(this.addonNavigation).map((item) => (hAsync("scale-nav-segment", { href: item.href, onClick: (event) => {
        if (typeof item.onClick === 'function') {
          item.onClick(event);
        }
      }, onFocus: () => {
        window.scrollTo({ top: 0 });
      } }, item.name))))));
  }
  render() {
    return (hAsync(Host$1, null, hAsync("header", { class: "header__container" }, hAsync("div", { class: this.getCssClassMap() }, hAsync("div", { class: "header__brand" }, hAsync("span", { class: "header__brand-before" }), hAsync("span", { class: "header__brand-after" }), hAsync("div", { class: "header__brand-content" }, hAsync("div", { class: "header__brand-branding" }, this.hasSlotLogo ? (hAsync("slot", { name: "logo" })) : (hAsync("scale-logo", { transparent: true, href: this.logoHref, logoTitle: this.logoTitle, logoHideTitle: this.logoHideTitle, onClick: this.logoClick, variant: "white", scrollIntoViewOnFocus: true, focusable: true, styles: ":host { --logo-size: 36px;} @media (max-width: 1039px) { :host {--logo-size: 26px;} }", logoAriaDescribedBy: this.logoAriaDescribedBy, logoAriaHidden: this.scrolled }))), hAsync("div", { class: "header__brand-sector" }, this.menuSector()), hAsync("div", { class: "header__brand-meta" }, this.menuAddon()))), hAsync("nav", { class: "header__nav", "aria-label": "top" }, hAsync("span", { class: "header__nav-before" }), hAsync("span", { class: "header__nav-after" }), hAsync("div", { class: "header__nav-content" }, hAsync("div", { class: "header__nav-logo" }, this.hasSlotLogoInverse ? (hAsync("slot", { name: "logo-inverse" })) : (hAsync("scale-logo", { transparent: true, language: "", href: this.logoHref, logoTitle: this.logoTitle, logoHideTitle: this.logoHideTitle, onClick: this.logoClick, focusable: this.scrolled || this.sticky, size: 24, logoAriaDescribedBy: this.logoAriaDescribedBy, logoAriaHidden: !this.scrolled }))), hAsync("div", { class: "header__nav-menu-wrapper" }, hAsync("div", { class: "header__nav-menu-main" }, this.menuMain()), hAsync("div", { class: "header__nav-menu-icon" }, this.menuIcon())))), hAsync("nav", { class: `header__nav__mobile-menu${this.mobileMenu ? ' header__nav__mobile-menu--opened' : ''}`, "aria-label": "main" }, this.hasSlotMenuMobile ? (hAsync("slot", { name: "menu-mobile" })) : (hAsync("div", null, hAsync("app-navigation-sector-mobile", { navigation: readData$3(this.sectorNavigation), activeSectorId: this.activeSectorId, hide: () => {
        this.handleMobileMenu();
        this.mobileMenuToggle.focus();
      } }), hAsync("app-navigation-main-mobile", { navigation: readData$3(this.mainNavigation), activeRouteId: this.activeRouteId, hide: () => {
        this.handleMobileMenu();
        this.mobileMenuToggle.focus();
      } })))), hAsync("nav", { class: `header__nav__mobile-menu${this.userMenuMobile ? ' header__nav__mobile-menu--opened' : ''}`, "aria-label": "main" }, hAsync("div", null, this.userMenuMobile && (hAsync("app-navigation-user-menu", { hide: () => {
        if (!this.userMenuMobile) {
          return;
        }
        this.userMenuMobile = false;
        this.userMenuMobileToggle.focus();
      }, navigation: readData$3(this.userNavigation) }))))))));
  }
  getCssClassMap() {
    return classnames('header', (this.scrolled || this.sticky) && 'header--sticky', (this.visibleMegaMenu || this.mobileMenu || this.userMenuMobile) &&
      'menu--open');
  }
  get hostElement() { return getElement$1(this); }
  static get watchers() { return {
    "megaMenuVisible": ["megaMenuVisibleChange"],
    "isMegaMenuVisible": ["isMegaMenuVisibleChange"],
    "activeSectorId": ["handleActiveSegment"]
  }; }
  static get style() { return appHeaderCss; }
  static get cmpMeta() { return {
    "$flags$": 4,
    "$tagName$": "scale-app-header",
    "$members$": {
      "logoHref": [1, "logo-href"],
      "logoTitle": [1, "logo-title"],
      "logoHideTitle": [4, "logo-hide-title"],
      "logoClick": [8, "logo-click"],
      "logoAriaDescribedBy": [1, "logo-aria-described-by"],
      "claimLang": [1, "claim-lang"],
      "portalName": [1, "portal-name"],
      "mainNavigation": [8, "main-navigation"],
      "iconNavigation": [8, "icon-navigation"],
      "userNavigation": [8, "user-navigation"],
      "sectorNavigation": [8, "sector-navigation"],
      "addonNavigation": [8, "addon-navigation"],
      "activeRouteId": [1, "active-route-id"],
      "activeSectorId": [1, "active-sector-id"],
      "sticky": [4],
      "userMenuAriaLabel": [1, "user-menu-aria-label"],
      "isMegaMenuVisible": [4, "is-mega-menu-visible"],
      "megaMenuVisible": [4, "mega-menu-visible"],
      "isMobileMenuVisible": [4, "is-mobile-menu-visible"],
      "mobileMenuVisible": [4, "mobile-menu-visible"],
      "activeSegment": [32],
      "mobileMenu": [32],
      "userMenu": [32],
      "userMenuMobile": [32],
      "visibleMegaMenu": [32],
      "scrolled": [32]
    },
    "$listeners$": [[9, "scroll", "onScroll"], [0, "closeMenu", "handleCloseMenu"], [0, "scale-close", "handleCloseUserMenu"], [0, "scale-open", "handleOpenUserMenu"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const helperTextCss = "/*!@:host*/.sc-scale-helper-text-h{--color-informational:var(\n    --telekom-color-text-and-icon-functional-informational\n  );--color-warning:var(--telekom-color-text-and-icon-functional-warning);--color-danger:var(--telekom-color-text-and-icon-functional-danger);--color-success:var(--telekom-color-text-and-icon-functional-success);--color-neutral:var(--telekom-color-text-and-icon-additional);--font-size:0.75rem;--font-weight:700;--line-height:1.35;--icon-size-helper-text:11px}/*!@.helper-text*/.helper-text.sc-scale-helper-text{display:flex;align-items:flex-start;flex-direction:row-reverse;justify-content:flex-end;font-size:var(--font-size);font-weight:var(--font-weight);line-height:var(--line-height)}/*!@[part='text']*/[part='text'].sc-scale-helper-text{text-align:left}/*!@scale-icon-alert-information,\nscale-icon-alert-error,\nscale-icon-action-success*/scale-icon-alert-information.sc-scale-helper-text,scale-icon-alert-error.sc-scale-helper-text,scale-icon-action-success.sc-scale-helper-text{display:flex;justify-content:center;align-items:center;margin-right:var(--telekom-spacing-composition-space-03);margin-top:0.1666em}/*!@.scale-icon*/.scale-icon.sc-scale-helper-text{height:var(--icon-size-helper-text);width:var(--icon-size-helper-text)}/*!@.helper-text--informational*/.helper-text--informational.sc-scale-helper-text{color:var(--color-informational)}/*!@.helper-text--warning*/.helper-text--warning.sc-scale-helper-text{color:var(--color-warning)}/*!@.helper-text--danger*/.helper-text--danger.sc-scale-helper-text{color:var(--color-danger)}/*!@.helper-text--success*/.helper-text--success.sc-scale-helper-text{color:var(--color-success)}/*!@.helper-text--neutral*/.helper-text--neutral.sc-scale-helper-text{color:var(--color-neutral)}";

/**
 * This is a superset of the default anchor `<a>` element.
 * @part anchor - the native achor element wrapping all contents
 * @part content - a wrapper around the default slot with the underline
 *
 * @slot default - here goes the actual text of the
 * @slot icon - a slot that will not be underlined and which position can be changed
 */
class HelperText {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) Injected CSS styles */
    this.variant = 'informational';
  }
  renderHelperIcon() {
    const variant = this.variant;
    if (variant === 'informational' || variant === 'warning') {
      return hAsync("scale-icon-alert-information", null);
    }
    if (variant === 'danger') {
      return hAsync("scale-icon-alert-error", null);
    }
    if (variant === 'success') {
      return hAsync("scale-icon-action-success", null);
    }
  }
  render() {
    return (hAsync(Host$1, null, hAsync("div", { class: {
        'helper-text': true,
        'helper-text--informational': this.variant === 'informational',
        'helper-text--warning': this.variant === 'warning',
        'helper-text--danger': this.variant === 'danger',
        'helper-text--success': this.variant === 'success',
        'helper-text--neutral': this.variant === 'neutral',
      }, part: "base" }, this.helperText ? (hAsync("span", { part: "text" }, this.helperText)) : (hAsync("span", { part: "text" }, hAsync("slot", null))), this.renderHelperIcon()), this.styles && hAsync("style", null, this.styles)));
  }
  static get style() { return helperTextCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-helper-text",
    "$members$": {
      "helperText": [1, "helper-text"],
      "styles": [1],
      "variant": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const iconCss$1E = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class HomeHome {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 .85L.45 12.45 1.5 13.5 12 3l10.5 10.5 1.05-1.05L12 .85zM3.5 13.6V19l.005.176A3.01 3.01 0 006.5 22h4.75v-5.25c0-.4.35-.75.75-.75.367 0 .691.294.743.651l.007.099V22h4.75l.176-.005A3.01 3.01 0 0020.5 19v-5.4L12 5.1l-8.5 8.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M19 12.1l1.5 1.5V19a3.01 3.01 0 01-2.824 2.995L17.5 22h-11a3.01 3.01 0 01-2.995-2.824L3.5 19v-5.4L5 12.1V19c0 .8.576 1.423 1.352 1.493l.148.007h4.75v-3.75c0-.4.35-.75.75-.75.367 0 .691.294.743.651l.007.099v3.75h4.75c.8 0 1.423-.576 1.493-1.352L19 19v-6.9zM12 .85l11.55 11.6-1.05 1.05L12 3 1.5 13.5.45 12.45 12 .85z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1E; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-home-home",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1D = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class HomeInternetAtHome {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M20.5 19a3.01 3.01 0 01-2.824 2.995L17.5 22h-11a3.01 3.01 0 01-2.995-2.824L3.5 19v-5.4L12 5.065l8.5 8.535V19zM12 15.75a.9.9 0 110 1.8.9.9 0 010-1.8zm-.05-2.65c1.228 0 2.322.624 2.945 1.578l.105.172-1 .9c-.3-.75-1.1-1.3-2.1-1.35-.84 0-1.55.48-1.925 1.193l-.075.157-1-.9c.6-1.05 1.75-1.75 3.05-1.75zm.05-2.6c2.012 0 3.795.964 4.909 2.453l.141.197-1 .85c-.85-1.3-2.35-2.2-4.05-2.2-1.619 0-3.057.771-3.924 2.01L7.95 14l-1-.85c1.1-1.6 2.95-2.65 5.05-2.65zm0-9.65l11.55 11.6-1.05 1.05L12 3 1.5 13.5.45 12.45 12 .85z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M19 12.1l1.5 1.5V19a3.01 3.01 0 01-2.824 2.995L17.5 22h-11a3.01 3.01 0 01-2.995-2.824L3.5 19v-5.4L5 12.1V19c0 .8.576 1.423 1.352 1.493l.148.007h11c.8 0 1.423-.576 1.493-1.352L19 19v-6.9zm-7 3.65a.9.9 0 110 1.8.9.9 0 010-1.8zm-.05-2.65c1.228 0 2.322.624 2.945 1.578l.105.172-1 .9c-.3-.75-1.1-1.3-2.1-1.35-.84 0-1.55.48-1.925 1.193l-.075.157-1-.9c.6-1.05 1.75-1.75 3.05-1.75zm.05-2.6c2.012 0 3.795.964 4.909 2.453l.141.197-1 .85c-.85-1.3-2.35-2.2-4.05-2.2-1.619 0-3.057.771-3.924 2.01L7.95 14l-1-.85c1.1-1.6 2.95-2.65 5.05-2.65zm0-9.65l11.55 11.6-1.05 1.05L12 3 1.5 13.5.45 12.45 12 .85z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1D; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-home-internet-at-home",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1C = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class HomeIot {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M15.25 10.5c.85 0 1.5.65 1.5 1.5 0 .825-.678 1.499-1.511 1.499l-.126-.005-.127-.016-.136-.028-3.6 3.6v3.15c.45.25.75.75.75 1.3 0 .85-.65 1.5-1.5 1.5S9 22.35 9 21.5c0-.45.2-.867.52-1.14l.11-.086.12-.074v-3.75l4.05-4.05c-.25-1 .5-1.9 1.45-1.9zm-.497-6.499A7.59 7.59 0 0120.1 10.4c2.1.45 3.65 2.3 3.65 4.55a4.587 4.587 0 01-4.174 4.58l-.215.015-.211.005h-6.411v-1.883l2.685-2.684A2.998 2.998 0 0018.24 12a2.958 2.958 0 00-3.332-2.968l-.168.025.01-5.051a.022.022 0 00.003-.005zM10.25 4l.01 3.083-3.964 3.964-.075-.001c-.786 0-1.525.305-2.082.858a2.998 2.998 0 00-.879 2.146 2.958 2.958 0 002.99 2.99c.667 0 1.314-.227 1.84-.636l.17-.143-.01 3.239h-2.4c-3.1 0-5.6-2.5-5.6-5.6 0-3 2.35-5.45 5.25-5.65a7.698 7.698 0 014.21-4.06l.268-.1.272-.09zM12.5.5c.85 0 1.5.65 1.5 1.5 0 .44-.192.848-.5 1.173l-.12.118-.13.109v5l-5.5 5.5c.1.9-.65 1.65-1.5 1.65s-1.5-.65-1.5-1.5c0-.887.682-1.514 1.47-1.514.1 0 .2.01.302.031l.153.039.125.044 4.95-4.95V3.3C11.3 3.05 11 2.55 11 2c0-.85.65-1.5 1.5-1.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M15.25 10.5c.85 0 1.5.65 1.5 1.5a1.51 1.51 0 01-1.764 1.478l-.136-.028-3.6 3.6v3.15c.45.25.75.75.75 1.3 0 .85-.65 1.5-1.5 1.5S9 22.35 9 21.5c0-.5.248-.959.631-1.226l.119-.074v-3.75l4.05-4.05c-.25-1 .5-1.9 1.45-1.9zm-.5-6.5c2.85.85 5 3.35 5.35 6.4 2.1.45 3.65 2.3 3.65 4.55a4.587 4.587 0 01-4.389 4.595l-.211.005h-6.4v-1.5h6.45c1.7 0 3.1-1.4 3.1-3.1 0-1.15-.6-2.1-1.5-2.65-.545-.327-1.012-.417-1.533-.46l-.617-.04-.003-.502A5.856 5.856 0 0018.4 9.6a6.192 6.192 0 00-3.414-3.9l-.236-.1V4zm-4.5 0v1.6c-1.4.55-2.5 1.55-3.2 2.9l-.08.185-.138.342-.283.772-.166-.016-.166-.008-.21-.002c-.038 0-.078 0-.12.002l-.262.014a4.463 4.463 0 00-1.225.261c-1.55.6-2.65 2.1-2.65 3.85 0 2.182 1.74 3.988 3.897 4.095L5.85 18h2.4v1.5h-2.4c-3.1 0-5.6-2.5-5.6-5.6 0-3 2.35-5.45 5.25-5.65a7.696 7.696 0 014.478-4.16L10.25 4zM12.5.5c.85 0 1.5.65 1.5 1.5 0 .495-.243.95-.62 1.29l-.13.11v5l-5.5 5.5c.1.9-.65 1.65-1.5 1.65s-1.5-.65-1.5-1.5c0-1.054.964-1.741 1.925-1.444l.125.044 4.95-4.95V3.3C11.3 3.05 11 2.55 11 2c0-.85.65-1.5 1.5-1.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1C; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-home-iot",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1B = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class HomeLightBulb {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M15.5 19.006v2.27l-1.534.557A1.995 1.995 0 0112 23.5a1.994 1.994 0 01-1.933-1.512l-.033-.155-1.534-.557v-2.27h7zM11.748 5.505a6.46 6.46 0 014.76 1.811A6.448 6.448 0 0118.5 12a6.47 6.47 0 01-.558 2.639c-.301.679-.658 1.155-1.004 1.575l-.435.52a4.737 4.737 0 00-.402.55l-.12.202H8.037a4.914 4.914 0 00-.447-.646l-.502-.593c-.39-.465-.795-1.006-1.123-1.828a6.503 6.503 0 01-.464-2.515c.05-3.399 2.851-6.27 6.248-6.399zM3.25 11.25a.75.75 0 01.102 1.493l-.102.007h-2a.75.75 0 01-.102-1.493l.102-.007h2zm19.5 0a.75.75 0 01.102 1.493l-.102.007h-2a.75.75 0 01-.102-1.493l.102-.007h2zM3.869 3.868a.751.751 0 01.975-.072l.084.072 1.415 1.414a.75.75 0 01-.967 1.14l-.094-.079L3.87 4.929a.75.75 0 010-1.061zm15.203 0a.749.749 0 011.133.977l-.072.085-1.415 1.413a.751.751 0 01-1.134-.977l.073-.083 1.415-1.415zM12 .5a.75.75 0 01.743.648l.007.102v2a.75.75 0 01-1.493.102l-.007-.102v-2A.75.75 0 0112 .5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M14.865 16.419a5.757 5.757 0 00-.51 1.081H9.666a5.591 5.591 0 00-.506-1.067c-.638-1.037-1.177-1.144-1.739-2.416A4.988 4.988 0 017 11.926c.037-2.614 2.192-4.823 4.803-4.922a4.928 4.928 0 013.663 1.394A4.959 4.959 0 0117 12c0 .653-.125 1.29-.364 1.88-.544 1.341-1.13 1.484-1.771 2.539M11.748 5.505c-3.396.129-6.198 3-6.247 6.4a6.502 6.502 0 00.462 2.514c.476 1.187 1.11 1.789 1.625 2.421.516.633.912 1.296.912 2.605v1.83l1.534.558A1.995 1.995 0 0012 23.5c.99 0 1.807-.722 1.966-1.667l1.534-.557v-1.687c0-1.344.373-2.048.866-2.683.492-.635 1.103-1.2 1.577-2.266A6.486 6.486 0 0018.5 12a6.447 6.447 0 00-1.992-4.684 6.456 6.456 0 00-4.76-1.811M22.75 11.25h-2a.75.75 0 100 1.5h2a.75.75 0 100-1.5m-2.618-7.381a.75.75 0 00-1.06 0l-1.415 1.413a.75.75 0 101.061 1.061l1.415-1.413a.75.75 0 00-.001-1.061M12 4a.75.75 0 00.75-.75v-2a.75.75 0 10-1.5 0v2c0 .414.336.75.75.75m-8.75 7.25h-2a.75.75 0 100 1.5h2a.75.75 0 100-1.5m3.093-4.907a.75.75 0 000-1.061L4.928 3.868a.75.75 0 00-1.06 1.061l1.414 1.414a.75.75 0 001.061 0", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1B; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-home-light-bulb",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1A = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class HomeNetworkSecure {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 .5a4.505 4.505 0 014.495 4.288L16.5 5v1.5H18v6a3 3 0 01-2.824 2.995L15 15.5h-2.25v2H22v3.175A1.745 1.745 0 0121.25 24a1.75 1.75 0 01-1.75-1.75c0-.643.35-1.2.867-1.504l.133-.071V19h-7.75v1.675A1.745 1.745 0 0112 24a1.75 1.75 0 01-1.75-1.75c0-.643.35-1.2.867-1.504l.133-.071V19H3.5v1.675A1.745 1.745 0 012.75 24 1.75 1.75 0 011 22.25c0-.643.35-1.2.867-1.504L2 20.675V17.5h9.25v-2H9a3 3 0 01-2.995-2.824L6 12.5v-6h1.5V5C7.5 2.518 9.52.5 12 .5zm0 8.949a1.13 1.13 0 00-1.13 1.13c0 .286.11.546.286.745l.094.094V12.5h1.5v-1.082A1.125 1.125 0 0012 9.449zM12 2a3.003 3.003 0 00-2.995 2.824L9 5v1.5h6V5c0-1.655-1.346-3-3-3z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 .5a4.505 4.505 0 014.495 4.288L16.5 5v1.5H18v6a3 3 0 01-2.824 2.995L15 15.5h-2.25v2H22v3.175A1.745 1.745 0 0121.25 24a1.744 1.744 0 01-.883-3.254l.133-.071V19h-7.75v1.675A1.745 1.745 0 0112 24a1.744 1.744 0 01-.883-3.254l.133-.071V19H3.5v1.675A1.745 1.745 0 012.75 24a1.744 1.744 0 01-.883-3.254L2 20.675V17.5h9.25v-2H9a3 3 0 01-2.995-2.824L6 12.5v-6h1.5V5C7.5 2.518 9.519.5 12 .5zM16.5 8h-9v4.5c0 .778.596 1.42 1.355 1.493L9 14h6c.778 0 1.42-.596 1.493-1.356l.007-.144V8zM12 9.449a1.13 1.13 0 011.13 1.129c0 .287-.109.547-.286.746l-.093.094V12.5h-1.5v-1.082l-.094-.094a1.116 1.116 0 01-.286-.746A1.13 1.13 0 0112 9.449zM12 2a3.004 3.004 0 00-2.995 2.824L9 5v1.5h6V5c0-1.654-1.346-3-3-3z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1A; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-home-network-secure",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1z = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class HomeNoWifi {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 18a2 2 0 110 4 2 2 0 010-4zM1.57 1.97a.744.744 0 01.975-.073l.085.073 18 18a.745.745 0 010 1.06.754.754 0 01-.53.22.755.755 0 01-.437-.141l-.093-.079-18-18a.75.75 0 010-1.06zm8.615 11.795l1.74 1.735a4.5 4.5 0 00-3.789 2.193l-.106.187-1.435-1.49a6.495 6.495 0 013.314-2.538l.276-.087zM12 9c3.35 0 6.349 1.5 8.365 3.863l.205.247-1.405 1.46a9.012 9.012 0 00-4.823-3.258l-.327-.082-2.225-2.225L12 9zm-5.245 1.335l1.49 1.49a9.047 9.047 0 00-3.2 2.478l-.21.267-1.405-1.46a11.063 11.063 0 012.978-2.578l.347-.197zM3.48 7.06l1.445 1.445A13.644 13.644 0 002 10.941l-.315.359L.29 9.855c.827-.951 1.768-1.8 2.8-2.528l.39-.267zM12 4.5c4.542 0 8.623 1.955 11.46 5.069l.255.286L22.32 11.3a13.465 13.465 0 00-12.319-4.647l-.486.082-1.67-1.67A15.608 15.608 0 0112 4.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 18a2 2 0 110 4 2 2 0 010-4zM1.57 1.97a.744.744 0 01.975-.073l.085.073 18 18a.745.745 0 010 1.06.754.754 0 01-.53.22.755.755 0 01-.437-.141l-.093-.079-18-18a.75.75 0 010-1.06zm8.615 11.795l1.74 1.735a4.5 4.5 0 00-3.789 2.193l-.106.187-1.435-1.49a6.495 6.495 0 013.314-2.538l.276-.087zM12 9c3.35 0 6.349 1.5 8.365 3.863l.205.247-1.405 1.46a9.012 9.012 0 00-4.823-3.258l-.327-.082-2.225-2.225L12 9zm-5.245 1.335l1.49 1.49a9.047 9.047 0 00-3.2 2.478l-.21.267-1.405-1.46a11.063 11.063 0 012.978-2.578l.347-.197zM3.48 7.06l1.445 1.445A13.644 13.644 0 002 10.941l-.315.359L.29 9.855c.827-.951 1.768-1.8 2.8-2.528l.39-.267zM12 4.5c4.542 0 8.623 1.955 11.46 5.069l.255.286L22.32 11.3a13.465 13.465 0 00-12.319-4.647l-.486.082-1.67-1.67A15.608 15.608 0 0112 4.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1z; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-home-no-wifi",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1y = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class HomePowerSocket {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 19a7 7 0 110-14 7 7 0 010 14zM2 2v17a3 3 0 003 3h14a3 3 0 003-3V2H2zm12.5 11.25a1.25 1.25 0 11.001-2.5 1.25 1.25 0 010 2.5zm-5 0a1.25 1.25 0 11.001-2.5 1.25 1.25 0 010 2.5zm3.25-6.693V8.5h-1.5V6.557C8.573 6.925 6.5 9.223 6.5 12c0 2.777 2.072 5.075 4.75 5.443V15.5h1.5v1.943c2.678-.368 4.75-2.666 4.75-5.443 0-2.777-2.072-5.075-4.75-5.443z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M14.5 13.25a1.25 1.25 0 100-2.5 1.25 1.25 0 000 2.5zm-5 0a1.25 1.25 0 100-2.5 1.25 1.25 0 000 2.5zm1.75-6.693V8.5h1.5V6.557c2.678.368 4.75 2.666 4.75 5.443 0 2.777-2.072 5.075-4.75 5.443V15.5h-1.5v1.943C8.573 17.075 6.5 14.777 6.5 12c0-2.777 2.072-5.075 4.75-5.443zM12 19a7 7 0 100-14 7 7 0 000 14zm8.5 0c0 .827-.672 1.5-1.5 1.5H5c-.827 0-1.5-.673-1.5-1.5V3.5h17V19zM2 2v17a3 3 0 003 3h14a3 3 0 003-3V2H2z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1y; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-home-power-socket",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1x = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class HomePreferredWifi {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12.006 18a2 2 0 11-.001 4.001A2 2 0 0112.006 18zm-1.08-4.4c.15.684.394 1.33.722 1.926a4.494 4.494 0 00-3.501 2.162l-.11.195-1.438-1.49a6.494 6.494 0 014.327-2.792zm.517-4.584a7.157 7.157 0 00-.612 2.063 8.985 8.985 0 00-5.801 3.25l-.19.242-1.407-1.46a10.98 10.98 0 018.01-4.095zm6.505.247a.254.254 0 01.234.15l.59 1.441 1.563.115a.255.255 0 01.132.453l-1.193 1.008.373 1.517a.257.257 0 01-.099.267.258.258 0 01-.283.011l-1.324-.823-1.322.823a.257.257 0 01-.383-.278l.373-1.517-1.193-1.008a.257.257 0 01-.079-.275.252.252 0 01.225-.175l1.564-.115.59-1.443a.256.256 0 01.232-.15zM12.006 4.5c1.47 0 2.89.205 4.235.587a7.158 7.158 0 00-2.92 1.48 13.47 13.47 0 00-11.405 4.468l-.23.264L.293 9.854A15.464 15.464 0 0112.006 4.5zm5.938 1.875a5.687 5.687 0 11-.001 11.375 5.687 5.687 0 010-11.375z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12.006 18a2 2 0 11-.001 4.001A2 2 0 0112.006 18zm-1.08-4.4c.15.684.394 1.33.722 1.926a4.494 4.494 0 00-3.501 2.162l-.11.195-1.438-1.49a6.494 6.494 0 014.327-2.792zm.517-4.584a7.157 7.157 0 00-.612 2.063 8.985 8.985 0 00-5.801 3.25l-.19.242-1.407-1.46a10.98 10.98 0 018.01-4.095zm6.505.247a.254.254 0 01.234.15l.59 1.441 1.563.115a.255.255 0 01.132.453l-1.193 1.008.373 1.517a.257.257 0 01-.099.267.258.258 0 01-.283.011l-1.324-.823-1.322.823a.257.257 0 01-.383-.278l.373-1.517-1.193-1.008a.257.257 0 01-.079-.275.252.252 0 01.225-.175l1.564-.115.59-1.443a.256.256 0 01.232-.15zM12.006 4.5c1.47 0 2.89.205 4.235.587a7.158 7.158 0 00-2.92 1.48 13.47 13.47 0 00-11.405 4.468l-.23.264L.293 9.854A15.464 15.464 0 0112.006 4.5zm5.938 1.875a5.687 5.687 0 11-.001 11.375 5.687 5.687 0 010-11.375zm0 1.5a4.192 4.192 0 00-4.187 4.187 4.192 4.192 0 004.187 4.188 4.192 4.192 0 004.187-4.188 4.192 4.192 0 00-4.187-4.187z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1x; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-home-preferred-wifi",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1w = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class HomeReducedWifi {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M18.25 4.25a.75.75 0 10-1.5 0V13h-3.175l3.925 6 3.925-6H18.25V4.25zm-3.3 7.25h.3v-2a11 11 0 00-11.825 3.61l1.41 1.46A8.97 8.97 0 0114.95 11.5zm.3-4.6V4.845a15.5 15.5 0 00-14.965 5L1.68 11.3a13.475 13.475 0 0113.57-4.4zM12 18a2 2 0 100 4 2 2 0 000-4zm1.62-2.19l-1.3-2-.21-.31H12a6.5 6.5 0 00-5.405 2.895l1.435 1.5a4.47 4.47 0 015.59-2.075v-.01zm6.13-9.225V8.95a13.5 13.5 0 012.57 2.35l1.395-1.445a15.61 15.61 0 00-3.965-3.27z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 18a2 2 0 110 4 2 2 0 010-4zm5.5-14.5a.75.75 0 01.744.648l.006.102V13h3.177L17.5 19l-3.927-6h3.177V4.25a.75.75 0 01.75-.75zm-5.388 10.007l1.508 2.303a4.478 4.478 0 00-5.486 1.888l-.105.185-1.436-1.49a6.465 6.465 0 015.241-2.885l.278-.001zM12 9c.99 0 1.95.133 2.862.38l.389.112v2.12a8.97 8.97 0 00-10.236 2.73l-.18.228-1.408-1.459A10.977 10.977 0 0112 9zm0-4.5c.956 0 1.891.09 2.799.256l.452.09v2.053a13.463 13.463 0 00-13.342 4.137l-.229.264L.287 9.855A15.459 15.459 0 0112 4.5zm7.75 2.082a15.625 15.625 0 013.65 2.923l.313.35-1.393 1.444a13.588 13.588 0 00-2.216-2.091l-.354-.258V6.582z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1w; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-home-reduced-wifi",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1v = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class HomeSlowWifi {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 17a2 2 0 110 4 2 2 0 010-4zm-1.08-4.4c.15.683.394 1.33.723 1.925a4.495 4.495 0 00-3.503 2.163l-.11.195-1.437-1.49A6.495 6.495 0 0110.92 12.6zm7.018-7.225a5.694 5.694 0 015.687 5.688 5.694 5.694 0 01-5.688 5.687 5.694 5.694 0 01-5.687-5.688 5.694 5.694 0 015.688-5.687zm-6.501 2.641a7.124 7.124 0 00-.611 2.063 8.985 8.985 0 00-5.802 3.25l-.19.241-1.407-1.459a10.976 10.976 0 018.01-4.095zm7 .244v2.703h2.17v1h-3.17V8.26h1zM12 3.5c1.469 0 2.89.205 4.235.587a7.17 7.17 0 00-2.921 1.48 13.463 13.463 0 00-11.405 4.469l-.229.264L.287 8.855A15.459 15.459 0 0112 3.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 17a2 2 0 110 4 2 2 0 010-4zm-1.08-4.4c.15.683.394 1.33.723 1.925a4.495 4.495 0 00-3.503 2.163l-.11.195-1.437-1.49A6.495 6.495 0 0110.92 12.6zm7.018-7.225a5.694 5.694 0 015.687 5.688 5.694 5.694 0 01-5.688 5.687 5.694 5.694 0 01-5.687-5.688 5.694 5.694 0 015.688-5.687zm0 1.5a4.192 4.192 0 00-4.188 4.188 4.192 4.192 0 004.188 4.187 4.192 4.192 0 004.187-4.188 4.192 4.192 0 00-4.188-4.187zm-6.501 1.141a7.124 7.124 0 00-.611 2.063 8.985 8.985 0 00-5.802 3.25l-.19.241-1.407-1.459a10.976 10.976 0 018.01-4.095zm7 .244v2.703h2.17v1h-3.17V8.26h1zM12 3.5c1.469 0 2.89.205 4.235.587a7.17 7.17 0 00-2.921 1.48 13.463 13.463 0 00-11.405 4.469l-.229.264L.287 8.855A15.459 15.459 0 0112 3.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1v; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-home-slow-wifi",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1u = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class HomeSmarthome {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("defs", null, hAsync("path", { d: "M.45 12.45L1.5 13.5 12 3l10.5 10.5 1.05-1.05L12 .85.45 12.45zM3.5 13.6V19l.005.175A3.01 3.01 0 006.5 22h11l.175-.005A3.01 3.01 0 0020.5 19v-5.4L12 5.1l-8.5 8.5zm4.7-1.75c0-.746.493-1.35 1.1-1.35.608 0 1.1.604 1.1 1.35 0 .746-.492 1.35-1.1 1.35-.607 0-1.1-.604-1.1-1.35zm4.5 0c0-.27.203-.54.498-.591l.102-.009h1.75c.3 0 .6.3.6.6 0 .27-.203.54-.498.592l-.102.008H13.3c-.3 0-.6-.3-.6-.6zm-1.3 5c1.432 0 2.636-.82 3.221-2.068l.079-.182c.091-.273.429-.463.716-.383l.084.033c.3.1.5.5.35.8-.75 1.8-2.5 3-4.45 3-.7 0-1.35-.15-1.95-.4-.3-.1-.45-.5-.3-.8.091-.273.43-.421.716-.333l.084.033c.434.173.83.31 1.254.31.065 0 .13-.004.196-.01z", id: "a" })), hAsync("use", { xlinkHref: "#a", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M19 12.1l1.5 1.5V19a3.01 3.01 0 01-2.824 2.995L17.5 22h-11a3.01 3.01 0 01-2.995-2.824L3.5 19v-5.4L5 12.1V19c0 .8.576 1.423 1.352 1.493l.148.007h11c.8 0 1.423-.576 1.493-1.352L19 19v-6.9zm-4.38 2.681l.08-.181c.09-.273.43-.463.716-.382l.084.032c.3.1.5.5.35.8-.75 1.8-2.5 3-4.45 3-.7 0-1.35-.15-1.95-.4-.3-.1-.45-.5-.3-.8.09-.273.43-.421.716-.334l.084.034c.5.2.95.35 1.45.3 1.432 0 2.636-.82 3.22-2.069zM12 .85l11.55 11.6-1.05 1.05L12 3 1.5 13.5.45 12.45 12 .85zM9.3 10.5c.608 0 1.1.604 1.1 1.35 0 .746-.492 1.35-1.1 1.35-.608 0-1.1-.604-1.1-1.35 0-.746.492-1.35 1.1-1.35zm5.75.75c.3 0 .6.3.6.6 0 .27-.203.54-.498.591l-.102.009H13.3c-.3 0-.6-.3-.6-.6 0-.27.203-.54.498-.591l.102-.009h1.75z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1u; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-home-smarthome",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1t = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class HomeUnableToConnectToRouter {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M17.742 11.5a6.25 6.25 0 110 12.5 6.25 6.25 0 010-12.5zm0 1.5a4.756 4.756 0 00-4.75 4.75 4.756 4.756 0 004.75 4.75c2.62 0 4.75-2.131 4.75-4.75 0-2.62-2.13-4.75-4.75-4.75zM6.8 6l5.2 4.48L17.2 6h2.3a3 3 0 012.994 2.824L22.5 9v2.646A7.694 7.694 0 0017.742 10c-4.273 0-7.75 3.477-7.75 7.75 0 1.457.407 2.819 1.11 3.984l.168.266H4.5a3 3 0 01-2.995-2.824L1.5 19V9a3 3 0 012.823-2.995L4.5 6h2.302zm8.413 9.22a.75.75 0 01.976-.073l.084.073 1.47 1.469 1.47-1.47a.75.75 0 011.133.977l-.073.084-1.47 1.47 1.47 1.47a.749.749 0 01-.967 1.14l-.094-.08-1.47-1.468-1.469 1.468a.746.746 0 01-1.06 0 .749.749 0 01-.073-.976l.072-.084 1.47-1.47-1.47-1.47a.749.749 0 010-1.06zM12 6.5a1 1 0 110 2 1 1 0 010-2zm0-3c1.482 0 2.777.812 3.466 2.013L14.3 6.52A2.502 2.502 0 0012 5c-1.03 0-1.915.627-2.298 1.52L8.534 5.513A4.002 4.002 0 0111.998 3.5zm0-3a6.99 6.99 0 015.607 2.818l.155.217-1.146.986A5.496 5.496 0 0012 2c-1.85 0-3.486.921-4.484 2.326l-.132.195-1.144-.986A6.993 6.993 0 0111.998.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M17.75 11.5a6.25 6.25 0 110 12.5 6.25 6.25 0 010-12.5zM6.8 6l1.741 1.5H4.5c-.778 0-1.42.596-1.493 1.356L3 9v10c0 .778.596 1.42 1.356 1.493l.144.007h6.011c.162.424.356.83.584 1.215l.178.285H4.5a3 3 0 01-2.995-2.824L1.5 19V9a3 3 0 012.824-2.995L4.5 6h2.3zm8.42 9.22a.749.749 0 000 1.06l1.47 1.47-1.47 1.47a.749.749 0 101.061 1.06l1.469-1.47 1.47 1.47a.746.746 0 001.061 0 .749.749 0 000-1.06l-1.47-1.47 1.47-1.47a.749.749 0 10-1.061-1.06l-1.47 1.469-1.469-1.47a.75.75 0 00-1.061 0zM19.5 6a3 3 0 012.995 2.824L22.5 9v2.636a7.61 7.61 0 00-1.182-.758L21 10.722V9c0-.778-.596-1.42-1.356-1.493L19.5 7.5h-4.042L17.2 6h2.3zm-7.5.5a1 1 0 011 1 .931.931 0 01-.015.15L12 8.5l-.985-.85A.931.931 0 0111 7.5a1 1 0 011-1zm0-3c1.404 0 2.64.729 3.352 1.827l.114.186-1.168 1.007A2.5 2.5 0 0012 5a2.5 2.5 0 00-2.226 1.365l-.072.155-1.168-1.007A3.997 3.997 0 0112 3.5zm0-3a6.99 6.99 0 015.606 2.818l.156.217-1.145.986A5.498 5.498 0 0012 2c-1.85 0-3.488.921-4.485 2.326l-.132.195-1.145-.986A6.993 6.993 0 0112 .5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1t; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-home-unable-to-connect-to-router",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1s = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class HomeWifi {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 17a2 2 0 110 4 2 2 0 010-4zm0-4.5a6.46 6.46 0 015.258 2.693l.142.207-1.45 1.5A4.435 4.435 0 0012 14.5c-1.626 0-3.07.915-3.848 2.22l-.102.18-1.45-1.5a6.458 6.458 0 015.4-2.9zM12 8a10.94 10.94 0 018.346 3.853l.204.247-1.4 1.45C17.5 11.4 14.95 10 12 10c-2.845 0-5.317 1.302-6.97 3.323l-.18.227-1.4-1.45C5.45 9.6 8.55 8 12 8zm0-4.5c4.562 0 8.605 1.978 11.445 5.066l.255.284-1.4 1.45C19.85 7.35 16.15 5.5 12 5.5c-4.024 0-7.625 1.74-10.074 4.535L1.7 10.3.3 8.85C3.15 5.6 7.3 3.5 12 3.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 17a2 2 0 110 4 2 2 0 010-4zm0-4.5a6.46 6.46 0 015.258 2.693l.142.207-1.45 1.5A4.435 4.435 0 0012 14.5c-1.626 0-3.07.915-3.848 2.22l-.102.18-1.45-1.5a6.458 6.458 0 015.4-2.9zM12 8a10.94 10.94 0 018.346 3.853l.204.247-1.4 1.45C17.5 11.4 14.95 10 12 10c-2.845 0-5.317 1.302-6.97 3.323l-.18.227-1.4-1.45C5.45 9.6 8.55 8 12 8zm0-4.5c4.562 0 8.605 1.978 11.445 5.066l.255.284-1.4 1.45C19.85 7.35 16.15 5.5 12 5.5c-4.024 0-7.625 1.74-10.074 4.535L1.7 10.3.3 8.85C3.15 5.6 7.3 3.5 12 3.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1s; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-home-wifi",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1r = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class HomeWifiConnected {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 18a2 2 0 110 4 2 2 0 010-4zm-1.08-4.4a7.15 7.15 0 00.723 1.925A4.495 4.495 0 008.14 17.69l-.11.194-1.436-1.49A6.496 6.496 0 0110.92 13.6zm7.018-7.226a5.688 5.688 0 11-.002 11.376 5.688 5.688 0 01.002-11.376zm-6.5 2.642a7.08 7.08 0 00-.612 2.062 8.992 8.992 0 00-5.802 3.25l-.19.241-1.406-1.459a10.977 10.977 0 018.01-4.094zm8.395 1.031l-2.565 2.564-1.282-1.28a.683.683 0 00-.965.964l2.247 2.247 3.53-3.53a.681.681 0 10-.965-.965zM12 4.5c1.469 0 2.89.205 4.236.588a7.148 7.148 0 00-2.921 1.481A13.602 13.602 0 0012 6.5a13.463 13.463 0 00-10.091 4.537l-.228.263L.287 9.855A15.459 15.459 0 0112 4.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 18a2 2 0 110 4 2 2 0 010-4zm-1.08-4.4a7.15 7.15 0 00.723 1.925A4.495 4.495 0 008.14 17.69l-.11.194-1.436-1.49A6.496 6.496 0 0110.92 13.6zm7.018-7.226a5.688 5.688 0 11-.002 11.376 5.688 5.688 0 01.002-11.376zm.006 1.501a4.193 4.193 0 00-4.188 4.187 4.193 4.193 0 004.188 4.188 4.192 4.192 0 004.187-4.188 4.192 4.192 0 00-4.187-4.187zm-6.506 1.141a7.08 7.08 0 00-.612 2.062 8.992 8.992 0 00-5.802 3.25l-.19.241-1.406-1.459a10.977 10.977 0 018.01-4.094zm8.395 1.031l-2.565 2.564-1.282-1.28a.683.683 0 00-.965.964l2.247 2.247 3.53-3.53a.681.681 0 10-.965-.965zM12 4.5c1.469 0 2.89.205 4.236.588a7.148 7.148 0 00-2.921 1.481A13.602 13.602 0 0012 6.5a13.463 13.463 0 00-10.091 4.537l-.228.263L.287 9.855A15.459 15.459 0 0112 4.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1r; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-home-wifi-connected",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1q = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class HomeWifiConnectionError {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 18a2 2 0 110 4 2 2 0 010-4zm-1.08-4.4a7.14 7.14 0 00.722 1.925 4.496 4.496 0 00-3.502 2.163l-.11.195-1.437-1.49a6.494 6.494 0 014.327-2.792zm7.017-7.224a5.686 5.686 0 110 11.374 5.687 5.687 0 010-11.374zm-6.5 2.64a7.125 7.125 0 00-.612 2.063 8.985 8.985 0 00-5.8 3.25l-.19.24-1.408-1.458a10.98 10.98 0 018.01-4.095zm7.838.744l-1.338 1.337L16.6 9.76a.683.683 0 00-.966.965l1.338 1.338-1.338 1.337a.683.683 0 00.966.965l1.337-1.337 1.338 1.337a.679.679 0 00.965 0 .683.683 0 000-.965l-1.338-1.337 1.338-1.338a.683.683 0 00-.965-.965zM12 4.5c1.468 0 2.89.206 4.235.587a7.16 7.16 0 00-2.92 1.48A13.466 13.466 0 001.91 11.036l-.23.265L.287 9.855A15.46 15.46 0 0112 4.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 18a2 2 0 110 4 2 2 0 010-4zm-1.08-4.4a7.14 7.14 0 00.722 1.925 4.496 4.496 0 00-3.502 2.163l-.11.195-1.437-1.49a6.494 6.494 0 014.327-2.792zm7.017-7.224a5.686 5.686 0 110 11.374 5.687 5.687 0 010-11.374zm.007 1.499a4.193 4.193 0 00-4.188 4.187 4.193 4.193 0 004.188 4.188 4.192 4.192 0 004.187-4.188 4.192 4.192 0 00-4.187-4.187zm-6.508 1.14a7.125 7.125 0 00-.61 2.064 8.985 8.985 0 00-5.801 3.25l-.19.24-1.408-1.458a10.98 10.98 0 018.01-4.095zm7.84.745l-1.339 1.337L16.6 9.76a.683.683 0 00-.966.965l1.338 1.338-1.338 1.337a.683.683 0 00.966.965l1.337-1.337 1.338 1.337a.679.679 0 00.965 0 .683.683 0 000-.965l-1.338-1.337 1.338-1.338a.683.683 0 00-.965-.965zM12 4.5c1.468 0 2.89.206 4.235.587a7.16 7.16 0 00-2.92 1.48A13.466 13.466 0 001.91 11.036l-.23.265L.287 9.855A15.46 15.46 0 0112 4.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1q; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-home-wifi-connection-error",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1p = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class HomeWifiManualLogin {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12.006 18a2 2 0 110 4 2 2 0 010-4zm-1.08-4.399c.15.682.394 1.329.722 1.924a4.494 4.494 0 00-3.502 2.163l-.11.195L6.6 16.394a6.49 6.49 0 014.326-2.793zm7.018-7.226a5.687 5.687 0 110 11.375 5.687 5.687 0 010-11.375zm.512 7.069v1.153h-1.154v-1.153h1.154zm-7.013-4.428a7.118 7.118 0 00-.611 2.062 8.985 8.985 0 00-5.802 3.251l-.189.241-1.408-1.46a10.98 10.98 0 018.01-4.094zm6.517.312c.92 0 1.645.61 1.645 1.514 0 .552-.265.88-.546 1.147l-.309.283c-.16.152-.291.304-.33.495l-.012.132h-1.059v-.16c0-.529.289-.816.578-1.058l.212-.176c.203-.174.366-.35.366-.613 0-.351-.219-.546-.545-.546-.3 0-.502.17-.563.508l-.015.118h-1.099c.024-.887.618-1.644 1.677-1.644zM12.006 4.5c1.469 0 2.889.205 4.236.588a7.16 7.16 0 00-2.922 1.479 13.465 13.465 0 00-11.404 4.47l-.229.263L.293 9.854A15.464 15.464 0 0112.006 4.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12.006 18a2 2 0 110 4 2 2 0 010-4zm-1.08-4.399c.15.682.394 1.329.722 1.924a4.494 4.494 0 00-3.502 2.163l-.11.195L6.6 16.394a6.49 6.49 0 014.326-2.793zm7.018-7.226a5.687 5.687 0 110 11.375 5.687 5.687 0 010-11.375zm0 1.5a4.193 4.193 0 00-4.188 4.187 4.193 4.193 0 004.188 4.188 4.192 4.192 0 004.187-4.188 4.192 4.192 0 00-4.187-4.187zm.512 5.569v1.153h-1.154v-1.153h1.154zm-7.013-4.428a7.118 7.118 0 00-.611 2.062 8.985 8.985 0 00-5.802 3.251l-.189.241-1.408-1.46a10.98 10.98 0 018.01-4.094zm6.517.312c.92 0 1.645.61 1.645 1.514 0 .552-.265.88-.546 1.147l-.309.283c-.16.152-.291.304-.33.495l-.012.132h-1.059v-.16c0-.529.289-.816.578-1.058l.212-.176c.203-.174.366-.35.366-.613 0-.351-.219-.546-.545-.546-.3 0-.502.17-.563.508l-.015.118h-1.099c.024-.887.618-1.644 1.677-1.644zM12.006 4.5c1.469 0 2.889.205 4.236.588a7.16 7.16 0 00-2.922 1.479 13.465 13.465 0 00-11.404 4.47l-.229.263L.293 9.854A15.464 15.464 0 0112.006 4.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1p; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-home-wifi-manual-login",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1o = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class HomeWifiNoWiredInternet {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M18.75 20.25a.875.875 0 110 1.75.875.875 0 010-1.75zm0-2.625c1.225 0 2.302.634 2.928 1.59l.105.172-1.021.88a2.19 2.19 0 00-2.012-1.33 2.19 2.19 0 00-1.944 1.186l-.068.144-1.021-.88a3.5 3.5 0 013.033-1.762zM19.5 4v10.04a7.076 7.076 0 00-4.625 1.11 7.182 7.182 0 00-2.323 2.469l-.149.276L14.42 19.5H4.5a3 3 0 01-2.995-2.824L1.5 16.5V4h18zm-.75 11a6.12 6.12 0 014.895 2.45l.148.206-1.002.863a4.81 4.81 0 00-4.04-2.206c-1.613 0-3.04.799-3.914 2.02l-.127.186-1.002-.863A6.12 6.12 0 0118.75 15zm-6.28-5.53a.75.75 0 011.133.976l-.073.085-1.97 1.969 1.97 1.97a.75.75 0 01-.976 1.133l-.085-.073-1.969-1.97-1.97 1.97a.75.75 0 01-1.133-.976l.073-.085L9.44 12.5l-1.97-1.97a.75.75 0 01.976-1.133l.084.073 1.97 1.97 1.97-1.97zM7.5 4.874a.625.625 0 100 1.25.625.625 0 000-1.25zm-2 0a.625.625 0 100 1.25.625.625 0 000-1.25zm-2 0a.625.625 0 100 1.25.625.625 0 000-1.25z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M18.75 20.25a.875.875 0 110 1.75.875.875 0 010-1.75zm0-2.625c1.225 0 2.302.634 2.928 1.59l.105.172-1.021.88a2.19 2.19 0 00-2.012-1.33 2.19 2.19 0 00-1.944 1.186l-.068.144-1.021-.88a3.5 3.5 0 013.033-1.762zM19.5 4v9.54a6.96 6.96 0 00-1.251-.021L18 13.54V7H3v9.5c0 .778.596 1.42 1.356 1.493L4.5 18h7.31l1.74 1.5H4.5a3 3 0 01-2.995-2.824L1.5 16.5V4h18zm-.75 11a6.12 6.12 0 014.895 2.45l.148.206-1.002.863a4.81 4.81 0 00-4.04-2.206c-1.613 0-3.04.799-3.914 2.02l-.127.186-1.002-.863A6.12 6.12 0 0118.75 15zm-6.28-5.53a.75.75 0 011.133.976l-.073.085-1.97 1.969 1.97 1.97a.75.75 0 01-.976 1.133l-.085-.073-1.969-1.97-1.97 1.97a.75.75 0 01-1.133-.976l.073-.085L9.44 12.5l-1.97-1.97a.75.75 0 01.976-1.133l.084.073 1.97 1.97 1.97-1.97zM7.5 4.874a.625.625 0 100 1.25.625.625 0 000-1.25zm-2 0a.625.625 0 100 1.25.625.625 0 000-1.25zm-2 0a.625.625 0 100 1.25.625.625 0 000-1.25z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1o; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-home-wifi-no-wired-internet",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1n = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class Icon {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /**
     * Will be used for both `width` and `height`, all icons are square.
     * Keep in mind the `viewBox` attribute is set to "0 0 24 24".
     */
    this.size = 24;
    /** The SVG `fill` attribute */
    this.fill = 'var(--icon-color, currentColor)';
    /** The SVG `stroke` attribute */
    this.stroke = 'transparent';
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
    /** (optional) If `true` the svg element will get aria-hidden="true" */
    this.decorative = false;
  }
  render() {
    const pathAttributes = {
      fill: this.fill,
      stroke: this.stroke,
    };
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", class: this.getCssClassMap(), part: "base", width: this.size, height: this.size, viewBox: "0 0 24 24", role: "img" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), this.path ? (hAsync("path", Object.assign({ d: this.path }, pathAttributes, { part: "path" }))) : (hAsync("use", Object.assign({ xlinkHref: `#icon-${this.name}` }, pathAttributes))))));
  }
  getCssClassMap() {
    return classnames('icon');
  }
  static get style() { return iconCss$1n; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon",
    "$members$": {
      "name": [1],
      "path": [1],
      "size": [514],
      "fill": [1],
      "stroke": [1],
      "focusable": [4],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"]]
  }; }
}

const inputCss = ".input{position:relative}.input .input__helper-text,.input .input__counter{font-weight:var(--telekom-typography-font-weight-bold)}.input .input__input,.input .input__select{width:100%;height:var(--telekom-spacing-composition-space-14);margin:0;display:flex;outline:none;padding:var(--telekom-spacing-composition-space-05)\n    var(--telekom-spacing-composition-space-05);z-index:1;box-sizing:border-box;transition:all var(--telekom-motion-duration-transition)\n    cubic-bezier(var(--telekom-motion-easing-standard));font-family:inherit;font-size:var(--telekom-typography-font-size-body);border-radius:var(--telekom-radius-standard);border:var(--telekom-line-weight-standard) solid\n    var(--telekom-color-ui-border-standard)}.input .input__textarea{width:100%;margin:0;resize:vertical;display:flex;outline:none;padding:var(--telekom-spacing-composition-space-05)\n    var(--telekom-spacing-composition-space-05);z-index:1;box-sizing:border-box;transition:all var(--telekom-motion-duration-transition)\n    cubic-bezier(var(--telekom-motion-easing-standard));font-family:inherit;font-size:var(--telekom-typography-font-size-body);border-radius:var(--telekom-radius-standard);border:var(--telekom-spacing-composition-space-01) solid\n    var(--telekom-color-ui-border-standard)}.input .input__select{appearance:none;-webkit-appearance:none}.input .input__select-wrapper{position:relative}.input .input__counter{display:flex;transition:all var(--telekom-motion-duration-transition)\n    cubic-bezier(var(--telekom-motion-easing-standard));margin-left:auto;padding-right:var(--telekom-spacing-composition-space-05);justify-content:flex-end;font-size:var(--telekom-typography-font-size-small);line-height:var(--telekom-typography-line-spacing-standard);color:var(--telekom-color-text-and-icon-standard)}.input .input__helper-text{transition:all var(--telekom-motion-duration-transition)\n    cubic-bezier(var(--telekom-motion-easing-standard));padding-left:var(--telekom-spacing-composition-space-05);font-size:var(--telekom-typography-font-size-small);line-height:var(--telekom-typography-line-spacing-standard);color:var(--telekom-color-text-and-icon-functional-informational)}.input .input__meta{display:flex;justify-content:space-between;margin-top:var(--telekom-spacing-composition-space-03)}.input:not(.input--disabled):hover .input__select-wrapper{--icon-color:var(--telekom-color-text-and-icon-primary-hovered, #f90984)}.input:not(.input--disabled):active .input__select-wrapper{--icon-color:var(--telekom-color-text-and-icon-primary-pressed, #cb0068)}.input:not(.input--disabled) .input__input:hover,.input:not(.input--disabled) .input__input:focus,.input:not(.input--disabled) .input__select:hover,.input:not(.input--disabled) .input__select:focus,.input:not(.input--disabled) .input__textarea:hover,.input:not(.input--disabled) .input__textarea:focus{border-color:var(--telekom-color-ui-border-hovered)}.input:not(.input--disabled) .input__input:focus,.input:not(.input--disabled) .input__select:focus,.input:not(.input--disabled) .input__textarea:focus{box-shadow:0 0 0 var(--telekom-spacing-composition-space-02)\n    var(--telekom-color-functional-focus-standard)}.input:not(.input--disabled) .input__input:focus::placeholder,.input:not(.input--disabled) .input__select:focus::placeholder,.input:not(.input--disabled) .input__textarea:focus::placeholder{color:var(--telekom-color-text-and-icon-additional);transition:all var(--telekom-motion-duration-transition)\n    cubic-bezier(var(--telekom-motion-easing-standard))}.input .input__select-wrapper scale-icon{top:50%;right:var(--telekom-spacing-composition-space-05);position:absolute;transform:translateY(-50%);pointer-events:none}.input .input__input::placeholder,.input .input__select::placeholder,.input .input__textarea::placeholder,.input ::placeholder{color:transparent;transition:all var(--telekom-motion-duration-transition)\n    cubic-bezier(var(--telekom-motion-easing-standard))}.input--variant-static .input__label{color:var(--telekom-color-text-and-icon-additional);display:flex;font-weight:var(--telekom-typography-font-weight-medium)}.input--variant-animated .input__input,.input--variant-animated .input__select{padding:var(--telekom-spacing-composition-space-05)\n    var(--telekom-spacing-composition-space-05) 0\n    calc(var(--telekom-spacing-composition-space-05) - 1px)}.input--variant-animated .input__textarea{padding-top:var(--telekom-spacing-composition-space-08)}.input--variant-animated .input__label{top:0;left:0;color:var(--telekom-color-text-and-icon-additional);display:flex;z-index:var(--scl-z-index-10);position:absolute;transition:all var(--telekom-motion-duration-transition)\n    cubic-bezier(var(--telekom-motion-easing-standard));pointer-events:none;font-size:var(--telekom-typography-font-size-body);transform:translate(\n    var(--telekom-spacing-composition-space-05),\n    calc(\n      (\n          var(--telekom-spacing-composition-space-14) -\n            var(--telekom-typography-font-size-body)\n        ) / 2\n    )\n  );font-weight:var(--telekom-typography-font-weight-medium)}.input--variant-animated.input--has-focus .input__label,.input--variant-animated.animated .input__label{color:var(--telekom-color-text-and-icon-additional);transform:translate(\n    var(--telekom-spacing-composition-space-05),\n    var(--telekom-spacing-composition-space-04)\n  );transition:all var(--telekom-motion-duration-transition)\n    cubic-bezier(var(--telekom-motion-easing-standard));font-size:var(--telekom-typography-font-size-badge);font-weight:var(--telekom-typography-font-weight-bold)}.input--status-error .input__input,.input--status-error .input__textarea,.input--status-error .input__select{border:var(--telekom-spacing-composition-space-02) solid\n    var(--telekom-color-functional-danger-standard)}.input--status-error .input__helper-text{color:var(--telekom-color-text-and-icon-functional-danger)}.input--status-error .input__counter{color:var(--telekom-color-text-and-icon-functional-danger)}.input--size-small .input__input{height:var(--telekom-spacing-composition-space-12)}.input--size-small .input__select{height:var(--telekom-spacing-composition-space-12)}.input--size-small .input__label{top:0;left:0;color:var(--telekom-color-text-and-icon-additional);display:flex;z-index:var(--scl-z-index-10);position:absolute;transition:all var(--telekom-motion-duration-transition)\n    cubic-bezier(var(--telekom-motion-easing-standard));pointer-events:none;font-size:var(--telekom-typography-font-size-body);transform:translate(\n    var(--telekom-spacing-composition-space-05),\n    calc(\n      (\n          var(--telekom-spacing-composition-space-12) -\n            var(--telekom-typography-font-size-body)\n        ) / 2\n    )\n  );font-weight:var(--telekom-typography-font-weight-medium)}.input--size-small.input--has-focus .input__label,.input--size-small.animated .input__label{color:var(--telekom-color-text-and-icon-additional);transform:translate(\n    var(--telekom-spacing-composition-space-05),\n    var(--telekom-spacing-composition-space-03)\n  );transition:all var(--telekom-motion-duration-transition)\n    cubic-bezier(var(--telekom-motion-easing-standard));font-size:var(--telekom-typography-font-size-badge);font-weight:var(--telekom-typography-font-weight-medium)}.input--transparent .input__input,.input--transparent .input__textarea,.input--transparent.input--type-radio .input__radio,.input--transparent .input__select{background-color:transparent}.input--type-checkbox{display:flex;flex-wrap:wrap;align-items:center}.input--type-checkbox input{width:0;height:0;opacity:0;position:absolute}.input--type-checkbox .input__meta{width:100%}.input--type-checkbox .input__helper-text{padding-left:var(--telekom-spacing-composition-space-10)}.input--type-checkbox label{color:var(--telekom-color-text-and-icon-standard);font-weight:var(--telekom-typography-font-weight-medium)}.input--type-checkbox .input__checkbox-container{width:var(--telekom-spacing-composition-space-06);height:var(--telekom-spacing-composition-space-06);display:flex;position:relative;align-items:center;margin-right:var(--telekom-spacing-composition-space-04)}.input--type-checkbox input:disabled~label{color:var(--telekom-color-ui-disabled)}.input--type-checkbox input:checked:disabled~label{color:var(--telekom-color-ui-disabled)}.input--type-checkbox input:checked:disabled~.input__checkbox-container .input__checkbox-placeholder{background:var(--telekom-color-ui-disabled)}.input--type-checkbox input:checked:disabled~.input__checkbox-container scale-icon{--icon-color:var(--telekom-color-text-and-icon-disabled)}.input--type-checkbox input:checked:not([disabled]):hover~.input__checkbox-container .input__checkbox-placeholder,.input--type-checkbox input:checked:not([disabled])~.input__checkbox-container:hover .input__checkbox-placeholder{box-shadow:none;border-color:var(--telekom-color-primary-hovered, #f90984);background:var(--telekom-color-primary-hovered, #f90984)}.input--type-checkbox input:checked:not([disabled]):active~.input__checkbox-container .input__checkbox-placeholder,.input--type-checkbox input:checked:not([disabled])~.input__checkbox-container:active .input__checkbox-placeholder{border-color:var(--telekom-color-primary-pressed, #cb0068);background:var(--telekom-color-primary-pressed, #cb0068)}.input--type-checkbox input:checked:not([disabled]):active~.input__checkbox-container scale-icon,.input--type-checkbox input:checked:not([disabled])~.input__checkbox-container:active scale-icon{--icon-color:var(--telekom-color-text-and-icon-standard)}.input--type-checkbox input:checked:not([disabled])~.input__checkbox-container .input__checkbox-placeholder{border:var(--telekom-spacing-composition-space-01) solid\n    var(--telekom-color-primary-standard, #e20074);background:var(--telekom-color-primary-standard, #e20074)}.input--type-checkbox input:disabled~.input__checkbox-container .input__checkbox-placeholder{border-color:var(--telekom-color-ui-disabled)}.input--type-checkbox input:focus~.input__checkbox-container .input__checkbox-placeholder{box-shadow:0 0 0 var(--telekom-spacing-composition-space-02)\n    var(--telekom-color-functional-focus-standard)}.input--type-checkbox input:not([disabled]):hover~.input__checkbox-container .input__checkbox-placeholder,.input--type-checkbox input:not([disabled])~.input__checkbox-container:hover .input__checkbox-placeholder{box-shadow:none;border-color:var(--telekom-color-primary-hovered, #f90984)}.input--type-checkbox input:not([disabled]):hover~.input__checkbox-container~label,.input--type-checkbox input:not([disabled])~.input__checkbox-container:hover~label{color:var(--telekom-color-text-and-icon-primary-hovered, #f90984)}.input--type-checkbox input:not([disabled]):active~.input__checkbox-container .input__checkbox-placeholder,.input--type-checkbox input:not([disabled])~.input__checkbox-container:active .input__checkbox-placeholder{border-color:var(--telekom-color-primary-pressed, #cb0068);background:var(--telekom-color-primary-pressed, #cb0068)}.input--type-checkbox input:not([disabled]):active~.input__checkbox-container scale-icon,.input--type-checkbox input:not([disabled])~.input__checkbox-container:active scale-icon{--icon-color:var(--telekom-color-text-and-icon-primary-pressed, #cb0068)}.input--type-checkbox input:not([disabled]):active~.input__checkbox-container~label,.input--type-checkbox input:not([disabled])~.input__checkbox-container:active~label{color:var(--telekom-color-text-and-icon-primary-pressed, #cb0068)}.input--type-checkbox .input__checkbox-container .input__checkbox-placeholder{width:var(--telekom-spacing-composition-space-06);height:var(--telekom-spacing-composition-space-06);margin:0;box-sizing:border-box;transition:all var(--telekom-motion-duration-transition)\n    cubic-bezier(var(--telekom-motion-easing-standard));border-radius:var(--telekom-radius-standard);border:var(--telekom-spacing-composition-space-01) solid\n    var(--telekom-color-text-and-icon-standard);background:var(--telekom-color-background-surface)}.input--type-checkbox .input__checkbox-container scale-icon{top:calc(0.5 * var(--telekom-spacing-composition-space-05));left:calc(0.5 * var(--telekom-spacing-composition-space-05));width:var(--telekom-spacing-composition-space-05);height:var(--telekom-spacing-composition-space-05);position:absolute;user-select:none;--icon-color:var(--telekom-color-text-and-icon-inverted-standard)}.input--type-checkbox .input__checkbox-container~label{transition:all var(--telekom-motion-duration-transition)\n    cubic-bezier(var(--telekom-motion-easing-standard))}.input--type-checkbox.input--status-error .input__checkbox-container .input__checkbox-placeholder{border:var(--telekom-spacing-composition-space-02) solid\n    var(--telekom-color-functional-danger-standard)}.input--type-radio{display:flex;flex-wrap:wrap;align-items:center}.input--type-radio .input__meta{width:100%}.input--type-radio .input__helper-text{margin-top:var(--telekom-spacing-composition-space-03);padding-left:var(--telekom-spacing-composition-space-08)}.input--type-radio label{color:var(--telekom-color-text-and-icon-standard);transition:all var(--telekom-motion-duration-transition)\n    cubic-bezier(var(--telekom-motion-easing-standard));font-weight:var(--telekom-typography-font-weight-medium)}.input--type-radio input{width:var(--telekom-spacing-composition-space-06);height:var(--telekom-spacing-composition-space-06);transition:all var(--telekom-motion-duration-transition)\n    cubic-bezier(var(--telekom-motion-easing-standard));border-radius:var(--telekom-radius-circle);-webkit-appearance:none;background-color:#fff;border:var(--telekom-line-weight-standard) solid\n    var(--telekom-color-ui-border-standard);margin:0 var(--telekom-spacing-composition-space-04) 0 0}.input--type-radio input:focus{outline:none;box-shadow:0 0 0 var(--telekom-line-weight-highlight)\n    var(--telekom-color-functional-focus-standard)}.input--type-radio:hover input:not(:checked):not([disabled]){box-shadow:none;border-color:var(--telekom-color-text-and-icon-primary-hovered)}.input--type-radio:hover input:not(:checked):not([disabled])~label{color:var(--telekom-color-text-and-icon-primary-hovered)}.input--type-radio input:active{border:var(--telekom-spacing-composition-space-04) solid\n    var(--telekom-color-primary-pressed)}.input--type-radio input:not(:checked):not([disabled]):active~label{color:var(--telekom-color-text-and-icon-primary-pressed)}.input--type-radio input:disabled{border:var(--telekom-spacing-composition-space-01) solid\n    var(--telekom-color-ui-border-disabled)}.input--type-radio input:disabled~label{color:var(--telekom-color-text-and-icon-disabled)}.input--type-radio.input--status-error input{border:var(--telekom-spacing-composition-space-02) solid\n    var(--telekom-color-functional-danger-standard)}.input--type-radio input:checked{border:calc(0.5 * var(--telekom-spacing-composition-space-05)) solid\n    var(--telekom-color-primary-standard)}.input--type-radio input:checked:active{border:calc(0.5 * var(--telekom-spacing-composition-space-05)) solid\n    var(--telekom-color-primary-pressed, #cb0068)}.input--type-radio input:checked:disabled{background:var(--telekom-color-ui-disabled);border:calc(0.5 * var(--telekom-spacing-composition-space-05)) solid\n    var(--telekom-color-ui-border-disabled)}.input--type-radio input:checked:disabled~label{color:var(--telekom-color-text-and-icon-disabled)}.input__textarea-label-safety-background{top:var(--telekom-spacing-composition-space-02);left:var(--telekom-spacing-composition-space-02);right:var(--telekom-spacing-composition-space-02);position:absolute;pointer-events:none;border-radius:var(--telekom-radius-standard);height:var(--telekom-spacing-composition-space-08);background-color:var(--telekom-color-background-surface, #ffffff)}.input--disabled .input__textarea-label-safety-background{background-color:transparent}.input--disabled label,.input--disabled .input__label,.input--disabled input,.input--disabled .input__input,.input--disabled .input__checkbox-container,.input--disabled .input__radio,.input--disabled .input__select,.input--disabled .input__textarea,.input--disabled .input__helper-text{cursor:not-allowed;border-color:var(--telekom-color-ui-disabled);color:var(--telekom-color-text-and-icon-disabled);background:var(--telekom-color-ui-disabled)}.input--disabled .input__select-wrapper{--icon-color:var(--telekom-color-text-and-icon-disabled)}.input--disabled.animated label.input__label{color:var(--telekom-color-text-and-icon-disabled)}";

const SELECT_ICON = 'M20.65 7.4c-.3-.3-.75-.3-1.05 0L12 15 4.4 7.4c-.3-.3-.75-.3-1.05 0s-.3.75 0 1.05L12 17.1l8.65-8.65c.3-.25.3-.75 0-1.05z';
class Input {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleInput = createEvent$1(this, "scale-input", 7);
    this.scaleInputLegacy = createEvent$1(this, "scaleInput", 7);
    this.scaleChange = createEvent$1(this, "scale-change", 7);
    this.scaleChangeLegacy = createEvent$1(this, "scaleChange", 7);
    this.scaleFocus = createEvent$1(this, "scale-focus", 7);
    this.scaleFocusLegacy = createEvent$1(this, "scaleFocus", 7);
    this.scaleBlur = createEvent$1(this, "scale-blur", 7);
    this.scaleBlurLegacy = createEvent$1(this, "scaleBlur", 7);
    this.scaleKeyDown = createEvent$1(this, "scale-keydown", 7);
    this.scaleKeyDownLegacy = createEvent$1(this, "scaleKeyDown", 7);
    /** (optional) Input type */
    this.type = 'text';
    /** (optional) Input name */
    this.name = '';
    /** (optional) Input label variant */
    this.variant = 'static';
    /** (optional) Input label */
    this.label = '';
    /** (optional) Input size */
    this.size = '';
    /** (optional) Input helper text */
    this.helperText = '';
    /** @deprecated - invalid should replace status */
    this.status = '';
    /** (optional) Input status */
    this.invalid = false;
    /** (optional) Input placeHolder */
    this.placeholder = '';
    /** (optional) Active switch */
    this.checked = false;
    /** (optional) Input value */
    this.value = '';
    /** (optional) Makes type `select` behave as a controlled component in React */
    this.controlled = false;
    /** Whether the input element has focus */
    this.hasFocus = false;
    this.internalId = generateUniqueId();
    // Handle checkbox/radio change (click on label)
    this.handleCheckChange = (event) => {
      this.checked = event.target.checked;
    };
    // Handle click on checkbox visual element
    this.handleCheckboxClick = () => {
      if (!this.disabled) {
        this.checked = !this.checked;
      }
    };
    // Handle change on <select> independently
    // so we can allow "controlled" (React) behavior,
    // in which only the `value` changing does update
    // the actual <select> value, not the user's input.
    this.handleSelectChange = (event) => {
      const target = event.target;
      if (this.controlled) {
        emitEvent$1(this, 'scaleChange', { value: target.value });
        this.selectElement.value = String(this.value);
        this.forceUpdate = String(Date.now());
      }
      else {
        this.value = target.value || '';
        this.emitChange();
      }
    };
    this.handleInput = (event) => {
      const target = event.target;
      if (target) {
        this.value = target.value || '';
        this.emitChange();
      }
      emitEvent$1(this, 'scaleInput', event);
    };
    this.handleChange = (event) => {
      const target = event.target;
      if (target) {
        this.value = target.value || '';
        this.emitChange();
      }
    };
    this.handleFocus = () => {
      emitEvent$1(this, 'scaleFocus');
      this.hasFocus = true;
    };
    this.handleBlur = () => {
      emitEvent$1(this, 'scaleBlur');
      this.hasFocus = false;
    };
    this.handleKeyDown = (event) => {
      emitEvent$1(this, 'scaleKeyDown', event);
    };
  }
  componentWillLoad() {
    if (this.inputId == null) {
      this.inputId = 'input-' + this.internalId;
    }
    // Default icon for `select` type
    if (this.type === 'select' && this.icon == null) {
      this.icon = SELECT_ICON;
    }
  }
  componentDidLoad() {
    // tslint:disable-next-line:no-console
    statusNote({
      tag: 'deprecated',
      source: this.el,
      type: 'warn',
      extraMessage: `Please use <${{
        select: 'scale-dropdown',
        checkbox: 'scale-checkbox',
        radio: 'scale-radio-button',
        textarea: 'scale-textarea',
      }[this.type] || 'scale-text-field'}> instead.`,
    });
    // Keep this.value up-to-date for type="select".
    // This is important also for React, where `value` is used to control the element state.
    if (this.type === 'select') {
      const select = this.selectElement;
      const selectedValue = select.selectedIndex > -1
        ? select.options[select.selectedIndex].value
        : null;
      // If we have a `value` passed, set it on the <select> element
      // Otherwise, if we have an <option selected>, set its value on `value`
      if (this.value) {
        select.value = String(this.value);
      }
      else if (selectedValue) {
        this.value = selectedValue;
      }
    }
    // This is a workaroud to prevent a bug in Stencil:
    // when using slots without Shadow DOM (possible only with Stencil)
    // sometimes an update in the Light DOM does not trigger a re-render
    // thus causing unexpected results.
    // https://gitlab.com/scale-ds/scale-telekom/-/issues/16
    if (this.type === 'select' && this.selectElement) {
      this.mutationObserver = new MutationObserver(() => {
        this.forceUpdate = String(Date.now());
      });
      this.mutationObserver.observe(this.el, {
        childList: true,
        subtree: true,
      });
    }
  }
  componentWillUpdate() { }
  componentDidRender() {
    // When type `select` and `controlled` is true,
    // make sure the <select> is always in sync with the value.
    const value = this.value == null ? '' : this.value.toString();
    if (this.type === 'select' &&
      this.controlled &&
      this.selectElement.value.toString() !== value) {
      this.selectElement.value = value;
    }
    if (this.status !== '') {
      statusNote({
        tag: 'deprecated',
        message: 'Property "status" is deprecated. Please use the "invalid" property!',
        type: 'warn',
        source: this.el,
      });
    }
  }
  disconnectedCallback() {
    if (this.mutationObserver) {
      this.mutationObserver.disconnect();
    }
  }
  // We're not watching `value` like we used to
  // because we get unwanted `scaleChange` events
  // because how we keep this.value up-to-date for type="select"
  // `this.value = selectedValue`
  emitChange() {
    emitEvent$1(this, 'scaleChange', {
      value: this.value == null ? this.value : this.value.toString(),
    });
  }
  checkedChanged() {
    emitEvent$1(this, 'scaleChange', { value: this.checked });
  }
  render() {
    const Tag = this.type === 'textarea' ? 'textarea' : 'input';
    const ariaInvalidAttr = this.status === 'error' || this.invalid ? { 'aria-invalid': 'true' } : {};
    const helperTextId = `helper-message-${this.internalId}`;
    const ariaDescribedByAttr = { 'aria-describedBy': helperTextId };
    if (this.type === 'checkbox') {
      return (hAsync(Host$1, { checked: this.checked }, hAsync("div", { class: this.getCssClassMap() }, hAsync("input", Object.assign({ type: "checkbox", name: this.name, id: this.inputId, onChange: this.handleCheckChange, value: this.value, checked: this.checked, disabled: this.disabled }, ariaInvalidAttr, ariaDescribedByAttr)), hAsync("div", { class: classnames('input__checkbox-container'), onClick: this.handleCheckboxClick }, hAsync("span", { class: classnames('input__checkbox-placeholder') }), !!this.icon && this.checked && (hAsync("scale-icon", { path: this.icon, size: 12 }))), hAsync("label", { htmlFor: this.inputId }, this.label), !!this.helperText && (hAsync("div", { class: "input__meta", id: helperTextId, "aria-live": "polite", "aria-relevant": "additions removals" }, hAsync("div", { class: "input__helper-text" }, this.helperText))))));
    }
    if (this.type === 'radio') {
      return (hAsync(Host$1, null, hAsync("div", { class: this.getCssClassMap() }, hAsync("input", Object.assign({ type: "radio", name: this.name, id: this.inputId, onChange: this.handleCheckChange, value: this.value, checked: this.checked, disabled: this.disabled }, ariaInvalidAttr, ariaDescribedByAttr)), hAsync("label", { htmlFor: this.inputId }, this.label), !!this.helperText && (hAsync("div", { class: "input__meta", id: helperTextId, "aria-live": "polite", "aria-relevant": "additions removals" }, hAsync("div", { class: "input__helper-text" }, this.helperText))))));
    }
    return (hAsync(Host$1, null, hAsync("div", { class: this.getCssClassMap() }, hAsync("label", { class: "input__label", htmlFor: this.inputId }, this.label), this.type === 'select' ? (hAsync("div", { class: "input__select-wrapper" }, hAsync("select", Object.assign({ ref: (el) => (this.selectElement = el), class: classnames('input__select'),
      // @ts-ignore
      value: this.value, onChange: this.handleSelectChange, onFocus: this.handleFocus, onBlur: this.handleBlur, onKeyDown: this.handleKeyDown, disabled: this.disabled, required: this.required, multiple: this.multiple, id: this.inputId, name: this.name, size: this.visibleSize }, ariaInvalidAttr, ariaDescribedByAttr), hAsync("slot", null)), !!this.icon && hAsync("scale-icon", { path: this.icon }))) : (hAsync(Tag, Object.assign({ type: this.type, class: classnames(`input__${this.type === 'textarea' ? 'textarea' : 'input'}`, this.customResize && this.customResize.id), style: !!this.resize && { resize: this.resize }, value: this.value }, (!!this.name ? { name: this.name } : {}), { required: this.required, minLength: this.minLength, maxLength: this.maxLength, id: this.inputId, onInput: this.handleInput, onChange: this.handleChange, onFocus: this.handleFocus, onBlur: this.handleBlur, onKeyDown: this.handleKeyDown }, (!!this.placeholder ? { placeholder: this.placeholder } : {}), { disabled: this.disabled }, (!!this.rows ? { rows: this.rows } : {}), (!!this.cols ? { cols: this.cols } : {}), ariaInvalidAttr, ariaDescribedByAttr))), this.type === 'textarea' && this.variant === 'animated' && (hAsync("span", { class: "input__textarea-label-safety-background", "aria-hidden": "true" })), (!!this.helperText || !!this.counter) && (hAsync("div", { class: "input__meta", id: helperTextId, "aria-live": "polite", "aria-relevant": "additions removals" }, !!this.helperText && (hAsync("div", { class: "input__helper-text" }, this.helperText)), this.counter && (hAsync("div", { class: "input__counter" }, !!this.value ? String(this.value).length : 0, " /", ' ', this.maxLength)))))));
  }
  getCssClassMap() {
    return classnames('input', this.type && `input--type-${this.type}`, this.hasFocus && 'input--has-focus', this.checked && `input--checked`, this.resize && `input--resize-${this.resize}`, this.variant && `input--variant-${this.variant}`, this.disabled && `input--disabled`, this.transparent && 'input--transparent', this.status && `input--status-${this.status}`, this.invalid && `input--status-error`, this.size && `input--size-${this.size}`, this.value != null && this.value !== '' && 'animated');
  }
  get el() { return getElement$1(this); }
  static get watchers() { return {
    "checked": ["checkedChanged"]
  }; }
  static get style() { return inputCss; }
  static get cmpMeta() { return {
    "$flags$": 4,
    "$tagName$": "scale-input",
    "$members$": {
      "type": [1],
      "name": [1],
      "variant": [1],
      "label": [1],
      "size": [1],
      "rows": [2],
      "cols": [2],
      "helperText": [1, "helper-text"],
      "status": [1],
      "invalid": [4],
      "maxLength": [2, "max-length"],
      "minLength": [2, "min-length"],
      "placeholder": [1],
      "disabled": [4],
      "required": [4],
      "counter": [4],
      "checked": [516],
      "resize": [1],
      "value": [1032],
      "inputId": [1, "input-id"],
      "icon": [1],
      "multiple": [4],
      "visibleSize": [2, "visible-size"],
      "transparent": [4],
      "controlled": [4],
      "styles": [1],
      "customResize": [32],
      "hasFocus": [32],
      "forceUpdate": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["checked", "checked"]]
  }; }
}

const linkCss = "/*!@:host*/.sc-scale-link-h{--spacing-x-icon:var(--telekom-spacing-composition-space-03);--line-offset:0.0625em;--color:var(--telekom-color-text-and-icon-link-standard);--color-line-initial:var(--telekom-color-functional-interaction-subtle);--line-thickness-initial:var(--telekom-line-weight-standard);--color-visited:var(--telekom-color-text-and-icon-link-visited);--color-line-visited:currentColor;--line-thickness-visited:var(--line-thickness-initial);--color-hover:var(--telekom-color-text-and-icon-link-hovered);--color-line-hover:currentColor;--line-thickness-hover:var(--telekom-line-weight-highlight);--color-focus-outline:var(--telekom-color-functional-focus-standard);--color-focus:var(--telekom-color-text-and-icon-link-standard);--color-line-focus:transparent;--line-thickness-focus:0;--color-active:var(--telekom-color-text-and-icon-link-active);--color-line-active:currentColor;--line-thickness-active:var(--telekom-line-weight-highlight);--color-disabled:var(--telekom-color-text-and-icon-disabled);--color-line-disabled:transparent;--line-thickness-disabled:var(--line-thickness-initial)}/*!@:host*/.sc-scale-link-h{display:inline;margin-bottom:calc(var(--line-offset) + var(--line-thickness-initial))}/*!@[part='anchor']*/[part='anchor'].sc-scale-link{cursor:pointer;outline:none;font-weight:var(--font-weight);color:var(--color);position:relative;display:inline-flex;text-decoration:underline;text-underline-offset:0.1875em;text-underline-position:from-font;text-decoration-thickness:var(\n    --line-thickness,\n    var(--line-thickness-initial)\n  );text-decoration-color:var(--line-color)}/*!@[part='anchor']*/[part='anchor'].sc-scale-link{display:inline-flex;align-items:center}/*!@[part='content']*/[part='content'].sc-scale-link{position:relative}/*!@slot[name='icon']::slotted(*)*/slot[name='icon'].sc-scale-link-s>*{position:relative;margin-left:var(--spacing-x-icon)}/*!@:host(.reverse) [part='anchor']*/.reverse.sc-scale-link-h [part='anchor'].sc-scale-link{flex-direction:row-reverse}/*!@:host(.reverse) slot[name='icon']::slotted(*)*/.sc-scale-link-h.reverse slot[name='icon'].sc-scale-link-s>*{margin-left:auto;margin-right:var(--spacing-x-icon)}/*!@:host(.no-underline)*/.no-underline.sc-scale-link-h{--color-line-initial:transparent;--color-line-visited:transparent;--line-color:transparent}/*!@:host(.no-underline) [part='anchor']*/.no-underline.sc-scale-link-h [part='anchor'].sc-scale-link{text-decoration:none}/*!@[part='anchor']:hover,\n[part='anchor']:focus,\n[part='anchor']:active,\n:host(.no-underline) [part='anchor']:hover,\n:host(.no-underline) [part='anchor']:active*/[part='anchor'].sc-scale-link:hover,[part='anchor'].sc-scale-link:focus,[part='anchor'].sc-scale-link:active,.no-underline.sc-scale-link-h [part='anchor'].sc-scale-link:hover,.no-underline.sc-scale-link-h [part='anchor'].sc-scale-link:active{text-decoration:underline}/*!@[part='anchor']:hover,\n:host(.no-underline) [part='anchor']:hover*/[part='anchor'].sc-scale-link:hover,.no-underline.sc-scale-link-h [part='anchor'].sc-scale-link:hover{color:var(--color-hover);text-decoration-color:var(--color-line-hover);text-decoration-thickness:var(\n    --line-thickness-hover,\n    var(--line-thickness-initial)\n  )}/*!@[part='anchor']:focus,\n[part='anchor']:focus-visible*/[part='anchor'].sc-scale-link:focus,[part='anchor'].sc-scale-link:focus-visible{color:var(--color-focus);text-decoration-color:var(--color-line-focus);text-decoration-thickness:var(\n    --line-thickness-focus,\n    var(--line-thickness-initial)\n  );outline:var(--telekom-line-weight-highlight) solid var(--color-focus-outline);outline-offset:var(--telekom-spacing-composition-space-01);border-radius:var(--telekom-radius-small)}/*!@[part='anchor']:active,\n:host(.no-underline) [part='anchor']:active*/[part='anchor'].sc-scale-link:active,.no-underline.sc-scale-link-h [part='anchor'].sc-scale-link:active{color:var(--color-active);text-decoration-color:var(--color-line-active);text-decoration-thickness:var(\n    --line-thickness-active,\n    var(--line-thickness-initial)\n  )}/*!@[part='anchor']:visited*/[part='anchor'].sc-scale-link:visited{color:var(--color-visited);text-decoration-color:var(--color-line-visited);text-decoration-thickness:var(\n    --line-thickness-visited,\n    var(--line-thickness-initial)\n  )}/*!@:host(.disabled)*/.disabled.sc-scale-link-h{cursor:not-allowed}/*!@:host(.disabled) [part='anchor'],\n:host(.disabled) [part='anchor']:visited,\n:host(.disabled) [part='anchor']:hover,\n:host(.disabled) [part='anchor']:active*/.disabled.sc-scale-link-h [part='anchor'].sc-scale-link,.disabled.sc-scale-link-h [part='anchor'].sc-scale-link:visited,.disabled.sc-scale-link-h [part='anchor'].sc-scale-link:hover,.disabled.sc-scale-link-h [part='anchor'].sc-scale-link:active{color:var(--color-disabled);text-decoration:none;cursor:not-allowed;pointer-events:none}";

/**
 * This is a superset of the default anchor `<a>` element.
 * @part anchor - the native achor element wrapping all contents
 * @part content - a wrapper around the default slot with the underline
 *
 * @slot default - here goes the actual text of the
 * @slot icon - a slot that will not be underlined and which position can be changed
 */
class Link {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) Disabled link */
    this.disabled = false;
    /** (optional) Remove the initial line from the text (can also be achieved via `--line-thickness-initial: 0`)
     * Remove the line for every state with `--line-thickness: 0`
     */
    this.omitUnderline = false;
    /** (optional) Chnage icon/content slot order */
    this.iconPosition = 'after';
  }
  async setFocus() {
    this.focusableElement.focus();
  }
  getAnchorProps() {
    const props = {
      href: this.href || null,
      tabIndex: this.disabled ? -1 : this.innerTabindex,
      'aria-disabled': `${this.disabled}`,
      download: this.download || null,
      hreflang: this.hreflang || null,
      ping: this.ping || null,
      referrerpolicy: this.referrerpolicy || null,
      rel: this.rel || null,
      target: this.target || null,
      type: this.type || null,
    };
    return Object.assign({}, props);
  }
  render() {
    return (hAsync(Host$1, { class: {
        disabled: this.disabled,
        reverse: this.iconPosition === 'before',
        'no-underline': this.omitUnderline,
      } }, this.styles && hAsync("style", null, this.styles), hAsync("a", Object.assign({ part: "anchor", ref: (el) => (this.focusableElement = el) }, this.getAnchorProps()), hAsync("div", { part: "content" }, hAsync("slot", null)), hAsync("slot", { name: "icon" }))));
  }
  static get style() { return linkCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-link",
    "$members$": {
      "disabled": [4],
      "omitUnderline": [4, "omit-underline"],
      "href": [1],
      "download": [1],
      "iconPosition": [1, "icon-position"],
      "hreflang": [1],
      "ping": [1],
      "referrerpolicy": [1],
      "rel": [1],
      "target": [1],
      "type": [1],
      "innerTabindex": [2, "inner-tabindex"],
      "styles": [1],
      "setFocus": [64]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const listCss = "/*!@:host*/.sc-scale-list-h{--spacing-left:0;--spacing-left-nested:var(--telekom-spacing-composition-space-04)}/*!@.list*/.list.sc-scale-list{padding-left:var(--spacing-left)}/*!@.list--nested*/.list--nested.sc-scale-list{margin-top:0;margin-bottom:0;padding-left:var(--spacing-left-nested)}";

/**
 * @see https://github.com/carbon-design-system/carbon-web-components/tree/master/src/components/list
 */
class List {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.isNested = false;
    /** (optional) Make the list ordered (ol) */
    this.ordered = false;
  }
  orderedChanged(newValue) {
    this.propagatePropsToChildren(newValue);
  }
  componentDidLoad() {
    this.propagatePropsToChildren(this.ordered);
  }
  connectedCallback() {
    this.isNested = this.el.closest('scale-list-item') != null;
    if (this.isNested) {
      this.el.setAttribute('slot', 'nested');
    }
    else {
      this.el.removeAttribute('slot');
    }
  }
  propagatePropsToChildren(ordered) {
    const items = Array.from(this.el.children).filter((child) => child.matches('scale-list-item'));
    items.forEach((item, index) => {
      item.ordered = ordered;
      item.index = index + 1;
    });
  }
  render() {
    const Tag = this.ordered ? 'ol' : 'ul';
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync(Tag, { class: this.getCssClassMap(), part: classnames('base', this.ordered && 'ordered', this.isNested && 'nested') }, hAsync("slot", null))));
  }
  getCssClassMap() {
    return classnames('list', this.ordered && 'list--type-ordered', this.isNested && 'list--nested');
  }
  get el() { return getElement$1(this); }
  static get watchers() { return {
    "ordered": ["orderedChanged"]
  }; }
  static get style() { return listCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-list",
    "$members$": {
      "ordered": [4],
      "styles": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const listItemCss = "/*!@:host(scale-list-item)*/scale-list-item.sc-scale-list-item-h{--display:block;--font-size:var(--telekom-typography-font-size-body);--line-height:var(--telekom-typography-line-spacing-standard);--spacing-left:calc(0.5ch + var(--telekom-spacing-composition-space-07));--spacing-left-nested:calc(\n    0.5ch + var(--telekom-spacing-composition-space-06)\n  );--font-marker-ordered:var(--telekom-text-style-body);--font-marker-ordered-nested:var(--telekom-text-style-small-bold);--line-height-marker-ordered-nested:var(\n    --telekom-typography-line-spacing-standard\n  );--spacing-top-marker-ordered-nested:calc(\n    var(--telekom-spacing-composition-space-06) -\n      var(--telekom-spacing-composition-space-05)\n  );--spacing-right-no-marker:var(--telekom-spacing-composition-space-04);display:var(--display)}/*!@.list-item*/.list-item.sc-scale-list-item{position:relative;font-size:var(--font-size);line-height:var(--line-height);padding-left:var(--spacing-left);margin-top:var(--telekom-spacing-composition-space-03)}/*!@.list-item--nested*/.list-item--nested.sc-scale-list-item{padding-left:var(--spacing-left-nested)}/*!@.list-item:before*/.list-item.sc-scale-list-item:before{content:'';top:0;left:0;position:absolute}/*!@.list-item--unordered:before*/.list-item--unordered.sc-scale-list-item:before{top:0.5em;border:var(--telekom-spacing-composition-space-01) solid currentColor;display:block;transform:scale(0.66);background:currentColor;box-sizing:border-box;border-radius:50%;width:var(--telekom-spacing-composition-space-04);height:var(--telekom-spacing-composition-space-04)}/*!@.list-item--nested.list-item--unordered:before*/.list-item--nested.list-item--unordered.sc-scale-list-item:before{border:var(--telekom-spacing-composition-space-01) solid currentColor;background:transparent}/*!@.list-item--ordered:before*/.list-item--ordered.sc-scale-list-item:before{content:attr(data-index) '.';font:var(--font-marker-ordered);font-variant-numeric:tabular-nums}/*!@.list-item--nested.list-item--ordered:before*/.list-item--nested.list-item--ordered.sc-scale-list-item:before{font:var(--telekom-text-style-small-bold);font-variant-numeric:tabular-nums;line-height:var(--line-height-marker-ordered-nested);padding-top:var(--spacing-top-marker-ordered-nested)}/*!@.list-item--no-marker*/.list-item--no-marker.sc-scale-list-item{display:inline-flex;align-items:center;padding-left:0}/*!@.list-item--no-marker:before*/.list-item--no-marker.sc-scale-list-item:before{display:none}/*!@.list-item--no-marker > ::slotted(*)*/.list-item--no-marker>.sc-scale-list-item-s>*{margin-right:var(--spacing-right-no-marker)}";

/**
 * @todo styles for custom icon (no-marker prop?)
 * @see https://github.com/carbon-design-system/carbon-web-components/tree/master/src/components/list
 */
class ListItem {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** Whether this is a child of an ordered scale-list, gets set automatically by its parent */
    this.ordered = false;
    /** If `false`, no marker or left padding will be visible */
    this.marker = true;
    this.hasNestedChild = false;
    this.isNested = false;
    this.handleSlotChange = ({ target }) => {
      this.hasNestedChild =
        target.assignedNodes().length > 0;
      this.isNested = this.isNestedCheck();
    };
    this.isNestedCheck = () => {
      return this.el.closest('scale-list[slot="nested"]') != null;
    };
  }
  componentWillLoad() {
    this.isNested = this.isNestedCheck();
  }
  connectedCallback() {
    if (!this.el.hasAttribute('role')) {
      this.el.setAttribute('role', 'listitem');
    }
  }
  render() {
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { class: this.getCssClassMap(), "data-index": this.index, part: classnames('base', this.ordered ? 'ordered' : 'unordered', this.isNested && 'nested', !this.marker && 'no-marker') }, hAsync("slot", null), hAsync("div", { class: "list-item__nested-list", part: "nested-list", hidden: !this.hasNestedChild }, hAsync("slot", { name: "nested", onSlotchange: this.handleSlotChange })))));
  }
  getCssClassMap() {
    const orderType = this.ordered ? 'ordered' : 'unordered';
    return classnames('list-item', this.isNested && 'list-item--nested', `list-item--${orderType}`, !this.marker && 'list-item--no-marker');
  }
  get el() { return getElement$1(this); }
  static get style() { return listItemCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-list-item",
    "$members$": {
      "ordered": [4],
      "index": [1026],
      "marker": [4],
      "styles": [1],
      "hasNestedChild": [32],
      "isNested": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const loadingSpinnerCss = "/*!@:host*/.sc-scale-loading-spinner-h{display:inline-flex;--size-outer-small:24px;--size-outer-large:48px;--size-inner-small:24px;--size-inner-large:48px;--line-height-size-small:24px;--line-height-size-large:48px;--font:var(--telekom-text-style-ui-bold);--color-circle-primary:var(--telekom-color-primary-standard);--color-circle-primary-inner:var(--telekom-color-ui-subtle);--color-text-primary:var(--telekom-color-text-and-icon-additional);--color-circle-white:var(--telekom-color-ui-base);--color-circle-white-inner:var(--telekom-color-ui-regular);--color-text-white:var(--telekom-color-text-and-icon-white-standard);--spacing-vertical:var(--telekom-spacing-composition-space-05);--spacing-horizontal:var(--telekom-spacing-composition-space-06)}/*!@.sr-only*/.sr-only.sc-scale-loading-spinner{position:absolute;left:-10000px;overflow:hidden}/*!@.spinner*/.spinner.sc-scale-loading-spinner{display:inline-flex;align-items:center}/*!@.spinner.spinner--alignment-vertical*/.spinner.spinner--alignment-vertical.sc-scale-loading-spinner{flex-direction:column}/*!@.spinner .spinner__text*/.spinner.sc-scale-loading-spinner .spinner__text.sc-scale-loading-spinner{font:var(--telekom-text-style-ui-bold);color:var(--color-text-primary)}/*!@.spinner.spinner--variant-white .spinner__text*/.spinner.spinner--variant-white.sc-scale-loading-spinner .spinner__text.sc-scale-loading-spinner{color:var(--color-text-white)}/*!@.spinner.spinner--alignment-horizontal .spinner__text*/.spinner.spinner--alignment-horizontal.sc-scale-loading-spinner .spinner__text.sc-scale-loading-spinner{display:flex;align-self:center;margin-left:var(--spacing-horizontal)}/*!@.spinner.spinner--alignment-horizontal.spinner--size-small .spinner__text*/.spinner.spinner--alignment-horizontal.spinner--size-small.sc-scale-loading-spinner .spinner__text.sc-scale-loading-spinner{line-height:var(--line-height-size-small)}/*!@.spinner.spinner--alignment-horizontal.spinner--size-large .spinner__text*/.spinner.spinner--alignment-horizontal.spinner--size-large.sc-scale-loading-spinner .spinner__text.sc-scale-loading-spinner{line-height:var(--line-height-size-large)}/*!@.spinner.spinner--alignment-vertical .spinner__text*/.spinner.spinner--alignment-vertical.sc-scale-loading-spinner .spinner__text.sc-scale-loading-spinner{margin-top:var(--spacing-vertical)}/*!@.spinner.spinner--alignment-vertical.spinner--size-small .spinner__container*/.spinner.spinner--alignment-vertical.spinner--size-small.sc-scale-loading-spinner .spinner__container.sc-scale-loading-spinner{height:var(--size-inner-small);width:var(--size-inner-small)}/*!@.spinner.spinner--alignment-vertical.spinner--size-large .spinner__container*/.spinner.spinner--alignment-vertical.spinner--size-large.sc-scale-loading-spinner .spinner__container.sc-scale-loading-spinner{height:var(--size-outer-large);width:var(--size-outer-large)}/*!@.spinner.spinner--alignment-horizontal.spinner--size-small .spinner__container*/.spinner.spinner--alignment-horizontal.spinner--size-small.sc-scale-loading-spinner .spinner__container.sc-scale-loading-spinner{height:var(--size-inner-small);width:var(--size-inner-small);text-align:left}/*!@.spinner.spinner--alignment-horizontal.spinner--size-large .spinner__container*/.spinner.spinner--alignment-horizontal.spinner--size-large.sc-scale-loading-spinner .spinner__container.sc-scale-loading-spinner{height:var(--size-outer-large);width:var(--size-outer-large);text-align:left}/*!@.spinner .spinner__container*/.spinner.sc-scale-loading-spinner .spinner__container.sc-scale-loading-spinner{align-items:center;display:inline-flex}/*!@.spinner .spinner__container .spinner__circle*/.spinner.sc-scale-loading-spinner .spinner__container.sc-scale-loading-spinner .spinner__circle.sc-scale-loading-spinner{animation:rotate 2s linear infinite;z-index:2;position:absolute;width:var(--size-inner-small);height:var(--size-inner-small)}/*!@.spinner .spinner__container .spinner__circle-background*/.spinner.sc-scale-loading-spinner .spinner__container.sc-scale-loading-spinner .spinner__circle-background.sc-scale-loading-spinner{animation:rotate 2s linear infinite;position:absolute;width:var(--size-outer-small);height:var(--size-outer-small)}/*!@.spinner.spinner--size-large .spinner__container .spinner__circle-background*/.spinner.spinner--size-large.sc-scale-loading-spinner .spinner__container.sc-scale-loading-spinner .spinner__circle-background.sc-scale-loading-spinner{width:var(--size-outer-large);height:var(--size-outer-large)}/*!@.spinner.spinner--size-large .spinner__container .spinner__circle*/.spinner.spinner--size-large.sc-scale-loading-spinner .spinner__container.sc-scale-loading-spinner .spinner__circle.sc-scale-loading-spinner{width:var(--size-inner-large);height:var(--size-inner-large)}/*!@.spinner.spinner--variant-white\n  .spinner__container\n  .spinner__circle-background\n  .path*/.spinner.spinner--variant-white.sc-scale-loading-spinner .spinner__container.sc-scale-loading-spinner .spinner__circle-background.sc-scale-loading-spinner .path.sc-scale-loading-spinner{stroke:var(--color-circle-white-inner)}/*!@.spinner .spinner__container .spinner__circle-background .path*/.spinner.sc-scale-loading-spinner .spinner__container.sc-scale-loading-spinner .spinner__circle-background.sc-scale-loading-spinner .path.sc-scale-loading-spinner{stroke:var(--color-circle-primary-inner)}/*!@.spinner.spinner--variant-white .spinner__container .spinner__circle .path*/.spinner.spinner--variant-white.sc-scale-loading-spinner .spinner__container.sc-scale-loading-spinner .spinner__circle.sc-scale-loading-spinner .path.sc-scale-loading-spinner{stroke:white}/*!@.spinner .spinner__container .spinner__circle .path*/.spinner.sc-scale-loading-spinner .spinner__container.sc-scale-loading-spinner .spinner__circle.sc-scale-loading-spinner .path.sc-scale-loading-spinner{animation:dash 1.5s ease-in-out infinite;stroke:var(--color-circle-primary)}@keyframes rotate{100%{transform:rotate(360deg)}}@keyframes dash{0%{stroke-dasharray:1, 150;stroke-dashoffset:0}50%{stroke-dasharray:90, 150;stroke-dashoffset:-35}100%{stroke-dasharray:90, 150;stroke-dashoffset:-124}}@media screen and (forced-colors: active), (-ms-high-contrast: active){/*!@.spinner .spinner__container .spinner__circle-background .path*/.spinner.sc-scale-loading-spinner .spinner__container.sc-scale-loading-spinner .spinner__circle-background.sc-scale-loading-spinner .path.sc-scale-loading-spinner{stroke:none}/*!@.spinner .spinner__container .spinner__circle .path*/.spinner.sc-scale-loading-spinner .spinner__container.sc-scale-loading-spinner .spinner__circle.sc-scale-loading-spinner .path.sc-scale-loading-spinner{stroke:white}/*!@.spinner.spinner--variant-white\n    .spinner__container\n    .spinner__circle-background\n    .path*/.spinner.spinner--variant-white.sc-scale-loading-spinner .spinner__container.sc-scale-loading-spinner .spinner__circle-background.sc-scale-loading-spinner .path.sc-scale-loading-spinner{stroke:none}/*!@.spinner.spinner--variant-white .spinner__container .spinner__circle .path*/.spinner.spinner--variant-white.sc-scale-loading-spinner .spinner__container.sc-scale-loading-spinner .spinner__circle.sc-scale-loading-spinner .path.sc-scale-loading-spinner{stroke:white}}";

let i$7 = 0;
class LoadingSpinner {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    // todo the variant white should be renamed for dark mode
    this.variant = 'primary';
    this.alignment = 'horizontal';
    this.size = 'small';
  }
  componentWillLoad() {
    i$7++;
  }
  render() {
    return (hAsync(Host$1, null, hAsync("div", { part: this.getBasePartMap(), class: this.getCssClassMap() }, hAsync("div", { part: "container", class: "spinner__container" }, hAsync("svg", { class: "spinner__circle", viewBox: "0 0 50 50", "aria-hidden": "true" }, hAsync("circle", { class: "path", cx: "25", cy: "25", r: "22.5", fill: "none", "stroke-width": "4" })), hAsync("svg", { class: "spinner__circle-background", viewBox: "0 0 50 50", "aria-hidden": "true" }, hAsync("circle", { class: "path", cx: "25", cy: "25", r: "22.5", fill: "none", "stroke-width": "4" }))), hAsync("div", { class: "sr-only", "aria-live": "polite", id: `spinner-label-${i$7}` }, this.accessibilityTitle
      ? this.accessibilityTitle
      : this.text || 'Loading'), this.text ? (hAsync("div", { part: "text", class: "spinner__text", "aria-hidden": "true" }, this.text)) : (hAsync("div", null)))));
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const name = 'spinner';
    const prefix = mode === 'basePart' ? '' : `${name}--`;
    return classnames(name, this.alignment && `${prefix}alignment-${this.alignment}`, this.variant && `${prefix}variant-${this.variant}`, this.size && `${prefix}size-${this.size}`, this.text && `${prefix}text`);
  }
  static get style() { return loadingSpinnerCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-loading-spinner",
    "$members$": {
      "variant": [1],
      "alignment": [1],
      "text": [1],
      "accessibilityTitle": [1, "accessibility-title"],
      "size": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const appLogoCss = ".logo{display:flex;align-items:center}.logo>svg{width:100%;max-width:300px;height:auto}";

class Logo$1 {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.href = 'javascript:void(0);';
    this.logoTitle = 'Telekom Logo';
    this.color = '#fff';
    this.claim = false;
    this.focusable = true;
  }
  componentDidRender() {
    statusNote({
      tag: 'deprecated',
      message: '<app-logo></app-logo> is deprecated, please use <scale-logo></scale-logo>',
      type: 'warn',
      source: this.hostElement,
    });
  }
  render() {
    if (!this.claim) {
      return (hAsync("a", { href: this.href, title: this.logoTitle, tabindex: this.focusable === false ? -1 : undefined }, hAsync("svg", { width: "51", height: "24", viewBox: "0 0 51 24", xmlns: "http://www.w3.org/2000/svg" }, hAsync("path", { d: "M0 15.8v-4.83h4.996v4.83H0zm15.235 0v-4.83h4.997v4.83h-4.997zm14.99 0v-4.83h4.995v4.83h-4.996zm14.988 0v-4.83h4.996v4.83h-4.996zM19.984 0l.248 8.415-1.31.219c-.243-2.48-.916-4.32-2.02-5.52-1.16-1.257-2.76-1.913-4.815-1.97V18.75c0 1.538.225 2.536.689 2.997.395.392 1.062.633 2.002.723.28.023.755.034 1.428.034v1.346H4.026v-1.346c.673 0 1.148-.011 1.427-.034.94-.09 1.608-.33 2.002-.723.465-.46.687-1.46.687-2.997V1.145c-2.055.056-3.652.712-4.813 1.968-1.103 1.201-1.776 3.041-2.02 5.521L0 8.415.247 0h19.737z", fill: this.color, "fill-rule": "nonzero" }))));
    }
    return (hAsync("a", { class: "logo", href: this.href, title: this.logoTitle, onFocus: () => {
        window.scrollTo({ top: 0 });
      } }, hAsync("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 284 36" }, hAsync("g", { fill: this.color, "fill-rule": "nonzero" }, this.claimLang === 'de' ? (hAsync("path", { d: "M104.6 16v2.3h4.1v2h-4.1v2.5h4.2v2.1h-6.4v-11h6.4V16zM114 20.9h-1.1v4h-2.2v-11h4c2.1 0 3.6 1.3 3.6 3.5 0 1.7-.9 2.8-2.2 3.2l2.3 4.2h-2.5l-1.9-3.9zm-1.1-2.1h1.7c.9 0 1.5-.5 1.5-1.4 0-.9-.6-1.4-1.5-1.4h-1.7v2.8zM120 13.9h2.2v8.9h3.9v2.1H120zM129.5 16v2.3h4.1v2h-4.1v2.5h4.3v2.1h-6.5v-11h6.5V16zM143.1 21.8c0 1.7-1 3-3.4 3h-4.1V13.9h4.2c2.2 0 3.2 1.3 3.2 2.9 0 1.1-.5 2-1.3 2.5v.1c.9.4 1.4 1.3 1.4 2.4zm-5.2-5.9v2.5h1.7c.7 0 1.2-.5 1.2-1.3s-.5-1.3-1.2-1.3h-1.7v.1zm2.9 5.7c0-.8-.5-1.3-1.3-1.3h-1.6v2.6h1.6c.8 0 1.3-.5 1.3-1.3zM147 16v2.3h4.1v2H147v2.5h4.3v2.1h-6.5v-11h6.5V16zM161.6 13.9v11h-2.2l-3.9-6.9h-.1v6.9h-2.3v-11h2.3l3.9 6.9h.1v-6.9zM166 22.3v2.3c0 1.7-.7 2.8-2.5 2.9v-1.2c.9-.1 1.2-.5 1.2-1.4v-.1h-1.2v-2.5h2.5zM183.9 13.9l-2.9 11h-2.4l-1.8-7.2h-.1l-1.8 7.2h-2.4l-2.9-11h2.3l1.8 7.3h.1l1.7-7.3h2.5l1.8 7.3h.1l1.7-7.3zM189.9 22.7h-3.8l-.7 2.1h-2.2l3.7-10.9h2.2l3.7 10.9h-2.2l-.7-2.1zm-.7-2l-1.1-3.4h-.1l-1.1 3.4h2.3zM193.3 21.8h2.2c.2.9.8 1.3 1.6 1.3 1 0 1.4-.5 1.4-1.2s-.5-1-1.3-1.3l-1.3-.4c-1.8-.5-2.4-1.7-2.4-3.1 0-2.1 1.6-3.4 3.6-3.4 2.2 0 3.4 1.3 3.6 3.3h-2.2c-.2-.8-.6-1.2-1.5-1.2-.7 0-1.3.4-1.3 1.2 0 .8.5 1.1 1.1 1.2l1.3.3c1.6.4 2.6 1.6 2.6 3.2 0 2.2-1.6 3.4-3.7 3.4-2.2 0-3.5-1.2-3.7-3.3zM214 13.9l-3.5 11h-2.2l-3.6-11h2.3l2.3 7.4h.1l2.4-7.4zM217.1 16v2.3h4.1v2h-4.1v2.5h4.3v2.1h-6.5v-11h6.5V16zM226.5 20.9h-1.1v4h-2.2v-11h4c2.1 0 3.6 1.3 3.6 3.5 0 1.7-.9 2.8-2.2 3.2l2.3 4.2h-2.5l-1.9-3.9zm-1.1-2.1h1.7c.9 0 1.5-.5 1.5-1.4 0-.9-.6-1.4-1.5-1.4h-1.7v2.8zM239.9 21.8c0 1.7-1 3-3.4 3h-4.1V13.9h4.2c2.2 0 3.2 1.3 3.2 2.9 0 1.1-.5 2-1.3 2.5v.1c.9.4 1.4 1.3 1.4 2.4zm-5.2-5.9v2.5h1.7c.7 0 1.2-.5 1.2-1.3s-.5-1.3-1.2-1.3h-1.7v.1zm2.9 5.7c0-.8-.5-1.3-1.3-1.3h-1.6v2.6h1.6c.9 0 1.3-.5 1.3-1.3zM241.6 13.9h2.2v11h-2.2zM254.4 13.9v11h-2.2l-4-6.9h-.1v6.9h-2.2v-11h2.3l3.9 6.9h.1v-6.9zM256.5 13.9h3.8c2.8 0 4.6 1.9 4.6 5.5s-1.8 5.5-4.6 5.5h-3.8v-11zm3.7 8.9c1.5 0 2.5-1 2.5-3.4s-1-3.4-2.5-3.4h-1.4v6.8h1.4zM268.8 16v2.3h4v2h-4v2.5h4.2v2.1h-6.4v-11h6.4V16zM273.9 13.9h7.8V16h-2.8v8.9h-2.2V16h-2.8zM281.5 22.3h2.5v2.6h-2.5z" })) : (hAsync("path", { d: "M103.174 13.906h2.159v8.686h3.822v2.01h-5.981zM110.296 13.906h2.16v10.696h-2.16zM116.712 15.904v2.42h3.822v1.997h-3.822v4.281h-2.16V13.906h6.13v1.998zM124.033 15.904v2.258h3.97v1.998h-3.97v2.432h4.132v2.01h-6.291V13.906h6.291v1.998zM133.662 13.906h2.16v10.696h-2.16zM137.05 21.575h2.147c.186.893.781 1.253 1.563 1.253.93 0 1.39-.509 1.39-1.204 0-.67-.447-1.005-1.278-1.228l-1.229-.348c-1.712-.459-2.382-1.7-2.382-3.04 0-2.047 1.526-3.326 3.5-3.326 2.158 0 3.325 1.254 3.536 3.214h-2.11c-.149-.794-.595-1.203-1.427-1.203-.732 0-1.29.41-1.29 1.166 0 .757.496 1.03 1.092 1.179l1.228.335c1.588.41 2.581 1.588 2.581 3.115 0 2.146-1.588 3.35-3.598 3.35-2.222 0-3.525-1.154-3.723-3.263zM151.618 15.904v2.42h3.822v1.997h-3.822v4.281h-2.16V13.906h6.13v1.998zM156.594 19.254c0-3.462 1.6-5.584 4.53-5.584 2.928 0 4.528 2.122 4.528 5.584 0 3.462-1.6 5.584-4.529 5.584-2.928 0-4.53-2.134-4.53-5.584zm6.812 0c0-2.333-.806-3.524-2.283-3.524-1.489 0-2.283 1.179-2.283 3.524 0 2.345.794 3.524 2.283 3.524 1.49 0 2.283-1.191 2.283-3.524zM170.343 20.693H169.3v3.91h-2.159V13.917h3.946c2.085 0 3.55 1.229 3.55 3.388 0 1.638-.845 2.742-2.147 3.164l2.258 4.132h-2.395l-2.01-3.909zm-1.043-1.997h1.676c.843 0 1.427-.497 1.427-1.39 0-.894-.571-1.39-1.427-1.39H169.3v2.78zM179.203 21.575h2.146c.187.893.782 1.253 1.564 1.253.93 0 1.39-.509 1.39-1.204 0-.67-.447-1.005-1.278-1.228l-1.229-.348c-1.712-.459-2.382-1.7-2.382-3.04 0-2.047 1.526-3.326 3.499-3.326 2.16 0 3.326 1.254 3.537 3.214h-2.11c-.149-.794-.596-1.203-1.427-1.203-.732 0-1.29.41-1.29 1.166 0 .757.496 1.03 1.091 1.179l1.229.335c1.588.41 2.581 1.588 2.581 3.115 0 2.146-1.588 3.35-3.599 3.35-2.22 0-3.536-1.154-3.722-3.263zM196.004 13.906v10.696h-2.159V20.16h-3.822v4.442h-2.159V13.906h2.16v4.256h3.821v-4.256zM203.4 22.53h-3.685l-.683 2.06h-2.196l3.648-10.684h2.16l3.647 10.684h-2.196l-.695-2.06zm-.67-2.01l-1.117-3.313h-.1l-1.116 3.313h2.333zM210.324 20.693h-1.042v3.91h-2.16V13.917h3.947c2.084 0 3.549 1.229 3.549 3.388 0 1.638-.844 2.742-2.147 3.164l2.258 4.132h-2.395l-2.01-3.909zm-1.042-1.997h1.675c.844 0 1.427-.497 1.427-1.39 0-.894-.57-1.39-1.427-1.39h-1.675v2.78zM215.983 13.906h2.159v10.696h-2.16zM228.503 13.906v10.696h-2.171l-3.847-6.688h-.1v6.688h-2.159V13.906h2.197l3.834 6.725h.1v-6.725zM239.026 18.969v.595c0 3.537-1.589 5.274-4.294 5.274-3.102 0-4.678-2.16-4.678-5.584 0-3.425 1.663-5.584 4.629-5.584 2.308 0 3.871 1.377 4.181 3.375h-2.308c-.235-.794-.93-1.315-1.873-1.315-1.527 0-2.383 1.216-2.383 3.524s.82 3.524 2.432 3.524c1.142 0 1.899-.533 2.085-1.948h-1.948v-1.861h4.157zM240.192 22.133h2.457v2.47h-2.457z" })), hAsync("g", null, hAsync("path", { d: "M7.3 16.6H0v7.3h7.3z" }), hAsync("path", { d: "M.4 0L0 12.7l1.9.3c.4-3.7 1.3-6.5 2.9-8.3 1.7-1.9 4-2.9 7-3v26.6c0 2.3-.3 3.8-1 4.5-.6.6-1.5 1-2.9 1.1-.3.1-1 .1-2 .1v2h17.8v-2c-1 0-1.7 0-2.1-.1-1.4-.1-2.3-.5-2.9-1.1-.7-.7-1-2.2-1-4.5V1.7c3 .1 5.3 1.1 7 3 1.6 1.8 2.6 4.6 2.9 8.3l1.9-.3L29.2 0H.4z" }), hAsync("path", { d: "M22.2 16.6v7.3h7.3v-7.3h-3.7zM44.1 16.6v7.3h7.3v-7.3h-3.6zM66 16.6v7.3h7.3v-7.3h-3.8z" }))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return appLogoCss; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "app-logo",
    "$members$": {
      "href": [1],
      "logoTitle": [1, "logo-title"],
      "color": [1],
      "claim": [4],
      "claimLang": [1, "claim-lang"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const logoCss = "/*!@:host*/.sc-scale-logo-h{--focus-outline:var(--telekom-line-weight-highlight) solid\n    var(--telekom-color-functional-focus-standard);--background-magenta:var(--telekom-color-background-canvas);--background-white:var(--telekom-color-primary-standard)}/*!@[part~='logo']*/[part~='logo'].sc-scale-logo{display:inline-flex;height:var(--logo-size);position:relative}/*!@[part~='logo']:focus,\n[part~='logo']:focus-visible*/[part~='logo'].sc-scale-logo:focus,[part~='logo'].sc-scale-logo:focus-visible{outline:var(--focus-outline);outline-offset:2px;border-radius:2px}/*!@[part~='variant-magenta']*/[part~='variant-magenta'].sc-scale-logo{background-color:var(--background-magenta)}/*!@[part~='variant-white']*/[part~='variant-white'].sc-scale-logo{background-color:var(--background-white)}/*!@[part~='transparent']*/[part~='transparent'].sc-scale-logo{background-color:transparent}/*!@[part~='icon'] svg*/[part~='icon'].sc-scale-logo svg.sc-scale-logo{height:var(--logo-size)}/*!@[part~='icon']:focus-visible*/[part~='icon'].sc-scale-logo:focus-visible{outline:none}/*!@[part~='icon'] svg:focus*/[part~='icon'].sc-scale-logo svg.sc-scale-logo:focus{outline:none}";

class Logo {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) Variant/color of the logo text and logo */
    this.variant = 'magenta';
    /** (optional) Set transparent background */
    this.transparent = false;
    /** (optional) The height in pixels */
    this.size = 38;
    /** (optional) Set a link */
    this.href = 'javascript:void(0);';
    this.focusable = true;
    this.scrollIntoViewOnFocus = false;
    /** (optional) set logo specific title */
    this.logoTitle = 'Telekom Logo';
    /** FIXME this is also probably not working properly, see below (it needs a string value) */
    this.logoAriaHidden = false;
  }
  componentDidRender() {
    if (this.accessibilityTitle) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "accessibilityTitle" is deprecated. Please use the "logoTitle" property!',
        type: 'warn',
        source: this.hostElement,
      });
    }
    if (this.language) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "language" is deprecated. Localized brand claim is not shown anymore.',
        type: 'warn',
        source: this.hostElement,
      });
    }
  }
  render() {
    return (hAsync(Host$1, { exportparts: "logo-svg" }, hAsync("style", null, this.size ? `:host { --logo-size: ${this.size}px; }` : '', this.styles), hAsync("a", { href: this.href, part: this.getCssClassMap(), tabindex: this.focusable === false ? '-1' : '0', onFocus: () => {
        if (this.scrollIntoViewOnFocus === true) {
          window.scrollTo({ top: 0 });
        }
      }, title: this.logoHideTitle ? undefined : this.logoTitle, "aria-describedby": this.logoAriaDescribedBy, "aria-hidden": this.logoAriaHidden }, hAsync("scale-logo-svg", { part: "icon", color: this.variant, logoTitle: this.logoTitle, logoHideTitle: this.logoHideTitle }))));
  }
  getCssClassMap() {
    return classnames(`logo`, this.variant && `variant-${this.variant}`, this.transparent && `transparent`);
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return logoCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-logo",
    "$members$": {
      "variant": [1],
      "transparent": [4],
      "language": [1],
      "size": [2],
      "href": [1],
      "accessibilityTitle": [1, "accessibility-title"],
      "styles": [1],
      "focusable": [4],
      "scrollIntoViewOnFocus": [4, "scroll-into-view-on-focus"],
      "logoTitle": [1, "logo-title"],
      "logoHideTitle": [4, "logo-hide-title"],
      "logoAriaDescribedBy": [1, "logo-aria-described-by"],
      "logoAriaHidden": [4, "logo-aria-hidden"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

let i$6 = 0;
const colors = {
  magenta: '#e20074',
  white: '#ffffff',
};
class LogoSvg {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) Sets the icon color via the `fill` attribute */
    this.color = 'magenta';
    this.innerRole = 'img';
    this.focusable = true;
    this.getTitle = (title, linkAddition) => {
      if (!this.logoHideTitle) {
        return this.logoTitle ? (hAsync("title", { id: `logo-title-${i$6}` }, this.logoTitle)) : (hAsync("title", { id: `logo-title-${i$6}` }, `${title} ${this.innerRole === 'link' ? linkAddition : ''}`));
      }
    };
  }
  componentWillLoad() {
    i$6++;
  }
  componentDidRender() {
    if (this.accessibilityTitle) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "accessibilityTitle" is deprecated. Please use the "logoTitle" property!',
        type: 'warn',
        source: this.hostElement,
      });
    }
  }
  getColor() {
    return this.color === 'magenta' || 'white'
      ? colors[this.color]
      : this.color;
  }
  render() {
    return (hAsync(Host$1, null, hAsync("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 38", part: "logo-svg", fill: this.getColor(), role: this.innerRole === 'link' ? null : 'img', "aria-labelledby": `logo-title-${i$6}` }, this.getTitle('Telekom Logo', '- Go to Start Page'), hAsync("path", { d: "M7.6 25.1H0v-7.6h7.6v7.6ZM0 0v12.9h2.3v-.4c0-6.1 3.4-9.9 9.9-9.9h.4V30c0 3.8-1.5 5.3-5.3 5.3H6.1V38h19.8v-2.7h-1.1c-3.8 0-5.3-1.5-5.3-5.3V2.7h.4c6.5 0 9.9 3.8 9.9 9.9v.4h2.3V0H0Zm24.3 25.1h7.6v-7.6h-7.6v7.6Z" }))));
  }
  get hostElement() { return getElement$1(this); }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-logo-svg",
    "$members$": {
      "color": [1],
      "innerRole": [1, "inner-role"],
      "focusable": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "logoTitle": [1, "logo-title"],
      "logoHideTitle": [4, "logo-hide-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const appNavigationMainMobileCss = "app-navigation-main-mobile{--min-height:calc(100vh - 56px - 56px);--font-size:var(--telekom-typography-font-size-headline-3);--font-weight:var(--telekom-typography-font-weight-extra-bold);--line-height:3.333;--border-bottom:1px solid var(--telekom-color-ui-faint);--color:var(--telekom-color-text-and-icon-standard);--color-selected:var(--telekom-color-text-and-icon-primary-standard);--font-size-child:var(--telekom-typography-font-size-headline-3);--line-height-child:2.5;--font-weight-child:var(--telekom-typography-font-weight-regular);--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);width:100%}.main-navigation-mobile{width:100%;position:relative}.main-navigation-mobile__main-menu{width:100%;list-style:none;padding:0;margin:0;min-height:var(--min-height)}.main-navigation-mobile__item{font-size:var(--font-size);font-weight:var(--font-weight);line-height:var(--line-height)}.main-navigation-mobile__item--selected{border-right:2px solid var(--color-selected)}.main-navigation-mobile__item-link{text-decoration:none;color:var(--color);transition:var(--transition)}.main-navigation-mobile__item-link--selected{color:var(--color-selected);transition:var(--transition)}.main-navigation-mobile__item-link--selected svg{margin-right:-2px}.main-navigation-mobile__item-wrapper{box-sizing:border-box;width:calc(100% - 34px);display:flex;justify-content:space-between;margin-left:34px;border-bottom:var(--border-bottom);padding-right:34px;align-items:center}.main-navigation-mobile__child-menu{position:absolute;top:0;left:0;background:var(--telekom-color-background-surface);width:100%;min-height:var(--min-height)}.main-navigation-mobile__child-menu-current-item{line-height:var(--line-height)}.main-navigation-mobile__child-menu-current-item svg{margin-right:6px;margin-top:-4px}.main-navigation-mobile__child-menu-current{font-size:var(--telekom-typography-font-size-headline-3);font-weight:var(--telekom-typography-font-weight-extra-bold);color:var(--color-selected);text-decoration:none}.main-navigation-mobile__child-menu-current-wrapper{width:calc(100% - 34px);display:flex;align-items:center;border-bottom:var(--border-bottom);margin-left:34px}.main-navigation-mobile__child-menu-current app-icon{margin-right:var(--telekom-spacing-composition-space-04)}.main-navigation-mobile__child-menu-current .icon-back{fill:var(--color-selected)}.main-navigation-mobile__child-menu-items{list-style:none;margin:0;padding:0}.main-navigation-mobile__child-menu-item-link{text-decoration:none;color:var(--color)}.main-navigation-mobile__child-menu-item-link.selected{color:var(--color-selected)}.main-navigation-mobile__child-menu-item-link.selected .main-navigation-mobile__child-menu-item-wrapper{border-right:2px solid var(--color-selected)}.main-navigation-mobile__child-menu-item-link.selected svg{margin-right:38px}.main-navigation-mobile__child-menu-item{font-size:var(--font-size-child);line-height:var(--line-height-child);font-weight:var(--font-weight-child)}.main-navigation-mobile__child-menu-item-wrapper{width:calc(100% - 64px);display:flex;justify-content:space-between;align-items:center;border-bottom:var(--border-bottom);margin-left:var(--telekom-spacing-composition-space-17);box-sizing:border-box}.main-navigation-mobile__child-menu-item-wrapper svg{margin-right:var(--telekom-spacing-composition-space-12)}";

const hasChildren = (item) => Array.isArray(item.children) && item.children.length > 0;
class MainNavigationMobile {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.closeMenu = createEvent$1(this, "closeMenu", 7);
    this.selected = undefined;
    this.parent = undefined;
  }
  handleActiveRoute(newValue) {
    this.selected = findSelected(this.navigation, newValue, null).selected;
    this.parent = findSelected(this.navigation, newValue).parent;
  }
  componentWillLoad() {
    this.selected = findSelected(this.navigation, this.activeRouteId, null).selected;
    this.parent = findSelected(this.navigation, this.activeRouteId).parent;
  }
  closeMenuHandler() {
    this.closeMenu.emit();
  }
  handlePrevSelected(event, item) {
    event.preventDefault();
    const selected = findSelected(this.navigation, item.id).parent;
    this.selected = selected;
    this.parent = selected;
  }
  handleSelect(event, item) {
    const { selected, parent } = findSelected(this.navigation, item.id);
    this.selected = selected;
    this.parent = parent;
    if (typeof item.onClick === 'function') {
      item.onClick(event);
    }
    if (!hasChildren(selected)) {
      this.closeMenuHandler();
    }
  }
  childMenuPage() {
    const section = this.selected && hasChildren(this.selected) ? this.selected : this.parent;
    const { selected, parent } = findSelected(this.navigation, this.activeRouteId);
    if (!section) {
      return hAsync("div", null);
    }
    const isActive = (child) => (selected && child.id === selected.id) ||
      (parent && parent.id === child.id);
    return (hAsync("div", { class: "main-navigation-mobile__child-menu" }, hAsync("a", { class: "main-navigation-mobile__child-menu-current", href: section.href || 'javascript:void(0);', onClick: (event) => {
        this.handlePrevSelected(event, section);
      }, tabIndex: 0, onKeyDown: (event) => {
        if (['Enter', ' '].includes(event.key)) {
          event.preventDefault();
          this.handlePrevSelected(event, section);
          if (!this.selected) {
            // focus first main navigation item to ease tab navigation
            this.mainNavigationWrapper.querySelector('a').focus();
          }
        }
        if (['Escape', 'Esc'].includes(event.key)) {
          this.hide();
        }
      } }, hAsync("div", { class: "main-navigation-mobile__child-menu-current-item" }, hAsync("div", { class: "main-navigation-mobile__child-menu-current-wrapper" }, hAsync("scale-icon-navigation-left", null), hAsync("div", null, section.name)))), hAsync("ul", { class: "main-navigation-mobile__child-menu-items", ref: (el) => {
        this.childrenWrapper = el;
      } }, section.children.map((child) => (hAsync("li", { class: "main-navigation-mobile__child-menu-item" }, hAsync("a", { "aria-current": isActive(child) ? 'true' : 'false', "aria-haspopup": hasChildren(child) ? 'true' : 'false', class: `main-navigation-mobile__child-menu-item-link ${isActive(child) ? 'selected' : ''}`, href: child.href || 'javascript:void(0);', tabIndex: 0, onClick: (event) => {
        this.handleSelect(event, child);
      }, onKeyDown: (event) => {
        if (['Enter', ' '].includes(event.key)) {
          this.handleSelect(event, child);
          setTimeout(() => {
            // focus first child menu item link to ease tab navigation
            const firstChildren = this.childrenWrapper.querySelector('a');
            if (firstChildren) {
              this.childrenWrapper.querySelector('a').focus();
            }
          });
        }
        if (['Escape', 'Esc'].includes(event.key)) {
          this.hide();
        }
      } }, hAsync("div", { class: "main-navigation-mobile__child-menu-item-wrapper" }, hAsync("span", null, child.name), isActive(child) && hAsync("span", { class: "sr-only" }, "active"), hasChildren(child) && (hAsync("scale-icon-navigation-right", null))))))))));
  }
  render() {
    const { selected } = findSelected(this.navigation, this.activeRouteId);
    const rootNode = selected && findRootNode(this.navigation, selected.id);
    const isActive = (itemId) => rootNode && rootNode.id === itemId;
    return (hAsync("div", { class: "main-navigation-mobile" }, this.childMenuPage(), hAsync("ul", { class: "main-navigation-mobile__main-menu", ref: (el) => {
        this.mainNavigationWrapper = el;
      } }, (this.navigation || []).map((item) => (hAsync("li", { class: `main-navigation-mobile__item${isActive(item.id)
        ? ' main-navigation-mobile__item--selected'
        : ''}` }, hAsync("a", { "aria-current": isActive(item.id) ? 'true' : 'false', "aria-haspopup": hasChildren(item) ? 'true' : 'false', class: `main-navigation-mobile__item-link${isActive(item.id)
        ? ' main-navigation-mobile__item-link--selected'
        : ''}`, href: item.href || 'javascript:void(0);', onClick: (event) => {
        this.handleSelect(event, item);
      }, onKeyDown: (event) => {
        if (['Enter', ' '].includes(event.key)) {
          this.handleSelect(event, item);
          setTimeout(() => {
            // focus first child menu item link to ease tab navigation
            const firstChildren = this.childrenWrapper.querySelector('a');
            if (firstChildren) {
              this.childrenWrapper.querySelector('a').focus();
            }
          });
        }
        if (['Escape', 'Esc'].includes(event.key)) {
          this.hide();
        }
      },
      // hide from tab navigation when on childMenuPage
      tabIndex: this.selected ? -1 : 0 }, hAsync("div", { class: "main-navigation-mobile__item-wrapper" }, hAsync("span", null, item.name), isActive(item.id) && hAsync("span", { class: "sr-only" }, "active"), hasChildren(item) && (hAsync("scale-icon-navigation-right", null))))))))));
  }
  static get watchers() { return {
    "activeRouteId": ["handleActiveRoute"]
  }; }
  static get style() { return appNavigationMainMobileCss; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "app-navigation-main-mobile",
    "$members$": {
      "hide": [16],
      "navigation": [16],
      "activeRouteId": [1, "active-route-id"],
      "selected": [32],
      "parent": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const appMegaMenuCss = "app-mega-menu{--box-shadow:var(--telekom-shadow-top);--spacing-y:2.125rem;--spacing-right:var(--telekom-spacing-composition-space-06);--spacing-left:var(--telekom-spacing-composition-space-08);--background:var(--telekom-color-background-surface);--color-selected:var(--telekom-color-text-and-icon-primary-standard);--color-hover:var(--telekom-color-text-and-icon-primary-hovered);--font-size-row-title:var(--telekom-typography-font-size-body);--spacing-bottom-row-title:1.125rem;--font-weight-row-title:var(--telekom-typography-font-weight-extra-bold);--color-row-title:var(--telekom-color-text-and-icon-standard);--font-size-row-item:var(--telekom-typography-font-size-body);--line-height-row-item:var(--telekom-typography-line-spacing-loose);--font-weight-row-item:var(--telekom-typography-font-weight-medium);--color-row-item:var(--telekom-color-text-and-icon-standard);--spacing-bottom-row-item:var(--telekom-spacing-composition-space-04)}.mega-menu{width:100%;position:absolute;top:calc(var(--header-brand-height) * -1);left:0;border-radius:0 0 var(--header-border-radius) var(--header-border-radius);padding-top:calc(var(--header-nav-height) + var(--header-brand-height));display:none;pointer-events:none;transition:none;box-shadow:var(--box-shadow)}.mega-menu__wrapper{padding:var(--spacing-y) var(--spacing-right) var(--spacing-y)\n    var(--spacing-left);background:var(--background);pointer-events:none;border-radius:var(--header-border-radius)}.mega-menu__container{max-width:1168px;margin:0 auto;display:grid;grid-template-columns:repeat(5, minmax(min-content, 240px));list-style:none;padding-left:var(--telekom-spacing-composition-space-10)}.mega-menu__row-title{cursor:default;font-size:var(--font-size-row-title);margin-bottom:var(--spacing-bottom-row-title);font-weight:var(--font-weight-row-title);color:var(--color-row-title)}.mega-menu__row-item{font-size:var(--font-size-row-item);line-height:var(--line-height-row-item);font-weight:var(--font-weight-row-item);color:var(--color-row-item);margin-bottom:var(--spacing-bottom-row-item);text-decoration:none;transition:color, border 0.15s ease-in-out;display:block;margin-bottom:7px}.mega-menu__row-item:hover,.mega-menu__row-item:hover span{color:var(--color-hover)}.mega-menu__row-item.active span{padding-bottom:2px;margin-bottom:-2px;display:inline-block;border-bottom:1px solid var(--color-selected)}.mega-menu__row-item.active{color:var(--color-selected)}.mega-menu__row-item.active:hover{color:var(--color-hover)}.mega-menu__row-item.active:hover span{color:var(--color-hover);border-bottom:1px solid var(--color-hover)}.mega-menu__row li{list-style:none}.mega-menu__row ul{padding-inline-start:0}@media screen and (forced-colors: active), (-ms-high-contrast: active){.mega-menu{border:1px solid hsl(0, 0%, 100%)}}";

class MegaMenu {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.navigation = [];
  }
  componentWillLoad() {
    this.hasCustomBody = !!this.hostElement.querySelector('[slot="custom-body"]');
  }
  componentWillRender() {
    // make sure the deprecated props overwrite the actual ones if used
    // and show status note deprecated
    if (this.isActive !== undefined) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "isActive" is deprecated. Please use the "active" property!',
        type: 'warn',
        source: this.hostElement,
      });
    }
  }
  render() {
    return (hAsync("div", { class: "mega-menu" }, hAsync("div", { class: "mega-menu__wrapper" }, this.hasCustomBody ? (hAsync("slot", { name: "custom-body" })) : (hAsync("ul", { class: "mega-menu__container" }, this.navigation.map((child) => (hAsync("li", { class: "mega-menu__row" }, hAsync("div", { class: "mega-menu__row-title" }, child.name), hAsync("ul", null, child.children &&
      child.children.length > 0 &&
      child.children.map((menuItem) => (hAsync("li", null, hAsync("a", { class: `mega-menu__row-item ${this.activeRouteId === menuItem.id ? 'active' : ''}`, "aria-current": this.activeRouteId === menuItem.id
          ? 'true'
          : 'false', href: menuItem.href || 'javascript:void(0);', tabIndex: this.active || this.isActive ? 0 : -1, onClick: (event) => {
          this.hide();
          if (typeof menuItem.onClick === 'function') {
            menuItem.onClick(event);
          }
        }, onKeyDown: (event) => {
          if (['Escape', 'Esc'].includes(event.key)) {
            this.hide();
          }
        } }, hAsync("span", null, menuItem.name), this.activeRouteId === menuItem.id && (hAsync("span", { class: "sr-only" }, "active")))))))))))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return appMegaMenuCss; }
  static get cmpMeta() { return {
    "$flags$": 4,
    "$tagName$": "app-mega-menu",
    "$members$": {
      "navigation": [16],
      "hide": [16],
      "activeRouteId": [1, "active-route-id"],
      "isActive": [4, "is-active"],
      "active": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const menuFlyoutCss = "/*!@:host*/.sc-scale-menu-flyout-h{--spacing-y-list:0;--spacing-x-list:0}";

const MENU_SELECTOR = '.scale-menu-flyout-list';
const isButtonOrLink = (el) => {
  if (el.tagName.toUpperCase() === 'BUTTON' ||
    el.tagName.toUpperCase() === 'A' ||
    el.getAttribute('role') === 'button') {
    return el;
  }
};
class MenuFlyout {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) Determines whether the flyout should close when a menu item is selected */
    this.closeOnSelect = true;
    /** (optional) Determines whether the flyout trigger should get the aria-haspopup attribute */
    this.triggerHasPopup = true;
    /** (optional) Set preference for where the menu appears, space permitting */
    this.direction = 'bottom-right';
    this.lists = new Set();
    this.closeAll = () => {
      this.lists.forEach(async (list) => {
        await list.close(); // Wait for `scale-close` event to fire
        list.active = false; // Make sure focus control is right while reopening
      });
    };
    this.toggle = () => {
      const list = this.getListElement();
      if (list.opened) {
        this.closeAll();
        return;
      }
      if (this.direction != null) {
        // Overwrite `direction` in list
        list.direction = this.direction;
      }
      list.trigger = () => this.trigger;
      list.open();
    };
  }
  async handleScaleOpen({ detail }) {
    // Close the previous active list and its parents if
    // - it's not the root and
    // - it's not the one being opened
    // (useful only with "click" interactions)
    const rootList = this.getListElement();
    if (this.activeList &&
      this.activeList.active &&
      this.activeList !== rootList &&
      this.activeList !== detail.list) {
      let list = this.activeList;
      while (list != null && list !== rootList) {
        await list.close(true);
        list = list.parentElement.closest(MENU_SELECTOR);
      }
    }
    this.activeList = detail.list;
  }
  handleScaleSelect({ detail }) {
    if (detail.closeOnSelect === false) {
      return;
    }
    if (this.closeOnSelect) {
      window.requestAnimationFrame(() => {
        this.closeAll();
      });
    }
  }
  handleScaleClose({ detail }) {
    const parent = detail.list != null
      ? detail.list.parentNode.closest(MENU_SELECTOR)
      : null;
    if (parent) {
      window.requestAnimationFrame(() => {
        parent.active = true;
        parent.setFocus();
      });
    }
  }
  handleWindowScroll() {
    this.closeAll();
  }
  handleOutsideClick(event) {
    if (isClickOutside(event, this.hostElement)) {
      this.closeAll();
    }
  }
  handleKeydown(event) {
    if ('Tab' === event.key &&
      !this.hostElement.querySelector('app-navigation-user-menu')) {
      if (this.trigger.tagName === 'SCALE-TELEKOM-NAV-ITEM') {
        this.trigger.firstElementChild.focus();
      }
      this.closeAll();
      return;
    }
  }
  componentDidLoad() {
    const triggerSlot = this.hostElement.querySelector('[slot="trigger"]');
    const tagName = triggerSlot ? triggerSlot.tagName.toUpperCase() : '';
    // TODO a different, more global, solution less dependent on tag names
    // would be great…
    if (triggerSlot && tagName === 'SCALE-BUTTON') {
      this.trigger = triggerSlot.shadowRoot.querySelector('button');
    }
    else if (triggerSlot && tagName === 'SCALE-NAV-ICON') {
      this.trigger = triggerSlot.querySelector('a');
    }
    else {
      this.trigger = triggerSlot;
    }
    this.lists = new Set(Array.from(this.hostElement.querySelectorAll(MENU_SELECTOR)));
    this.setTriggerAttributes();
  }
  setTriggerAttributes() {
    const triggers = Array.from(this.hostElement.querySelectorAll('[role="menuitem"]'))
      .filter((el) => el.querySelector('[slot="sublist"]') != null)
      .concat([isButtonOrLink(this.trigger)])
      .filter((x) => x != null);
    triggers.forEach((el) => {
      if (this.triggerHasPopup) {
        el.setAttribute('aria-haspopup', 'true');
      }
      el.classList.add('scale-menu-trigger');
      el.setAttribute('aria-expanded', 'false');
    });
  }
  getListElement() {
    // TODO use [role="menu"]?
    return Array.from(this.hostElement.children).find((el) => el.tagName.toUpperCase().startsWith('SCALE-MENU-FLYOUT'));
  }
  render() {
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { part: "trigger", onClick: this.toggle }, hAsync("slot", { name: "trigger" })), hAsync("slot", null)));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return menuFlyoutCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-menu-flyout",
    "$members$": {
      "closeOnSelect": [4, "close-on-select"],
      "triggerHasPopup": [4, "trigger-has-popup"],
      "direction": [1],
      "styles": [1]
    },
    "$listeners$": [[0, "scale-open", "handleScaleOpen"], [0, "scale-select", "handleScaleSelect"], [0, "scale-close", "handleScaleClose"], [9, "scroll", "handleWindowScroll"], [4, "click", "handleOutsideClick"], [0, "keydown", "handleKeydown"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const menuFlyoutDividerCss = "/*!@:host*/.sc-scale-menu-flyout-divider-h{display:block;--color:var(--telekom-color-ui-faint)}/*!@.menu-flyout-divider*/.menu-flyout-divider.sc-scale-menu-flyout-divider{border-top:var(--telekom-line-weight-standard) solid var(--color);margin:6px 0}";

class MenuFlyoutDivider {
  constructor(hostRef) {
    registerInstance(this, hostRef);
  }
  getCssClassMap() {
    return classnames('menu-flyout-divider');
  }
  render() {
    return (hAsync(Host$1, { role: "separator" }, this.styles && hAsync("style", null, this.styles), hAsync("div", { class: this.getCssClassMap(), part: "base", "aria-hidden": "true" })));
  }
  static get style() { return menuFlyoutDividerCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-menu-flyout-divider",
    "$members$": {
      "styles": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const menuFlyoutItemCss = "/*!@:host*/.sc-scale-menu-flyout-item-h{--focus-outline:var(--telekom-line-weight-highlight) solid\n    var(--telekom-color-functional-focus-standard);display:block;position:relative;outline-color:transparent;padding-left:var(--telekom-spacing-composition-space-02);padding-right:var(--telekom-spacing-composition-space-02);--_min-width:fit-content;--_min-width-moz:-moz-fit-content}/*!@**/*.sc-scale-menu-flyout-item{-webkit-tap-highlight-color:rgba(255, 255, 255, 0)}/*!@.menu-flyout-item*/.menu-flyout-item.sc-scale-menu-flyout-item{position:relative;display:flex;align-items:stretch;text-align:left;font-size:var(--telekom-typography-font-size-body);line-height:2.635em;padding:0\n    calc(\n      var(--telekom-spacing-composition-space-08) -\n        var(--telekom-spacing-composition-space-02)\n    );user-select:none;white-space:nowrap;border-radius:0;cursor:pointer;color:var(--telekom-color-text-and-icon-standard);max-width:calc(\n    100vw - 2 * var(--telekom-spacing-composition-space-08) - 2 * 10px\n  );overflow:hidden;min-width:var(--_min-width-moz);min-width:var(--_min-width)}/*!@.menu-flyout-item:focus:not(.menu-flyout-item--disabled),\n.menu-flyout-item:hover:not(.menu-flyout-item--disabled)*/.menu-flyout-item.sc-scale-menu-flyout-item:focus:not(.menu-flyout-item--disabled),.menu-flyout-item.sc-scale-menu-flyout-item:hover:not(.menu-flyout-item--disabled){color:var(--telekom-color-text-and-icon-primary-hovered)}/*!@:host(:focus) .menu-flyout-item:not(.menu-flyout-item--disabled)*/.sc-scale-menu-flyout-item-h:focus .menu-flyout-item.sc-scale-menu-flyout-item:not(.menu-flyout-item--disabled){color:var(--telekom-color-text-and-icon-standard)}/*!@:host(:focus) .menu-flyout-item:hover:not(.menu-flyout-item--disabled)*/.sc-scale-menu-flyout-item-h:focus .menu-flyout-item.sc-scale-menu-flyout-item:hover:not(.menu-flyout-item--disabled){color:var(--telekom-color-text-and-icon-primary-hovered)}/*!@:host(:focus)*/.sc-scale-menu-flyout-item-h:focus{outline:none}/*!@:host(:focus) .menu-flyout-item*/.sc-scale-menu-flyout-item-h:focus .menu-flyout-item.sc-scale-menu-flyout-item{outline:var(--focus-outline);border-radius:var(--telekom-radius-small)}/*!@:host(:active) .menu-flyout-item:not(.menu-flyout-item--disabled)*/.sc-scale-menu-flyout-item-h:active .menu-flyout-item.sc-scale-menu-flyout-item:not(.menu-flyout-item--disabled){color:var(--telekom-color-text-and-icon-primary-pressed)}/*!@:host([aria-expanded='true']) .menu-flyout-item*/[aria-expanded='true'].sc-scale-menu-flyout-item-h .menu-flyout-item.sc-scale-menu-flyout-item{color:var(--telekom-color-text-and-icon-primary-standard)}/*!@.menu-flyout-item--disabled*/.menu-flyout-item--disabled.sc-scale-menu-flyout-item{outline:none;color:var(--telekom-color-text-and-icon-disabled);cursor:not-allowed}/*!@:host([active])::before*/[active].sc-scale-menu-flyout-item-h::before{content:'';display:block;position:absolute;top:0;left:0;height:100%;width:0;background-color:var(--telekom-color-primary-standard);border-left:var(--telekom-spacing-composition-space-02) solid transparent}/*!@.menu-flyout-item--active*/.menu-flyout-item--active.sc-scale-menu-flyout-item{color:var(--telekom-color-text-and-icon-primary-standard)}@media screen and (forced-colors: active), (-ms-high-contrast: active){/*!@.menu-flyout-item--disabled:not(.menu-flyout-item--disabled),\n  .menu-flyout-item--active:not(.menu-flyout-item--disabled)*/.menu-flyout-item--disabled.sc-scale-menu-flyout-item:not(.menu-flyout-item--disabled),.menu-flyout-item--active.sc-scale-menu-flyout-item:not(.menu-flyout-item--disabled){color:white;stroke:white}}/*!@.menu-flyout-item__label*/.menu-flyout-item__label.sc-scale-menu-flyout-item{flex:1 1 0;overflow:hidden;text-overflow:ellipsis}/*!@.menu-flyout-item__prefix*/.menu-flyout-item__prefix.sc-scale-menu-flyout-item{flex:0 0 auto;display:flex;align-items:center}/*!@.menu-flyout-item__check,\nslot[name='prefix']::slotted(:last-of-type)*/.menu-flyout-item__check.sc-scale-menu-flyout-item,slot[name='prefix'].sc-scale-menu-flyout-item-s>:last-of-type{margin-right:var(--telekom-spacing-composition-space-04)}/*!@.menu-flyout-item__check*/.menu-flyout-item__check.sc-scale-menu-flyout-item{visibility:hidden}/*!@:host([aria-checked='true']) .menu-flyout-item__check*/[aria-checked='true'].sc-scale-menu-flyout-item-h .menu-flyout-item__check.sc-scale-menu-flyout-item{visibility:visible}/*!@.menu-flyout-item__suffix*/.menu-flyout-item__suffix.sc-scale-menu-flyout-item{flex:0 0 auto;display:flex;align-items:center}/*!@.menu-flyout-item__cascade,\nslot[name='suffix']::slotted(:first-of-type)*/.menu-flyout-item__cascade.sc-scale-menu-flyout-item,slot[name='suffix'].sc-scale-menu-flyout-item-s>:first-of-type{margin-left:var(--telekom-spacing-composition-space-06)}";

class MenuFlyoutItem {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleSelect = createEvent$1(this, "scale-select", 7);
    this.scaleSelectLegacy = createEvent$1(this, "scaleSelect", 7);
    /** (optional) Set to true to display arrow icon suffix */
    this.cascade = false; // TODO rename to `hasMenu`?
    /** (optional) Mark as active */
    this.active = false;
    /** (optional) Set to true to display check prefix, false to display empty prefix */
    this.checked = false;
    /** (optional) Disabled */
    this.disabled = false;
    this.hasSlotSublist = false;
  }
  // TODO there is lot of room for improving this, aka edge-cases
  async triggerEvent(event, closeOnSelect = true) {
    const { key } = event;
    if (this.disabled) {
      return;
    }
    if (key === 'ArrowRight' && !this.hasSlotSublist) {
      return;
    }
    if (this.hasSlotSublist) {
      const sublist = this.hostElement.querySelector('[slot="sublist"]');
      if (sublist.hasAttribute('opened')) {
        sublist.removeAttribute('opened');
      }
      else {
        this.openSublist();
      }
      return;
    }
    const detail = {
      eventType: event.type,
      key,
      item: this.hostElement,
      closeOnSelect,
      originalEvent: event,
    };
    emitEvent$1(this, 'scaleSelect', detail);
  }
  connectedCallback() {
    this.hasSlotSublist =
      this.hostElement.querySelector('[slot="sublist"]') != null;
    if (this.hasSlotSublist) {
      this.cascade = true;
    }
  }
  openSublist() {
    const sublist = this.hostElement.querySelector('[slot="sublist"]');
    if (sublist == null) {
      return;
    }
    sublist.trigger = () => this.hostElement;
    sublist.direction = 'right';
    sublist.open();
  }
  getCssClassMap() {
    return classnames('menu-flyout-item', this.disabled && 'menu-flyout-item--disabled', this.checkable != null && 'menu-flyout-item--checkable', this.active && 'menu-flyout-item--active');
  }
  render() {
    const checked = this.checked ? 'true' : 'false';
    return (hAsync(Host$1, { role: this.checkable ? `menuitem${this.checkable}` : 'menuitem', "aria-checked": this.checkable == null ? false : checked, "aria-disabled": this.disabled ? 'true' : undefined, tabindex: "-1" }, this.styles && hAsync("style", null, this.styles), hAsync("div", { class: this.getCssClassMap(), part: "base" }, hAsync("span", { part: "prefix", class: "menu-flyout-item__prefix" }, this.checkable == null ? (hAsync("slot", { name: "prefix" })) : (hAsync("scale-icon-action-checkmark", { class: "menu-flyout-item__check", size: 16 }))), hAsync("span", { part: "label", class: "menu-flyout-item__label" }, hAsync("slot", null)), hAsync("span", { part: "suffix", class: "menu-flyout-item__suffix" }, this.cascade ? (hAsync("scale-icon-navigation-right", { class: "menu-flyout-item__cascade", size: 16 })) : (hAsync("slot", { name: "suffix" })))), hAsync("slot", { name: "sublist" })));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return menuFlyoutItemCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-menu-flyout-item",
    "$members$": {
      "cascade": [4],
      "active": [516],
      "checkable": [1],
      "checked": [1540],
      "disabled": [516],
      "value": [513],
      "styles": [1],
      "triggerEvent": [64]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["active", "active"], ["checked", "checked"], ["disabled", "disabled"], ["value", "value"]]
  }; }
}

const menuFlyoutListCss = "/*!@:host*/.sc-scale-menu-flyout-list-h{box-sizing:content-box;position:fixed;z-index:100;pointer-events:none}/*!@.menu-flyout-list*/.menu-flyout-list.sc-scale-menu-flyout-list{display:none;position:absolute;pointer-events:initial;z-index:var(--scl-z-index-20);background:var(--telekom-color-background-surface);border-radius:var(--telekom-radius-standard);box-shadow:var(--telekom-shadow-overlay);overflow-y:hidden;margin-top:var(--spacing-y-list, 0);margin-bottom:var(--spacing-y-list, 0);margin-left:var(--spacing-x-list, 0);margin-right:var(--spacing-x-list, 0)}/*!@.menu-flyout-list::after*/.menu-flyout-list.sc-scale-menu-flyout-list::after{content:'';display:block;position:absolute;width:calc(100% - 2px);height:calc(100% - 2px);inset:0;border-radius:var(--telekom-radius-standard);border:1px solid transparent;pointer-events:none}/*!@.menu-flyout-list--opened*/.menu-flyout-list--opened.sc-scale-menu-flyout-list{display:flex}/*!@.menu-flyout-list__list*/.menu-flyout-list__list.sc-scale-menu-flyout-list{padding:20px 0;overflow-y:auto;overflow-y:overlay;overscroll-behavior:contain;width:100%}/*!@.menu-flyout-list--flip-horizontal.menu-flyout-list--direction-bottom-left,\n.menu-flyout-list--flip-vertical.menu-flyout-list--direction-top-right,\n.menu-flyout-list--flip-horizontal.menu-flyout-list--flip-vertical.menu-flyout-list--direction-top-left,\n.menu-flyout-list--direction-bottom-right*/.menu-flyout-list--flip-horizontal.menu-flyout-list--direction-bottom-left.sc-scale-menu-flyout-list,.menu-flyout-list--flip-vertical.menu-flyout-list--direction-top-right.sc-scale-menu-flyout-list,.menu-flyout-list--flip-horizontal.menu-flyout-list--flip-vertical.menu-flyout-list--direction-top-left.sc-scale-menu-flyout-list,.menu-flyout-list--direction-bottom-right.sc-scale-menu-flyout-list{top:calc(100% + var(--telekom-spacing-composition-space-03));left:0;right:auto;bottom:auto}/*!@.menu-flyout-list--flip-horizontal.menu-flyout-list--direction-bottom-right,\n.menu-flyout-list--flip-vertical.menu-flyout-list--direction-top-left,\n.menu-flyout-list--flip-horizontal.menu-flyout-list--flip-vertical.menu-flyout-list--direction-top-right,\n.menu-flyout-list--direction-bottom-left*/.menu-flyout-list--flip-horizontal.menu-flyout-list--direction-bottom-right.sc-scale-menu-flyout-list,.menu-flyout-list--flip-vertical.menu-flyout-list--direction-top-left.sc-scale-menu-flyout-list,.menu-flyout-list--flip-horizontal.menu-flyout-list--flip-vertical.menu-flyout-list--direction-top-right.sc-scale-menu-flyout-list,.menu-flyout-list--direction-bottom-left.sc-scale-menu-flyout-list{top:calc(100% + var(--telekom-spacing-composition-space-03));right:0;left:auto;bottom:auto}/*!@.menu-flyout-list--flip-horizontal.menu-flyout-list--direction-top-left,\n.menu-flyout-list--flip-vertical.menu-flyout-list--direction-bottom-right,\n.menu-flyout-list--flip-horizontal.menu-flyout-list--flip-vertical.menu-flyout-list--direction-bottom-left,\n.menu-flyout-list--direction-top-right*/.menu-flyout-list--flip-horizontal.menu-flyout-list--direction-top-left.sc-scale-menu-flyout-list,.menu-flyout-list--flip-vertical.menu-flyout-list--direction-bottom-right.sc-scale-menu-flyout-list,.menu-flyout-list--flip-horizontal.menu-flyout-list--flip-vertical.menu-flyout-list--direction-bottom-left.sc-scale-menu-flyout-list,.menu-flyout-list--direction-top-right.sc-scale-menu-flyout-list{bottom:calc(100% + var(--telekom-spacing-composition-space-03));left:0;right:auto;top:auto}/*!@.menu-flyout-list--flip-horizontal.menu-flyout-list--direction-top-right,\n.menu-flyout-list--flip-vertical.menu-flyout-list--direction-bottom-left,\n.menu-flyout-list--flip-horizontal.menu-flyout-list--flip-vertical.menu-flyout-list--direction-bottom-right,\n.menu-flyout-list--direction-top-left*/.menu-flyout-list--flip-horizontal.menu-flyout-list--direction-top-right.sc-scale-menu-flyout-list,.menu-flyout-list--flip-vertical.menu-flyout-list--direction-bottom-left.sc-scale-menu-flyout-list,.menu-flyout-list--flip-horizontal.menu-flyout-list--flip-vertical.menu-flyout-list--direction-bottom-right.sc-scale-menu-flyout-list,.menu-flyout-list--direction-top-left.sc-scale-menu-flyout-list{bottom:calc(100% + var(--telekom-spacing-composition-space-03));right:0;left:auto;top:auto}/*!@.menu-flyout-list--flip-horizontal.menu-flyout-list--direction-left,\n.menu-flyout-list--direction-right*/.menu-flyout-list--flip-horizontal.menu-flyout-list--direction-left.sc-scale-menu-flyout-list,.menu-flyout-list--direction-right.sc-scale-menu-flyout-list{left:calc(100% - var(--telekom-spacing-composition-space-03));top:-20px;right:auto;bottom:auto}/*!@.menu-flyout-list--flip-horizontal.menu-flyout-list--direction-right,\n.menu-flyout-list--direction-left*/.menu-flyout-list--flip-horizontal.menu-flyout-list--direction-right.sc-scale-menu-flyout-list,.menu-flyout-list--direction-left.sc-scale-menu-flyout-list{right:calc(100% - var(--telekom-spacing-composition-space-03));top:-20px;left:auto;bottom:auto}/*!@.menu-flyout-list__scroll-up-indicator,\n.menu-flyout-list__scroll-down-indicator*/.menu-flyout-list__scroll-up-indicator.sc-scale-menu-flyout-list,.menu-flyout-list__scroll-down-indicator.sc-scale-menu-flyout-list{position:absolute;width:0;border:5px solid transparent;pointer-events:none;opacity:0;left:50%}/*!@.menu-flyout-list__scroll-up-indicator*/.menu-flyout-list__scroll-up-indicator.sc-scale-menu-flyout-list{top:var(--telekom-spacing-composition-space-04);border-bottom:5px solid var(--telekom-color-ui-faint);border-top:0}/*!@.menu-flyout-list__scroll-down-indicator*/.menu-flyout-list__scroll-down-indicator.sc-scale-menu-flyout-list{bottom:var(--telekom-spacing-composition-space-04);border-top:5px solid var(--telekom-color-ui-faint);border-bottom:0}/*!@.menu-flyout-list--can-scroll-up .menu-flyout-list__scroll-up-indicator*/.menu-flyout-list--can-scroll-up.sc-scale-menu-flyout-list .menu-flyout-list__scroll-up-indicator.sc-scale-menu-flyout-list{opacity:1}/*!@.menu-flyout-list--can-scroll-down .menu-flyout-list__scroll-down-indicator*/.menu-flyout-list--can-scroll-down.sc-scale-menu-flyout-list .menu-flyout-list__scroll-down-indicator.sc-scale-menu-flyout-list{opacity:1}/*!@.menu-flyout-list--brand-header-dropdown ::slotted(scale-menu-flyout-item)*/.menu-flyout-list--brand-header-dropdown .sc-scale-menu-flyout-list-s>scale-menu-flyout-item{--_min-width-moz:0;--_min-width:0}";

const PAD = 10;
const ITEM_ROLES = ['menuitem', 'menuitemcheckbox', 'menuitemradio'];
class MenuFlyoutList {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleOpen = createEvent$1(this, "scale-open", 7);
    this.scaleOpenLegacy = createEvent$1(this, "scaleOpen", 7);
    this.scaleClose = createEvent$1(this, "scale-close", 7);
    this.scaleCloseLegacy = createEvent$1(this, "scaleClose", 7);
    /** Used to force a re-render */
    this.forceRender = 0;
    /** */
    this.opened = false;
    /** (optional) Set preference for where the menu appears, space permitting */
    this.direction = 'bottom-right';
    /**  */
    this.active = false;
    /** (optional) Determines whether the flyout should close when a menu item is selected */
    this.closeOnSelect = true;
    /** (optional) set to true when using in telekom-brand-header */
    this.brandHeaderDropdown = false;
    /** (optional) set to true to prevent flipping orientation when off the screen vertically  */
    this.preventFlipVertical = false;
    /** Flags to know if content scrollable */
    this.canScrollUp = false;
    this.canScrollDown = false;
    /** When menu off the screen horizontally */
    this.flipHorizontal = false;
    /** When menu off the screen vertically */
    this.flipVertical = false;
    /** Set true when resize or when opened */
    this.needsCheckPlacement = true;
    this.handleScroll = () => {
      this.updateScrollIndicators();
    };
    this.handleWheel = (event) => {
      // TODO not sure this is doing anything atm
      this.stopWheelPropagation(event);
    };
  }
  get triggerRect() {
    return this.trigger().getBoundingClientRect();
  }
  componentDidLoad() {
    if (!this.hostElement.hasAttribute('role')) {
      this.hostElement.setAttribute('role', 'menu');
    }
  }
  componentDidRender() {
    if (this.opened && this.needsCheckPlacement) {
      this.setSize();
      this.checkPlacement();
    }
  }
  async open() {
    this.opened = true;
    emitEvent$1(this, 'scaleOpen', { list: this.hostElement });
  }
  async close(silent = false) {
    if (this.active && silent !== true) {
      emitEvent$1(this, 'scaleClose', { list: this.hostElement });
    }
    this.opened = false;
  }
  async setFocus() {
    if (this.focusedItemIndex != null) {
      this.focusItem();
    }
    else {
      this.setInitialItemsFocus();
    }
  }
  handleResize() {
    this.close();
  }
  handleKeydown(event) {
    if (!this.active) {
      return;
    }
    if (!this.hostElement.querySelector('app-navigation-user-menu')) {
      event.preventDefault();
    }
    if ('ArrowDown' === event.key) {
      this.shiftItemsFocus();
      return;
    }
    if ('ArrowUp' === event.key) {
      this.shiftItemsFocus(-1);
      return;
    }
    if ('ArrowLeft' === event.key || 'Escape' === event.key) {
      this.close();
      return;
    }
    if (' ' === event.key ||
      'Enter' === event.key ||
      'ArrowRight' === event.key) {
      const item = this.items[this.focusedItemIndex];
      if (item != null) {
        item.triggerEvent(event, this.closeOnSelect);
      }
    }
  }
  /**
   * We handle item clicks here, to avoid setting up
   * listeners on every item
   */
  handleClick(event) {
    const roleSelector = ITEM_ROLES.map((role) => `[role="${role}"]`).join(',');
    const item = event.target.closest(roleSelector);
    if (item != null) {
      event.stopImmediatePropagation();
      item.triggerEvent(event, this.closeOnSelect);
    }
  }
  /**
   * Focus newly selected item
   */
  handleScaleSelect({ detail }) {
    if (this.active && this.opened) {
      const index = this.items.findIndex((x) => x === detail.item);
      if (index != null) {
        this.focusedItemIndex = index;
        this.focusItem();
      }
    }
  }
  /**
   * Set `active` to false when a descendant opens
   */
  handleScaleOpen({ detail }) {
    if (detail.list !== this.hostElement) {
      this.active = false;
    }
  }
  openedChanged() {
    if (!this.opened) {
      this.active = false;
      this.focusedItemIndex = null;
      // Reset checks for boundary-aware placement
      this.needsCheckPlacement = true;
      this.flipHorizontal = false;
      this.flipVertical = false;
      this.hostElement.style.marginLeft = '';
      this.hostElement.style.marginTop = '';
      this.hostElement.style.marginRight = '';
      this.hostElement.style.marginBottom = '';
      if (this.trigger().tagName === 'SCALE-TELEKOM-NAV-ITEM') {
        this.trigger().style.color =
          'var(--telekom-color-text-and-icon-standard)';
      }
    }
    if (this.opened) {
      this.active = true;
      this.setFocus();
      this.setWindowSize();
      this.setPosition();
      this.padForNonOverlayScrollbars();
      this.updateScrollIndicators();
    }
    this.updateTriggerAttributes();
  }
  setInitialItemsFocus() {
    this.items = this.getListItems();
    this.focusedItemIndex = -1;
    if (this.items.length > 0) {
      this.shiftItemsFocus();
    }
  }
  shiftItemsFocus(direction = 1) {
    let nextIndex = this.focusedItemIndex + direction;
    if (nextIndex === this.items.length) {
      nextIndex = 0;
    }
    else if (nextIndex < 0) {
      nextIndex = this.items.length - 1;
    }
    this.focusedItemIndex = nextIndex;
    this.focusItem();
  }
  focusItem() {
    window.requestAnimationFrame(() => {
      try {
        this.items[this.focusedItemIndex].focus();
      }
      catch (err) { }
    });
  }
  updateTriggerAttributes() {
    const trigger = this.trigger();
    if ((trigger && trigger.getAttribute('aria-haspopup') === 'true') ||
      trigger.classList.contains('scale-menu-trigger')) {
      trigger.setAttribute('aria-expanded', String(this.opened));
    }
  }
  setWindowSize() {
    this.windowWidth = window.innerWidth;
    this.windowHeight = window.innerHeight;
  }
  setPosition() {
    const { top, left } = this.triggerRect;
    this.hostElement.style.left = !this.brandHeaderDropdown
      ? `${left}px`
      : `${left - 4}px`;
    if (this.trigger().tagName === 'SCALE-TELEKOM-NAV-ITEM') {
      this.hostElement.style.top = `${top - 12}px`;
      this.hostElement.style.left = `${left - 24}px`;
      this.trigger().style.color =
        'var(--telekom-color-text-and-icon-primary-standard)';
    }
    else {
      this.hostElement.style.top = `${top}px`;
    }
  }
  setSize() {
    const { width, height } = this.triggerRect;
    this.hostElement.style.height = `${height}px`;
    this.hostElement.style.width = `${width}px`;
    if (this.brandHeaderDropdown) {
      this.base.style.width = `240px`;
    }
  }
  checkPlacement() {
    this.needsCheckPlacement = false;
    let isOutOfBounds = false;
    const rect = this.base.getBoundingClientRect();
    // Check horizontal flips
    if (rect.left < PAD) {
      // console.log('off left edge');
      isOutOfBounds = true;
      if (this.direction.includes('left')) {
        this.flipHorizontal = true;
      }
    }
    if (rect.right > this.windowWidth - PAD) {
      // console.log('off right edge');
      isOutOfBounds = true;
      if (this.direction.includes('right')) {
        this.flipHorizontal = true;
      }
    }
    // Check vertical flips
    if (rect.top < PAD) {
      // console.log('off top edge');
      isOutOfBounds = true;
      if (this.direction.includes('top') && !this.preventFlipVertical) {
        this.flipVertical = true;
      }
    }
    if (rect.bottom > this.windowHeight - PAD) {
      // console.log('off bottom edge');
      isOutOfBounds = true;
      if (this.direction.includes('bottom') && !this.preventFlipVertical) {
        this.flipVertical = true;
      }
    }
    if (isOutOfBounds) {
      this.furtherAdjustPlacement();
    }
  }
  furtherAdjustPlacement() {
    // Apply flip class changes immediately to avoid frame flash
    this.base.className = this.getCssClassMap();
    // Force layout and style recalculation
    window.getComputedStyle(this.base);
    const rect = this.base.getBoundingClientRect();
    // TODO: add more functionality for order of priority of which edge to snap to
    // Shift to be snapped to a padded edge
    // Note can't use transform as it creates
    // a relative parent for nested position fixed elements
    let left = 0;
    let top = 0;
    if (rect.left < PAD) {
      // console.log('still off left edge');
      left = PAD - rect.left;
    }
    else if (rect.right > this.windowWidth - PAD) {
      // console.log('still off right edge');
      left = this.windowWidth - PAD - rect.right;
    }
    if (rect.top < PAD) {
      // console.log('still off top edge');
      top = PAD - rect.top;
    }
    else if (rect.bottom > this.windowHeight - PAD) {
      // console.log('still off bottom edge');
      top = this.windowHeight - PAD - rect.bottom;
    }
    this.hostElement.style.marginLeft = `${left}px`;
    this.hostElement.style.marginTop = `${top}px`;
    this.hostElement.style.marginRight = `${-left}px`;
    this.hostElement.style.marginBottom = `${-top}px`;
    // Re-render visibly next frame with correct placement to update vdom
    setTimeout(() => this.forceRender++);
  }
  /**
   * Add scrollbar width to menu, to avoid horizontal scrollbars
   * or scrollbar forcing text-overflow.
   * (This affects Firefox and Safari, where non-overlay scrollbars
   * eat into content width rather than add)
   */
  padForNonOverlayScrollbars() {
    this.base.style.paddingRight = `0px`;
    const scrollbarWidth = this.base.offsetWidth - this.base.clientWidth;
    this.base.style.paddingRight = `${scrollbarWidth}px`;
  }
  updateScrollIndicators() {
    // Reset
    this.canScrollDown = false;
    this.canScrollUp = false;
    const diff = this.list.scrollHeight - this.list.clientHeight;
    // Not scrollable
    if (diff) {
      if (this.list.scrollTop > 0) {
        this.canScrollUp = true;
      }
      if (this.list.scrollTop < diff) {
        this.canScrollDown = true;
      }
    }
    this.forceRender++;
  }
  /**
   * Check if going in a direction with content to reach, otherwise stop
   */
  stopWheelPropagation(event) {
    // This is enough for Chrome
    event.stopPropagation();
    // Needed for Safari and Firefox to prevent scrolling on non-scrollable lists
    if (!this.canScrollDown && !this.canScrollUp) {
      event.preventDefault();
    }
    // Needed for Safari to prevent scrolling past the end of a scrollable list
    if (event.deltaY > 0 && !this.canScrollDown) {
      event.preventDefault();
    }
    if (event.deltaY < 0 && !this.canScrollUp) {
      event.preventDefault();
    }
  }
  getListItems() {
    return Array.from(this.hostElement.children).filter((el) => ITEM_ROLES.includes(el.getAttribute('role')));
  }
  getCssClassMap() {
    return classnames('menu-flyout-list', `menu-flyout-list--direction-${this.direction}`, this.opened && 'menu-flyout-list--opened', this.canScrollUp && 'menu-flyout-list--can-scroll-up', this.canScrollDown && 'menu-flyout-list--can-scroll-down', this.flipHorizontal && `menu-flyout-list--flip-horizontal`, this.flipVertical && `menu-flyout-list--flip-vertical`, this.brandHeaderDropdown && `menu-flyout-list--brand-header-dropdown`);
  }
  render() {
    return (hAsync(Host$1, { class: "scale-menu-flyout-list" }, this.styles && hAsync("style", null, this.styles), hAsync("div", { class: this.getCssClassMap(), ref: (el) => (this.base = el), part: "base", style: { maxHeight: `calc(${this.windowHeight}px - 20px)` }, onWheelCapture: this.handleWheel }, hAsync("div", { class: "menu-flyout-list__list", ref: (el) => (this.list = el), onScroll: this.handleScroll }, hAsync("slot", null)), hAsync("div", { "aria-hidden": "true", class: "menu-flyout-list__scroll-up-indicator" }), hAsync("div", { "aria-hidden": "true", class: "menu-flyout-list__scroll-down-indicator" }))));
  }
  get hostElement() { return getElement$1(this); }
  static get watchers() { return {
    "opened": ["openedChanged"]
  }; }
  static get style() { return menuFlyoutListCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-menu-flyout-list",
    "$members$": {
      "opened": [1540],
      "trigger": [16],
      "direction": [1025],
      "active": [1540],
      "closeOnSelect": [4, "close-on-select"],
      "brandHeaderDropdown": [4, "brand-header-dropdown"],
      "styles": [1],
      "preventFlipVertical": [4, "prevent-flip-vertical"],
      "forceRender": [32],
      "open": [64],
      "close": [64],
      "setFocus": [64]
    },
    "$listeners$": [[9, "resize", "handleResize"], [0, "keydown", "handleKeydown"], [0, "click", "handleClick"], [0, "scale-select", "handleScaleSelect"], [0, "scale-open", "handleScaleOpen"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["opened", "opened"], ["active", "active"]]
  }; }
}

/**
 * Copy/pasted from https://github.com/andreasbm/focus-trap
 */
/**
 * Traverses the slots of the open shadowroots and returns all children matching the query.
 * We need to traverse each child-depth one at a time because if an element should be skipped
 * (for example because it is hidden) we need to skip all of it's children. If we use querySelectorAll("*")
 * the information of whether the children is within a hidden parent is lost.
 * @param {ShadowRoot | HTMLElement} root
 * @param skipNode
 * @param isMatch
 * @param {number} maxDepth
 * @param {number} depth
 * @returns {HTMLElement[]}
 */
function queryShadowRoot(root, skipNode, isMatch, maxDepth = 20, depth = 0) {
  const matches = [];
  // If the depth is above the max depth, abort the searching here.
  if (depth >= maxDepth) {
    return matches;
  }
  // Traverses a slot element
  const traverseSlot = ($slot) => {
    // Only check nodes that are of the type Node.ELEMENT_NODE
    // Read more here https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType
    const assignedNodes = $slot
      .assignedNodes()
      .filter((node) => node.nodeType === 1);
    if (assignedNodes.length > 0) {
      const $slotParent = assignedNodes[0].parentElement;
      return queryShadowRoot($slotParent, skipNode, isMatch, maxDepth, depth + 1);
    }
    return [];
  };
  // Go through each child and continue the traversing if necessary
  // Even though the typing says that children can't be undefined, Edge 15 sometimes gives an undefined value.
  // Therefore we fallback to an empty array if it is undefined.
  const children = Array.from(root.children || []);
  for (const $child of children) {
    // Check if the element and its descendants should be skipped
    if (skipNode($child)) {
      // console.log('-- SKIP', $child);
      continue;
    }
    // console.log('$child', $child);
    // If the element matches we always add it
    if (isMatch($child)) {
      matches.push($child);
    }
    if ($child.shadowRoot != null) {
      // If the element has a shadow root we need to traverse it
      matches.push(...queryShadowRoot($child.shadowRoot, skipNode, isMatch, maxDepth, depth + 1));
    }
    else if ($child.tagName === 'SLOT') {
      // If the child is a slot we need to traverse each assigned node
      matches.push(...traverseSlot($child));
    }
    else {
      // Traverse the children of the element
      matches.push(...queryShadowRoot($child, skipNode, isMatch, maxDepth, depth + 1));
    }
  }
  return matches;
}
/**
 * Returns whether the element is hidden.
 * @param $elem
 */
function isHidden($elem) {
  return ($elem.hasAttribute('hidden') ||
    ($elem.hasAttribute('aria-hidden') &&
      $elem.getAttribute('aria-hidden') !== 'false') ||
    // A quick and dirty way to check whether the element is hidden.
    // For a more fine-grained check we could use "window.getComputedStyle" but we don't because of bad performance.
    // If the element has visibility set to "hidden" or "collapse", display set to "none" or opacity set to "0" through CSS
    // we won't be able to catch it here. We accept it due to the huge performance benefits.
    $elem.style.display === `none` ||
    $elem.style.opacity === `0` ||
    $elem.style.visibility === `hidden` ||
    $elem.style.visibility === `collapse`);
  // If offsetParent is null we can assume that the element is hidden
  // https://stackoverflow.com/questions/306305/what-would-make-offsetparent-null
  // || $elem.offsetParent == null;
}
/**
 * Returns whether the element is disabled.
 * @param $elem
 */
function isDisabled($elem) {
  return ($elem.hasAttribute('disabled') ||
    ($elem.hasAttribute('aria-disabled') &&
      $elem.getAttribute('aria-disabled') !== 'false'));
}
/**
 * Determines whether an element is focusable.
 * Read more here: https://stackoverflow.com/questions/1599660/which-html-elements-can-receive-focus/1600194#1600194
 * Or here: https://stackoverflow.com/questions/18261595/how-to-check-if-a-dom-element-is-focusable
 * @param $elem
 */
function isFocusable($elem) {
  // Discard elements that are removed from the tab order.
  if ($elem.getAttribute('tabindex') === '-1' ||
    isHidden($elem) ||
    isDisabled($elem)) {
    return false;
  }
  return (
  // At this point we know that the element can have focus (eg. won't be -1) if the tabindex attribute exists
  $elem.hasAttribute('tabindex') ||
    // Anchor tags or area tags with a href set
    (($elem instanceof HTMLAnchorElement || $elem instanceof HTMLAreaElement) &&
      $elem.hasAttribute('href')) ||
    // Form elements which are not disabled
    $elem instanceof HTMLButtonElement ||
    $elem instanceof HTMLInputElement ||
    $elem instanceof HTMLTextAreaElement ||
    $elem instanceof HTMLSelectElement ||
    // IFrames
    $elem instanceof HTMLIFrameElement);
}

/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
/**
 * @see https://www.youtube.com/watch?v=9-6CKCz58A8
 */
function animateTo(element, keyframes, options) {
  const anim = element.animate(keyframes, Object.assign(Object.assign({}, options), { fill: 'both' }));
  anim.addEventListener('finish', () => {
    // @ts-ignore
    anim.commitStyles();
    anim.cancel();
  });
  return anim;
}
const keyframeDefaults = {
  easing: 'cubic-bezier(0.390, 0.575, 0.565, 1.000)',
};
const KEYFRAMES = {
  fadeIn: [
    Object.assign(Object.assign({ offset: 0 }, keyframeDefaults), { opacity: 0 }),
    Object.assign(Object.assign({ offset: 1 }, keyframeDefaults), { opacity: 1 }),
  ],
  fadeOut: [
    Object.assign(Object.assign({ offset: 0 }, keyframeDefaults), { opacity: 1 }),
    Object.assign(Object.assign({ offset: 1 }, keyframeDefaults), { opacity: 0 }),
  ],
  fadeInTop: [
    Object.assign(Object.assign({ offset: 0 }, keyframeDefaults), { opacity: 0, 
      /**
       * we are not using transform here to avoid breaking positioning for nested fixed elements (i.e. a flyout menu in an animated modal)
       * see 'fixed' section @link https://developer.mozilla.org/en-US/docs/Web/CSS/position
       */
      top: '-3rem' }),
    Object.assign(Object.assign({ offset: 1 }, keyframeDefaults), { opacity: 1, top: 0 }),
  ],
};

const modalCss = "/*!@:host*/.sc-scale-modal-h{--spacing-x:var(--telekom-spacing-composition-space-06);--background-overlay:var(\n    --telekom-color-background-backdrop,\n    rgba(108, 108, 108, 0.7)\n  );--max-height-window:calc(\n    100vh - (2 * var(--telekom-spacing-composition-space-19))\n  );--radius-window:var(--telekom-radius-large);--box-shadow-window:var(--telekom-shadow-top);--background-window:var(--telekom-color-background-surface);--color-window:var(--telekom-color-text-and-icon-standard);--size-window-small:calc(\n    (6 * var(--telekom-spacing-unit-x14, 3.5rem)) +\n      (5 * var(--telekom-spacing-composition-space-10))\n  );--size-window-default:calc(\n    (8 * var(--telekom-spacing-unit-x14, 3.5rem)) +\n      (7 * var(--telekom-spacing-composition-space-10))\n  );--size-window-large:calc(\n    (12 * var(--telekom-spacing-unit-x14, 3.5rem)) +\n      (11 * var(--telekom-spacing-composition-space-10))\n  );--spacing-x-header:var(--telekom-spacing-composition-space-08);--spacing-y-header:var(--telekom-spacing-composition-space-08);--border-bottom-header-has-scroll:var(--telekom-line-weight-standard) solid\n    var(--telekom-color-ui-subtle);--font-family-heading:var(--telekom-typography-font-family-sans);--font-size-heading:var(--telekom-typography-font-size-callout);--font-weight-heading:var(--telekom-typography-font-weight-extra-bold);--spacing-close-button:var(--telekom-spacing-composition-space-04);--radius-close-button:var(--telekom-radius-standard);--transition-close-button:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);--box-shadow-close-button-focus:0 0 0 var(--telekom-line-weight-highlight)\n    var(--telekom-color-functional-focus-standard);--color-close-button:var(--telekom-color-text-and-icon-standard);--color-close-button-hover:var(--telekom-color-primary-hovered);--color-close-button-active:var(--telekom-color-primary-pressed);--spacing-x-body-wrapper:var(--telekom-spacing-composition-space-08);--spacing-y-body:var(--telekom-spacing-composition-space-08);--spacing-actions:var(--telekom-spacing-composition-space-06)\n    var(--telekom-spacing-composition-space-08)\n    var(--telekom-spacing-composition-space-08);--spacing-x-actions-slotted:var(--telekom-spacing-composition-space-04);--background-actions-has-scroll:var(\n    --telekom-color-background-surface-subtle\n  )}/*!@.modal*/.modal.sc-scale-modal{top:0;left:0;width:100%;bottom:0;display:none;z-index:100;position:fixed;background:var(--background-overlay);box-sizing:border-box;align-items:center;justify-content:center;padding-left:var(--spacing-x);padding-right:var(--spacing-x)}/*!@.modal.modal--is-open*/.modal.modal--is-open.sc-scale-modal{display:flex}/*!@.modal__backdrop*/.modal__backdrop.sc-scale-modal{top:0;left:0;width:100%;height:100%;z-index:0;position:absolute}/*!@.modal__window*/.modal__window.sc-scale-modal{width:100%;height:auto;display:flex;z-index:1;position:relative;overflow-y:auto;flex-direction:column;background-color:var(--background-window);color:var(--color-window);max-height:var(--max-height-window);min-height:var(--min-height-window);border-radius:var(--radius-window);box-shadow:var(--box-shadow-window)}/*!@.modal__window .modal__body-wrapper*/.modal__window.sc-scale-modal .modal__body-wrapper.sc-scale-modal{overflow-y:auto;flex-shrink:1;flex-grow:1}/*!@.modal--size-small .modal__window*/.modal--size-small.sc-scale-modal .modal__window.sc-scale-modal{max-width:var(--size-window-small)}/*!@.modal--size-default .modal__window*/.modal--size-default.sc-scale-modal .modal__window.sc-scale-modal{max-width:var(--size-window-default)}/*!@.modal--size-large .modal__window*/.modal--size-large.sc-scale-modal .modal__window.sc-scale-modal{max-width:var(--size-window-large)}@media (max-height: 30em){/*!@.modal__window*/.modal__window.sc-scale-modal{max-height:calc(100vh - var(--telekom-spacing-composition-space-08))}}/*!@.modal__window:after*/.modal__window.sc-scale-modal:after{top:0;left:0;width:100%;border:1px solid transparent;height:100%;content:'';display:block;position:absolute;box-sizing:border-box;pointer-events:none;border-radius:var(--radius-window)}/*!@.modal__header*/.modal__header.sc-scale-modal{display:flex;align-items:flex-start;flex-shrink:0;justify-content:space-between;margin-left:var(--spacing-x-header);margin-right:var(--spacing-x-header);padding-top:var(--spacing-y-header);padding-bottom:var(--spacing-y-header)}/*!@.modal--has-scroll .modal__header*/.modal--has-scroll.sc-scale-modal .modal__header.sc-scale-modal{border-bottom:var(--border-bottom-header-has-scroll)}/*!@.modal__heading*/.modal__heading.sc-scale-modal{margin:0;font-family:var(--font-family-heading);font-size:var(--font-size-heading);font-weight:var(--font-weight-heading)}/*!@.modal__close-button*/.modal__close-button.sc-scale-modal{box-sizing:border-box;display:inline-flex;align-items:center;justify-content:center;padding:var(--spacing-close-button);margin-bottom:calc(-2 * var(--spacing-close-button));border:0;border-radius:var(--radius-close-button);outline:none;color:var(--color-close-button);background:transparent;transition:var(--transition-close-button);transform:translate(\n    var(--spacing-close-button),\n    calc(-1 * var(--spacing-close-button))\n  );appearance:none;cursor:pointer;user-select:none}/*!@.modal__close-button:focus*/.modal__close-button.sc-scale-modal:focus{box-shadow:var(--box-shadow-close-button-focus)}/*!@.modal__close-button:hover*/.modal__close-button.sc-scale-modal:hover{color:var(--color-close-button-hover)}/*!@.modal__close-button:active*/.modal__close-button.sc-scale-modal:active{color:var(--color-close-button-active)}/*!@.modal__body-wrapper*/.modal__body-wrapper.sc-scale-modal{padding-left:var(--spacing-x-body-wrapper);padding-right:var(--spacing-x-body-wrapper)}/*!@.modal--has-body .modal__body-wrapper*/.modal--has-body.sc-scale-modal .modal__body-wrapper.sc-scale-modal{min-height:var(--telekom-spacing-related-lg)}/*!@.modal--has-body .modal__body*/.modal--has-body.sc-scale-modal .modal__body.sc-scale-modal{margin-top:0;margin-bottom:0}/*!@.modal--has-body:not(.modal--has-actions) .modal__body*/.modal--has-body.sc-scale-modal:not(.modal--has-actions) .modal__body.sc-scale-modal{margin-bottom:var(--spacing-y-body)}/*!@.modal--has-scroll.modal--has-body .modal__body*/.modal--has-scroll.modal--has-body.sc-scale-modal .modal__body.sc-scale-modal{margin-top:var(--spacing-y-body);margin-bottom:var(--spacing-y-body)}/*!@.modal--has-body .modal__body ::slotted(*)*/.modal--has-body .modal__body .sc-scale-modal-s>*{font:var(--telekom-text-style-body)}/*!@.modal--has-body .modal__body ::slotted(*:not([slot]):first-child)*/.modal--has-body .modal__body .sc-scale-modal-s>*:not([slot]):first-child{margin-top:0}/*!@.modal--has-body .modal__body ::slotted(*:not([slot]):last-of-type)*/.modal--has-body .modal__body .sc-scale-modal-s>*:not([slot]):last-of-type{margin-bottom:0}/*!@.modal__actions*/.modal__actions.sc-scale-modal{display:none;flex-shrink:0;justify-content:flex-end;padding:var(--spacing-actions)}/*!@.modal__actions ::slotted(*)*/.modal__actions .sc-scale-modal-s>*{margin-left:var(--spacing-x-actions-slotted)}/*!@.modal--has-actions .modal__actions*/.modal--has-actions.sc-scale-modal .modal__actions.sc-scale-modal{display:flex}/*!@.modal--align-actions-left .modal__actions*/.modal--align-actions-left.sc-scale-modal .modal__actions.sc-scale-modal{justify-content:flex-start}/*!@.modal--has-scroll .modal__actions*/.modal--has-scroll.sc-scale-modal .modal__actions.sc-scale-modal{background-color:var(--background-actions-has-scroll)}";

const supportsResizeObserver = 'ResizeObserver' in window;
/*
  TODO
  ====
  - [ ] save focus of last element previous to opening the modal
  - [ ] put animations in tokens
 */
class Modal {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleOpen = createEvent$1(this, "scale-open", 7);
    this.scaleOpenLegacy = createEvent$1(this, "scaleOpen", 7);
    this.scaleBeforeClose = createEvent$1(this, "scale-before-close", 7);
    this.scaleBeforeCloseLegacy = createEvent$1(this, "scaleBeforeClose", 7);
    this.scaleClose = createEvent$1(this, "scale-close", 7);
    this.scaleCloseLegacy = createEvent$1(this, "scaleClose", 7);
    /** (optional) Modal size */
    this.size = 'default';
    /** (optional) If `true`, the Modal is open. */
    this.opened = false;
    /** (optional) Transition duration */
    this.duration = 200;
    /** (optional) Label for close button */
    this.closeButtonLabel = 'Close';
    /** (optional) title for close button */
    this.closeButtonTitle = 'Close';
    /** (optional) hide close button */
    this.omitCloseButton = false;
    /** (optional) Alignment of action buttons */
    this.alignActions = 'right';
    /** (optional) allow to inject css style {overflow: hidden} to body when modal is open */
    this.allowInjectingStyleToBody = false;
    /** What actually triggers opening/closing the modal */
    this.isOpen = this.opened || false;
    /** Check wheter there are actions slots, style accordingly */
    this.hasActionsSlot = false;
    /** Check wheter there's content in the body, style accordingly */
    this.hasBody = false;
    /** Useful for toggling scroll-specific styles */
    this.hasScroll = false;
    /** store document body original overflow style if applicable, this is useful when modal opens and inject overflow style to body */
    this.bodyOverflowValue = '';
    this.focusableElements = [];
    this.handleKeypress = (event) => {
      if (!this.isOpen) {
        return;
      }
      if (event.key === 'Escape') {
        this.emitBeforeClose('ESCAPE_KEY');
      }
    };
    this.handleTopFocus = () => {
      this.attemptFocus(this.getLastFocusableElement());
    };
    this.handleBottomFocus = () => {
      this.attemptFocus(this.getFirstFocusableElement());
    };
  }
  disconnectedCallback() {
    if (this.resizeObserver) {
      this.resizeObserver.disconnect();
    }
  }
  /**
   * Set `hasActionsSlot` and `hasBody`.
   */
  componentWillRender() {
    const actionSlots = this.hostElement.querySelectorAll('[slot="action"]');
    const bodySlot = Array.from(this.hostElement.shadowRoot.querySelectorAll('slot')).find((x) => !x.name);
    this.hasActionsSlot = actionSlots.length > 0;
    if (bodySlot != null) {
      this.hasBody = bodySlot.assignedElements().length > 0;
    }
  }
  emitBeforeClose(trigger) {
    const emittedEvents = emitEvent$1(this, 'scaleBeforeClose', { trigger });
    const prevented = emittedEvents.some((event) => event.defaultPrevented);
    if (!prevented) {
      this.opened = false;
    }
  }
  componentDidLoad() {
    // Query all focusable elements and store them in `focusableElements`.
    // Needed for the "focus trap" functionality.
    this.focusableElements = queryShadowRoot(this.hostElement.shadowRoot, (el) => isHidden(el) || el.matches('[data-focus-trap-edge]'), isFocusable);
    // Set `hasScroll` state dynamically on resize.
    if (supportsResizeObserver) {
      // @ts-ignore
      this.resizeObserver = new ResizeObserver(() => {
        this.setHasScroll();
      });
      this.resizeObserver.observe(this.modalBody);
    }
    this.setHasScroll();
  }
  setHasScroll() {
    const container = this.modalBody;
    this.hasScroll = container.scrollHeight > container.clientHeight;
  }
  getFirstFocusableElement() {
    return this.focusableElements[0];
  }
  getLastFocusableElement() {
    return this.focusableElements[this.focusableElements.length - 1];
  }
  attemptFocus(element) {
    if (element == null) {
      this.closeButton.focus();
      return;
    }
    element.focus();
  }
  openedChanged(newValue) {
    if (newValue === true) {
      this.open();
      if (this.allowInjectingStyleToBody) {
        this.bodyOverflowValue = document.body.style.overflow;
        // The following style will disable body from scrolling when modal is open
        document.body.style.setProperty('overflow', 'hidden');
      }
    }
    else {
      this.close();
      if (this.allowInjectingStyleToBody) {
        // remove injected overflow style or set it to original value
        document.body.style.setProperty('overflow', this.bodyOverflowValue);
      }
    }
  }
  open() {
    this.isOpen = true;
    try {
      animateTo(this.modalWindow, KEYFRAMES.fadeInTop, {
        duration: this.duration,
        delay: this.duration * 0.5,
      });
      const anim = animateTo(this.modalContainer, KEYFRAMES.fadeIn, {
        duration: this.duration,
      });
      anim.addEventListener('finish', () => {
        this.attemptFocus(this.getFirstFocusableElement());
        emitEvent$1(this, 'scaleOpen');
      });
      this.hostElement.addEventListener('keydown', this.handleKeypress);
    }
    catch (err) {
      emitEvent$1(this, 'scaleOpen');
    }
  }
  close() {
    try {
      const anim = animateTo(this.modalContainer, KEYFRAMES.fadeOut, {
        duration: this.duration,
      });
      anim.addEventListener('finish', () => {
        this.isOpen = false;
        emitEvent$1(this, 'scaleClose');
      });
      this.hostElement.removeEventListener('keydown', this.handleKeypress);
    }
    catch (err) {
      this.isOpen = false;
      emitEvent$1(this, 'scaleClose');
    }
  }
  render() {
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { ref: (el) => (this.modalContainer = el), class: this.getCssClassMap(), part: classnames('base', this.isOpen && 'open') }, hAsync("div", { class: "modal__backdrop", part: "backdrop", onClick: () => this.emitBeforeClose('BACKDROP') }), hAsync("div", { "data-focus-trap-edge": true, onFocus: this.handleTopFocus, tabindex: "0" }), hAsync("div", { class: "modal__window", part: classnames('window', this.size && `size-${this.size}`), ref: (el) => (this.modalWindow = el), role: "dialog", "aria-modal": "true", "aria-label": this.heading }, hAsync("div", { class: "modal__header", part: classnames('header', this.hasScroll && 'has-scroll') }, hAsync("h2", { class: "modal__heading", part: "heading" }, this.heading), !this.omitCloseButton && (hAsync("button", { ref: (el) => (this.closeButton = el), class: "modal__close-button", part: "close-button", onClick: () => this.emitBeforeClose('CLOSE_BUTTON'), "aria-label": this.closeButtonLabel, title: this.closeButtonTitle }, hAsync("slot", { name: "close-icon" }, hAsync("scale-icon-action-circle-close", { decorative: true }))))), hAsync("div", { ref: (el) => (this.modalBody = el), class: "modal__body-wrapper", part: classnames('body-wrapper', this.hasBody && 'has-body') }, hAsync("div", { class: "modal__body", part: classnames('body', this.hasBody && 'has-body') }, hAsync("slot", null))), hAsync("div", { class: "modal__actions", part: classnames('actions', `align-${this.alignActions}`, this.hasActionsSlot && 'has-actions', this.hasScroll && 'has-scroll') }, hAsync("slot", { name: "action" }))), hAsync("div", { "data-focus-trap-edge": true, onFocus: this.handleBottomFocus, tabindex: "0" }))));
  }
  getCssClassMap() {
    return classnames('modal', this.isOpen && 'modal--is-open', this.hasActionsSlot && 'modal--has-actions', `modal--align-actions-${this.alignActions}`, this.hasScroll && 'modal--has-scroll', this.hasBody && 'modal--has-body', this.size && `modal--size-${this.size}`);
  }
  get hostElement() { return getElement$1(this); }
  static get watchers() { return {
    "opened": ["openedChanged"]
  }; }
  static get style() { return modalCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-modal",
    "$members$": {
      "heading": [1],
      "size": [1],
      "opened": [1540],
      "duration": [2],
      "closeButtonLabel": [1, "close-button-label"],
      "closeButtonTitle": [1, "close-button-title"],
      "omitCloseButton": [4, "omit-close-button"],
      "alignActions": [1, "align-actions"],
      "styles": [1],
      "allowInjectingStyleToBody": [4, "allow-injecting-style-to-body"],
      "isOpen": [32],
      "hasActionsSlot": [32],
      "hasBody": [32],
      "hasScroll": [32],
      "bodyOverflowValue": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["opened", "opened"]]
  }; }
}

const navIconCss = "scale-nav-icon{--spacing-mobile:var(--telekom-spacing-composition-space-00) 6px;--font-size-mobile:var(--telekom-typography-font-size-badge);--line-height-mobile:var(--telekom-typography-line-spacing-tight);--font-weight-mobile:var(--telekom-typography-font-weight-bold);--spacing-desktop:0 0 0 var(--telekom-spacing-composition-space-06);--font-size-desktop:var(--telekom-typography-font-size-small);--line-height-desktop:var(--telekom-typography-line-spacing-standard);--color:var(--telekom-color-text-and-icon-standard);--color-hover:var(--telekom-color-text-and-icon-primary-hovered);--color-active:var(--telekom-color-text-and-icon-primary-pressed);--focus-outline:var(--telekom-line-weight-highlight) solid\n    var(--telekom-color-functional-focus-standard)}.meta-navigation__item-link{color:var(--color);display:flex;transition:all 0.2s ease-in-out;align-items:center;font-weight:var(--font-weight-mobile);text-decoration:none;height:var(--header-nav-height)}.meta-navigation__item--selected .meta-navigation__item-link{color:var(--color)}@media screen and (forced-colors: active), (-ms-high-contrast: active){.meta-navigation__item-link{color:var(--telekom-color-text-and-icon-inverted-standard)}}.meta-navigation__item-link:hover{color:var(--color-hover)}.meta-navigation__item-link:active{color:var(--color-active)}.meta-navigation__item-link:focus{outline:var(--focus-outline)}@media (max-width: 1039px){.meta-navigation__item-link{min-width:24px;height:auto}.meta-navigation__item-link{margin:var(--spacing-mobile);font-size:var(--font-size-mobile);line-height:var(--line-height-mobile);flex-direction:column}.meta-navigation__item.mobile-menu{width:50px;text-align:center;cursor:pointer}.meta-navigation__item-link .meta-navigation__item-link-icon{width:18px;height:18px;margin-bottom:4px}}@media (min-width: 1040px){.meta-navigation__item scale-menu-flyout{height:24px}.meta-navigation__item-link{margin:var(--spacing-desktop);font-size:var(--font-size-desktop);line-height:var(--line-height-desktop)}.meta-navigation__item-link .meta-navigation__item-link-icon{margin-right:6px}}";

class NavIcon {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) href value */
    this.href = 'javascript:void(0);';
    // DEPRECATED - mobileMenuOpen should replace isMobileMenuOpen
    this.isMobileMenuOpen = false;
    this.mobileMenuOpen = false;
    this.badge = false;
  }
  componentWillRender() {
    // make sure the deprecated props overwrite the actual ones if used
    // and show status note deprecated
    if (this.isActive !== undefined) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "isActive" is deprecated. Please use the "active" property!',
        type: 'warn',
        source: this.host,
      });
    }
    if (this.isMobileMenuOpen !== false) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "isMobileMenuOpen" is deprecated. Please use the "mobileMenuOpen" property!',
        type: 'warn',
        source: this.host,
      });
    }
  }
  render() {
    return (hAsync("li", { class: this.getCssClassMap() }, hAsync("a", { class: "meta-navigation__item-link", ref: this.refMobileMenuToggle ||
        this.refMobileUserMenuToggle ||
        this.refUserMenuToggle, href: this.href, role: this.href === 'javascript:void(0);' ? 'button' : null, onClick: this.clickLink, onKeyDown: (event) => {
        if (!this.refMobileMenuToggle) {
          return;
        }
        if (['Enter', ' ', 'Escape', 'Esc'].includes(event.key)) {
          event.preventDefault();
          this.clickLink(event);
        }
      } }, this.badge || (this.badgeLabel && this.badge) || this.badgeLabel ? (hAsync("scale-notification-badge", { label: this.badgeLabel, type: "nav-icon" }, renderIcon({
      tag: `scale-icon-${this.icon}`,
      attributes: {
        class: 'meta-navigation__item-link-icon',
        selected: this.active || this.isActive,
      },
    }))) : (renderIcon({
      tag: `scale-icon-${this.icon}`,
      attributes: {
        class: 'meta-navigation__item-link-icon',
        selected: this.active || this.isActive,
      },
    })), hAsync("span", { class: "meta-navigation__item-label" }, hAsync("slot", null)))));
  }
  getCssClassMap() {
    return classnames('meta-navigation__item', (this.active ||
      this.isActive ||
      this.mobileMenuOpen ||
      this.isMobileMenuOpen) &&
      'meta-navigation__item--selected', !!this.refMobileMenuToggle && 'mobile-menu');
  }
  get host() { return getElement$1(this); }
  static get style() { return navIconCss; }
  static get cmpMeta() { return {
    "$flags$": 4,
    "$tagName$": "scale-nav-icon",
    "$members$": {
      "isActive": [4, "is-active"],
      "active": [4],
      "href": [1],
      "clickLink": [8, "click-link"],
      "icon": [1],
      "isMobileMenuOpen": [4, "is-mobile-menu-open"],
      "mobileMenuOpen": [4, "mobile-menu-open"],
      "refMobileMenuToggle": [8, "ref-mobile-menu-toggle"],
      "refMobileUserMenuToggle": [8, "ref-mobile-user-menu-toggle"],
      "refUserMenuToggle": [8, "ref-user-menu-toggle"],
      "badge": [4],
      "badgeLabel": [2, "badge-label"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const navMainCss = "scale-nav-main{--spacing-x:var(--telekom-typography-font-size-body);--color:var(--telekom-color-text-and-icon-standard);--color-hover:var(--telekom-color-text-and-icon-primary-hovered);--color-active:var(--telekom-color-text-and-icon-primary-hovered);--color-selected:var(--telekom-color-text-and-icon-primary-standard);--font-size:var(--telekom-typography-font-size-callout);--font-weight:var(--telekom-typography-font-weight-extra-bold);--line-height:var(--telekom-typography-line-spacing-tight);--focus-outline:var(--telekom-line-weight-highlight) solid\n    var(--telekom-color-functional-focus-standard)}.main-navigation__item{height:100%;margin-left:var(--spacing-x);margin-right:var(--spacing-x)}.main-navigation__item:has(a[href]){cursor:pointer}.main-navigation__item-link-text{white-space:nowrap}.main-navigation__item.mega-menu--visible .mega-menu{display:block}.main-navigation__item.mega-menu--visible .mega-menu__wrapper{pointer-events:visible}.main-navigation__item .main-navigation__item-link{display:flex;height:100%;color:var(--color);font-size:var(--font-size);font-weight:var(--font-weight);line-height:var(--line-height);transition:color, border 0.2s ease-in-out;align-items:center;text-decoration:none}.main-navigation__item:hover .main-navigation__item-link{color:var(--color-hover)}.main-navigation__item:hover .main-navigation__item-link-text{border-bottom:2px solid var(--color-hover);color:var(--color-hover);margin-bottom:-2px;height:calc(100% - 4px);display:flex;align-items:center}.main-navigation__item-link:focus{outline:var(--focus-outline)}.main-navigation__item:active .main-navigation__item-link{color:var(--color-active)}.main-navigation__item:active .main-navigation__item-link-text{border-bottom:2px solid var(--color-active);margin-bottom:-2px;height:calc(100% - 4px);display:flex;align-items:center}.main-navigation__item.selected .main-navigation__item-link{color:var(--color-selected)}.main-navigation__item.selected:hover .main-navigation__item-link{color:var(--color-hover)}.main-navigation__item.selected .main-navigation__item-link-text{border-bottom:2px solid var(--color-selected);margin-bottom:-2px;height:calc(100% - 4px);display:flex;align-items:center}.main-navigation__item.selected:hover .main-navigation__item-link-text{color:var(--color-hover);border-bottom:2px solid var(--color-hover)}.main-navigation__item.mega-menu--visible .main-navigation__item-link-text{border-bottom:2px solid var(--color-hover);margin-bottom:-2px;height:calc(100% - 4px);display:flex;align-items:center}.sr-only{position:absolute;left:-10000px;overflow:hidden}";

class NavMain {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    // DEPRECATED - megaMenuVisible should replace isMegaMenuVisible
    this.isMegaMenuVisible = false;
    /** (optional) if this mega-menu is visible */
    this.megaMenuVisible = false;
    /** (optional) href value */
    this.href = 'javascript:void(0);';
    /** (optional) target value */
    this.target = '_self';
  }
  componentWillLoad() {
    this.hasPopup =
      this.popup || !!this.hostElement.querySelector('app-mega-menu');
  }
  componentWillRender() {
    // make sure the deprecated props overwrite the actual ones if used
    // and show status note deprecated
    if (this.isMegaMenuVisible !== false) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "isMegaMenuVisible" is deprecated. Please use the "megaMenuVisible" property!',
        type: 'warn',
        source: this.hostElement,
      });
    }
    if (this.isActive !== undefined) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "isActive" is deprecated. Please use the "active" property!',
        type: 'warn',
        source: this.hostElement,
      });
    }
  }
  render() {
    return (hAsync(Host$1, null, hAsync("li", { class: this.getCssClassMap() }, hAsync("a", { class: "main-navigation__item-link", href: this.href, target: this.target || '_self', "aria-current": this.active || this.isActive ? 'true' : 'false', "aria-haspopup": this.hasPopup ? 'true' : 'false', onClick: this.clickLink, id: this.innerId }, hAsync("span", { class: "main-navigation__item-link-text" }, this.name), (this.active || this.isActive) && (hAsync("span", { class: "sr-only" }, "active"))), hAsync("slot", null))));
  }
  getCssClassMap() {
    return classnames('main-navigation__item', (this.megaMenuVisible || this.isMegaMenuVisible) && 'mega-menu--visible', (this.active || this.isActive) && 'selected');
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return navMainCss; }
  static get cmpMeta() { return {
    "$flags$": 4,
    "$tagName$": "scale-nav-main",
    "$members$": {
      "isActive": [4, "is-active"],
      "active": [4],
      "popup": [4],
      "isMegaMenuVisible": [4, "is-mega-menu-visible"],
      "megaMenuVisible": [4, "mega-menu-visible"],
      "href": [1],
      "name": [1],
      "target": [1],
      "innerId": [1, "inner-id"],
      "clickLink": [8, "click-link"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const navSegmentCss = "scale-nav-segment{--transition:all 0.2s ease-in-out;--color:var(--telekom-color-text-and-icon-white-standard);--spacing-y:var(--telekom-spacing-composition-space-03);--font-size:var(--telekom-typography-font-size-caption);--font-weight:var(--telekom-typography-font-weight-extra-bold);--line-height:var(--telekom-typography-line-spacing-extra-tight);--border-bottom:1px solid var(--telekom-color-text-and-icon-white-standard);--focus-outline:var(--telekom-line-weight-highlight) solid\n    var(--telekom-color-functional-focus-standard)}.sr-only{position:absolute;left:-10000px;overflow:hidden}.segment-navigation__item{list-style:none}.segment-navigation__item-link{color:var(--color);padding:var(--spacing-y) 0;font-size:var(--font-size);font-weight:var(--font-weight);line-height:var(--line-height);transition:var(--transition);text-decoration:none}.segment-navigation__item-link:hover,.segment-navigation__item-link.active{border-bottom:var(--border-bottom);transition:var(--transition)}.segment-navigation__item-link:focus{outline:var(--focus-outline)}";

class NavSegment {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) href value */
    this.href = 'javascript:void(0);';
  }
  componentWillRender() {
    // make sure the deprecated props overwrite the actual ones if used
    // and show status note deprecated
    if (this.isActive !== undefined) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "isActive" is deprecated. Please use the "active" property!',
        type: 'warn',
        source: this.host,
      });
    }
  }
  render() {
    return (hAsync("li", { class: this.getCssClassMap() }, hAsync("a", { class: classnames('segment-navigation__item-link', (this.active || this.isActive) && 'active'), href: this.href, onFocus: () => {
        window.scrollTo({ top: 0 });
      }, "aria-current": this.active || this.isActive ? 'true' : 'false' }, hAsync("slot", null), (this.active || this.isActive) && (hAsync("span", { class: "sr-only" }, "active")))));
  }
  getCssClassMap() {
    return classnames('segment-navigation__item');
  }
  get host() { return getElement$1(this); }
  static get style() { return navSegmentCss; }
  static get cmpMeta() { return {
    "$flags$": 4,
    "$tagName$": "scale-nav-segment",
    "$members$": {
      "isActive": [4, "is-active"],
      "active": [4],
      "href": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const iconCss$1m = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class NavigationCircleTopUp {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M4.2 4.2c4.3-4.25 11.3-4.25 15.6 0 4.25 4.3 4.25 11.3 0 15.6-2.15 2.15-5 3.2-7.8 3.2s-5.65-1.1-7.8-3.2C-.05 15.5-.05 8.5 4.2 4.2zM12 8.4l4.05 4.35c.25.3.25.75-.05 1.05a.773.773 0 01-.956.031l-.094-.081L12 10.6l-2.95 3.15c-.25.3-.75.35-1.05.05a.729.729 0 01-.118-.971l.068-.079L12 8.4z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M4.2 4.2c4.3-4.25 11.3-4.25 15.6 0 4.25 4.3 4.25 11.3 0 15.6-2.15 2.15-5 3.2-7.8 3.2s-5.65-1.1-7.8-3.2C-.05 15.5-.05 8.5 4.2 4.2zm14.55 1.1C15.05 1.6 9 1.6 5.3 5.3 1.6 9 1.6 15 5.25 18.7c3.7 3.7 9.75 3.7 13.45 0 3.7-3.7 3.7-9.7.05-13.4zM12 8.4l4.05 4.35c.25.3.25.75-.05 1.05a.773.773 0 01-.956.031l-.094-.081L12 10.6l-2.95 3.15c-.25.3-.75.35-1.05.05a.729.729 0 01-.118-.971l.068-.079L12 8.4z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1m; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-navigation-circle-top-up",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1l = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class NavigationCollapseDown {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12.003 16.488L5.137 10.12a1.251 1.251 0 011.7-1.833l5.166 4.791 5.166-4.79a1.25 1.25 0 111.7 1.832l-6.866 6.368z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M18.552 8.722a.75.75 0 00-1.06-.042l-5.491 5.069L6.51 8.68a.752.752 0 00-1.061.042.751.751 0 00.043 1.06l6.509 6.008 6.509-6.008a.75.75 0 00.042-1.06", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1l; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-navigation-collapse-down",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1k = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class NavigationCollapseUp {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M18.014 16.046c-.304 0-.61-.11-.85-.333l-5.166-4.792-5.166 4.792a1.25 1.25 0 01-1.7-1.834l6.866-6.368 6.867 6.368a1.252 1.252 0 01-.851 2.167", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M18.51 14.218L12 8.21l-6.509 6.008a.75.75 0 101.017 1.102L12 10.251l5.491 5.069a.748.748 0 001.06-.042.75.75 0 00-.042-1.06", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1k; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-navigation-collapse-up",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1j = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class NavigationDoubleLeft {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M19.814 18.28a1.249 1.249 0 00-.208-1.755l-5.735-4.523 5.735-4.522a1.249 1.249 0 10-1.547-1.963l-8.224 6.485 8.224 6.486a1.248 1.248 0 001.755-.208m-7.594.476c-.271 0-.544-.088-.773-.268l-8.223-6.486 8.223-6.485a1.25 1.25 0 011.548 1.963L7.26 12.002l5.734 4.523a1.25 1.25 0 01-.775 2.231", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M19.294 16.911l-6.22-4.91 6.22-4.913a.75.75 0 10-.928-1.178L10.652 12l7.712 6.088a.75.75 0 10.929-1.177m-6.69 0l-6.221-4.91 6.22-4.913a.751.751 0 00-.93-1.178L3.963 12l7.712 6.088a.748.748 0 001.054-.124.75.75 0 00-.124-1.053", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1j; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-navigation-double-left",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1i = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class NavigationDoubleRight {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M5.943 18.488l8.224-6.485-8.224-6.485A1.25 1.25 0 004.395 7.48l5.735 4.522-5.735 4.522a1.249 1.249 0 00.775 2.232c.27 0 .544-.088.773-.27m5.838.27a1.249 1.249 0 01-.775-2.232l5.735-4.522-5.735-4.522a1.25 1.25 0 011.548-1.963l8.224 6.485-8.224 6.485a1.243 1.243 0 01-.773.269", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12.327 5.911a.75.75 0 10-.93 1.178L17.62 12l-6.222 4.911a.75.75 0 10.931 1.177L20.04 12l-7.712-6.089zm-6.69 0a.75.75 0 10-.93 1.178L10.927 12l-6.22 4.911a.75.75 0 00.93 1.177L13.347 12 5.636 5.911z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1i; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-navigation-double-right",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1h = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class NavigationExternalLink {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M13.355 3l2.585 2.585-6.835 6.835a1.75 1.75 0 002.35 2.589l.125-.114 6.835-6.835L21 10.645V18a3 3 0 01-2.824 2.995L18 21H6a3 3 0 01-2.995-2.824L3 18V3h10.355zm9.3-1.655L21 9.24l-2.585-2.595-7.54 7.54a.74.74 0 01-.53.22.726.726 0 01-.53-.22.745.745 0 01-.077-.97l.077-.09 7.54-7.53L14.76 3l7.895-1.655z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12.65 3l1.5 1.5H4.5V18c0 .8.576 1.423 1.352 1.493L6 19.5h12c.8 0 1.423-.576 1.493-1.352L19.5 18V9.85l1.5 1.5V18a3.01 3.01 0 01-2.824 2.995L18 21H6a3.01 3.01 0 01-2.995-2.824L3 18V3h9.65zM22.7 1.35l-1.65 7.9-2.6-2.6-7.55 7.55c-.15.15-.35.2-.55.2-.2 0-.4-.05-.55-.2a.722.722 0 01-.074-.965l.074-.085 7.55-7.55-2.6-2.6 7.95-1.65z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1h; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-navigation-external-link",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1g = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class NavigationInternalLink {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M18.525 3L13.07 8.44 9.875 5.245l-2.01 9.705-.315 1.5 1.5-.315 7.895-1.635 1.81-.39-3.195-3.195L21 5.5V18a3 3 0 01-2.824 2.995L18 21H6a3 3 0 01-2.995-2.824L3 18V3h15.525zm2.63-.906c.2 0 .39.08.53.221a.745.745 0 01.077.97l-.077.09-7.54 7.53L16.74 13.5l-7.895 1.655L10.5 7.26l2.585 2.595 7.54-7.54a.745.745 0 01.53-.221z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M17.8 3l-1.5 1.5H4.5V18c0 .8.576 1.423 1.352 1.493L6 19.5h12c.8 0 1.423-.576 1.493-1.352L19.5 18V7.7L21 6.2V18a3.01 3.01 0 01-2.824 2.995L18 21H6a3.01 3.01 0 01-2.995-2.824L3 18V3h14.8zm2.85-.7c.3-.3.75-.3 1.05 0 .273.273.298.71.074.976L14.15 10.9l2.6 2.6-7.9 1.65 1.65-7.9 2.6 2.6 7.55-7.55z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1g; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-navigation-internal-link",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1f = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class NavigationLeft {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M15.5 18.756c-.27 0-.544-.088-.773-.269l-8.224-6.484 8.224-6.486a1.249 1.249 0 111.549 1.963l-5.734 4.523 5.734 4.522a1.249 1.249 0 01-.775 2.231", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M15.949 16.911l-6.222-4.91 6.221-4.913a.75.75 0 10-.929-1.178L7.306 12l7.713 6.088a.746.746 0 001.054-.124.75.75 0 00-.124-1.053", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1f; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-navigation-left",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1e = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class NavigationLeftCondensed {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M14.797 19.271c-.336 0-.671-.134-.917-.4l-6.368-6.866L13.88 5.14a1.25 1.25 0 111.833 1.7l-4.791 5.166 4.79 5.166a1.252 1.252 0 01-.915 2.1", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M10.252 12l5.069-5.491a.75.75 0 10-1.102-1.017L8.211 12l6.008 6.509a.748.748 0 001.06.042.75.75 0 00.043-1.059L10.252 12z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1e; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-navigation-left-condensed",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1d = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class NavigationLocation {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M17.76 2.945A8.145 8.145 0 004.955 12.79l5.545 9.54a1.75 1.75 0 003.03 0l5.515-9.54a8.14 8.14 0 00-1.285-9.845zM12 11.5a3 3 0 110-6 3 3 0 010 6z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 .55c2.1 0 4.15.8 5.75 2.4a8.171 8.171 0 011.441 9.596l-.141.254-5.55 9.55c-.3.55-.9.85-1.5.85-.504 0-1.05-.21-1.407-.707l-.093-.143-5.55-9.55a8.17 8.17 0 011.3-9.85C7.85 1.35 9.9.55 12 .55zm0 1.5c-1.8 0-3.45.7-4.7 1.95a6.661 6.661 0 00-1.181 7.812l.131.238 5.55 9.55c.05.05.1.1.2.1.08 0 .128 0 .17-.051l.03-.049 5.55-9.55c1.5-2.6 1.1-5.9-1.05-8.05A6.577 6.577 0 0012 2.05zm0 3.45a3 3 0 110 6 3 3 0 010-6z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1d; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-navigation-location",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1c = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class NavigationMap {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M6.345 12L9.6 17.615a2.77 2.77 0 004.696.167l.104-.167L17.66 12H21l1.84 6.14a3 3 0 01-2.668 3.853L19.97 22H4.03a3 3 0 01-2.921-3.665l.051-.195L3 12h3.345zM12 1c1.481 0 2.906.554 3.995 1.548l.2.192.18.187a5.925 5.925 0 01.885 6.756l-.125.227-4.03 6.955c-.287.496-.87.74-1.425.595l-.138-.045-.132-.06-.075-.045-.09-.064-.155-.131a1.395 1.395 0 01-.136-.162l-.059-.088-4.03-6.955a5.925 5.925 0 01.76-6.983l.18-.187.2-.192A5.925 5.925 0 0112 1zm0 3.6a2.185 2.185 0 100 4.37 2.185 2.185 0 000-4.37z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M6.342 12l.87 1.5H4.116l-1.521 5.069c-.138.459-.053.943.233 1.326.255.342.63.554 1.046.597l.158.008h15.936c.479 0 .918-.22 1.203-.605.254-.341.35-.761.27-1.172l-.037-.154-1.52-5.069h-3.096l.87-1.5H21l1.841 6.138a3 3 0 01-2.697 3.857l-.176.005H4.032a3 3 0 01-2.92-3.692l.046-.17L3 12h3.342zm1.647-9.44a5.936 5.936 0 018.022 0l.186.178.179.187a5.936 5.936 0 01.883 6.76l-.125.227-4.031 6.952c-.468.808-1.6.846-2.131.116l-.075-.116-4.032-6.952a5.935 5.935 0 01.759-6.987l.179-.187.186-.178zM12 4.6a2.186 2.186 0 10.001 4.373A2.186 2.186 0 0012 4.6z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1c; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-navigation-map",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1b = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class NavigationMyLocation {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 1a.75.75 0 01.75.75v1.79a8.5 8.5 0 017.71 7.71h1.79a.75.75 0 110 1.5h-1.79a8.5 8.5 0 01-7.71 7.71v1.79a.75.75 0 11-1.5 0v-1.79a8.5 8.5 0 01-7.71-7.71H1.75a.75.75 0 110-1.5h1.79a8.5 8.5 0 017.71-7.71V1.75A.75.75 0 0112 1zm0 9a2 2 0 100 4 2 2 0 000-4z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 1c.367 0 .691.294.743.651l.007.099v1.8a8.448 8.448 0 017.674 7.44l.026.26h1.8c.4 0 .75.35.75.75a.772.772 0 01-.651.743l-.099.007h-1.8a8.448 8.448 0 01-7.44 7.674l-.26.026v1.8c0 .4-.35.75-.75.75a.772.772 0 01-.743-.651l-.007-.099v-1.8a8.448 8.448 0 01-7.674-7.44l-.026-.26h-1.8c-.4 0-.75-.35-.75-.75 0-.367.294-.691.651-.743l.099-.007h1.8a8.448 8.448 0 017.44-7.674l.26-.026v-1.8c0-.4.35-.75.75-.75zm0 4c-3.85 0-7 3.15-7 7s3.15 7 7 7 7-3.15 7-7-3.15-7-7-7zm0 5a2 2 0 110 4 2 2 0 010-4z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1b; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-navigation-my-location",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1a = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class NavigationRight {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M8.5 18.756a1.249 1.249 0 01-.775-2.231l5.734-4.523L7.725 7.48a1.249 1.249 0 111.548-1.963l8.224 6.485-8.224 6.485a1.243 1.243 0 01-.773.27", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M8.982 5.911a.75.75 0 10-.93 1.178L14.273 12l-6.221 4.911a.75.75 0 10.931 1.177L16.694 12 8.982 5.911z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1a; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-navigation-right",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$19 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class NavigationRightCondensed {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M9.204 19.269a1.252 1.252 0 01-.916-2.1l4.79-5.166-4.79-5.166a1.251 1.251 0 011.833-1.7l6.368 6.866-6.368 6.866c-.246.266-.581.4-.917.4", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M9.782 5.491A.75.75 0 008.68 6.509L13.748 12 8.68 17.491a.751.751 0 001.104 1.018L15.79 12 9.782 5.491z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$19; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-navigation-right-condensed",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const appNavigationSectorMobileCss = "app-navigation-sector-mobile{--border-bottom:1px solid var(--telekom-color-ui-subtle);--color:var(--telekom-color-text-and-icon-standard);--font-weight:var(--telekom-typography-font-weight-bold);--font-size:var(--telekom-typography-font-size-body);--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);--border-bottom-selected:1px solid var(--telekom-color-primary-standard);--color-selected:var(--telekom-color-text-and-icon-primary-standard);width:100%}.sector-navigation-mobile{display:flex;width:100%;list-style:none;padding:0;margin:0;border-bottom:var(--border-bottom)}.sector-navigation-mobile__item{width:100%}.sector-navigation-mobile__item-link{color:var(--color);text-decoration:none;font-weight:var(--font-weight);font-size:var(--font-size);width:100%;height:54px;display:flex;align-items:center;justify-content:center;transition:var(--transition)}.sector-navigation-mobile__item-link--selected{border-bottom:var(--border-bottom-selected);color:var(--color-selected);transition:var(--transition)}";

class NavigationSectorMobile {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    // @ts-ignore
    this.selected = this.navigation
      ? // @ts-ignore
        this.navigation.find(({ id }) => id === this.activeSectorId) ||
          // @ts-ignore
          this.navigation[0]
      : {};
  }
  handleActiveSegment(newValue) {
    this.selected =
      this.navigation.find(({ id }) => id === newValue) || this.navigation[0];
  }
  handleSelected(event, item) {
    this.selected = item;
    if (typeof item.onClick === 'function') {
      item.onClick(event);
    }
  }
  render() {
    return (hAsync("ul", { class: "sector-navigation-mobile" }, (this.navigation || []).map((item) => (hAsync("li", { class: "sector-navigation-mobile__item" }, hAsync("a", { class: `sector-navigation-mobile__item-link${this.selected.id === item.id
        ? ' sector-navigation-mobile__item-link--selected'
        : ''}`, href: item.href || 'javascript:void(0);', onClick: (event) => this.handleSelected(event, item), onKeyDown: (event) => {
        if (['Escape', 'Esc'].includes(event.key)) {
          this.hide();
        }
      }, "aria-current": this.selected.id === item.id ? 'true' : 'false' }, item.name, this.selected.id === item.id && (hAsync("span", { class: "sr-only" }, "active"))))))));
  }
  static get watchers() { return {
    "activeSectorId": ["handleActiveSegment"]
  }; }
  static get style() { return appNavigationSectorMobileCss; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "app-navigation-sector-mobile",
    "$members$": {
      "hide": [16],
      "navigation": [16],
      "activeSectorId": [1, "active-sector-id"],
      "selected": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const iconCss$18 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class NavigationStart {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M21.85 2.15c-.25-.25-.6-.3-.9-.15L.8 11.05c-.3.15-.5.45-.5.8 0 .35.25.6.55.7L8.95 15l2.45 8.1c.1.3.4.55.7.55h.05c.3 0 .6-.2.75-.45L22 3.05c.15-.3.1-.65-.15-.9z" }))) : (hAsync("g", null, hAsync("path", { d: "M21.85 2.15c-.25-.25-.6-.3-.9-.15L.8 11.05c-.3.15-.5.45-.5.8 0 .35.25.6.55.7L8.95 15l2.45 8.1c.1.3.4.55.7.55h.05c.3 0 .6-.2.75-.45L22 3.05c.15-.3.1-.65-.15-.9zm-9.5 18.7l-2.15-7.1-7.05-2.1 16.75-7.5-7.55 16.7z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$18; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-navigation-start",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$17 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class NavigationTopUp {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M18.014 16.046c-.304 0-.61-.11-.85-.333l-5.166-4.792-5.166 4.792a1.25 1.25 0 01-1.7-1.834l6.866-6.368 6.867 6.368a1.252 1.252 0 01-.851 2.167", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M18.51 14.218L12 8.21l-6.509 6.008a.75.75 0 101.017 1.102L12 10.251l5.491 5.069a.748.748 0 001.06-.042.75.75 0 00-.042-1.06", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$17; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-navigation-top-up",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const notificationCss = "/*!@:host*/.sc-scale-notification-h{--width:100%;--width-toast:25rem;--radius:var(--telekom-radius-standard);--spacing-y:var(--telekom-spacing-composition-space-06);--spacing-y-inner:var(--telekom-spacing-composition-space-04);--spacing-x-aside:var(--telekom-spacing-composition-space-14);--duration-in:var(--telekom-motion-duration-transition);--duration-out:var(--telekom-motion-duration-transition);--easing-in:var(--telekom-motion-easing-enter);--easing-out:var(--telekom-motion-easing-exit);--translate-x:0;--translate-y:0;--translate-z:0;display:contents}/*!@[part~='base']*/[part~='base'].sc-scale-notification{position:relative;display:none;box-sizing:border-box;border-radius:var(--radius);padding-right:var(--spacing-x-aside);width:var(--width);background:var(--_background-subtle);box-shadow:var(--_shadow);animation-duration:var(--duration)}/*!@[part~='base'][part~='open']*/[part~='base'][part~='open'].sc-scale-notification{display:flex}@keyframes toggle{from{opacity:0;transform:translate3d(\n      var(--translate-x),\n      var(--translate-y),\n      var(--translate-z)\n    )}}/*!@[part~='in']*/[part~='in'].sc-scale-notification{animation-name:toggle;animation-duration:var(--duration-in);animation-timing-function:var(--easing-in)}/*!@[part~='out']*/[part~='out'].sc-scale-notification{animation-name:toggle;animation-direction:reverse;animation-duration:var(--duration-out);animation-timing-function:var(--easing-out)}/*!@[part~='variant-informational']*/[part~='variant-informational'].sc-scale-notification{--_background-subtle:var(--telekom-color-functional-informational-subtle);--_background-accent:var(--telekom-color-functional-informational-standard);--_color-accent:var(--telekom-color-text-and-icon-functional-informational)}/*!@[part~='variant-warning']*/[part~='variant-warning'].sc-scale-notification{--_background-subtle:var(--telekom-color-functional-warning-subtle);--_background-accent:var(--telekom-color-functional-warning-standard);--_color-accent:var(--telekom-color-text-and-icon-functional-warning)}/*!@[part~='variant-success']*/[part~='variant-success'].sc-scale-notification{--_background-subtle:var(--telekom-color-functional-success-subtle);--_background-accent:var(--telekom-color-functional-success-standard);--_color-accent:var(--telekom-color-text-and-icon-functional-success)}/*!@[part~='variant-danger']*/[part~='variant-danger'].sc-scale-notification{--_background-subtle:var(--telekom-color-functional-danger-subtle);--_background-accent:var(--telekom-color-functional-danger-standard);--_color-accent:var(--telekom-color-text-and-icon-functional-danger)}/*!@[part~='type-banner']*/[part~='type-banner'].sc-scale-notification{--_shadow:var(--telekom-shadow-floating-standard)}/*!@[part~='type-toast']*/[part~='type-toast'].sc-scale-notification{--translate-x:var(--telekom-spacing-composition-space-05);--_shadow:var(--telekom-shadow-top);width:var(--width-toast)}/*!@[part='icon']*/[part='icon'].sc-scale-notification{display:flex;flex-shrink:0;justify-content:center;align-items:flex-start;width:var(--spacing-x-aside);padding-top:var(--spacing-y);padding-bottom:var(--spacing-y);border-top-left-radius:var(--radius);border-bottom-left-radius:var(--radius);color:var(--_color-accent)}/*!@[part~='type-toast'] [part='icon']*/[part~='type-toast'].sc-scale-notification [part='icon'].sc-scale-notification{background:var(--_background-accent);color:var(--telekom-color-text-and-icon-white-standard);align-items:center}/*!@[part~='type-toast'][part~='variant-warning'] [part='icon']*/[part~='type-toast'][part~='variant-warning'].sc-scale-notification [part='icon'].sc-scale-notification{color:var(--telekom-color-text-and-icon-black-standard)}/*!@[part='body']*/[part='body'].sc-scale-notification{margin-top:var(--spacing-y);margin-bottom:var(--spacing-y)}/*!@[part~='type-toast'] [part='body']*/[part~='type-toast'].sc-scale-notification [part='body'].sc-scale-notification{padding-left:var(--spacing-y)}/*!@[part='heading'],\n[part='heading'] ::slotted(*)*/[part='heading'].sc-scale-notification,[part='heading'] .sc-scale-notification-s>*{font:var(--telekom-text-style-heading-6);line-height:var(--telekom-typography-line-spacing-tight);margin:0}/*!@[part='text']*/[part='text'].sc-scale-notification{margin-top:var(--spacing-y-inner)}/*!@::slotted(*)*/.sc-scale-notification-s>*{font:var(--telekom-text-style-body)}/*!@::slotted(p)*/.sc-scale-notification-s>p{margin:0;margin-top:var(--spacing-y-inner)}/*!@[part='close-button']*/[part='close-button'].sc-scale-notification{--color-ghost:var(--telekom-text-and-icon-standard);position:absolute;right:var(--telekom-spacing-composition-space-03);top:var(--telekom-spacing-composition-space-03)}@media screen and (forced-colors: active), (-ms-high-contrast: active){/*!@[part~='base']*/[part~='base'].sc-scale-notification{border:1px solid white}/*!@[part='close-button']*/[part='close-button'].sc-scale-notification{--color-ghost:white}}";

const ICON_SIZE$1 = 20;
const iconVariantNameMap = {
  informational: 'scale-icon-alert-information',
  warning: 'scale-icon-alert-warning',
  success: 'scale-icon-action-success',
  danger: 'scale-icon-alert-error',
};
class Notification {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleOpen = createEvent$1(this, "scale-open", 7);
    this.scaleBeforeClose = createEvent$1(this, "scale-before-close", 7);
    this.scaleClose = createEvent$1(this, "scale-close", 7);
    /** (optional) Type */
    this.type = 'inline';
    /** (optional) Variant */
    this.variant = 'informational';
    /** (optional) Show the close button */
    this.dismissible = false;
    /** @deprecated - ariaRole should replace innerAriaLive */
    this.innerAriaLive = 'assertive';
    /** (optional) string prepended to the heading */
    this.innerRole = 'alert';
    /** (optional) Label for close button */
    this.closeButtonLabel = 'Close';
    /** (optional) `title` for close button */
    this.closeButtonTitle = 'Close';
    /** Default aria-level for heading */
    this.headingLevel = 2;
    /** (optional) string prepended to the heading */
    this.ariaHeading = 'Information';
    /** What actually triggers opening/closing the notification */
    this.isOpen = this.opened || false;
    this.hasTextSlot = false;
    this.lastCloseEventTrigger = null;
    this.open = () => {
      this.isOpen = true;
      this.animationState = 'in';
      requestAnimationFrame(async () => {
        await animationsFinished(this.hostElement.shadowRoot);
        this.animationState = undefined;
        this.scaleOpen.emit();
        if (this.delay !== undefined) {
          setTimeout(this.timeout, this.delay);
        }
      });
    };
    this.close = () => {
      const event = this.scaleBeforeClose.emit({
        trigger: this.lastCloseEventTrigger,
      });
      this.lastCloseEventTrigger = null;
      const prevented = event.defaultPrevented;
      if (prevented) {
        this.opened = true;
        return;
      }
      this.animationState = 'out';
      requestAnimationFrame(async () => {
        await animationsFinished(this.hostElement.shadowRoot);
        this.animationState = undefined;
        this.isOpen = false;
        this.scaleClose.emit();
      });
    };
    this.timeout = () => {
      this.lastCloseEventTrigger = 'TIMEOUT';
      this.opened = false;
    };
  }
  connectedCallback() {
    if (this.hostElement.hasAttribute('opened')) {
      if (this.innerAriaLive === 'polite' || this.innerRole === 'status') {
        this.innerRole = 'status';
      }
      this.isOpen = true;
    }
    if (this.delay !== undefined) {
      setTimeout(this.timeout, this.delay);
    }
    this.hasTextSlot = this.hostElement.querySelector('[slot="text"]') != null;
    // this.hasActionSlot =
    //   this.hostElement.querySelector('[slot="action"]') != null;
  }
  openedChanged(newValue) {
    if (newValue === true) {
      this.open();
      this.lastCloseEventTrigger = 'ATTRIBUTE';
    }
    else if (this.isOpen) {
      this.close();
    }
  }
  render() {
    const IconTag = iconVariantNameMap[this.variant];
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { part: classnames('base', this.animationState, `type-${this.type}`, `variant-${this.variant}`, this.isOpen && 'open'), role: this.innerRole }, hAsync("div", { part: "icon", "aria-hidden": "true" }, hAsync("slot", { name: "icon" }, hAsync(IconTag, { size: ICON_SIZE$1, selected: this.type === 'toast' }))), hAsync("div", { part: "body" }, hAsync("div", { part: "heading", role: "heading", "aria-level": this.headingLevel, "aria-label": `${this.ariaHeading} ${this.heading}` }, this.heading ? hAsync("span", null, this.heading) : null, hAsync("slot", { name: "heading" })), this.hasTextSlot && (hAsync("div", { part: "text" }, hAsync("slot", { name: "text" })))), this.dismissible && (hAsync("scale-button", { part: "close-button", variant: "ghost", onClick: () => {
        this.lastCloseEventTrigger = 'CLOSE_BUTTON';
        this.opened = false;
      } }, hAsync("slot", { name: "close-icon" }, hAsync("scale-icon-action-circle-close", { "aria-label": this.closeButtonLabel, accessibilityTitle: this.closeButtonTitle, decorative: true, size: ICON_SIZE$1 })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get watchers() { return {
    "opened": ["openedChanged"]
  }; }
  static get style() { return notificationCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-notification",
    "$members$": {
      "heading": [1],
      "type": [1],
      "variant": [1],
      "opened": [1540],
      "dismissible": [4],
      "delay": [2],
      "innerAriaLive": [1, "inner-aria-live"],
      "innerRole": [1, "inner-role"],
      "closeButtonLabel": [1, "close-button-label"],
      "closeButtonTitle": [1, "close-button-title"],
      "headingLevel": [2, "heading-level"],
      "ariaHeading": [1, "aria-heading"],
      "styles": [1],
      "isOpen": [32],
      "animationState": [32],
      "hasTextSlot": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["opened", "opened"]]
  }; }
}

const notificationBadgeCss = "/*!@:host*/.sc-scale-notification-badge-h{--padding-type-text-after-badge-slot:0 0 0 12px;--padding-type-icon-after-badge-slot:0 0 0 7px;--background-color-circle:var(--telekom-color-primary-standard);--color-circle:var(--telekom-color-text-and-icon-inverted-standard);--font-size-circle:var(--telekom-typography-font-size-badge);--font-weight-circle:bold;--border-radius-circle:var(--telekom-radius-circle);--color-notification-badge-border-focus:var(\n    --telekom-color-functional-focus-standard\n  );--color-notification-badge-border-hover:var(\n    --telekom-color-text-and-icon-primary-hovered\n  );--line-width-notification-badge-border-focus:2px;--padding-notification-badge-border:8px 5px 0 5px;--margin-notification-badge-border:-8px -5px 0 -5px}/*!@.notification-badge-border*/.notification-badge-border.sc-scale-notification-badge{display:inline-block;border:var(--line-width-notification-badge-border-focus) solid transparent;padding:var(--padding-notification-badge-border);margin:var(--margin-notification-badge-border)}/*!@.notification-badge-border:hover*/.notification-badge-border.sc-scale-notification-badge:hover{color:var(--color-notification-badge-border-hover);cursor:pointer}/*!@.notification-badge-border:focus*/.notification-badge-border.sc-scale-notification-badge:focus{border:var(--line-width-notification-badge-border-focus) solid\n    var(--color-notification-badge-border-focus);outline:none;padding:var(--padding-notification-badge-border);border-radius:3px}/*!@.notification-badge*/.notification-badge.sc-scale-notification-badge{display:flex;align-items:center}/*!@.notification-badge__wrapper*/.notification-badge__wrapper.sc-scale-notification-badge{text-decoration:none;position:relative;display:inline-block;justify-content:center}/*!@.notification-badge--nav-icon .notification-badge__wrapper*/.notification-badge--nav-icon.sc-scale-notification-badge .notification-badge__wrapper.sc-scale-notification-badge{margin-bottom:-5px}/*!@.notification-badge__circle*/.notification-badge__circle.sc-scale-notification-badge{display:flex;position:absolute;font-size:var(--font-size-circle);font-weight:var(--font-weight-circle);border-radius:var(--border-radius-circle);background-color:var(--background-color-circle);color:var(--color-circle);align-items:center;justify-content:center}/*!@.notification-badge.notification-badge--label .notification-badge__circle*/.notification-badge.notification-badge--label.sc-scale-notification-badge .notification-badge__circle.sc-scale-notification-badge{padding:0 2px}/*!@::slotted([slot='after-badge'])*/.sc-scale-notification-badge-s>[slot='after-badge']{padding:var(--padding-type-icon-after-badge-slot)}/*!@.notification-badge.notification-badge--text ::slotted([slot='after-badge'])*/.notification-badge.notification-badge--text .sc-scale-notification-badge-s>[slot='after-badge']{padding:var(--padding-type-text-after-badge-slot)}@media (min-width: 1040px){/*!@.notification-badge.notification-badge--icon .notification-badge__circle*/.notification-badge.notification-badge--icon.sc-scale-notification-badge .notification-badge__circle.sc-scale-notification-badge{top:-4px;right:-2px;height:8px;min-width:8px}/*!@.notification-badge.notification-badge--label.notification-badge--icon\n    .notification-badge__circle*/.notification-badge.notification-badge--label.notification-badge--icon.sc-scale-notification-badge .notification-badge__circle.sc-scale-notification-badge{top:-8px;right:-5px;height:14px;min-width:10px}/*!@.notification-badge.notification-badge--nav-icon .notification-badge__circle*/.notification-badge.notification-badge--nav-icon.sc-scale-notification-badge .notification-badge__circle.sc-scale-notification-badge{top:-5px;right:4px;height:8px;min-width:8px}/*!@.notification-badge.notification-badge--label.notification-badge--nav-icon\n    .notification-badge__circle*/.notification-badge.notification-badge--label.notification-badge--nav-icon.sc-scale-notification-badge .notification-badge__circle.sc-scale-notification-badge{top:-8px;right:1px;height:14px;min-width:10px}/*!@.notification-badge.notification-badge--text .notification-badge__circle*/.notification-badge.notification-badge--text.sc-scale-notification-badge .notification-badge__circle.sc-scale-notification-badge{top:-5px;right:-10px;height:8px;min-width:8px}/*!@.notification-badge.notification-badge--label.notification-badge--text\n    .notification-badge__circle*/.notification-badge.notification-badge--label.notification-badge--text.sc-scale-notification-badge .notification-badge__circle.sc-scale-notification-badge{top:-10px;right:-15px;height:14px;min-width:10px}}@media (max-width: 1039px){/*!@.notification-badge.notification-badge--icon .notification-badge__circle*/.notification-badge.notification-badge--icon.sc-scale-notification-badge .notification-badge__circle.sc-scale-notification-badge{top:-4px;right:-1px;height:8px;min-width:8px}/*!@.notification-badge.notification-badge--label.notification-badge--icon\n    .notification-badge__circle*/.notification-badge.notification-badge--label.notification-badge--icon.sc-scale-notification-badge .notification-badge__circle.sc-scale-notification-badge{top:-6px;right:-4px;height:14px;min-width:10px}/*!@.notification-badge.notification-badge--nav-icon .notification-badge__circle*/.notification-badge.notification-badge--nav-icon.sc-scale-notification-badge .notification-badge__circle.sc-scale-notification-badge{top:0px;right:-1px;height:6px;min-width:6px}/*!@.notification-badge.notification-badge--label.notification-badge--nav-icon\n    .notification-badge__circle*/.notification-badge.notification-badge--label.notification-badge--nav-icon.sc-scale-notification-badge .notification-badge__circle.sc-scale-notification-badge{top:-3px;right:-4.5px;height:12px;min-width:8px}/*!@.notification-badge.notification-badge--text .notification-badge__circle*/.notification-badge.notification-badge--text.sc-scale-notification-badge .notification-badge__circle.sc-scale-notification-badge{top:-4px;right:-10px;height:6px;min-width:6px}/*!@.notification-badge.notification-badge--label.notification-badge--text\n    .notification-badge__circle*/.notification-badge.notification-badge--label.notification-badge--text.sc-scale-notification-badge .notification-badge__circle.sc-scale-notification-badge{top:-6px;right:-15px;height:14px;min-width:10px}}";

class NotificationBadge {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) Maximal number of characters displayed in the badge */
    this.maxCharacters = 3;
    /** (optional) Setting/Slotcontent in which the badge is used */
    this.type = 'icon';
  }
  connectedCallback() {
    statusNote({ source: this.hostElement, tag: 'beta' });
  }
  getBadgeLabel() {
    if (this.label) {
      if (!isNaN(this.label)) {
        let labelNumber = '' + this.label;
        if (labelNumber.length > this.maxCharacters) {
          const SI_SYMBOL = ['', 'k', 'M', 'G', 'T', 'P', 'E'];
          const tier = Math.floor(Math.log10(Number(this.label)) / 3) || 0;
          if (tier > 0) {
            const scaled = Number(this.label) / Math.pow(10, tier * 3);
            labelNumber = scaled.toFixed(1).replace('.0', '') + SI_SYMBOL[tier];
          }
        }
        return labelNumber;
      }
      return this.label;
    }
  }
  getRender() {
    return (hAsync("div", { class: this.getCssClassMap() }, hAsync("span", { class: "notification-badge__wrapper" }, hAsync("slot", null), hAsync("span", { class: "notification-badge__circle" }, this.getBadgeLabel())), hAsync("slot", { name: "after-badge" })));
  }
  render() {
    return (hAsync(Host$1, null, this.type !== 'nav-icon' ? (hAsync("div", { class: "notification-badge-border", tabIndex: 0, onClick: this.clickHandler }, this.getRender())) : (this.getRender())));
  }
  getCssClassMap() {
    return classnames(`notification-badge`, this.label && `notification-badge--label`, this.type && `notification-badge--${this.type}`);
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return notificationBadgeCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-notification-badge",
    "$members$": {
      "label": [2],
      "maxCharacters": [2, "max-characters"],
      "type": [1],
      "clickHandler": [8, "click-handler"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const notificationBannerCss = "/*!@:host*/.sc-scale-notification-banner-h{--width:100%;--radius:var(--telekom-radius-standard);--background-error:var(--telekom-color-functional-danger-subtle);--background-warning:var(--telekom-color-functional-warning-subtle);--background-informational:var(\n    --telekom-color-functional-informational-subtle\n  );--background-success:var(--telekom-color-functional-success-subtle)}/*!@.notification-banner*/.notification-banner.sc-scale-notification-banner{border-radius:var(--radius);width:var(--width);position:relative;box-shadow:var(--telekom-shadow-overlay);min-height:48px}/*!@.notification-banner--variant-error*/.notification-banner--variant-error.sc-scale-notification-banner{background-color:var(--background-error)}/*!@.notification-banner--variant-warning*/.notification-banner--variant-warning.sc-scale-notification-banner{background-color:var(--background-warning)}/*!@.notification-banner--variant-informational*/.notification-banner--variant-informational.sc-scale-notification-banner{background-color:var(--background-informational)}/*!@.notification-banner--variant-success*/.notification-banner--variant-success.sc-scale-notification-banner{background-color:var(--background-success)}/*!@.notification-banner__heading*/.notification-banner__heading.sc-scale-notification-banner{margin:14px 48px 14px 48px;padding:13px 0 13px 0;font-weight:var(--telekom-typography-font-weight-bold);line-height:22px}/*!@.notification-banner__text ::slotted(*)*/.notification-banner__text .sc-scale-notification-banner-s>*{margin:-10px 0px -25px 0px;line-height:16px;padding:13px 0 15px 0}/*!@.notification-banner--has-no-link .notification-banner__text ::slotted(*)*/.notification-banner--has-no-link .notification-banner__text .sc-scale-notification-banner-s>*{margin:-10px 0px -14px 0px;line-height:16px;padding-bottom:15px}/*!@.notification-banner--has-no-text .notification-banner__link ::slotted(*)*/.notification-banner--has-no-text .notification-banner__link .sc-scale-notification-banner-s>*{margin:0;padding:0px 0px 0px 16px}/*!@.notification-banner--has-text .notification-banner__link ::slotted(*)*/.notification-banner--has-text .notification-banner__link .sc-scale-notification-banner-s>*{margin:20px 0 0 0;padding-bottom:2px;line-height:20px}/*!@::slotted(*)*/.sc-scale-notification-banner-s>*{font-weight:var(--telekom-typography-font-weight-regular)}/*!@.notification-banner__button-close*/.notification-banner__button-close.sc-scale-notification-banner{position:absolute;top:8px;right:13.5px;color:#191919;border:none;cursor:pointer;margin:0;padding:0;background:transparent}/*!@.notification-banner__button-close svg*/.notification-banner__button-close.sc-scale-notification-banner svg.sc-scale-notification-banner{height:19px;width:19px;padding:6.5px;border-radius:20%;color:var(--telekom-color-text-and-icon-standard)}/*!@.notification-banner__button-close:hover svg*/.notification-banner__button-close.sc-scale-notification-banner:hover svg.sc-scale-notification-banner{background-color:white;color:var(--telekom-color-text-and-icon-primary-hovered)}/*!@.notification-banner__icon-success*/.notification-banner__icon-success.sc-scale-notification-banner{position:absolute;top:12.5px;left:17px;height:20px;width:20px;color:var(--telekom-color-text-and-icon-functional-success)}/*!@.notification-banner__icon-error*/.notification-banner__icon-error.sc-scale-notification-banner{position:absolute;top:12px;left:17px;height:20px;width:20px;color:var(--telekom-color-text-and-icon-functional-danger)}/*!@.notification-banner__icon-information*/.notification-banner__icon-information.sc-scale-notification-banner{position:absolute;top:12px;left:17px;height:20px;width:20px;color:var(--telekom-color-text-and-icon-functional-informational)}@media screen and (forced-colors: active), (-ms-high-contrast: active){/*!@.notification-banner__button-close svg*/.notification-banner__button-close.sc-scale-notification-banner svg.sc-scale-notification-banner{color:hsl(0, 0%, 100%)}/*!@.notification-banner*/.notification-banner.sc-scale-notification-banner{border:1px solid hsl(0, 0%, 100%)}/*!@.notification-banner__heading*/.notification-banner__heading.sc-scale-notification-banner{margin:0px 48px 0px 48px}}";

class NotificationBanner {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleClose = createEvent$1(this, "scale-close", 7);
    this.variant = 'informational';
    this.dismissible = false;
    this.autoHide = false;
    this.autoHideDuration = 3000;
    /** (optional) Label for close button */
    this.closeButtonLabel = 'close';
    /** (optional) Title for close button */
    this.closeButtonTitle = 'close';
    this.close = () => {
      this.opened = false;
      emitEvent$1(this, 'scaleClose');
    };
  }
  componentWillLoad() {
    this.hasSlotText = !!this.hostElement.querySelector('[slot=text]');
    this.hasSlotLink = !!this.hostElement.querySelector('[slot=link]');
  }
  componentDidUpdate() {
    this.hasSlotText = !!this.hostElement.querySelector('[slot=text]');
    this.hasSlotLink = !!this.hostElement.querySelector('[slot=link]');
  }
  connectedCallback() {
    statusNote({ source: this.hostElement, type: 'warn' });
    if (this.autoHide === true) {
      setTimeout(this.close, this.autoHideDuration);
    }
  }
  async open() {
    this.opened = true;
  }
  handleIcons() {
    if (this.variant) {
      switch (this.variant) {
        case 'success':
          return (hAsync("scale-icon-action-success", { class: "notification-banner__icon-success", color: "#187431", "accessibility-title": "success", "aria-hidden": "true" }));
        case 'informational':
          return (hAsync("scale-icon-alert-information", { class: "notification-banner__icon-information", "accessibility-title": "information", "aria-hidden": "true" }));
        case 'error':
          return (hAsync("scale-icon-alert-error", { class: "notification-banner__icon-error", "accessibility-title": "error", "aria-hidden": "true" }));
        case 'warning':
          return (hAsync("scale-icon-alert-warning", { class: "notification-banner__icon-information", color: "#AE461C", "aria-hidden": "true" }));
      }
    }
    return;
  }
  render() {
    if (!this.opened) {
      return null;
    }
    return (hAsync(Host$1, null, hAsync("div", { role: "alert", style: { display: `${this.opened ? '' : 'none'}` }, part: this.getBasePartMap(), class: this.getCssClassMap(), tabindex: "0" }, hAsync("div", { part: "container", class: "notification-banner__container" }, this.handleIcons(), hAsync("div", { part: "heading", class: "notification-banner__heading" }, hAsync("slot", null), this.dismissible && (hAsync("button", { part: "button-dismissable", type: "button", class: "notification-banner__button-close", onClick: () => this.close(), tabindex: 0, "aria-label": this.closeButtonLabel, title: this.closeButtonTitle, onKeyDown: (e) => {
        if (e.key === 'Enter') {
          this.close();
        }
      } }, hAsync("scale-icon-action-circle-close", null))), this.hasSlotText && (hAsync("div", { part: "text", class: "notification-banner__text" }, hAsync("slot", { name: "text" }))), this.hasSlotLink && (hAsync("scale-link", { href: this.href, class: "notification-banner__link", role: "link" }, hAsync("slot", { name: "link" }))))))));
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const name = 'notification-banner';
    const prefix = mode === 'basePart' ? '' : `${name}--`;
    return classnames(name, this.variant && `${prefix}variant-${this.variant}`, this.hasSlotText && `${prefix}has-text`, !this.hasSlotText && `${prefix}has-no-text`, this.hasSlotLink && `${prefix}has-link`, !this.hasSlotLink && `${prefix}has-no-link`);
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return notificationBannerCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-notification-banner",
    "$members$": {
      "variant": [1],
      "dismissible": [4],
      "opened": [516],
      "autoHide": [4, "auto-hide"],
      "autoHideDuration": [2, "auto-hide-duration"],
      "href": [1],
      "closeButtonLabel": [1, "close-button-label"],
      "closeButtonTitle": [1, "close-button-title"],
      "open": [64]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["opened", "opened"]]
  }; }
}

const notificationMessageCss = "/*!@:host*/.sc-scale-notification-message-h{--width:100%;--radius:var(--telekom-radius-standard);--border:var(--telekom-line-weight-standard) solid transparent;--background-error:var(--telekom-color-functional-danger-subtle);--background-warning:var(--telekom-color-functional-warning-subtle);--background-informational:var(\n    --telekom-color-functional-informational-subtle\n  );--background-success:var(--telekom-color-functional-success-subtle)}/*!@.notification-message*/.notification-message.sc-scale-notification-message{border:var(--border);border-radius:var(--radius);width:var(--width);position:relative}/*!@.notification-message--variant-error*/.notification-message--variant-error.sc-scale-notification-message{background:var(--background-error)}/*!@.notification-message--variant-warning*/.notification-message--variant-warning.sc-scale-notification-message{background-color:var(--background-warning)}/*!@.notification-message--variant-informational*/.notification-message--variant-informational.sc-scale-notification-message{background-color:var(--background-informational)}/*!@.notification-message--variant-success*/.notification-message--variant-success.sc-scale-notification-message{background-color:var(--background-success)}/*!@.notification-message__heading*/.notification-message__heading.sc-scale-notification-message{margin:14px 48px 14px 48px;font-weight:var(--telekom-typography-font-weight-bold);line-height:var(--telekom-typography-line-spacing-standard)}/*!@.notification-message__text*/.notification-message__text.sc-scale-notification-message{margin:8px 48px 15px 48px}/*!@::slotted(*)*/.sc-scale-notification-message-s>*{font-weight:var(--telekom-typography-font-weight-regular)}/*!@.notification-message__icon-close*/.notification-message__icon-close.sc-scale-notification-message{position:absolute;top:8px;right:13.5px;border:none;cursor:pointer;margin:0;padding:0;background:transparent;color:var(--telekom-color-text-and-icon-standard)}/*!@.notification-message__icon-close svg*/.notification-message__icon-close.sc-scale-notification-message svg.sc-scale-notification-message{height:19px;width:19px;padding:6.5px;border-radius:20%}/*!@.notification-message__icon-close:hover svg*/.notification-message__icon-close.sc-scale-notification-message:hover svg.sc-scale-notification-message{background-color:hsl(0, 0%, 100%);color:var(--telekom-color-text-and-icon-primary-hovered)}/*!@.notification-message__icon-success*/.notification-message__icon-success.sc-scale-notification-message{position:absolute;top:12.5px;left:17px;height:20px;width:20px;color:var(--telekom-color-text-and-icon-functional-success)}/*!@.notification-message__icon-error*/.notification-message__icon-error.sc-scale-notification-message{position:absolute;top:12px;left:17px;height:20px;width:20px;color:var(--telekom-color-text-and-icon-functional-danger)}/*!@.notification-message__icon-information*/.notification-message__icon-information.sc-scale-notification-message{position:absolute;top:12px;left:17px;height:20px;width:20px;color:var(--telekom-color-text-and-icon-functional-informational)}@media screen and (forced-colors: active), (-ms-high-contrast: active){/*!@.notification-message__icon-close*/.notification-message__icon-close.sc-scale-notification-message{color:hsl(0, 0%, 100%)}/*!@.notification-message*/.notification-message.sc-scale-notification-message{border:1px solid hsl(0, 0%, 100%)}}";

class NotificationMessage {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleClose = createEvent$1(this, "scale-close", 7);
    this.variant = 'informational';
    this.dismissible = false;
    this.autoHide = false;
    this.autoHideDuration = 3000;
    /** (optional) Label for close button */
    this.closeButtonLabel = 'close';
    /** (optional) Title for close button */
    this.closeButtonTitle = 'close';
    this.close = () => {
      this.opened = false;
      emitEvent$1(this, 'scaleClose');
    };
  }
  componentWillLoad() {
    this.hasSlotText = !!this.hostElement.querySelector('[slot=text]');
  }
  componentDidRender() {
    if (this.autoHide === true) {
      setTimeout(this.close, this.autoHideDuration);
    }
  }
  componentDidUpdate() {
    this.hasSlotText = !!this.hostElement.querySelector('[slot=text]');
  }
  connectedCallback() {
    statusNote({ source: this.hostElement, type: 'warn' });
  }
  async open() {
    this.opened = true;
  }
  handleIcons() {
    if (this.variant) {
      switch (this.variant) {
        case 'success':
          return (hAsync("scale-icon-action-success", { class: "notification-message__icon-success", color: "#187431", "aria-hidden": "true" }));
        case 'informational':
          return (hAsync("scale-icon-alert-information", { class: "notification-message__icon-information", "aria-hidden": "true" }));
        case 'error':
          return (hAsync("scale-icon-alert-error", { class: "notification-message__icon-error", "aria-hidden": "true" }));
        case 'warning':
          return (hAsync("scale-icon-alert-warning", { class: "notification-message__icon-information", color: "#AE461C", "aria-hidden": "true" }));
      }
    }
    return;
  }
  render() {
    if (!this.opened) {
      return null;
    }
    return (hAsync(Host$1, null, hAsync("div", { role: "alert", style: { display: `${this.opened ? '' : 'none'}` }, part: this.getBasePartMap(), class: this.getCssClassMap(), tabindex: "0" }, hAsync("div", { part: "container", class: "notification-message__container" }, this.handleIcons(), hAsync("div", { part: "heading", class: "notification-message__heading" }, hAsync("slot", null, "\u2003"), this.dismissible && (hAsync("button", { part: "button-dismissable", type: "button", class: "notification-message__icon-close", onClick: () => this.close(), tabindex: 0, "aria-label": this.closeButtonLabel, title: this.closeButtonTitle, onKeyDown: (e) => {
        if (e.key === 'Enter') {
          this.close();
        }
      } }, hAsync("scale-icon-action-circle-close", null)))), this.hasSlotText && (hAsync("div", { part: "text", class: "notification-message__text" }, hAsync("slot", { name: "text" })))))));
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const name = 'notification-message';
    const prefix = mode === 'basePart' ? '' : `${name}--`;
    return classnames(name, this.variant && `${prefix}variant-${this.variant}`);
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return notificationMessageCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-notification-message",
    "$members$": {
      "variant": [1],
      "dismissible": [4],
      "opened": [516],
      "autoHide": [4, "auto-hide"],
      "autoHideDuration": [2, "auto-hide-duration"],
      "closeButtonLabel": [1, "close-button-label"],
      "closeButtonTitle": [1, "close-button-title"],
      "open": [64]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["opened", "opened"]]
  }; }
}

const notificationToastCss = "/*!@:host*/.sc-scale-notification-toast-h{--width:366px;--width-icon-container:48px;--radius:var(--telekom-radius-standard);--background:var(--telekom-color-background-surface);--z-index:100;--box-shadow:var(--telekom-shadow-raised-standard);--background-success-icon-container:var(\n    --telekom-color-functional-success-standard\n  );--background-warning-icon-container:var(\n    --telekom-color-functional-warning-standard\n  );--background-error-icon-container:var(\n    --telekom-color-functional-danger-standard\n  );--background-informational-icon-container:var(\n    --telekom-color-functional-informational-standard\n  );--background-success-text-container:var(\n    --telekom-color-functional-success-subtle\n  );--background-warning-text-container:var(\n    --telekom-color-functional-warning-subtle\n  );--background-error-text-container:var(\n    --telekom-color-functional-danger-subtle\n  );--background-informational-text-container:var(\n    --telekom-color-functional-informational-subtle\n  )}/*!@.notification-toast*/.notification-toast.sc-scale-notification-toast{width:calc(var(--width) - var(--width-icon-container));opacity:1;z-index:var(--z-index);position:fixed;background:var(--background);box-shadow:var(--box-shadow);box-sizing:border-box;border-radius:0 var(--radius) var(--radius) 0;flex-direction:column;justify-content:space-between}/*!@.notification-toast.notification-toast--story*/.notification-toast.notification-toast--story.sc-scale-notification-toast{position:absolute}/*!@.notification-toast.notification-toast--story.notification-toast--hide*/.notification-toast.notification-toast--story.notification-toast--hide.sc-scale-notification-toast{opacity:0}/*!@.notification-toast.notification-toast--story.notification-toast--opened*/.notification-toast.notification-toast--story.notification-toast--opened.sc-scale-notification-toast{opacity:1}/*!@.notification-toast.notification-toast--variant-success*/.notification-toast.notification-toast--variant-success.sc-scale-notification-toast{background:var(--background-success-text-container)}/*!@.notification-toast.notification-toast--variant-warning*/.notification-toast.notification-toast--variant-warning.sc-scale-notification-toast{background:var(--background-warning-text-container)}/*!@.notification-toast.notification-toast--variant-error*/.notification-toast.notification-toast--variant-error.sc-scale-notification-toast{background:var(--background-error-text-container)}/*!@.notification-toast.notification-toast--variant-informational*/.notification-toast.notification-toast--variant-informational.sc-scale-notification-toast{background:var(--background-informational-text-container)}/*!@.notification-toast__icon*/.notification-toast__icon.sc-scale-notification-toast{position:absolute;top:50%;left:50%;margin:-10px 0 0 -10px}/*!@.notification-toast__icon-container*/.notification-toast__icon-container.sc-scale-notification-toast{height:100%;width:var(--width-icon-container);position:absolute;left:calc(var(--width-icon-container) * -1 + 1px);top:0;float:left;border-radius:var(--radius) 0 0 var(--radius)}/*!@.notification-toast.notification-toast--variant-success\n  .notification-toast__icon-container*/.notification-toast.notification-toast--variant-success.sc-scale-notification-toast .notification-toast__icon-container.sc-scale-notification-toast{background:var(--background-success-icon-container)}/*!@.notification-toast.notification-toast--variant-warning\n  .notification-toast__icon-container*/.notification-toast.notification-toast--variant-warning.sc-scale-notification-toast .notification-toast__icon-container.sc-scale-notification-toast{background:var(--background-warning-icon-container)}/*!@.notification-toast.notification-toast--variant-error\n  .notification-toast__icon-container*/.notification-toast.notification-toast--variant-error.sc-scale-notification-toast .notification-toast__icon-container.sc-scale-notification-toast{background:var(--background-error-icon-container)}/*!@.notification-toast.notification-toast--variant-informational\n  .notification-toast__icon-container*/.notification-toast.notification-toast--variant-informational.sc-scale-notification-toast .notification-toast__icon-container.sc-scale-notification-toast{background:var(--background-informational-icon-container)}/*!@::slotted([slot='header'])*/.sc-scale-notification-toast-s>[slot='header']{margin:0;padding:3px var(--width-icon-container) 0 10px;font-weight:bold;font-size:16px}/*!@::slotted([slot='body'])*/.sc-scale-notification-toast-s>[slot='body']{padding:3px 0 0 10px;margin:0}/*!@::slotted([slot='link'])*/.sc-scale-notification-toast-s>[slot='link']{padding:10px 0 15px 10px;margin:0}/*!@.notification-toast__text-container*/.notification-toast__text-container.sc-scale-notification-toast{width:calc(var(--width) - calc(var(--width-icon-container) * 1));min-height:33px;float:left;position:relative;margin:0 0 0 1px;padding:15px 0 0 0}/*!@.notification-toast__button-close*/.notification-toast__button-close.sc-scale-notification-toast{position:absolute;top:10px;right:7.5px;color:#191919;border:none;cursor:pointer;margin:0;padding:0;background:transparent}/*!@.notification-toast__button-close svg*/.notification-toast__button-close.sc-scale-notification-toast svg.sc-scale-notification-toast{height:19px;width:19px;padding:7.5px 6.5px 6.5px 6.5px;border-radius:20%;color:var(--telekom-color-text-and-icon-standard)}/*!@.notification-toast__button-close:hover svg*/.notification-toast__button-close.sc-scale-notification-toast:hover svg.sc-scale-notification-toast{background-color:white;color:var(--telekom-color-text-and-icon-primary-hovered)}@media screen and (forced-colors: active), (-ms-high-contrast: active){/*!@.notification-toast__button-close svg*/.notification-toast__button-close.sc-scale-notification-toast svg.sc-scale-notification-toast{color:hsl(0, 0%, 100%)}/*!@.notification-toast*/.notification-toast.sc-scale-notification-toast{border:1px solid hsl(0, 0%, 100%)}/*!@.notification-toast__icon-container*/.notification-toast__icon-container.sc-scale-notification-toast{border:1px solid hsl(0, 0%, 100%);margin-top:-1px}}";

class NotificationToast {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleClosing = createEvent$1(this, "scale-closing", 7);
    this.scaleClose = createEvent$1(this, "scale-close", 7);
    /** (optional) Toast variant */
    this.variant = 'informational';
    /** (optional) Animated toast */
    this.animated = true;
    /** (optional) Alignment choose for top and bottom */
    this.alignment = 'top-right';
    /** (optional) Toast position at the top */
    this.positionVertical = 12;
    /** (optional) Toast position right */
    this.positionHorizontal = 12;
    /** (optional) Toast auto hide */
    this.autoHide = false;
    /** (optional) Toast auto hide duration */
    this.autoHideDuration = 3000;
    /** (optional) Toast fade duration */
    this.fadeDuration = 500;
    /** (optional) Label for close button */
    this.closeButtonLabel = 'close';
    /** (optional) Title for close button */
    this.closeButtonTitle = 'close';
    /** (optional) Toast state height with offset */
    this.toastHeightWithOffset = 0;
    this.hideToast = false;
    this.close = () => {
      emitEvent$1(this, 'scaleClosing');
      this.hideToast = true;
      setTimeout(() => {
        this.opened = false;
        emitEvent$1(this, 'scaleClose');
      }, this.fadeDuration);
    };
    this.transitions = (offset) => `
      @keyframes fadeIn {
        from {
          opacity: 0;
          ${this.alignmentVertical}: -${offset}px;
        }
        to {
          opacity: 1;
          ${this.alignmentVertical}: ${this.positionVertical}px;
        }
      }
  
      @keyframes fadeOut {
        from {
          opacity: 1;
          ${this.alignmentVertical}: ${this.positionVertical}px;
        }
        to {
          opacity: 0;
          ${this.alignmentVertical}: -${offset}px;
        }
      }
    `;
    this.animationStyle = (offset) => {
      if (this.animated) {
        return `
        .notification-toast--show {
          ${this.alignmentHorizontal}: ${this.positionHorizontal}px;
          animation: fadeIn ${this.fadeDuration / 1000}s ease-in-out;
          ${this.alignmentVertical}: ${this.positionVertical}px;
          opacity: 1;
        },
        .notification-toast--show {
          ${this.alignmentHorizontal}: ${this.positionHorizontal}px;
          animation: fadeOut ${this.fadeDuration / 1000}s ease-in-out;
          ${this.alignmentVertical}: -${offset}px;
          opacity: 0;
        }
      `;
      }
      return `
    .notification-toast--show {
      ${this.alignmentHorizontal}: ${this.positionHorizontal}px;
      ${this.alignmentVertical}: ${this.positionVertical}px;
      opacity: 1;
    },
    .notification-toast--show {
      ${this.alignmentHorizontal}: ${this.positionHorizontal}px;
      ${this.alignmentVertical}: -${offset}px;
      opacity: 0;
    }
  `;
    };
  }
  connectedCallback() {
    statusNote({ source: this.element, type: 'warn' });
  }
  componentWillLoad() {
    const alignmentParts = this.alignment.split('-');
    this.alignmentVertical = alignmentParts[0];
    this.alignmentHorizontal = alignmentParts[1];
  }
  componentDidRender() {
    if (this.autoHide === true) {
      setTimeout(this.close, this.autoHideDuration);
    }
  }
  handleIcons() {
    if (this.variant) {
      switch (this.variant) {
        case 'success':
          return (hAsync("scale-icon-action-success", { class: "notification-toast__icon", size: 20, color: "#ffffff", selected: true, "aria-hidden": "true" }));
        case 'informational':
          return (hAsync("scale-icon-alert-information", { class: "notification-toast__icon", size: 20, selected: true, color: "#ffffff", "aria-hidden": "true" }));
        case 'error':
          return (hAsync("scale-icon-alert-error", { class: "notification-toast__icon", size: 20, selected: true, color: "#ffffff", "aria-hidden": "true" }));
        case 'warning':
          return (hAsync("scale-icon-alert-warning", { class: "notification-toast__icon", color: "#ffff", size: 20, selected: true, "aria-hidden": "true" }));
      }
    }
    return;
  }
  /** Toast method: open() */
  async open() {
    this.opened = true;
    this.hideToast = false;
  }
  render() {
    if (this.opened) {
      return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("style", null, this.transitions(this.toastHeightWithOffset)), hAsync("style", null, this.animationStyle(this.toastHeightWithOffset)), hAsync("div", { role: "alert", style: { display: `${this.opened ? '' : 'none'}` }, class: this.getCssClassMap(), part: this.getBasePartMap(), tabindex: "0" }, hAsync("div", { class: "notification-toast__icon-container" }, this.handleIcons()), hAsync("div", { class: "notification-toast__text-container" }, hAsync("slot", { name: "header" }), hAsync("slot", { name: "body" }), hAsync("scale-link", { href: this.href, class: "notification-toast__link", role: "link" }, hAsync("slot", { name: "link" }))), hAsync("button", { part: "button-dismissable", type: "button", class: "notification-toast__button-close", onClick: () => this.close(), tabindex: 0, "aria-label": this.closeButtonLabel, title: this.closeButtonTitle, onKeyDown: (e) => {
          if (e.key === 'Enter') {
            this.close();
          }
        } }, hAsync("scale-icon-action-circle-close", null)))));
    }
  }
  getToastHeightWithOffset() {
    const toastHeight = this.element.shadowRoot.querySelector('.toast').scrollHeight;
    this.toastHeightWithOffset = toastHeight + this.positionVertical;
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const component = 'notification-toast';
    const prefix = mode === 'basePart' ? '' : `${component}`;
    return classnames(mode === 'basePart' ? 'base' : component, this.variant && `${prefix}--variant-${this.variant}`, !!this.opened && `${prefix}--opened`, !!!this.hideToast && `${prefix}--show`, !!this.hideToast && `${prefix}--hide`, this.story && `${prefix}--story`);
  }
  get element() { return getElement$1(this); }
  static get style() { return notificationToastCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-notification-toast",
    "$members$": {
      "variant": [1],
      "opened": [516],
      "animated": [4],
      "alignment": [1],
      "positionVertical": [2, "position-vertical"],
      "positionHorizontal": [2, "position-horizontal"],
      "autoHide": [4, "auto-hide"],
      "autoHideDuration": [2, "auto-hide-duration"],
      "fadeDuration": [2, "fade-duration"],
      "styles": [513],
      "closeButtonLabel": [1, "close-button-label"],
      "closeButtonTitle": [1, "close-button-title"],
      "story": [4],
      "href": [1],
      "toastHeightWithOffset": [32],
      "open": [64]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["opened", "opened"], ["styles", "styles"]]
  }; }
}

const paginationCss = "/*!@:host*/.sc-scale-pagination-h{--color:var(--telekom-color-text-and-icon-standard);--radius:var(--telekom-radius-standard);--font-size:var(--telekom-typography-font-size-small);--border:1px solid var(--telekom-color-ui-faint);--color-hover:var(--telekom-color-text-and-icon-primary-hovered);--color-active:var(--telekom-color-text-and-icon-primary-pressed);--color-button:var(--telekom-color-ui-subtle);--border-button:var(--border);--focus-outline:var(--telekom-line-weight-highlight) solid\n    var(--telekom-color-functional-focus-standard);--radius-first-prompt:var(--radius) 0 0 var(--radius);--radius-last-prompt:0 var(--radius) var(--radius) 0;--radius-first-prompt-stack:0 0 0 var(--radius);--radius-last-prompt-stack:0 0 var(--radius) 0;--stroke-svg:var(--telekom-color-ui-extra-strong);--stroke-svg-high-contrast:#fff;--width-button:44px;--padding-info:var(--telekom-spacing-composition-space-04);--height-button:44px;--line-height-info:calc(var(--height-button) - 2px)}/*!@.pagination*/.pagination.sc-scale-pagination{display:flex;overflow:auto;flex-wrap:wrap}/*!@.pagination__info,\n.pagination__info-responsive*/.pagination__info.sc-scale-pagination,.pagination__info-responsive.sc-scale-pagination{color:var(--color);text-align:center;font-size:var(--font-size);font-weight:var(--telekom-typography-font-weight-medium);line-height:var(--line-height-info);padding:0 var(--padding-info);border:var(--border);flex-shrink:0;border-left:0;border-right:0;white-space:nowrap;order:1}/*!@.pagination__info-responsive*/.pagination__info-responsive.sc-scale-pagination{display:none}/*!@.pagination__info span,\n.pagination__info-responsive span*/.pagination__info.sc-scale-pagination span.sc-scale-pagination,.pagination__info-responsive.sc-scale-pagination span.sc-scale-pagination{color:var(--telekom-color-text-and-icon-primary-standard);font-weight:var(--telekom-typography-font-weight-bold)}/*!@button*/button.sc-scale-pagination{display:flex;flex-shrink:0;justify-content:center;align-items:center;padding:0;margin:0;height:var(--height-button);width:var(--width-button);color:var(--color-button);background:none;border:var(--border-button)}/*!@button:focus*/button.sc-scale-pagination:focus{outline:var(--focus-outline);outline-offset:-3px}/*!@.pagination__first-prompt*/.pagination__first-prompt.sc-scale-pagination{border-radius:var(--radius-first-prompt);margin-right:-1px}/*!@.pagination__last-prompt*/.pagination__last-prompt.sc-scale-pagination{border-radius:var(--radius-last-prompt);margin-left:-1px;order:2}/*!@.pagination__next-prompt*/.pagination__next-prompt.sc-scale-pagination{order:2}/*!@button svg*/button.sc-scale-pagination svg.sc-scale-pagination{display:block}/*!@button:not(:disabled)*/button.sc-scale-pagination:not(:disabled){cursor:pointer}/*!@button:not(:disabled) svg*/button.sc-scale-pagination:not(:disabled) svg.sc-scale-pagination{color:var(--stroke-svg)}/*!@button:disabled svg*/button.sc-scale-pagination:disabled svg.sc-scale-pagination{color:var(--telekom-color-text-and-icon-disabled)}/*!@button:not(:disabled):hover*/button.sc-scale-pagination:not(:disabled):hover{border-color:var(--telekom-color-primary-hovered);z-index:1}/*!@button:not(:disabled):hover svg*/button.sc-scale-pagination:not(:disabled):hover svg.sc-scale-pagination{color:var(--color-hover)}/*!@button:not(:disabled):active*/button.sc-scale-pagination:not(:disabled):active{border-color:var(--color-active);z-index:1}/*!@button:not(:disabled):active svg*/button.sc-scale-pagination:not(:disabled):active svg.sc-scale-pagination{color:var(--color-active)}/*!@.pagination--hide-borders .pagination__info,\n.pagination--hide-borders .pagination__info-responsive*/.pagination--hide-borders.sc-scale-pagination .pagination__info.sc-scale-pagination,.pagination--hide-borders.sc-scale-pagination .pagination__info-responsive.sc-scale-pagination{border:0}/*!@.pagination--hide-borders .pagination__info-responsive*/.pagination--hide-borders.sc-scale-pagination .pagination__info-responsive.sc-scale-pagination{border-bottom:var(--border)}/*!@.pagination--hide-borders button*/.pagination--hide-borders.sc-scale-pagination button.sc-scale-pagination{border-radius:0;border-top-width:0;border-bottom-width:0}/*!@.pagination--hide-borders .pagination__first-prompt*/.pagination--hide-borders.sc-scale-pagination .pagination__first-prompt.sc-scale-pagination{border-left-color:transparent}/*!@.pagination--hide-borders .pagination__last-prompt*/.pagination--hide-borders.sc-scale-pagination .pagination__last-prompt.sc-scale-pagination{border-right-color:transparent}/*!@.pagination--hide-borders button:not(:disabled):hover*/.pagination--hide-borders.sc-scale-pagination button.sc-scale-pagination:not(:disabled):hover{border-width:1px;border-color:var(--telekom-color-primary-hovered)}/*!@.pagination__button-wrapper*/.pagination__button-wrapper.sc-scale-pagination{display:flex}@media screen and (forced-colors: active), (-ms-high-contrast: active){/*!@button:not(:disabled) svg*/button.sc-scale-pagination:not(:disabled) svg.sc-scale-pagination{color:var(--stroke-svg-high-contrast)}}@media screen and (max-width: 639px){/*!@:host*/.sc-scale-pagination-h{width:100%}/*!@.pagination*/.pagination.sc-scale-pagination{flex-direction:column}/*!@.pagination__info-responsive*/.pagination__info-responsive.sc-scale-pagination{display:initial;order:0;overflow:auto;border-left:var(--border);border-right:var(--border);border-bottom:0;border-radius:var(--radius) var(--radius) 0 0;line-height:var(--line-height-info)}/*!@.pagination__info*/.pagination__info.sc-scale-pagination{display:none;line-height:var(--line-height-info)}/*!@.pagination__first-prompt*/.pagination__first-prompt.sc-scale-pagination{border-radius:var(--radius-first-prompt-stack)}/*!@.pagination__last-prompt*/.pagination__last-prompt.sc-scale-pagination{border-radius:var(--radius-last-prompt-stack)}/*!@.pagination__next-prompt*/.pagination__next-prompt.sc-scale-pagination{margin-left:-1px}/*!@button*/button.sc-scale-pagination{flex:1;height:var(--height-button)}/*!@.pagination--hide-borders .pagination__first-prompt*/.pagination--hide-borders.sc-scale-pagination .pagination__first-prompt.sc-scale-pagination{border-left-width:0}/*!@.pagination--hide-borders .pagination__last-prompt*/.pagination--hide-borders.sc-scale-pagination .pagination__last-prompt.sc-scale-pagination{border-right-width:0}}";

const DEFAULT_ICON_SIZE = 20;
const name = 'pagination';
class Pagination {
  /* 6. Lifecycle Events (call order) */
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scalePagination = createEvent$1(this, "scale-pagination", 7);
    this.scalePaginationLegacy = createEvent$1(this, "scalePagination", 7);
    /* 2. State Variables (alphabetical) */
    /* 3. Public Properties (alphabetical) */
    /** (optional) Deprecated; hideBorder should replace hideBorders */
    this.hideBorders = false;
    /** (optional) Set to true to hide top and bottom borders */
    this.hideBorder = false;
    /** (optional) Set number of rows/elements to show per page */
    this.pageSize = 10;
    /** (optional) Index of first element to display */
    this.startElement = 0;
    /** (optional) Total number of rows/elements used to calculate page displays */
    this.totalElements = 1;
    /** @deprecated - size should replace small */
    this.small = false;
    /** (optional) translation to 'Go to first page'  */
    this.ariaLabelFirstPage = 'Go to first page';
    /** (optional) translation to 'Go to next page'  */
    this.ariaLabelNextPage = 'Go to next page';
    /** (optional) translation to 'Go to previous page'  */
    this.ariaLabelPreviousPage = 'Go to previous page';
    /** (optional) translation to 'Go to last page'  */
    this.ariaLabelLastPage = 'Go to last page';
    /* 5. Private Properties (alphabetical) */
    /** Calculated width of largest text so buttons don't move while changing pages */
    this.maxWidth = 100;
  }
  componentWillLoad() {
    this.calculateWidth();
  }
  componentWillUpdate() { }
  componentDidRender() {
    if (this.hideBorders !== false) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "hideBorders" is deprecated. Please use the "hideBorder" property!',
        type: 'warn',
        source: this.hostElement,
      });
    }
    if (this.small !== false) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "small" is deprecated. Please use css overwrite!',
        type: 'warn',
        source: this.hostElement,
      });
    }
    if (this.size) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "size" is deprecated. Please use css overwrite!',
        type: 'warn',
        source: this.hostElement,
      });
    }
  }
  componentDidLoad() { }
  componentDidUpdate() { }
  disconnectedCallback() { }
  /* 7. Listeners */
  calculateWidth() {
    // calculate max possible width
    this.maxWidth = (this.totalElements.toString().length * 3 + 3) * 9;
  }
  /* 8. Public Methods */
  /* 9. Local Methods */
  goFirstPage() {
    this.startElement = 0;
    this.emitUpdate('FIRST');
  }
  goPreviousPage() {
    // Min to prevent going below 0
    this.startElement -= Math.min(this.pageSize, this.startElement);
    this.emitUpdate('PREVIOUS');
  }
  goNextPage() {
    this.startElement += this.pageSize;
    this.emitUpdate('NEXT');
  }
  goLastPage() {
    const p = this.pageSize;
    // Make sure startElement is multiple of pageSize
    this.startElement = Math.ceil((this.totalElements - p) / p) * p;
    this.emitUpdate('LAST');
  }
  emitUpdate(direction) {
    const data = {
      startElement: this.startElement,
      direction,
    };
    emitEvent$1(this, 'scalePagination', data);
  }
  /* 10. Render */
  render() {
    const total = this.totalElements;
    const start = this.startElement + 1;
    const end = Math.min(this.startElement + this.pageSize, total);
    const isAtStart = start === 1;
    const isAtEnd = end === total;
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { part: this.getBasePartMap(), class: this.getCssClassMap() }, hAsync("div", { part: "info-responsive", class: `${name}__info-responsive` }, hAsync("span", null, start, "-", end), ' ', "/ ", total), hAsync("div", { class: `${name}__button-wrapper` }, hAsync("div", { part: "info", class: `${name}__info`, style: { width: `${this.maxWidth}px` } }, hAsync("span", null, start, "-", end), ' ', "/ ", total), hAsync("button", { class: `${name}__first-prompt`, part: "first-prompt", disabled: isAtStart, onClick: () => this.goFirstPage(), "aria-label": this.ariaLabelFirstPage }, hAsync("scale-icon-navigation-double-left", { size: DEFAULT_ICON_SIZE, decorative: true })), hAsync("button", { class: `${name}__prev-prompt`, part: "prev-prompt", disabled: isAtStart, onClick: () => this.goPreviousPage(), "aria-label": this.ariaLabelPreviousPage }, hAsync("scale-icon-navigation-left", { size: DEFAULT_ICON_SIZE, decorative: true })), hAsync("button", { class: `${name}__next-prompt`, part: "next-prompt", disabled: isAtEnd, onClick: () => this.goNextPage(), "aria-label": this.ariaLabelNextPage }, hAsync("scale-icon-navigation-right", { size: DEFAULT_ICON_SIZE, decorative: true })), hAsync("button", { class: `${name}__last-prompt`, part: "last-prompt", disabled: isAtEnd, onClick: () => this.goLastPage(), "aria-label": this.ariaLabelLastPage }, hAsync("scale-icon-navigation-double-right", { size: DEFAULT_ICON_SIZE, decorative: true }))))));
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const prefix = mode === 'basePart' ? '' : `${name}--`;
    return classnames(name, (this.hideBorder || this.hideBorders) && `${prefix}hide-borders`);
  }
  get hostElement() { return getElement$1(this); }
  static get watchers() { return {
    "totalElements": ["calculateWidth"]
  }; }
  static get style() { return paginationCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-pagination",
    "$members$": {
      "hideBorders": [4, "hide-borders"],
      "hideBorder": [4, "hide-border"],
      "pageSize": [2, "page-size"],
      "startElement": [2, "start-element"],
      "totalElements": [2, "total-elements"],
      "styles": [1],
      "small": [4],
      "size": [1],
      "ariaLabelFirstPage": [1, "aria-label-first-page"],
      "ariaLabelNextPage": [1, "aria-label-next-page"],
      "ariaLabelPreviousPage": [1, "aria-label-previous-page"],
      "ariaLabelLastPage": [1, "aria-label-last-page"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const iconCss$16 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ProcessOrderStatus {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M17.25.498a3.25 3.25 0 01.926 6.365L18 6.91v2.73a2.235 2.235 0 01.155 4.16l-.155.06v2.73a3.25 3.25 0 01-.568 6.404L17.25 23l-.182-.006a3.25 3.25 0 01-.743-6.357l.175-.047v-2.73a2.235 2.235 0 01-.155-4.16l.155-.06V6.91a3.25 3.25 0 01.75-6.412zM7.5 8.15l5.5 3.6-5.5 3.6V13H2a1.25 1.25 0 01-.128-2.494L2 10.5h5.5V8.15z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M17.25.5c1.8 0 3.25 1.45 3.25 3.25 0 1.485-.964 2.695-2.32 3.102L18 6.9v2.75c.95.35 1.5 1.2 1.5 2.1 0 .844-.483 1.644-1.327 2.029L18 13.85v2.75c1.45.35 2.5 1.6 2.5 3.15 0 1.8-1.45 3.25-3.25 3.25S14 21.55 14 19.75c0-1.485.964-2.695 2.32-3.102l.18-.048v-2.75c-.95-.35-1.5-1.2-1.5-2.1 0-.844.483-1.644 1.327-2.029l.173-.071V6.9C15.05 6.55 14 5.3 14 3.75 14 1.95 15.45.5 17.25.5zm0 17.5c-.95 0-1.75.8-1.75 1.75s.8 1.75 1.75 1.75S19 20.7 19 19.75 18.2 18 17.25 18zM7.5 8.15l5.5 3.6-5.5 3.6V12.5H2c-.4 0-.75-.35-.75-.75 0-.367.294-.691.651-.743L2 11h5.5V8.15z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$16; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-process-order-status",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$15 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ProcessProcessing {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M1.5 13.215l6.11 2.68-2 1.32a8.255 8.255 0 004.269 2.757l.316.078v.01a1.25 1.25 0 01-.545 2.44 10.765 10.765 0 01-5.927-3.636l-.223-.279-2 1.305v-6.675zm19.394-.404A1.255 1.255 0 0122.5 14.35a10.765 10.765 0 01-3.636 5.927l-.279.223 1.305 2h-6.675l2.685-6.11 1.32 2a8.24 8.24 0 002.835-4.585c.073-.462.396-.845.839-.994zM10.785 1.5l-2.68 6.11-1.32-2a8.24 8.24 0 00-2.835 4.585 1.255 1.255 0 01-1.495.945A1.245 1.245 0 011.5 9.65a10.745 10.745 0 013.636-5.927l.279-.223-1.305-2h6.675zm2.359.37a1.255 1.255 0 011.206-.37 10.78 10.78 0 015.927 3.636l.223.279 2-1.305v6.675l-6.11-2.68 2-1.32a8.24 8.24 0 00-4.269-2.758l-.316-.077a1.255 1.255 0 01-.661-2.08z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M20.55 13.9c.1-.4.5-.65.9-.55.4.1.65.5.5.9-.523 2.233-1.722 4.194-3.427 5.628l-.273.222 1.6 2.4H13.2l2.7-6.15 1.6 2.45c1.5-1.25 2.6-2.95 3.05-4.9zM1.5 13.2l6.15 2.7-2.45 1.6c1.25 1.5 2.95 2.6 4.9 3.05.4.1.65.5.55.85-.1.4-.5.65-.9.55-2.233-.523-4.194-1.722-5.628-3.427L3.9 18.25l-2.4 1.6V13.2zM13.35 2.55c.1-.4.5-.65.9-.55 2.19.476 4.2 1.723 5.595 3.44l.205.26 2.45-1.55v6.65l-6.15-2.7 2.45-1.6c-1.25-1.5-2.95-2.6-4.9-3.05-.4-.1-.65-.5-.55-.9zM10.8 1.5L8.1 7.65 6.5 5.2C5 6.45 3.9 8.15 3.45 10.1A.745.745 0 112 9.75c.476-2.19 1.723-4.2 3.44-5.595l.26-.205L4.1 1.5h6.7z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$15; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-process-processing",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$14 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ProcessSepaTransaction {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M3.512 1.008l6.674.012-2.68 6.112L6.2 5.13C4.21 6.82 3 9.332 3 12c0 4.18 2.956 7.874 7.029 8.784.566.126.953.619.972 1.174v.138a.748.748 0 01-.038.223 1.248 1.248 0 01-1.479.904C4.279 22.061.501 17.341.501 12c0-3.396 1.533-6.599 4.06-8.758l.265-.22-1.314-2.014zm9.518.698a1.245 1.245 0 011.486-.929C19.721 1.939 23.5 6.659 23.5 12c0 3.396-1.534 6.598-4.06 8.758l-.265.22 1.314 2.014-6.674-.012 2.68-6.112 1.306 2.002C19.79 17.179 21 14.666 21 12c0-4.18-2.956-7.874-7.029-8.784A1.245 1.245 0 0113 2.04l.002-.135c0-.07.012-.135.029-.199zm-.866 5.798c1.514 0 2.678.958 3.013 2.535l.037.2h-1.801c-.157-.762-.617-1.117-1.249-1.117-.714 0-1.175.381-1.414 1.23l-.045.176h1.84v1.262h-1.984v.644h1.985v1.262h-1.84c.223.96.696 1.393 1.458 1.393.586 0 1.025-.306 1.21-.96l.039-.157h1.801c-.276 1.696-1.472 2.734-3.05 2.734-1.63 0-2.738-1.033-3.16-2.795l-.047-.215H8.18v-1.262h.631v-.644h-.63v-1.262h.775c.381-1.906 1.498-3.024 3.207-3.024z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M13.773 1.152l.105.011C19.052 2.057 23 6.575 23 12c0 3.454-1.601 6.54-4.1 8.557l1.588 2.436-6.673-.013 2.68-6.112 1.577 2.42A9.465 9.465 0 0021.5 12c0-4.689-3.415-8.594-7.889-9.361a.74.74 0 01-.603-.628L13 1.904l.006-.097a.755.755 0 01.664-.65l.103-.005zM3.512 1.008l6.673.012-2.68 6.112-1.578-2.42A9.471 9.471 0 002.5 12c0 4.689 3.415 8.595 7.889 9.362a.74.74 0 01.603.627l.008.107-.006.097a.753.753 0 01-.872.644C4.948 21.943 1 17.425 1 12c0-3.454 1.601-6.54 4.1-8.557L3.512 1.008zm8.652 6.497c1.577 0 2.774 1.038 3.05 2.734h-1.802c-.157-.762-.617-1.117-1.248-1.117-.762 0-1.236.434-1.46 1.406h1.841v1.262H10.56v.644h1.985v1.262h-1.84c.223.96.697 1.393 1.459 1.393.631 0 1.091-.354 1.248-1.117h1.801c-.275 1.696-1.471 2.734-3.05 2.734-1.696 0-2.825-1.117-3.207-3.01h-.775v-1.262h.63v-.644h-.63v-1.262h.775c.382-1.906 1.498-3.024 3.208-3.024z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$14; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-process-sepa-transaction",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const progressBarCss = "/*!@:host*/.sc-scale-progress-bar-h{--track-color:var(--telekom-color-ui-faint);--bar-color:var(--telekom-color-primary-standard);--icon-color-error:var(--telekom-color-text-and-icon-functional-danger);--track-color-error:var(--telekom-color-functional-danger-subtle);--bar-color-error:var(--telekom-color-functional-danger-standard);--icon-color-success:var(--telekom-color-text-and-icon-functional-success);--track-color-success:var(--telekom-color-functional-success-subtle);--bar-color-success:var(--telekom-color-functional-success-standard);--bar-color-disabled:var(--telekom-color-ui-disabled);--color-disabled:var(--telekom-color-text-and-icon-disabled);--progress-bar-outer-size:6px;--progress-bar-inner-size:var(--telekom-spacing-composition-space-03);--font-label:var(--telekom-text-style-ui);--color-label:var(--telekom-color-text-and-icon-standard);--color-status-description:var(--telekom-color-text-and-icon-additional);--font-status-description:var(--telekom-text-style-small-bold)}/*!@.progress-bar*/.progress-bar.sc-scale-progress-bar{width:100%;max-width:30rem}/*!@.progress-bar--disabled*/.progress-bar--disabled.sc-scale-progress-bar{cursor:not-allowed}/*!@.progress-bar__top-container*/.progress-bar__top-container.sc-scale-progress-bar{display:flex;justify-content:space-between;align-items:center}/*!@.progress-bar--disabled .progress-bar__label,\n.progress-bar--disabled .progress-bar__status*/.progress-bar--disabled.sc-scale-progress-bar .progress-bar__label.sc-scale-progress-bar,.progress-bar--disabled.sc-scale-progress-bar .progress-bar__status.sc-scale-progress-bar{color:var(--color-disabled)}/*!@.progress-bar__label*/.progress-bar__label.sc-scale-progress-bar{display:block;padding:var(--telekom-spacing-composition-space-05) 0;color:var(--color-label);font:var(--font-label)}/*!@.progress-bar__wrapper*/.progress-bar__wrapper.sc-scale-progress-bar{width:100%;display:flex;box-sizing:border-box;align-items:center}/*!@.progress-bar__outer*/.progress-bar__outer.sc-scale-progress-bar{width:100%;height:var(--progress-bar-outer-size);margin-left:0;overflow:hidden;position:relative;border-radius:var(--telekom-radius-pill);background:var(--track-color)}/*!@.progress-bar__inner*/.progress-bar__inner.sc-scale-progress-bar{position:absolute;top:0;left:0;width:var(--progress, 0);height:var(--progress-bar-inner-size);display:flex;align-items:center;white-space:nowrap;justify-content:flex-end;border-radius:var(--telekom-radius-pill);border:1px solid transparent;background:var(--bar-color);transition:width var(--telekom-motion-duration-immediate)\n    var(--telekom-motion-easing-standard)}/*!@.progress-bar--disabled .progress-bar__inner*/.progress-bar--disabled.sc-scale-progress-bar .progress-bar__inner.sc-scale-progress-bar{background:var(--bar-color-disabled)}/*!@.progress-bar__status*/.progress-bar__status.sc-scale-progress-bar{padding:var(--telekom-spacing-composition-space-05) 0;font:var(--font-label);font-variant-numeric:tabular-nums}/*!@.progress-bar--completed .progress-bar__icon*/.progress-bar--completed.sc-scale-progress-bar .progress-bar__icon.sc-scale-progress-bar{color:var(--icon-color-success)}/*!@.progress-bar--completed .progress-bar__outer*/.progress-bar--completed.sc-scale-progress-bar .progress-bar__outer.sc-scale-progress-bar{background:var(--track-color-success)}/*!@.progress-bar--completed .progress-bar__inner*/.progress-bar--completed.sc-scale-progress-bar .progress-bar__inner.sc-scale-progress-bar{background:var(--bar-color-success)}/*!@.progress-bar--has-error .progress-bar__icon*/.progress-bar--has-error.sc-scale-progress-bar .progress-bar__icon.sc-scale-progress-bar{color:var(--icon-color-error)}/*!@.progress-bar--has-error .progress-bar__outer*/.progress-bar--has-error.sc-scale-progress-bar .progress-bar__outer.sc-scale-progress-bar{background:var(--track-color-error)}/*!@.progress-bar--has-error .progress-bar__inner*/.progress-bar--has-error.sc-scale-progress-bar .progress-bar__inner.sc-scale-progress-bar{background:var(--bar-color-error)}/*!@.progress-bar__status-description*/.progress-bar__status-description.sc-scale-progress-bar{color:var(--color-status-description);font:var(--font-status-description);margin-top:var(--telekom-spacing-composition-space-04)}/*!@.progress-bar__aria-live*/.progress-bar__aria-live.sc-scale-progress-bar{clip:rect(0 0 0 0);width:1px;border:0;height:1px;margin:-1px;padding:0;overflow:hidden;position:absolute}";

const ICON_SIZE = 16;
let i$5 = 0;
class ProgressBar {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) Progress bar busy switch */
    this.busy = false;
    /** (required) Progress bar percentage */
    this.percentage = 0;
    /** (optional) Progress bar percentage to start the animation from (default: 0) */
    this.percentageStart = 0;
    /** (optional) Progress bar percentage text */
    this.showStatus = true;
    this.transitions = (width, widthStart) => `
    @keyframes showProgress {
      from {
        width: ${widthStart}%;
      }
      to {
        width: ${width}%;
      }
    }
  `;
    this.progressStyle = () => {
      const customColor = this.customColor
        ? { '--background': this.customColor }
        : {};
      return Object.assign({ '--progress': this.disabled ? '100%' : `${this.percentage}%` }, customColor);
    };
  }
  componentWillLoad() {
    if (this.progressBarId == null) {
      this.progressBarId = 'progress-bar-' + i$5++;
    }
    if (this.disabled) {
      this.showStatus = false;
    }
  }
  componentWillUpdate() { }
  disconnectedCallback() { }
  componentDidRender() {
    if (this.customColor !== undefined) {
      statusNote({
        tag: 'deprecated',
        message: `Property "customColor" is deprecated. 
          Please use css variable "--background" to set the progress bar background color;
          e.g. <scale-progress-bar percentage="20" style="--background: green"></scale-progress-bar>`,
        type: 'warn',
        source: this.hostElement,
      });
    }
  }
  render() {
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("style", null, this.transitions(this.percentage, this.percentageStart)), hAsync("div", { part: this.getBasePartMap(), class: this.getCssClassMap() }, hAsync("div", { class: "progress-bar__top-container" }, !!this.label ? (hAsync("label", { part: "label", class: "progress-bar__label", htmlFor: this.progressBarId }, this.label)) : (hAsync("span", null, " ")), !!this.showStatus &&
      !this.hasError &&
      this.percentage <= 100 &&
      this.percentage !== 100 && (hAsync("div", { part: "status", class: "progress-bar__status", "aria-hidden": "true" }, this.percentage, "%")), this.hasError ? (hAsync("div", { class: "progress-bar__icon" }, hAsync("scale-icon-alert-error", { size: ICON_SIZE }))) : this.percentage >= 100 ? (hAsync("div", { class: "progress-bar__icon" }, hAsync("scale-icon-action-success", { size: ICON_SIZE }))) : null), hAsync("div", { part: "wrapper", class: "progress-bar__wrapper" }, hAsync("div", { part: "outer", class: "progress-bar__outer", role: "progressbar", "aria-valuemin": 0, "aria-valuemax": 100, "aria-valuenow": this.percentage, "aria-busy": this.busy, "aria-valuetext": `${this.percentage}%`, "aria-label": this.label, id: this.progressBarId }, this.percentage > 0 && (hAsync("div", { part: "inner", class: "progress-bar__inner", style: this.progressStyle() }))), hAsync("slot", { name: "icon" }))), !!this.statusDescription && (hAsync("div", { part: "status-description", class: "progress-bar__status-description", role: "alert" }, this.statusDescription)), !this.mute && (hAsync("span", { "aria-live": "polite", class: "progress-bar__aria-live" }, this.percentage !== Math.round(this.percentage / 10) * 10
      ? `${Math.round(this.percentage / 10) * 10}%`
      : null))));
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const component = 'progress-bar';
    const prefix = mode === 'basePart' ? '' : `${component}--`;
    return classnames(component, this.hasError && `${prefix}has-error`, this.disabled && `${prefix}disabled`, this.percentage >= 100 && `${prefix}completed`);
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return progressBarCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-progress-bar",
    "$members$": {
      "busy": [4],
      "percentage": [2],
      "percentageStart": [2, "percentage-start"],
      "customColor": [1, "custom-color"],
      "showStatus": [4, "show-status"],
      "icon": [1],
      "statusDescription": [1, "status-description"],
      "hasError": [4, "has-error"],
      "disabled": [4],
      "progressBarId": [1, "progress-bar-id"],
      "label": [1],
      "mute": [4],
      "styles": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const radioButtonCss = "scale-radio-button{--color-disabled:var(--telekom-color-text-and-icon-disabled);--background-disabled:var(--telekom-color-ui-disabled);--color-error:var(--telekom-color-text-and-icon-functional-danger);--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);--color-primary:var(--telekom-color-text-and-icon-primary-standard);--color-primary-hover:var(--telekom-color-text-and-icon-standard);--color-primary-active:var(--telekom-color-text-and-icon-standard);--color-focus:var(--telekom-color-functional-focus-standard);--color-text:var(--telekom-color-text-and-icon-standard);--transition-helper-text:var(--transition);--font-size-helper-text:var(--telekom-typography-font-size-small);--font-weight-helper-text:var(--telekom-typography-font-weight-bold);--line-height-helper-text:var(--telekom-typography-line-spacing-standard);--color-helper-text:var(\n    --telekom-color-text-and-icon-functional-informational\n  );--spacing-left-helper-text:calc(\n    var(--width-control) + var(--telekom-spacing-composition-space-04)\n  );--spacing-top-helper-text:var(--telekom-spacing-composition-space-03);--color-helper-text-error:var(\n    --telekom-color-text-and-icon-functional-danger\n  );--transition-label:var(--transition);--font-weight-label:var(--telekom-typography-font-weight-medium);--color-label:var(--color-text);--spacing-label:var(--telekom-spacing-composition-space-04);--width-control:var(--telekom-spacing-composition-space-07);--height-control:var(--telekom-spacing-composition-space-07);--transition-control:var(--transition);--background-color-control:var(--telekom-color-ui-base);--border-control:var(--telekom-spacing-composition-space-01) solid\n    var(--telekom-color-ui-border-standard);--line-height-helper-text:var(--telekom-typography-line-spacing-standard);--border-control-checked:calc(\n      0.25 * var(--telekom-spacing-composition-space-05)\n    )\n    solid var(--telekom-color-background-canvas);--border-control-checked-disabled:calc(\n      0.5 * var(--telekom-spacing-composition-space-05)\n    )\n    solid var(--telekom-color-ui-border-disabled);--background-control-checked-disabled:none;--border-control-active:var(--telekom-spacing-composition-space-04) solid\n    var(--telekom-color-primary-pressed);--border-control-disabled:0 0 0 var(--telekom-spacing-composition-space-01)\n    var(--telekom-color-ui-border-disabled);--border-control-error:var(--telekom-spacing-composition-space-02) solid\n    var(--telekom-color-functional-danger-standard);--box-shadow-control-focus:0 0 0 var(--telekom-spacing-composition-space-03)\n    var(--color-focus)}.radio-button{position:relative;display:flex;flex-wrap:wrap;align-items:center;width:fit-content}.radio-button .radio-button__meta{width:100%;display:flex;padding-left:var(--spacing-left-helper-text)}.radio-button .radio-button__helper-text{transition:var(--transition-helper-text);font-size:var(--font-size-helper-text);font-weight:var(--font-weight-helper-text);line-height:var(--line-height-helper-text);color:var(--color-helper-text)}scale-icon-alert-information,scale-icon-alert-error{color:var(--color-helper-text);display:flex;justify-content:center;align-items:center;margin-right:var(--telekom-spacing-composition-space-03)}.radio-button--status-error .radio-button__helper-text{color:var(--color-helper-text-error)}.radio-button--status-error scale-icon-alert-error{color:var(--color-helper-text-error)}.radio-button label{color:var(--color-label);transition:var(--transition-label);font-weight:var(--font-weight-label);cursor:pointer;line-height:var(--telekom-typography-line-spacing-standard);padding-left:var(--spacing-label)}.radio-button input{width:var(--width-control);height:var(--height-control);transition:var(--transition-control);border-radius:50%;-webkit-appearance:none;background-color:var(--telekom-color-ui-state-fill-standard);border:var(--border-control);margin:0;cursor:pointer}.radio-button input:not(:checked):not([disabled]):hover{box-shadow:none;border-color:var(--telekom-color-ui-border-hovered);background-color:var(--telekom-color-ui-state-fill-hovered)}.radio-button input:not(:checked):not([disabled]):hover~label{color:var(--color-primary-hover)}.radio-button input:not(:checked):not([disabled]):active{border-color:var(--telekom-color-ui-border-pressed);background-color:var(--telekom-color-ui-state-fill-pressed)}.radio-button input:not(:checked):not([disabled]):active~label{color:var(--color-primary-active)}.radio-button input:disabled{box-shadow:var(--border-control-disabled)}.radio-button input:disabled~label{color:var(--color-disabled)}.radio-button.radio-button--status-error input{border:var(--border-control-error)}.radio-button.radio-button--status-error:hover input:not(:checked):not([disabled]){border-color:var(--telekom-color-functional-danger-hovered)}.radio-button.radio-button--status-error:active input:not(:checked):not([disabled]){border-color:var(--telekom-color-functional-danger-pressed)}.radio-button input:checked{border:var(--border-control-checked);background-color:var(--telekom-color-primary-standard);box-shadow:0 0 0 var(--telekom-spacing-composition-space-01)\n    var(--telekom-color-text-and-icon-primary-standard)}.radio-button input:checked:disabled{background-color:var(--background-disabled);border:var(--border-control-checked);box-shadow:var(--border-control-disabled)}.radio-button input:checked:disabled~label{color:var(--color-disabled);border:var(--border-control-disabled)}.radio-button--disabled,.radio-button--disabled label,.radio-button--disabled .radio-button__label,.radio-button--disabled input,.radio-button--disabled .radio-button__helper-text{cursor:not-allowed;border-color:var(--color-disabled);color:var(--color-disabled);background:var(--telekom-color-ui-state-fill-standard)}.radio-button--disabled scale-icon-alert-information,.radio-button--disabled scale-icon-alert-error{color:var(--color-disabled)}.radio-button input:focus{outline:2px solid var(--color-focus);outline-offset:2px}";

class RadioButton {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleChange = createEvent$1(this, "scale-change", 7);
    this.scaleChangeLegacy = createEvent$1(this, "scaleChange", 7);
    /** (optional) Input name */
    this.name = '';
    /** (optional) Input label */
    this.label = '';
    /** (optional) Input helper text */
    this.helperText = '';
    /** @deprecated - invalid should replace status */
    this.status = '';
    /** (optional) Input status */
    this.invalid = false;
    /** (optional) Input checked */
    this.checked = false;
    /** (optional) Input value */
    this.value = '';
    this.internalId = generateUniqueId();
    this.handleCheckedChange = (event) => {
      if (!this.disabled) {
        this.checked = event.target.checked;
        // I don't think this is ever going to be `false` but well...
        if (this.checked) {
          this.uncheckSiblings();
        }
        emitEvent$1(this, 'scaleChange', {
          value: this.value == null ? this.value : this.value.toString(),
        });
      }
    };
  }
  componentWillLoad() {
    if (this.inputId == null) {
      this.inputId = 'input-' + this.internalId;
    }
  }
  componentDidRender() {
    if (this.status !== '') {
      statusNote({
        tag: 'deprecated',
        message: 'Property "status" is deprecated. Please use the "invalid" property!',
        type: 'warn',
        source: this.hostElement,
      });
    }
  }
  // We manually set `checked` to false on sibling <scale-radio-button> elements,
  // otherwise they stayed `checked` after being clicked once, forever.
  uncheckSiblings() {
    this.getSiblingRadios().forEach((radio) => {
      radio.checked = false;
    });
  }
  getSiblingRadios() {
    return Array.from(document.querySelectorAll(`scale-radio-button[name="${this.name}"]`)).filter((radio) => radio.inputId !== this.inputId);
  }
  renderHelperIcon() {
    if (this.helperText && !this.invalid) {
      return (hAsync("scale-icon-alert-information", { size: 11 }));
    }
    if (this.invalid) {
      return hAsync("scale-icon-alert-error", { size: 11 });
    }
  }
  render() {
    const ariaInvalidAttr = this.status === 'error' || this.invalid ? { 'aria-invalid': 'true' } : {};
    const helperTextId = `helper-message-${this.internalId}`;
    const ariaDescribedByAttr = { 'aria-describedBy': helperTextId };
    return (hAsync(Host$1, null, hAsync("div", { class: this.getCssClassMap() }, hAsync("input", Object.assign({ type: "radio", name: this.name, id: this.inputId, onChange: this.handleCheckedChange, value: this.value, checked: this.checked, disabled: this.disabled }, ariaInvalidAttr, (this.helperText ? ariaDescribedByAttr : {}))), hAsync("label", { htmlFor: this.inputId }, this.label), !!this.helperText && (hAsync("div", { class: "radio-button__meta", id: helperTextId, "aria-live": "polite", "aria-relevant": "additions removals" }, this.renderHelperIcon(), hAsync("div", { class: "radio-button__helper-text" }, this.helperText))))));
  }
  getCssClassMap() {
    return classnames('radio-button', this.checked && `radio-button--checked`, this.disabled && `radio-button--disabled`, this.status && `radio-button--status-${this.status}`, this.invalid && `radio-button--status-error`);
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return radioButtonCss; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-radio-button",
    "$members$": {
      "name": [1],
      "label": [1],
      "helperText": [1, "helper-text"],
      "status": [1],
      "invalid": [4],
      "disabled": [4],
      "checked": [516],
      "value": [1032],
      "inputId": [1, "input-id"],
      "styles": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["checked", "checked"]]
  }; }
}

const radioButtonGroupCss = "/*!@:host*/.sc-scale-radio-button-group-h{--font-weight-label:var(--telekom-typography-font-weight-medium);--font-size-label:var(--telekom-typography-font-size-body);--font-size-helper-text:var(--telekom-typography-font-size-small);--color-helper-text:var(\n    --telekom-color-text-and-icon-functional-informational\n  );--padding-bottom-helper-text:var(--telekom-spacing-composition-space-04);--margin-top-helper-text:var(--telekom-spacing-composition-space-03);--font-size-helper-text:var(--telekom-typography-font-size-small);--font-weight-helper-text:var(--telekom-typography-font-weight-bold);--font-size-error-helper-text:var(--telekom-typography-font-size-small);--color-error-helper-text:var(\n    --telekom-color-text-and-icon-functional-danger\n  );--padding-bottom-error-helper-text:var(\n    --telekom-spacing-composition-space-04\n  );--margin-top-error-helper-text:var(--telekom-spacing-composition-space-03);--font-weight-error-helper-text:var(--telekom-typography-font-weight-medium);--color-error-helper-text-hcm:var(\n    --telekom-color-text-and-icon-white-standard\n  );--line-height-helper-text:var(--telekom-typography-line-spacing-standard);--font-size-title:var(--font-size-label);--font-weight-title:var(--telekom-typography-font-weight-medium);--padding-bottom-title:var(--telekom-spacing-composition-space-03);--margin-left-title:var(--telekom-spacing-composition-space-02);--margin-top-slotted-item:var(--telekom-spacing-composition-space-05);margin-top:var(--margin-top-slotted-item)}/*!@.radio-button-group*/.radio-button-group.sc-scale-radio-button-group{display:inline-flex;flex-direction:column;border:0;margin:0;padding:0}/*!@.radio-button-group__container*/.radio-button-group__container.sc-scale-radio-button-group{display:flex;flex-direction:column}/*!@.radio-button-group__helper-text*/.radio-button-group__helper-text.sc-scale-radio-button-group{color:var(--color-helper-text);font-size:var(--font-size-helper-text);font-weight:var(--font-weight-helper-text);display:flex;align-items:center;line-height:var(--line-height-helper-text)}/*!@.radio-button-group__helper-text--status-error*/.radio-button-group__helper-text--status-error.sc-scale-radio-button-group{color:var(--color-error-helper-text);font-size:var(--font-size-error-helper-text);font-weight:var(--font-weight-error-helper-text)}/*!@.radio-button-group__title*/.radio-button-group__title.sc-scale-radio-button-group{margin:0;padding:0}/*!@.radio-button-group__title-label*/.radio-button-group__title-label.sc-scale-radio-button-group{font-size:var(--font-size-title);line-height:var(--telekom-typography-line-spacing-standard);font-weight:var(--telekom-typography-font-weight-bold)}/*!@::slotted(*)*/.sc-scale-radio-button-group-s>*{margin-top:calc(var(--margin-top-slotted-item))}@media screen and (forced-colors: active), (-ms-high-contrast: active){/*!@.radio-button-group__helper-text--status-error*/.radio-button-group__helper-text--status-error.sc-scale-radio-button-group{color:var(--color-error-helper-text-hcm)}}/*!@.radio-button-group__helper-text scale-icon-alert-success,\n.radio-button-group__helper-text scale-icon-alert-warning,\n.radio-button-group__helper-text scale-icon-alert-information,\n.radio-button-group__helper-text scale-icon-alert-error*/.radio-button-group__helper-text.sc-scale-radio-button-group scale-icon-alert-success.sc-scale-radio-button-group,.radio-button-group__helper-text.sc-scale-radio-button-group scale-icon-alert-warning.sc-scale-radio-button-group,.radio-button-group__helper-text.sc-scale-radio-button-group scale-icon-alert-information.sc-scale-radio-button-group,.radio-button-group__helper-text.sc-scale-radio-button-group scale-icon-alert-error.sc-scale-radio-button-group{margin-right:var(--telekom-spacing-composition-space-03)}";

class RadioButtonGroup {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) Input label */
    this.label = '';
    /** (optional) Input helper text */
    this.helperText = '';
    /** @deprecated - invalid should replace status */
    this.status = '';
    /** (optional) Input status */
    this.invalid = false;
    this.internalId = generateUniqueId();
  }
  componentDidRender() {
    if (this.status !== '') {
      statusNote({
        tag: 'deprecated',
        message: 'Property "status" is deprecated. Please use the "invalid" property!',
        type: 'warn',
        source: this.hostElement,
      });
    }
  }
  renderHelperIcon() {
    if (this.helperText && !this.invalid) {
      return (hAsync("scale-icon-alert-information", { size: 11 }));
    }
    if (this.invalid) {
      return hAsync("scale-icon-alert-error", { size: 11 });
    }
  }
  render() {
    const helperTextId = `helper-message-${this.internalId}`;
    return (hAsync("fieldset", { part: "base", class: "radio-button-group" }, hAsync("legend", { class: "radio-button-group__title" }, hAsync("label", { class: "radio-button-group__title-label", "aria-label": this.label }, this.label), this.helperText ? (hAsync("div", { role: "text", id: helperTextId, class: this.getCssClassMap(), "aria-label": this.helperText }, this.renderHelperIcon(), hAsync("span", null, this.helperText))) : null), hAsync("div", { part: "container", class: "radio-button-group__container" }, hAsync("slot", null))));
  }
  getCssClassMap() {
    return classnames('radio-button-group__helper-text', (this.status === 'error' || this.invalid) &&
      `radio-button-group__helper-text--status-error`);
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return radioButtonGroupCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-radio-button-group",
    "$members$": {
      "label": [1],
      "helperText": [1, "helper-text"],
      "status": [1],
      "invalid": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const ratingStarsCss = "/*!@:host*/.sc-scale-rating-stars-h{--stars-color:var(--telekom-color-text-and-icon-primary-standard);--stars-hover-color:var(--telekom-color-text-and-icon-primary-hovered);--stars-active-color:var(--telekom-color-text-and-icon-primary-pressed);--stars-inactive-color:transparent;--stars-placeholder-color:var(--telekom-color-ui-border-standard);--stars-placeholder-hover-color:var(--telekom-color-ui-border-hovered);--stars-disabled-color:var(--telekom-color-text-and-icon-disabled);--stars-spacing:var(--telekom-spacing-composition-space-02);--stars-transition:color var(--telekom-motion-duration-immediate);--stars-size:24px;--label-font:var(--telekom-text-style-ui);--infotext-font:var(--telekom-text-style-body);--infotext-font-small:var(--telekom-text-style-body);--infotext-color:var(--telekom-color-text-and-icon-additional);--focus-outline:var(--telekom-line-weight-highlight) solid\n    var(--telekom-color-functional-focus-standard)}/*!@[star-size='small'],\n[size='small']*/[star-size='small'].sc-scale-rating-stars,[size='small'].sc-scale-rating-stars{--stars-size:16px}/*!@[part='container']*/[part='container'].sc-scale-rating-stars{display:inline-flex;flex-direction:column;position:relative}/*!@[part='range-slider']*/[part='range-slider'].sc-scale-rating-stars{position:absolute;border:0;margin:0;left:calc(-1 * var(--stars-size));bottom:0;z-index:2;width:calc(100% + var(--stars-size) * 2);opacity:0;height:var(--stars-size)}@media (hover: hover){/*!@[part='range-slider']*/[part='range-slider'].sc-scale-rating-stars{clip:rect(0 0 0 0);clip-path:inset(50%);height:1px;overflow:hidden;white-space:nowrap;width:1px}}/*!@input[type='range']::-webkit-slider-thumb*/input[type='range'].sc-scale-rating-stars::-webkit-slider-thumb{-webkit-appearance:none;border:0;height:var(--stars-size);width:var(--stars-size);border-radius:50%;background:#ffffff;cursor:pointer;margin-left:0px;margin-top:0}/*!@[part='content']*/[part='content'].sc-scale-rating-stars{display:flex;align-items:center}/*!@[part='wrapper']*/[part='wrapper'].sc-scale-rating-stars{display:inline-flex;border-radius:var(--telekom-spacing-composition-space-03);margin-left:calc(-1 * var(--stars-spacing))}/*!@[part='wrapper']:hover [part='star'] [part='selected-star']*/[part='wrapper'].sc-scale-rating-stars:hover [part='star'].sc-scale-rating-stars [part='selected-star'].sc-scale-rating-stars{opacity:1}/*!@[part='star'] > **/[part='star'].sc-scale-rating-stars>*.sc-scale-rating-stars{pointer-events:none}/*!@[part='label']*/[part='label'].sc-scale-rating-stars{font:var(--label-font);margin-bottom:var(--telekom-spacing-composition-space-04);white-space:nowrap}/*!@[part='infotext']*/[part='infotext'].sc-scale-rating-stars{margin-left:var(--telekom-spacing-composition-space-04);display:flex;align-items:center;font:var(--infotext-font);color:var(--infotext-color);white-space:nowrap}/*!@:host([size='small']) [part='infotext']*/[size='small'].sc-scale-rating-stars-h [part='infotext'].sc-scale-rating-stars{font:var(--infotext-font-small)}/*!@[part='star']*/[part='star'].sc-scale-rating-stars{--decimal-width:100%;display:inline-flex;position:relative;color:var(--stars-color);cursor:pointer;padding:0 var(--stars-spacing)}/*!@[part='placeholder-star']*/[part='placeholder-star'].sc-scale-rating-stars{display:inline-flex;color:var(--stars-placeholder-color);transition:var(--stars-transition)}/*!@[part='selected-star']*/[part='selected-star'].sc-scale-rating-stars{color:var(--stars-inactive-color);margin-left:0px;position:relative;transition:var(--stars-transition)}/*!@.icon-clip*/.icon-clip.sc-scale-rating-stars{overflow:hidden;position:absolute;width:var(--decimal-width);height:100%}/*!@[part='star'][data-half]*/[part='star'][data-half].sc-scale-rating-stars{--decimal-width:calc(50% - var(--stars-spacing))}/*!@[part='star'][data-selected]*/[part='star'][data-selected].sc-scale-rating-stars{--stars-placeholder-color:transparent}/*!@[part='star'][data-half]*/[part='star'][data-half].sc-scale-rating-stars{--stars-placeholder-color:currentColor}/*!@[part='star'][data-selected] [part='selected-star']*/[part='star'][data-selected].sc-scale-rating-stars [part='selected-star'].sc-scale-rating-stars{color:var(--stars-color)}@media (hover: hover){/*!@[part='wrapper']:hover*/[part='wrapper'].sc-scale-rating-stars:hover{--stars-color:var(--stars-hover-color);--stars-placeholder-color:transparent}/*!@[part='wrapper']:hover [part='star']*/[part='wrapper'].sc-scale-rating-stars:hover [part='star'].sc-scale-rating-stars{--decimal-width:100%}/*!@[part='wrapper']:hover [part='star'][data-half]*/[part='wrapper'].sc-scale-rating-stars:hover [part='star'][data-half].sc-scale-rating-stars{--stars-placeholder-color:transparent}/*!@[part='wrapper']:hover [part='selected-star']*/[part='wrapper'].sc-scale-rating-stars:hover [part='selected-star'].sc-scale-rating-stars{color:var(--stars-color)}/*!@[part='star']:hover ~ [part='star'] [part='selected-star']*/[part='star'].sc-scale-rating-stars:hover~[part='star'].sc-scale-rating-stars [part='selected-star'].sc-scale-rating-stars{color:var(--stars-inactive-color)}/*!@[part='star']:hover ~ [part='star'] [part='placeholder-star']*/[part='star'].sc-scale-rating-stars:hover~[part='star'].sc-scale-rating-stars [part='placeholder-star'].sc-scale-rating-stars{color:var(--stars-placeholder-hover-color)}}/*!@[part='wrapper']:active*/[part='wrapper'].sc-scale-rating-stars:active{--stars-color:var(--stars-active-color)}/*!@:host(:focus-within) [part='wrapper'],\n[part='wrapper']:focus*/.sc-scale-rating-stars-h:focus-within [part='wrapper'].sc-scale-rating-stars,[part='wrapper'].sc-scale-rating-stars:focus{outline:var(--focus-outline)}/*!@:host(.readonly) [part='wrapper']*/.readonly.sc-scale-rating-stars-h [part='wrapper'].sc-scale-rating-stars{--stars-placeholder-color:var(--stars-disabled-color);pointer-events:none}/*!@:host(.disabled) [part='label'],\n:host(.disabled) [part='infotext']*/.disabled.sc-scale-rating-stars-h [part='label'].sc-scale-rating-stars,.disabled.sc-scale-rating-stars-h [part='infotext'].sc-scale-rating-stars{color:var(--stars-disabled-color)}/*!@:host(.disabled) [part='wrapper']*/.disabled.sc-scale-rating-stars-h [part='wrapper'].sc-scale-rating-stars{--stars-color:var(--stars-disabled-color);--stars-placeholder-color:var(--stars-disabled-color);pointer-events:none}/*!@:host(.hideLabel) [part='label']*/.hideLabel.sc-scale-rating-stars-h [part='label'].sc-scale-rating-stars{visibility:hidden;height:0;margin-bottom:0}@media screen and (forced-colors: active), (-ms-high-contrast: active){/*!@[part='star'] [part='placeholder-star']*/[part='star'].sc-scale-rating-stars [part='placeholder-star'].sc-scale-rating-stars{color:var(--telekom-color-text-and-icon-inverted-standard)}/*!@[part='star'][data-selected] [part='placeholder-star']*/[part='star'][data-selected].sc-scale-rating-stars [part='placeholder-star'].sc-scale-rating-stars{color:var(--stars-inactive-color)}/*!@[part='star']:hover ~ [part='star'] [part='placeholder-star']*/[part='star'].sc-scale-rating-stars:hover~[part='star'].sc-scale-rating-stars [part='placeholder-star'].sc-scale-rating-stars{color:var(--telekom-color-text-and-icon-inverted-standard)}/*!@[part='wrapper']:hover [part='placeholder-star']*/[part='wrapper'].sc-scale-rating-stars:hover [part='placeholder-star'].sc-scale-rating-stars{color:var(--stars-inactive-color)}}";

const sizes = {
  small: 16,
  large: 24,
};
let ratingStarCount = 0;
class RatingStars {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleChange = createEvent$1(this, "scale-change", 7);
    this.scaleChangeLegacy = createEvent$1(this, "scaleChange", 7);
    this.ratingStarId = `scale-rating-star-${ratingStarCount++}`;
    /** @deprecated; size should be used instead of starSize */
    this.starSize = 'large';
    /** size of the stars  */
    this.size = 'large';
    /** @deprecated; The lower limit of the rating */
    this.minRating = 0;
    /** @deprecated; max should be used instead of maxRating */
    this.maxRating = 5;
    /** The upper limit of the rating */
    this.max = 5;
    /** Represents the current value of the rating */
    this.rating = 0;
    /** makes the rating non-interactive (but still accessible)  */
    this.readonly = false;
    /** disables input  */
    this.disabled = false;
    /** a11y text for getting meaningful value. `$rating` and `$max` (deprecated `$maxRating`) are template variables and will be replaces by their corresponding properties.  */
    this.ariaLabelTranslation = '$rating out of $max stars';
    /** (optional) rating label */
    this.label = 'Rating';
    /** (optional) info text */
    this.hideLabel = false;
    this.handleInput = (ev) => {
      const input = ev.composedPath()[0];
      const value = Number(input.value);
      switch (true) {
        case value < this.minRating:
          input.value = this.minRating.toString();
          break;
        case value > this.max:
          input.value = this.max.toString();
          break;
      }
      this.rating = Number(input.value);
      emitEvent$1(this, 'scaleChange', { value: this.rating });
    };
    this.handleStarClick = (ev) => {
      const star = ev.composedPath()[0];
      const starValue = Number(star.dataset.value);
      // set focus on input to make arrow keys work to select stars
      const input = this.host.shadowRoot.querySelector('input');
      input.focus();
      if (starValue === 1 && this.rating === 1 && this.minRating === 0) {
        this.rating = this.minRating;
      }
      else {
        this.rating = starValue;
      }
      emitEvent$1(this, 'scaleChange', { value: this.rating });
    };
  }
  componentWillRender() {
    // make sure the deprecated props overwrite the actual ones if used
    // and show status note deprecated
    if (this.maxRating !== 5) {
      this.max = this.maxRating;
      statusNote({
        tag: 'deprecated',
        message: 'Property "maxRating" is deprecated. Please use the "max" property!',
        type: 'warn',
        source: this.host,
      });
    }
    if (this.minRating !== 0) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "minRating" is deprecated and will be deleted upon the next release',
        type: 'warn',
        source: this.host,
      });
    }
    if (this.starSize !== 'large') {
      this.size = this.starSize;
      statusNote({
        tag: 'deprecated',
        message: 'Property "starSize" is deprecated. Please use the "size" property!',
        type: 'warn',
        source: this.host,
      });
    }
    // deactivate showing half stars while keeping the code
    this.rating = Math.round(this.rating);
  }
  // constructs the aria message for the current rating
  getRatingText() {
    const filledText = this.ariaLabelTranslation
      .replace(/\$rating/g, `${this.rating}`)
      // TODO: remove when `maxRating` is also being removed
      .replace(/\$maxRating/g, `${this.max}`)
      .replace(/\$max/g, `${this.max}`);
    return filledText;
  }
  renderStar(index, selected = false, rating) {
    const size = sizes[this.size];
    const isWholeNumber = rating % 1 === 0;
    const isLastNumber = Math.ceil(rating) === index;
    return (hAsync("div", { part: "star", "data-value": index, "data-selected": selected, "data-half": isLastNumber && !isWholeNumber, onMouseUp: !this.readonly && this.handleStarClick,
      // sets up first star to be the resetter above the input element
      style: { zIndex: index === 1 ? '5' : 'auto' } }, hAsync("scale-icon-action-favorite", { size: size, part: "placeholder-star" }), hAsync("div", { class: "icon-clip" }, hAsync("scale-icon-action-favorite", { size: size, selected: true, part: "selected-star" }))));
  }
  renderRating() {
    const stars = [];
    const roundedRating = Math.ceil(this.rating);
    const max = this.max;
    for (let index = 1; index <= max; index++) {
      const isSelected = roundedRating >= index;
      stars.push(this.renderStar(index, isSelected, this.rating));
    }
    return stars;
  }
  render() {
    return (hAsync(Host$1, { class: {
        hideLabel: this.hideLabel,
        disabled: this.disabled,
        readonly: this.readonly,
      } }, hAsync("div", { part: "container" }, hAsync("label", { id: `${this.ratingStarId}-label`, part: "label", htmlFor: this.ratingStarId }, this.label), hAsync("div", { part: "content" }, hAsync("div", { part: "wrapper", "aria-valuetext": this.getRatingText(), "aria-orientation": "horizontal", "aria-describedby": this.infoText ? `${this.ratingStarId}-infotext` : false }, hAsync("input", { disabled: this.disabled, readonly: this.readonly, part: "range-slider", type: this.readonly ? 'number' : 'range', id: this.ratingStarId, min: 0, max: this.max + 1, value: this.rating, step: "1", "aria-labelledby": `${this.ratingStarId}-label`, "aria-readonly": this.readonly ? 'true' : false, "aria-valuemin": this.minRating, "aria-valuemax": this.max, "aria-valuenow": this.rating, "aria-valuetext": this.getRatingText(), onInput: !this.readonly && this.handleInput }), this.renderRating()), this.infoText && (hAsync("div", { part: "infotext", id: `${this.ratingStarId}-infotext` }, this.infoText))))));
  }
  get host() { return getElement$1(this); }
  static get style() { return ratingStarsCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-rating-stars",
    "$members$": {
      "starSize": [1, "star-size"],
      "size": [1537],
      "minRating": [2, "min-rating"],
      "maxRating": [2, "max-rating"],
      "max": [1538],
      "rating": [1538],
      "readonly": [516],
      "disabled": [516],
      "ariaLabelTranslation": [1, "aria-label-translation"],
      "label": [513],
      "hideLabel": [516, "hide-label"],
      "infoText": [1, "info-text"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["max", "max"], ["rating", "rating"], ["readonly", "readonly"], ["disabled", "disabled"], ["label", "label"], ["hideLabel", "hide-label"]]
  }; }
}

const segmentCss = "/*!@:host*/.sc-scale-segment-h{--background-color-selected:var(--telekom-color-ui-base);--button-radius:6px;--padding-top-bottom:var(--telekom-spacing-composition-space-03);--height:28px;--font:var(--telekom-text-style-caption-bold);--label-disabled:var(--telekom-color-text-and-icon-disabled);--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);--color:var(--telekom-color-text-and-icon-standard);--color-selected:var(--telekom-color-text-and-icon-primary-standard);--font-medium:var(--telekom-text-style-ui-bold);--height-medium:36px;--font-large:var(--telekom-text-style-ui-bold);--height-large:40px;--background-color-hover:var(--telekom-color-ui-state-fill-hovered);--background-color-active:var(--telekom-color-ui-state-fill-pressed);display:flex;align-items:center;justify-content:center;flex:1}/*!@.segment*/.segment.sc-scale-segment{box-sizing:border-box;position:relative;border:0;height:100%;width:100%;border-radius:var(--button-radius);padding-top:var(--padding-top-bottom);padding-bottom:var(--padding-top-bottom);transition:var(--transition);background-color:transparent;padding:0}/*!@.segment--mask*/.segment--mask.sc-scale-segment{box-sizing:border-box;display:flex;align-items:center;justify-content:center;position:relative;height:100%;width:100%;border-radius:var(--button-radius);background-color:transparent;font:var(--font);transition:var(--transition);white-space:nowrap;color:var(--color);line-height:1}/*!@button.segment--small.segment--selected .segment--mask*/button.segment--small.segment--selected.sc-scale-segment .segment--mask.sc-scale-segment{padding-left:var(--telekom-spacing-composition-space-04);padding-right:var(--telekom-spacing-composition-space-05)}/*!@button.segment--icon-only.segment--small .segment--mask*/button.segment--icon-only.segment--small.sc-scale-segment .segment--mask.sc-scale-segment{padding-left:var(--telekom-spacing-composition-space-06);padding-right:var(--telekom-spacing-composition-space-06)}/*!@button.segment--small .segment--mask*/button.segment--small.sc-scale-segment .segment--mask.sc-scale-segment{padding-left:0.625rem;padding-right:0.625rem}/*!@.segment--small*/.segment--small.sc-scale-segment{height:var(--height)}/*!@.segment--medium*/.segment--medium.sc-scale-segment{height:var(--height-medium)}/*!@button.segment--medium.segment--selected .segment--mask*/button.segment--medium.segment--selected.sc-scale-segment .segment--mask.sc-scale-segment{padding-left:var(--telekom-spacing-composition-space-05);padding-right:var(--telekom-spacing-composition-space-06)}/*!@button.segment--medium .segment--mask*/button.segment--medium.sc-scale-segment .segment--mask.sc-scale-segment{font:var(--font-medium);padding-left:0.875rem;padding-right:0.875rem}/*!@.segment--large*/.segment--large.sc-scale-segment{height:var(--height-large)}/*!@button.segment--large.segment--selected .segment--mask*/button.segment--large.segment--selected.sc-scale-segment .segment--mask.sc-scale-segment{padding-left:var(--telekom-spacing-composition-space-06);padding-right:var(--telekom-spacing-composition-space-07)}/*!@button.segment--large .segment--mask*/button.segment--large.sc-scale-segment .segment--mask.sc-scale-segment{font:var(--font-large);padding-left:var(--telekom-spacing-composition-space-06);padding-right:var(--telekom-spacing-composition-space-07)}/*!@.segment--selected*/.segment--selected.sc-scale-segment{background-color:var(--background-color-selected);box-shadow:var(--telekom-shadow-raised-standard)}/*!@.segment--selected .segment--mask*/.segment--selected.sc-scale-segment .segment--mask.sc-scale-segment{color:var(--color-selected)}/*!@.segment--disabled.segment--selected .segment--mask*/.segment--disabled.segment--selected.sc-scale-segment .segment--mask.sc-scale-segment{color:var(--label-disabled)}/*!@.segment--disabled:not(.segment--selected) .segment--mask*/.segment--disabled.sc-scale-segment:not(.segment--selected) .segment--mask.sc-scale-segment{color:var(--label-disabled);background-color:transparent}/*!@.segment--left-sibling-selected*/.segment--left-sibling-selected.sc-scale-segment{border-radius:0 var(--button-radius) var(--button-radius) 0;margin-left:0;clip-path:inset(-2.75rem -2.75rem -2.75rem 0);backface-visibility:hidden;overflow:hidden}/*!@.segment--right-sibling-selected*/.segment--right-sibling-selected.sc-scale-segment{border-radius:var(--button-radius) 0 0 var(--button-radius);clip-path:inset(-2.75rem 0 -2.75rem -2.75rem);margin-right:0;backface-visibility:hidden;overflow:hidden;position:relative}/*!@.segment--left-right-sibling-selected*/.segment--left-right-sibling-selected.sc-scale-segment{clip-path:inset(-2.75rem 0 -2.75rem 0);border-radius:0;margin-left:0;margin-right:0;backface-visibility:hidden}/*!@.segment:not(.segment--disabled):hover .segment--mask*/.segment.sc-scale-segment:not(.segment--disabled):hover .segment--mask.sc-scale-segment{background-color:var(--background-color-hover)}/*!@.segment:not(.segment--disabled):active .segment--mask*/.segment.sc-scale-segment:not(.segment--disabled):active .segment--mask.sc-scale-segment{background-color:var(--background-color-active)}/*!@.segment:focus*/.segment.sc-scale-segment:focus{box-shadow:var(--telekom-shadow-raised-standard);outline:var(--telekom-spacing-composition-space-02) solid\n    var(--telekom-color-functional-focus-standard);outline-offset:var(--telekom-spacing-composition-space-01);z-index:40;position:relative}/*!@.segment:not(.segment--selected):focus*/.segment.sc-scale-segment:not(.segment--selected):focus{outline-offset:0}/*!@.segment--left-right-sibling-selected:focus,\n.segment--right-sibling-selected:focus,\n.segment--left-sibling-selected:focus*/.segment--left-right-sibling-selected.sc-scale-segment:focus,.segment--right-sibling-selected.sc-scale-segment:focus,.segment--left-sibling-selected.sc-scale-segment:focus{clip-path:none}/*!@.segment:not(.segment--icon-only) scale-icon-action-checkmark,\n.segment scale-icon-action-close*/.segment.sc-scale-segment:not(.segment--icon-only) scale-icon-action-checkmark.sc-scale-segment,.segment.sc-scale-segment scale-icon-action-close.sc-scale-segment{margin-right:var(--telekom-spacing-composition-space-03)}/*!@.segment:not(.segment--selected) scale-icon-action-checkmark*/.segment.sc-scale-segment:not(.segment--selected) scale-icon-action-checkmark.sc-scale-segment{visibility:hidden !important}/*!@.segment scale-icon-action-checkmark*/.segment.sc-scale-segment scale-icon-action-checkmark.sc-scale-segment{vertical-align:middle}/*!@.segment--selected:not(.segment--icon-only) .icon-container*/.segment--selected.sc-scale-segment:not(.segment--icon-only) .icon-container.sc-scale-segment{display:none !important}/*!@.segment .success-icon-container*/.segment.sc-scale-segment .success-icon-container.sc-scale-segment{display:none}/*!@.segment--selected .success-icon-container*/.segment--selected.sc-scale-segment .success-icon-container.sc-scale-segment{display:flex;justify-content:center;align-items:center}/*!@.icon-container*/.icon-container.sc-scale-segment{height:100%;display:flex;justify-content:center;align-items:center}/*!@.segment--selected .icon-container*/.segment--selected.sc-scale-segment .icon-container.sc-scale-segment{color:var(--color-selected)}";

let i$4 = 0;
class Segment {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleClick = createEvent$1(this, "scale-click", 7);
    this.scaleClickLegacy = createEvent$1(this, "scaleClick", 7);
    /** (optional) The size of the segment */
    this.size = 'small';
    /** (optional) If `true`, the segment is selected */
    this.selected = false;
    /** (optional) If `true`, the segment is disabled */
    this.disabled = false;
    /** (optional) translation of 'selected */
    this.ariaLangSelected = 'selected';
    /** (optional) translation of 'deselected */
    this.ariaLangDeselected = 'deselected';
    /** a11y text for getting meaningful value. `$buttonNumber` and `$selected` are template variables and will be replaces by their corresponding properties.  */
    this.ariaDescriptionTranslation = '$selected';
    this.handleClick = (event) => {
      if (parseInt(this.selectedIndex, 10) + 1 === this.position) {
        return;
      }
      event.preventDefault();
      this.selected = !this.selected;
      emitEvent$1(this, 'scaleClick', {
        id: this.segmentId,
        selected: this.selected,
      });
    };
  }
  async setFocus() {
    this.focusableElement.focus();
  }
  componentWillLoad() {
    if (this.segmentId == null) {
      this.segmentId = 'segment-' + i$4++;
    }
  }
  componentDidUpdate() {
    this.handleIcon();
  }
  getAriaDescriptionTranslation() {
    const replaceSelected = this.selected
      ? this.ariaLangSelected
      : this.ariaLangDeselected;
    const filledText = this.ariaDescriptionTranslation
      .replace(/\$position/g, `${this.position}`)
      .replace(/\$selected/g, `${replaceSelected}`);
    return filledText;
  }
  handleIcon() {
    Array.from(this.hostElement.childNodes).forEach((child) => {
      if (child.nodeType === 1 &&
        child.nodeName.substr(0, 10) === 'SCALE-ICON') {
        const icon = this.hostElement.querySelector(child.nodeName);
        switch (this.size) {
          case 'small':
            icon.setAttribute('size', '14');
            break;
          case 'medium':
            icon.setAttribute('size', '16');
            break;
          case 'large':
            icon.setAttribute('size', '20');
            break;
        }
        icon.style.display = 'inline-flex';
        icon.style.marginRight = '4px';
        this.hasIcon = true;
      }
      if (child.nodeType === 3 && this.hostElement.childNodes.length === 1) {
        this.textOnly = true;
        const span = document.createElement('span');
        child.parentNode.insertBefore(span, child);
        span.appendChild(child);
      }
      if (child.nodeType === 1 &&
        child.nodeName.substr(0, 10) === 'SCALE-ICON' &&
        this.hostElement.childNodes.length === 1) {
        this.iconOnly = true;
        this.hostElement.setAttribute('icon-only', 'true');
        const icon = this.hostElement.querySelector(child.nodeName);
        icon.style.marginRight = '0px';
        this.selected
          ? icon.setAttribute('selected', '')
          : icon.removeAttribute('selected');
      }
    });
  }
  render() {
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("button", { ref: (el) => (this.focusableElement = el), class: this.getCssClassMap(), id: this.segmentId, onClick: this.handleClick, disabled: this.disabled, type: "button", style: { width: this.width }, "aria-label": this.ariaLabelSegment, "aria-pressed": this.selected, part: this.getBasePartMap(), "aria-description": this.getAriaDescriptionTranslation() }, hAsync("div", { class: "segment--mask" }, !this.iconOnly && (hAsync("div", { class: "success-icon-container" }, hAsync("scale-icon-action-checkmark", { size: this.size === 'small'
        ? 14
        : this.size === 'medium'
          ? 16
          : 20, class: "scale-icon-action-checkmark", "aria-hidden": "true", selected: true }))), hAsync("div", { class: "icon-container" }, hAsync("slot", { name: "segment-icon" })), hAsync("slot", null)))));
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const prefix = mode === 'basePart' ? '' : 'segment--';
    return classnames('segment', this.size && `${prefix}${this.size}`, this.selected && `${prefix}selected`, this.disabled && `${prefix}disabled`, this.adjacentSiblings &&
      `${prefix}${this.adjacentSiblings.replace(/ /g, '-')}-sibling-selected`, this.hasIcon && `${prefix}has-icon`, this.iconOnly && `${prefix}icon-only`);
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return segmentCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-segment",
    "$members$": {
      "size": [1],
      "selected": [1028],
      "disabled": [4],
      "segmentId": [1537, "segment-id"],
      "ariaLabelSegment": [1, "aria-label-segment"],
      "width": [1],
      "styles": [1],
      "adjacentSiblings": [1537, "adjacent-siblings"],
      "ariaLangSelected": [1, "aria-lang-selected"],
      "ariaLangDeselected": [1, "aria-lang-deselected"],
      "ariaDescriptionTranslation": [1, "aria-description-translation"],
      "position": [2],
      "hasIcon": [1028, "has-icon"],
      "textOnly": [1028, "text-only"],
      "iconOnly": [1028, "icon-only"],
      "selectedIndex": [1025, "selected-index"],
      "setFocus": [64]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["segmentId", "segment-id"], ["adjacentSiblings", "adjacent-siblings"]]
  }; }
}

const segmentedButtonCss = "/*!@:host*/.sc-scale-segmented-button-h{--background-color:var(--telekom-color-ui-faint);--radius:var(--telekom-radius-standard);--height:32px;--height-medium:40px;--height-large:44px;display:flex;flex-direction:column}/*!@.segmented-button*/.segmented-button.sc-scale-segmented-button{background-color:var(--background-color);border:0;border-radius:var(--radius);padding:0 var(--telekom-spacing-composition-space-02);width:fit-content;height:var(--height);display:inline-grid}/*!@.segmented-button--full-width*/.segmented-button--full-width.sc-scale-segmented-button{width:100%}/*!@.segmented-button--medium*/.segmented-button--medium.sc-scale-segmented-button{height:var(--height-medium);padding:0 var(--telekom-spacing-composition-space-02)}/*!@.segmented-button--large*/.segmented-button--large.sc-scale-segmented-button{height:var(--height-large);padding:0 var(--telekom-spacing-composition-space-02)}/*!@.segmented-button--label*/.segmented-button--label.sc-scale-segmented-button{font-size:var(--telekom-typography-font-size-body);font-weight:var(--telekom-typography-font-weight-bold);margin-bottom:var(--telekom-spacing-composition-space-04)}/*!@.segmented-button--helper-text*/.segmented-button--helper-text.sc-scale-segmented-button{margin-top:var(--telekom-spacing-composition-space-04)}";

const CHECKMARK_WIDTH_SMALL = 14;
const CHECKMARK_WIDTH_MEDIUM = 18 + 12;
const CHECKMARK_WIDTH_LARGE = 20 + 18;
class SegmentedButton {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleChange = createEvent$1(this, "scale-change", 7);
    this.scaleChangeLegacy = createEvent$1(this, "scaleChange", 7);
    /** segment position within button */
    this.position = 0;
    this.slottedSegments = 0;
    /** state */
    this.status = [];
    /** (optional) The size of the button */
    this.size = 'small';
    /** (optional) Allow more than one button to be selected */
    this.multiSelect = false;
    /** (optional) If `true`, the button is disabled */
    this.disabled = false;
    /** (optional) If `true`, expand to container width */
    this.fullWidth = false;
    /** (optional) If `true`, show error message */
    this.invalid = false;
    /** (optional) If `true`, show error message */
    this.helperText = 'Please select an option';
    /** (optional) aria-label attribute needed for icon-only buttons */
    this.ariaLabelTranslation = `segment button with $slottedSegments`;
    this.showHelperText = false;
    this.getAdjacentSiblings = (tempState, i) => {
      let adjacentSiblings = '';
      if (i !== 0 && tempState[i].selected && tempState[i - 1].selected) {
        adjacentSiblings = 'left';
      }
      if (i !== tempState.length - 1 &&
        tempState[i].selected &&
        tempState[i + 1].selected) {
        adjacentSiblings = `${adjacentSiblings ? adjacentSiblings + ' right' : 'right'}`;
      }
      return adjacentSiblings;
    };
  }
  scaleClickHandler(ev) {
    let tempState;
    if (!this.multiSelect) {
      if (!ev.detail.selected) {
        tempState = this.status.map((obj) => ev.detail.id === obj.id ? ev.detail : Object.assign({}, obj));
        /* clicked button has now selected state */
      }
      else {
        tempState = this.status.map((obj) => ev.detail.id === obj.id ? ev.detail : Object.assign(Object.assign({}, obj), { selected: false }));
      }
    }
    else {
      tempState = this.status.map((obj) => ev.detail.id === obj.id ? ev.detail : Object.assign({}, obj));
    }
    this.setState(tempState);
  }
  handlePropsChange() {
    this.propagatePropsToChildren();
  }
  /**
   * Keep props, needed in children buttons, in sync
   */
  propagatePropsToChildren() {
    this.getAllSegments().forEach((segment) => {
      segment.setAttribute('size', this.size);
      segment.setAttribute('selected-index', this.selectedIndex.toString());
      if (this.disabled) {
        segment.setAttribute('disabled', 'disabled');
      }
    });
  }
  componentDidLoad() {
    const tempState = [];
    const segments = this.getAllSegments();
    this.slottedSegments = segments.length;
    const longestButtonWidth = this.getLongestButtonWidth();
    segments.forEach((segment) => {
      this.position++;
      tempState.push({
        id: segment.getAttribute('segment-id') || segment.segmentId,
        selected: segment.hasAttribute('selected') || segment.selected,
      });
      segment.setAttribute('position', this.position.toString());
      segment.setAttribute('aria-description-translation', '$position $selected');
    });
    if (!this.fullWidth) {
      this.container.style.gridTemplateColumns = `repeat(${this.hostElement.children.length}, ${Math.ceil(longestButtonWidth)}px)`;
    }
    else {
      this.container.style.display = 'flex';
    }
    this.selectedIndex = this.getSelectedIndex();
    this.propagatePropsToChildren();
    this.position = 0;
    this.status = tempState;
    this.setState(tempState);
  }
  componentWillUpdate() {
    this.selectedIndex = this.getSelectedIndex();
    this.showHelperText = false;
    if (this.invalid &&
      this.status.filter((e) => e.selected === true).length <= 0) {
      this.showHelperText = true;
    }
  }
  getSelectedIndex() {
    if (this.multiSelect) {
      // in multi-select having no selected segments is allowed
      return -1;
    }
    else {
      const allSegments = this.getAllSegments();
      const selectedIndex = allSegments.findIndex((el) => el.selected === true);
      return selectedIndex;
    }
  }
  // all segmented buttons should have the same width, based on the largest one
  getLongestButtonWidth() {
    let tempWidth = 0;
    Array.from(this.hostElement.children).forEach((child) => {
      const selected = child.hasAttribute('selected');
      const iconOnly = child.hasAttribute('icon-only');
      const checkmark = this.size === 'small'
        ? CHECKMARK_WIDTH_SMALL
        : this.size === 'medium'
          ? CHECKMARK_WIDTH_MEDIUM
          : CHECKMARK_WIDTH_LARGE;
      if (selected || iconOnly) {
        tempWidth =
          child.getBoundingClientRect().width > tempWidth
            ? child.getBoundingClientRect().width
            : tempWidth;
      }
      else {
        tempWidth =
          child.getBoundingClientRect().width + checkmark > tempWidth
            ? child.getBoundingClientRect().width + checkmark
            : tempWidth;
      }
    });
    return tempWidth;
  }
  setState(tempState) {
    const segments = Array.from(this.hostElement.querySelectorAll('scale-segment'));
    segments.forEach((segment, i) => {
      segment.setAttribute('adjacent-siblings', this.getAdjacentSiblings(tempState, i));
      segment.setAttribute('selected', tempState[i].selected ? 'true' : 'false');
    });
    this.status = tempState;
    emitEvent$1(this, 'scaleChange', this.status);
  }
  getAllSegments() {
    return Array.from(this.hostElement.querySelectorAll('scale-segment'));
  }
  getAriaLabelTranslation() {
    const filledText = this.ariaLabelTranslation.replace(/\$slottedSegments/g, `${this.slottedSegments}`);
    return filledText;
  }
  render() {
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), this.label && (hAsync("span", { class: "segmented-button--label" }, " ", this.label, " ")), hAsync("div", { class: this.getCssClassMap(), part: this.getBasePartMap(), "aria-label": this.getAriaLabelTranslation(), role: "group", ref: (el) => (this.container = el) }, hAsync("slot", null)), this.showHelperText && (hAsync("scale-helper-text", { class: "segmented-button--helper-text", helperText: this.helperText, variant: 'danger' }))));
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const prefix = mode === 'basePart' ? '' : 'segmented-button--';
    return classnames('segmented-button', this.size && `${prefix}${this.size}`, this.fullWidth && `${prefix}full-width`);
  }
  get hostElement() { return getElement$1(this); }
  static get watchers() { return {
    "disabled": ["handlePropsChange"],
    "size": ["handlePropsChange"],
    "selectedIndex": ["handlePropsChange"]
  }; }
  static get style() { return segmentedButtonCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-segmented-button",
    "$members$": {
      "size": [1],
      "multiSelect": [4, "multi-select"],
      "selectedIndex": [2, "selected-index"],
      "disabled": [516],
      "fullWidth": [4, "full-width"],
      "invalid": [4],
      "helperText": [1, "helper-text"],
      "label": [1],
      "styles": [1],
      "ariaLabelTranslation": [1, "aria-label-translation"],
      "longestButtonWidth": [1025, "longest-button-width"],
      "status": [32]
    },
    "$listeners$": [[0, "scaleClick", "scaleClickHandler"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["disabled", "disabled"]]
  }; }
}

const iconCss$13 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ServiceDevicesService {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M6.6 14.25c.864-.364 1.81-.48 2.764-.385l.286.035 4.6.75c.6.1 1.1.4 1.45.9.15.25.3.5.35.8l.644-.112.75-.142 3.179-.634.327-.062c.95-.2 1.85.25 2.3 1.1.25.5.35 1.15.15 1.7a2.176 2.176 0 01-.972 1.16l-.178.09-6.55 3.1c-1.05.5-2.15.75-3.3.75-.48 0-.96-.032-1.44-.122l-.36-.078-3.05-.75a18.17 18.17 0 00-2.372-.367L4.7 21.95.5 21.7v-5l6.1-2.45zM10.85 0h2.35l.3 1.6c.046.418.48.62.823.447L14.4 2l1.35-.9 1.65 1.65-.95 1.35a.617.617 0 00.311.87l.089.03 1.7.35V7.7L16.9 8a.566.566 0 00-.447.823l.847 1.427-1.65 1.65-1.35-.95a.617.617 0 00-.87.311l-.03.089-.3 1.65h-2.35l-.3-1.65a.566.566 0 00-.823-.447l-.077.047-1.35.95-1.65-1.65.95-1.35c.23-.323.078-.774-.261-.92l-.089-.03-1.65-.3V5.3L7.1 5a.566.566 0 00.447-.823L7.5 4.1l-.9-1.35L8.25 1.1l1.35.95a.617.617 0 00.87-.311l.03-.089.35-1.65zM12 4.5c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M6.6 14.25c.864-.364 1.81-.48 2.764-.385l.286.035 4.6.75c.6.1 1.1.4 1.45.9.15.25.3.5.35.8l.644-.112.75-.142 3.179-.634.327-.062c.95-.2 1.85.25 2.3 1.1.25.5.35 1.15.15 1.7a2.176 2.176 0 01-.972 1.16l-.178.09-6.55 3.1c-1.05.5-2.15.75-3.3.75-.48 0-.96-.032-1.44-.122l-.36-.078-3.05-.75a18.17 18.17 0 00-2.372-.367L4.7 21.95.5 21.7v-5l6.1-2.45zm2.8 1.15c-.667-.089-1.373-.06-2.013.16l-.237.09L2 17.7v2.55l2.75.2c.875.042 1.75.153 2.625.333l.525.117 3.05.75a6.468 6.468 0 003.828-.328l.272-.122 6.55-3.1c.35-.15.5-.6.3-.95-.1-.2-.4-.35-.65-.3l-.456.1-.784.163-1.729.343-1.803.354-.543.11-.135.03c-.37.6-.994.987-1.717 1.043L13.9 19H8.55v-1.5h5.35c.35 0 .6-.25.65-.55.092-.32-.11-.684-.453-.78L14 16.15l-4.6-.75zM10.85 0h2.35l.3 1.6c.046.418.48.62.823.447L14.4 2l1.35-.9 1.65 1.65-.95 1.35a.617.617 0 00.311.87l.089.03 1.7.35V7.7L16.9 8a.566.566 0 00-.447.823l.847 1.427-1.65 1.65-1.35-.95a.617.617 0 00-.87.311l-.03.089-.3 1.65h-2.35l-.3-1.65a.566.566 0 00-.823-.447l-.077.047-1.35.95-1.65-1.65.95-1.35c.23-.323.078-.774-.261-.92l-.089-.03-1.65-.3V5.3L7.1 5a.566.566 0 00.447-.823L7.5 4.1l-.9-1.35L8.25 1.1l1.35.95a.617.617 0 00.87-.311l.03-.089.35-1.65zM12 4.5c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$13; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-service-devices-service",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$12 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ServiceMaintanance {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M22.09 6.715l-4.5 2.36-1.285-1-.105-1.64 4.5-2.36c-2.03-2.5-5.43-3.42-8.18-2S8.63 6.68 9.43 9.725L2.325 16.83a3.5 3.5 0 004.95 4.95l6.885-6.89a6.205 6.205 0 004.89-.33c2.755-1.44 3.95-4.745 3.04-7.845z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M22.1 6.7l-4.5 2.35-1.3-1-.1-1.65 4.5-2.35c-1.35-1.7-3.35-2.65-5.35-2.65-.95 0-1.9.2-2.8.7-1.6.85-2.65 2.3-3.1 3.95-.3 1.15-.3 2.45 0 3.7l-7.1 7.1C1 18.2 1 20.45 2.35 21.8s3.6 1.35 4.95 0l6.9-6.9c1.6.55 3.35.5 4.9-.35 2.7-1.45 3.9-4.75 3-7.85zm-3.75 6.55c-2.05 1.1-3.9.15-4.6-.05L6.2 20.7c-.8.8-2.05.8-2.85 0-.8-.8-.8-2.05 0-2.85l7.7-7.7c-.2-.75-.65-1.95-.3-3.5.3-1.4 1.15-2.6 2.4-3.25.65-.35 1.35-.5 2.1-.5.95 0 1.95.3 2.8.85l-3.45 1.8.2 3.3 2.55 2.05 3.45-1.8c0 1.7-.9 3.35-2.45 4.15z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$12; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-service-maintanance",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$11 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ServiceManual {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M21 17.5L15.5 23v-4a1.5 1.5 0 011.355-1.493L17 17.5h4zM21 1v15.5h-4a2.5 2.5 0 00-2.495 2.335L14.5 19v4H6a3 3 0 01-2.995-2.824L3 20V1h18zm-7.228 5.316c-.428 0-.856.098-1.254.306-1.151.602-1.693 1.933-1.427 3.239l.043.186-3.43 3.429A1.567 1.567 0 009.8 15.798l.119-.107 3.331-3.331c.304.104.62.158.937.158.427 0 .855-.1 1.252-.306 1.103-.577 1.638-1.824 1.448-3.075l-.034-.188-2.081 1.088-.785-.623-.063-1.001 2.086-1.09c-.603-.643-1.419-1.007-2.238-1.007z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M9.92 15.691l3.33-3.33a2.78 2.78 0 002.19-.149c1.157-.606 1.69-1.95 1.412-3.262l-2.08 1.087-.785-.623-.064-1 2.081-1.088c-.919-.979-2.328-1.31-3.486-.703-1.206.63-1.744 2.061-1.385 3.423l-3.429 3.43a1.567 1.567 0 002.215 2.215zm9.58 1.31h-3a1.5 1.5 0 00-1.5 1.5v3H6c-.827 0-1.5-.674-1.5-1.5V2.5h15V17zM3 1v19a3 3 0 003 3h10l5-5V1H3z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$11; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-service-manual",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$10 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ServiceOneTimePassword {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M18.248 9.5a6.25 6.25 0 110 12.498 6.25 6.25 0 010-12.499zm0 1.5a4.755 4.755 0 00-4.75 4.749c0 2.619 2.131 4.75 4.75 4.75s4.75-2.131 4.75-4.75-2.131-4.75-4.75-4.75zm-.052.5a.75.75 0 01.742.637l.008.101.04 2.763 2.01-.002a.75.75 0 01.105 1.493l-.102.007-3.49.004-.063-4.243a.75.75 0 01.637-.752l.113-.009zM22.498 4v5.272A7.71 7.71 0 0018.248 8a7.74 7.74 0 00-6.912 4.26l-.116.24H4a3.003 3.003 0 01-2.995-2.825L1 9.5V4h21.498zm-10.25 3a1.25 1.25 0 100 2.5 1.25 1.25 0 000-2.5zM8.75 7a1.25 1.25 0 100 2.5 1.25 1.25 0 000-2.5zm-3.5 0a1.25 1.25 0 100 2.5 1.25 1.25 0 000-2.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M17.235 9.176a5.882 5.882 0 110 11.765 5.882 5.882 0 010-11.765zm-.049 1.883h-.01a.706.706 0 00-.69.62l-.006.096.06 3.993 3.284-.003a.706.706 0 00.095-1.406l-.096-.006-1.893.002-.038-2.6a.706.706 0 00-.706-.696zM21.236 4v4.959a7.27 7.27 0 00-1.412-.722V5.412H2.412v3.764c0 .779.633 1.412 1.412 1.412h7.648a7.294 7.294 0 00-.86 1.412H3.824A2.826 2.826 0 011 9.176V4h20.235zM5 6.824a1.176 1.176 0 110 2.352 1.176 1.176 0 010-2.352zm3.294 0a1.176 1.176 0 110 2.352 1.176 1.176 0 010-2.352zm3.294 0a1.176 1.176 0 110 2.352 1.176 1.176 0 010-2.352z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$10; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-service-one-time-password",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$$ = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ServiceServices {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M18.535 3.09a8.405 8.405 0 00-14.745 7l1.34 6.525a2.715 2.715 0 00.775 5.2l4.04.42a2.155 2.155 0 10.155-1.5l-4.04-.415a1.215 1.215 0 01-.19-2.385l1.655-.34 1.775-.35a1.5 1.5 0 001.2-1.745l-.74-3.72A1.5 1.5 0 008 10.595l-1.5.29-.265-1.295a5.905 5.905 0 1111.565 0l-.265 1.295-1.47-.29A1.5 1.5 0 0014.3 11.77l-.735 3.73a1.5 1.5 0 001.18 1.765l1.76.35 2.12.435 1.63-7.945a8.39 8.39 0 00-1.72-7.015z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M18.15 3.4C16.65 1.55 14.4.5 12 .5 9.6.5 7.4 1.55 5.9 3.4A7.844 7.844 0 004.3 10l1.35 6.45c-1.25.25-2.15 1.4-2.15 2.65 0 1.4 1.05 2.55 2.45 2.7l4.05.4c.25.95 1.05 1.6 2.1 1.6 1.2 0 2.15-.95 2.15-2.15s-.95-2.15-2.15-2.15c-.85 0-1.55.5-1.9 1.2l-4.05-.4c-.6-.05-1.1-.6-1.1-1.2 0-.55.4-1.05.95-1.2l3.4-.7c.8-.15 1.35-.95 1.2-1.75l-.75-3.7a1.52 1.52 0 00-1.75-1.2L6 11l-.25-1.3c-.4-1.9.1-3.85 1.3-5.35C8.3 2.85 10.1 2 12 2c1.9 0 3.75.85 4.95 2.35 1.2 1.5 1.7 3.45 1.3 5.35l-.2 1.3-1.95-.4c-.8-.15-1.6.35-1.75 1.2l-.8 3.7c-.15.8.35 1.6 1.2 1.75l3.4.7 1.6-7.95c.5-2.35-.1-4.75-1.6-6.6z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$$; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-service-services",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$_ = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ServiceSettings {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M20.235 14.5L23 14v-4l-2.765-.5a1 1 0 01-.64-1.555l1.595-2.31-2.825-2.825-2.31 1.595a1 1 0 01-1.555-.64L14 1h-4l-.5 2.76a1 1 0 01-1.555.645L5.635 2.81 2.81 5.635l1.595 2.31a1 1 0 01-.64 1.555L1 10v4l2.76.5a1 1 0 01.645 1.555l-1.595 2.31 2.825 2.825 2.31-1.595a1 1 0 011.555.64L10 23h4l.5-2.765a1 1 0 011.555-.64l2.31 1.595 2.825-2.825-1.595-2.31a1 1 0 01.64-1.555zM12 15a3 3 0 110-6 3 3 0 010 6z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M14 1l.5 2.75a.992.992 0 001.448.71l.102-.06 2.3-1.6 2.85 2.85-1.6 2.3c-.378.567-.087 1.312.537 1.52l.113.03L23 10v4l-2.75.5a.992.992 0 00-.71 1.448l.06.102 1.6 2.3-2.85 2.85-2.3-1.6c-.567-.378-1.312-.087-1.52.537l-.03.113L14 23h-4l-.5-2.75c-.142-.661-.863-1.01-1.448-.71l-.102.06-2.3 1.6-2.85-2.85 1.6-2.3c.378-.567.087-1.312-.537-1.52l-.113-.03L1 14v-4l2.75-.5a.992.992 0 00.71-1.448L4.4 7.95l-1.6-2.3L5.65 2.8l2.3 1.6c.567.378 1.312.087 1.52-.537l.03-.113L10 1h4zm-1.25 1.5h-1.5l-.3 1.5c-.2 1.2-1.25 2.05-2.45 2.05-.438 0-.875-.115-1.246-.345L5.8 4.7 4.75 5.75l.9 1.3c.464.65.584 1.472.318 2.227L5.9 9.45c-.279.743-.902 1.27-1.67 1.462l-.18.038-1.55.3v1.5l1.55.25c.85.15 1.5.7 1.85 1.5a2.426 2.426 0 01-.149 2.247l-.101.153-.9 1.3 1.05 1.05 1.3-.9c.4-.3.9-.45 1.4-.45 1.145 0 2.154.774 2.418 1.889l.332 1.711h1.5l.3-1.55c.2-1.2 1.25-2.05 2.45-2.05.438 0 .875.115 1.246.345L18.2 19.25l1.05-1.05-.9-1.3c-.5-.7-.55-1.6-.25-2.3.279-.743.902-1.27 1.67-1.462l.18-.038 1.55-.3v-1.5l-1.55-.3c-.85-.15-1.5-.7-1.85-1.5a2.426 2.426 0 01.149-2.247l.101-.153.9-1.3-1.05-1.05-1.3.9c-.4.3-.9.45-1.4.45-1.145 0-2.154-.774-2.418-1.889L12.75 2.5zM12 9a3 3 0 110 6 3 3 0 010-6z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$_; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-service-settings",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$Z = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ServiceSupport {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M18.349 13.403c.1-.456.156-.925.156-1.403 0-.481-.057-.95-.157-1.402l2.905-.723c.157.69.247 1.4.247 2.125a9.49 9.49 0 01-.25 2.133l-2.901-.73zm-4.948-7.748a6.482 6.482 0 00-1.395-.155h-.002c-.481 0-.948.057-1.4.157l-.728-2.91A9.474 9.474 0 0112 2.5c.725 0 1.435.09 2.125.247l-.724 2.908zm-3.342 1.74c.112-.048.235-.071.351-.11A4.926 4.926 0 0112.003 7 5.014 5.014 0 0117 12c0 2.75-2.25 5-5 5-.057 0-.11-.015-.167-.017a4.962 4.962 0 01-1.774-.377 5.023 5.023 0 01-1.681-1.185 4.969 4.969 0 011.558-7.96c.043-.02.08-.048.123-.066zM12 21.5c-.731 0-1.44-.091-2.124-.248l.728-2.908c.45.1.916.156 1.396.156h.006c.475 0 .942-.055 1.395-.154l.724 2.906A9.49 9.49 0 0112 21.5zM2.5 12c0-.734.092-1.447.25-2.134l2.913.725c-.1.453-.158.923-.158 1.405 0 .483.056.95.156 1.404l-2.913.725A9.476 9.476 0 012.5 12zm17.278-7.778A10.927 10.927 0 0012 1C5.935 1 1 5.935 1 12c0 6.066 4.935 11 11 11s11-4.934 11-11c0-2.938-1.145-5.7-3.222-7.778z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 1C5.95 1 1 5.95 1 12s4.95 11 11 11 11-4.95 11-11S18.05 1 12 1zm2.4 1.8c3.3.85 5.95 3.5 6.8 6.8l-2.95.5c-.65-2.1-2.3-3.75-4.35-4.35l.5-2.95zm-4.8 0l.5 2.95C8 6.4 6.35 8.05 5.75 10.1L2.8 9.6c.9-3.3 3.5-5.9 6.8-6.8zm0 18.4c-3.3-.85-5.95-3.5-6.8-6.8l2.95-.5c.65 2.1 2.3 3.75 4.35 4.35l-.5 2.95zM7 12c0-2.75 2.25-5 5-5s5 2.25 5 5-2.25 5-5 5-5-2.25-5-5zm7.4 9.2l-.5-2.95c2.1-.65 3.75-2.3 4.35-4.35l2.95.5c-.9 3.3-3.5 5.9-6.8 6.8z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$Z; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-service-support",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$Y = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ServiceVpn {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12.002.98l9.5 2.172v7.998c0 5.588-3.684 10.573-8.997 12.232l-.503.148-.206-.059c-5.372-1.535-9.154-6.447-9.29-12.011l-.004-.31V3.152l9.5-2.171zM15.58 9h-1.026v5h1.01v-3.129h.045L17.405 14h1.018V9H17.42v3.144h-.045L15.579 9zm-3.476 0h-1.856v5h1.01v-1.684h.846c.972 0 1.654-.591 1.654-1.654S13.075 9 12.103 9zM6.391 9h-1.04l1.631 5h1.011l1.631-5h-1.04l-1.077 3.383h-.045L6.392 9zm5.644.935c.382 0 .674.255.674.726 0 .426-.245.675-.58.714l-.094.005h-.778V9.935h.778z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 .98L2.5 3.153v7.998c0 5.691 3.822 10.758 9.294 12.321l.206.059.206-.059c5.472-1.564 9.294-6.63 9.294-12.321V3.152L12 .981zm8 10.17c0 4.953-3.279 9.37-8 10.818-4.721-1.448-8-5.865-8-10.818V4.348l8-1.829 8 1.829v6.802zM7.504 12.383h-.045L6.389 9H5.348l1.631 5H7.99l1.631-5h-1.04l-1.077 3.383zm8.056-1.511h.045L17.402 14h1.018V9h-1.003v3.144h-.045L15.576 9H14.55v5h1.01v-3.129zM10.244 14h1.01v-1.684h.846c.973 0 1.654-.591 1.654-1.654S13.073 9 12.1 9h-1.856v5zm1.01-4.065h.779c.381 0 .673.255.673.726 0 .465-.292.719-.673.719h-.779V9.935z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$Y; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-service-vpn",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const appShellCss = "/*!@:host*/.sc-scale-app-shell-h{--background:var(--telekom-color-background-canvas, #fff);--spacing-x:var(--telekom-spacing-composition-space-08);--min-height:100vh}/*!@.sr-only*/.sr-only.sc-scale-app-shell{position:absolute;left:-10000px;overflow:hidden}/*!@.shell*/.shell.sc-scale-app-shell{display:flex;min-height:var(--min-height);flex-direction:column}/*!@.shell .content*/.shell.sc-scale-app-shell .content.sc-scale-app-shell{box-sizing:border-box;align-self:center;width:100%;background:var(--background);padding-left:var(--spacing-x);padding-right:var(--spacing-x);flex:1}@media (min-width: 1552px){/*!@.shell .content*/.shell.sc-scale-app-shell .content.sc-scale-app-shell{max-width:var(--header-max-width)}}";

class Shell$1 {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.portalName = '';
    this.claimLang = 'de';
    this.mainNavigation = [];
    this.iconNavigation = [];
    this.userNavigation = [];
    this.sectorNavigation = [];
    this.addonNavigation = [];
    this.activeRouteId = '';
    this.activeSectorId = '';
    this.sticky = false;
    this.scrolled = false;
  }
  componentWillLoad() {
    this.hasSlotHeader = !!this.hostElement.querySelector('[slot="header"]');
  }
  render() {
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { part: "base", class: "shell" }, this.hasSlotHeader ? (hAsync("slot", { name: "header" })) : (hAsync("scale-app-header", { logoClick: this.logoClick, logoAriaDescribedBy: this.logoAriaDescribedBy, logoHref: this.logoHref, logoTitle: this.logoTitle, logoHideTitle: this.logoHideTitle, portalName: this.portalName, mainNavigation: this.mainNavigation, iconNavigation: this.iconNavigation, userNavigation: this.userNavigation, sectorNavigation: this.sectorNavigation, addonNavigation: this.addonNavigation, activeRouteId: this.activeRouteId, activeSectorId: this.activeSectorId, claimLang: this.claimLang, sticky: this.sticky, userMenuAriaLabel: this.userMenuAriaLabel })), hAsync("main", { class: "content" }, hAsync("slot", null)), hAsync("slot", { name: "footer" }))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return appShellCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-app-shell",
    "$members$": {
      "portalName": [1, "portal-name"],
      "claimLang": [1, "claim-lang"],
      "logoHref": [1, "logo-href"],
      "logoTitle": [1, "logo-title"],
      "logoHideTitle": [4, "logo-hide-title"],
      "logoClick": [8, "logo-click"],
      "logoAriaDescribedBy": [1, "logo-aria-described-by"],
      "mainNavigation": [8, "main-navigation"],
      "iconNavigation": [8, "icon-navigation"],
      "userNavigation": [8, "user-navigation"],
      "sectorNavigation": [8, "sector-navigation"],
      "addonNavigation": [8, "addon-navigation"],
      "activeRouteId": [1, "active-route-id"],
      "activeSectorId": [1, "active-sector-id"],
      "userMenuAriaLabel": [1, "user-menu-aria-label"],
      "sticky": [4],
      "styles": [1],
      "scrolled": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const telekomAppShellCss = "/*!@:host*/.sc-scale-telekom-app-shell-h{--spacing-x:0;--min-height:100vh}/*!@[part~='base']*/[part~='base'].sc-scale-telekom-app-shell{display:flex;min-height:var(--min-height);flex-direction:column}/*!@[part~='content']*/[part~='content'].sc-scale-telekom-app-shell{box-sizing:border-box;align-self:center;width:100%;padding-left:var(--spacing-x);padding-right:var(--spacing-x);flex:1}";

class Shell {
  constructor(hostRef) {
    registerInstance(this, hostRef);
  }
  render() {
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { part: "base" }, hAsync("slot", { name: "header" }), hAsync("main", { part: "content" }, hAsync("slot", null)), hAsync("slot", { name: "footer" }))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return telekomAppShellCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-telekom-app-shell",
    "$members$": {
      "styles": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const sidebarNavCss = "/*!@:host*/.sc-scale-sidebar-nav-h{--max-width:15rem;--spacing-indent:var(--telekom-spacing-composition-space-08);--spacing-collapsible:var(--telekom-spacing-composition-space-06);--opacity-chevron:0;--left-current-border:0;--color-hover:var(--telekom-color-text-and-icon-primary-hovered);--color-active:var(--telekom-color-text-and-icon-primary-pressed);--focus-outline:var(--telekom-line-weight-highlight) solid\n    var(--telekom-color-functional-focus-standard);--color-toggle-button:var(--telekom-color-ui-regular);--border-y-toggle-button:1px solid var(--telekom-color-ui-faint);--radius-toggle-button:var(--telekom-radius-small)}/*!@.sidebar-nav--collapsible*/.sidebar-nav--collapsible.sc-scale-sidebar-nav{--max-width:none;--spacing-indent:0;--opacity-chevron:1;--left-current-border:calc(-1 * var(--spacing-collapsible));padding-right:var(--spacing-collapsible);padding-left:var(--spacing-collapsible)}/*!@.sidebar-nav__list*/.sidebar-nav__list.sc-scale-sidebar-nav{list-style:none;max-width:var(--max-width);padding-left:0;margin-top:0;margin-bottom:0}/*!@.sidebar-nav__toggle-button*/.sidebar-nav__toggle-button.sc-scale-sidebar-nav{box-sizing:border-box;appearance:none;border:0;background-color:transparent;color:var(--color-toggle-button);width:100%;display:flex;justify-content:space-between;align-items:center;text-align:left;text-decoration:none;font-family:inherit;font-size:1rem;padding-top:1rem;padding-right:calc(0.5 * var(--spacing-indent));padding-bottom:1rem;padding-left:var(--spacing-indent);border-radius:var(--radius-toggle-button);border-bottom:var(--border-y-toggle-button);border-top:var(--border-y-toggle-button);cursor:pointer}/*!@.sidebar-nav__toggle-button:hover*/.sidebar-nav__toggle-button.sc-scale-sidebar-nav:hover{color:var(--color-hover)}/*!@.sidebar-nav__toggle-button:active*/.sidebar-nav__toggle-button.sc-scale-sidebar-nav:active{color:var(--color-active)}/*!@.sidebar-nav__toggle-button:focus*/.sidebar-nav__toggle-button.sc-scale-sidebar-nav:focus{outline:var(--focus-outline)}/*!@[aria-expanded='true'] .sidebar-nav__icon*/[aria-expanded='true'].sc-scale-sidebar-nav .sidebar-nav__icon.sc-scale-sidebar-nav{transform:rotate(0.5turn)}";

class SidebarNav {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** Set to `true` to make the sidebar toggleable (useful for small screens) */
    this.collapsible = false;
    /** Automatically set `collapsible` based on this media query */
    this.collapsibleMediaQuery = '(max-width: 30em)';
    /** Label for toggle button */
    this.collapsibleLabel = 'Menu';
    this.collapsed = true;
    this.handleMediaQueryChange = (event) => {
      this.collapsible = event.matches;
    };
    this.toggle = () => {
      this.collapsed = !this.collapsed;
    };
  }
  componentDidLoad() {
    this.setNestingLevelOnChildren();
    this.setMatchMedia();
  }
  disconnectedCallback() {
    if (this.mq != null) {
      this.mq.removeListener(this.handleMediaQueryChange);
    }
  }
  componentDidRender() {
    if (this.el.hasAttribute('aria-label')) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "ariaLabel" is deprecated. Please use the "ariaLabelSidebarNav" property!',
        type: 'warn',
        source: this.el,
      });
    }
  }
  /**
   * Set `nesting-level` and `condensed` attributes in
   * <scale-sidebar-nav-collapsible> and <scale-sidebar-nav-item> children,
   * so styling different levels "automatically" is possible.
   */
  setNestingLevelOnChildren() {
    function setNestingLevel(el, level = 1) {
      Array.from(el.children).forEach((child) => {
        if (child.tagName.toUpperCase() === 'SCALE-SIDEBAR-NAV-COLLAPSIBLE') {
          setNestingLevel(child, level + 1);
          if (!child.hasAttribute('nesting-level')) {
            child.setAttribute('nesting-level', String(level));
          }
          if (level === 2 && !child.hasAttribute('condensed')) {
            child.setAttribute('condensed', 'true');
          }
        }
        if (child.tagName.toUpperCase() === 'SCALE-SIDEBAR-NAV-ITEM') {
          if (!child.hasAttribute('nesting-level')) {
            child.setAttribute('nesting-level', String(level));
          }
          if (level === 3 && !child.hasAttribute('condensed')) {
            child.setAttribute('condensed', 'true');
          }
        }
      });
    }
    setNestingLevel(this.el);
  }
  setMatchMedia() {
    if (this.collapsibleMediaQuery) {
      this.mq = window.matchMedia(this.collapsibleMediaQuery);
      // Recent versions of Safari throw with `addEventListener`
      // https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/addListener
      this.mq.addListener(this.handleMediaQueryChange);
      this.collapsible = this.mq.matches;
    }
  }
  render() {
    const label = this.ariaLabelSidebarNav
      ? { 'aria-label': this.ariaLabelSidebarNav }
      : {};
    const hidden = this.collapsible ? { hidden: this.collapsed } : {};
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { part: this.getBasePartMap(), class: this.getCssClassMap() }, this.collapsible === true && (hAsync("button", { part: "toggle-button", class: "sidebar-nav__toggle-button", "aria-expanded": this.collapsed ? 'false' : 'true', onClick: this.toggle }, this.collapsibleLabel, hAsync("scale-icon-navigation-collapse-down", { part: "icon", class: "sidebar-nav__icon", size: 20 }))), hAsync("nav", Object.assign({ part: "nav" }, label, hidden), hAsync("ul", { part: "list", class: "sidebar-nav__list", role: "list" }, hAsync("slot", null))))));
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const component = 'sidebar-nav';
    const prefix = mode === 'basePart' ? '' : `${component}--`;
    return classnames(component, this.collapsible && `${prefix}collapsible`);
  }
  get el() { return getElement$1(this); }
  static get style() { return sidebarNavCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-sidebar-nav",
    "$members$": {
      "ariaLabelSidebarNav": [1, "aria-label-sidebar-nav"],
      "collapsible": [1540],
      "collapsibleMediaQuery": [1, "collapsible-media-query"],
      "collapsibleLabel": [1, "collapsible-label"],
      "styles": [1],
      "collapsed": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["collapsible", "collapsible"]]
  }; }
}

const sidebarNavCollapsibleCss = "/*!@:host*/.sc-scale-sidebar-nav-collapsible-h{--opacity-chevron:1;--border-bottom-color:var(--telekom-color-ui-faint);--border-left-color-third-nesting:var(--telekom-color-ui-strong);--color-active:var(--telekom-color-text-and-icon-primary-pressed);--color-hover:var(--telekom-color-text-and-icon-primary-hovered);--color-primary:var(--telekom-color-text-and-icon-primary-standard);--background-color-before-active:var(--color-primary);--font-weight-bold:var(--telekom-typography-font-weight-bold);--box-shadow-focus:inset 0 0 0 var(--telekom-line-weight-highlight)\n    var(--telekom-color-functional-focus-standard)}/*!@.sidebar-nav-collapsible*/.sidebar-nav-collapsible.sc-scale-sidebar-nav-collapsible{margin:0;border-bottom-color:var(--border-bottom-color);border-bottom-style:solid;border-bottom-width:0}/*!@.sidebar-nav-collapsible--condensed*/.sidebar-nav-collapsible--condensed.sc-scale-sidebar-nav-collapsible{border-bottom-width:1px}/*!@.sidebar-nav-collapsible__wrapper*/.sidebar-nav-collapsible__wrapper.sc-scale-sidebar-nav-collapsible{border-bottom-color:var(--border-bottom-color);border-bottom-style:solid;border-bottom-width:1px}/*!@.sidebar-nav-collapsible--condensed .sidebar-nav-collapsible__wrapper*/.sidebar-nav-collapsible--condensed.sc-scale-sidebar-nav-collapsible .sidebar-nav-collapsible__wrapper.sc-scale-sidebar-nav-collapsible{border-bottom-width:0}/*!@.sidebar-nav-collapsible__button*/.sidebar-nav-collapsible__button.sc-scale-sidebar-nav-collapsible{color:currentColor;width:100%;display:flex;box-sizing:border-box;text-align:left;align-items:center;padding-top:1rem;padding-right:calc(0.5 * var(--spacing-indent));padding-bottom:1rem;padding-left:var(--spacing-indent);justify-content:space-between;text-decoration:none;font-family:inherit;border-radius:var(--telekom-radius-small)}/*!@.sidebar-nav-collapsible__button:hover*/.sidebar-nav-collapsible__button.sc-scale-sidebar-nav-collapsible:hover{color:var(--color-hover)}/*!@.sidebar-nav-collapsible__button:active*/.sidebar-nav-collapsible__button.sc-scale-sidebar-nav-collapsible:active{color:var(--color-active)}/*!@.sidebar-nav-collapsible__button:focus*/.sidebar-nav-collapsible__button.sc-scale-sidebar-nav-collapsible:focus{outline:none;box-shadow:var(--box-shadow-focus)}/*!@.sidebar-nav-collapsible--active .sidebar-nav-collapsible__button*/.sidebar-nav-collapsible--active.sc-scale-sidebar-nav-collapsible .sidebar-nav-collapsible__button.sc-scale-sidebar-nav-collapsible{position:relative;color:var(--color-primary)}/*!@.sidebar-nav-collapsible--active .sidebar-nav-collapsible__button::before*/.sidebar-nav-collapsible--active.sc-scale-sidebar-nav-collapsible .sidebar-nav-collapsible__button.sc-scale-sidebar-nav-collapsible::before{content:'';display:block;position:absolute;top:0;left:var(--left-current-border, 0);width:0;height:100%;background-color:var(--color-primary);border-left:2px solid transparent}/*!@.sidebar-nav-collapsible--active:hover\n  .sidebar-nav-collapsible__button::before*/.sidebar-nav-collapsible--active.sc-scale-sidebar-nav-collapsible:hover .sidebar-nav-collapsible__button.sc-scale-sidebar-nav-collapsible::before{background-color:var(--color-hover)}/*!@.sidebar-nav-collapsible--active:active\n  .sidebar-nav-collapsible__button::before*/.sidebar-nav-collapsible--active.sc-scale-sidebar-nav-collapsible:active .sidebar-nav-collapsible__button.sc-scale-sidebar-nav-collapsible::before{background-color:var(--color-active)}/*!@:host([nesting-level='1']) .sidebar-nav-collapsible__button,\n.sidebar-nav-collapsible--bold .sidebar-nav-collapsible__button*/[nesting-level='1'].sc-scale-sidebar-nav-collapsible-h .sidebar-nav-collapsible__button.sc-scale-sidebar-nav-collapsible,.sidebar-nav-collapsible--bold.sc-scale-sidebar-nav-collapsible .sidebar-nav-collapsible__button.sc-scale-sidebar-nav-collapsible{font-weight:var(--font-weight-bold)}/*!@:host([nesting-level='2']) .sidebar-nav-collapsible__button*/[nesting-level='2'].sc-scale-sidebar-nav-collapsible-h .sidebar-nav-collapsible__button.sc-scale-sidebar-nav-collapsible{padding-left:calc(var(--spacing-indent) + 0.75rem)}/*!@.sidebar-nav-collapsible__icon*/.sidebar-nav-collapsible__icon.sc-scale-sidebar-nav-collapsible{transition:opacity 150ms}/*!@[aria-expanded='true'] .sidebar-nav-collapsible__icon*/[aria-expanded='true'].sc-scale-sidebar-nav-collapsible .sidebar-nav-collapsible__icon.sc-scale-sidebar-nav-collapsible{transform:rotate(0.5turn)}@media (hover: hover){/*!@[aria-expanded='false'] .sidebar-nav-collapsible__icon*/[aria-expanded='false'].sc-scale-sidebar-nav-collapsible .sidebar-nav-collapsible__icon.sc-scale-sidebar-nav-collapsible{opacity:var(--opacity-chevron, 1)}/*!@.sidebar-nav-collapsible__button:hover .sidebar-nav-collapsible__icon*/.sidebar-nav-collapsible__button.sc-scale-sidebar-nav-collapsible:hover .sidebar-nav-collapsible__icon.sc-scale-sidebar-nav-collapsible{opacity:1}/*!@.sidebar-nav-collapsible__button:focus .sidebar-nav-collapsible__icon*/.sidebar-nav-collapsible__button.sc-scale-sidebar-nav-collapsible:focus .sidebar-nav-collapsible__icon.sc-scale-sidebar-nav-collapsible{opacity:1}}/*!@.sidebar-nav-collapsible__list*/.sidebar-nav-collapsible__list.sc-scale-sidebar-nav-collapsible{list-style:none;padding-left:0;margin-top:0;margin-bottom:0;border-bottom-width:1px}/*!@.sidebar-nav-collapsible--condensed .sidebar-nav-collapsible__list*/.sidebar-nav-collapsible--condensed.sc-scale-sidebar-nav-collapsible .sidebar-nav-collapsible__list.sc-scale-sidebar-nav-collapsible{margin-top:1em;margin-left:var(--spacing-indent);margin-bottom:2em}";

class SidebarNavCollapsible {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** The parent wrapper */
    this.tag = 'li';
    /** The URL where the link should point to */
    this.href = '#';
    /** Label and icon get the active color */
    this.active = false;
    /** Bold label and icon */
    this.bold = false;
    /** Used normally for third level items */
    this.condensed = false;
    this.handleClick = (event) => {
      event.preventDefault();
      this.expanded = !this.expanded;
    };
    /**
     * Simulate a <button> allowing using the Space key for toggling the menu.
     */
    this.handleKeydown = (event) => {
      if (event.metaKey || event.ctrlKey || event.shiftKey) {
        return;
      }
      if (event.defaultPrevented) {
        return;
      }
      if (event.code === 'Space') {
        this.expanded = !this.expanded;
      }
    };
  }
  nestingLevelChanged(newValue) {
    if (newValue === 1) {
      this.bold = true;
    }
  }
  render() {
    const Tag = this.tag;
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync(Tag, { part: this.getBasePartMap(), class: this.getCssClassMap(), role: "listitem" }, hAsync("div", { class: "sidebar-nav-collapsible__wrapper", part: "wrapper" }, hAsync("a", { href: this.href, class: "sidebar-nav-collapsible__button", onClick: this.handleClick, onKeyDown: this.handleKeydown, role: "button", "aria-expanded": this.expanded ? 'true' : 'false', part: classnames('button', this.active && 'button-active') }, this.label, hAsync("scale-icon-navigation-collapse-down", { class: "sidebar-nav-collapsible__icon", selected: this.bold, size: 20, part: "icon" }))), hAsync("ul", { hidden: !this.expanded, class: "sidebar-nav-collapsible__list", part: "list" }, hAsync("slot", null)))));
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const component = 'sidebar-nav-collapsible';
    const prefix = mode === 'basePart' ? '' : `${component}--`;
    return classnames(component, this.condensed && `${prefix}condensed`, this.active && `${prefix}active`);
  }
  get el() { return getElement$1(this); }
  static get watchers() { return {
    "nestingLevel": ["nestingLevelChanged"]
  }; }
  static get style() { return sidebarNavCollapsibleCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-sidebar-nav-collapsible",
    "$members$": {
      "tag": [1],
      "label": [1],
      "href": [1],
      "expanded": [1540],
      "active": [4],
      "bold": [4],
      "condensed": [4],
      "nestingLevel": [2, "nesting-level"],
      "styles": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["expanded", "expanded"]]
  }; }
}

const sidebarNavItemCss = "/*!@:host*/.sc-scale-sidebar-nav-item-h{--border-bottom-color:var(--telekom-color-ui-faint);--border-left-color-third-nesting:var(--telekom-color-ui-strong);--color-active:var(--telekom-color-text-and-icon-primary-pressed);--color-hover:var(--telekom-color-text-and-icon-primary-hovered);--color-primary:var(--telekom-color-text-and-icon-primary-standard);--background-color-before-active:var(--color-primary);--font-bold:var(--telekom-text-style-ui-bold);--box-shadow-focus:inset 0 0 0 var(--telekom-line-weight-highlight)\n    var(--telekom-color-functional-focus-standard)}/*!@.sidebar-nav-item*/.sidebar-nav-item.sc-scale-sidebar-nav-item{border-bottom-style:solid;border-bottom-width:1px;border-bottom-color:var(--border-bottom-color)}/*!@.sidebar-nav-item--active*/.sidebar-nav-item--active.sc-scale-sidebar-nav-item{position:relative;color:var(--color-primary)}/*!@.sidebar-nav-item--active::before*/.sidebar-nav-item--active.sc-scale-sidebar-nav-item::before{content:'';display:block;position:absolute;top:0;left:var(--left-current-border, 0);width:0;height:100%;background-color:var(--background-color-before-active);border-left:2px solid transparent}/*!@.sidebar-nav-item:hover.sidebar-nav-item--active::before*/.sidebar-nav-item.sc-scale-sidebar-nav-item:hover.sidebar-nav-item--active::before{background-color:var(--color-hover)}/*!@.sidebar-nav-item:active.sidebar-nav-item--active::before*/.sidebar-nav-item.sc-scale-sidebar-nav-item:active.sidebar-nav-item--active::before{background-color:var(--color-active)}/*!@.sidebar-nav-item--condensed.sidebar-nav-item--active::before*/.sidebar-nav-item--condensed.sidebar-nav-item--active.sc-scale-sidebar-nav-item::before{left:-1px}/*!@:host([nesting-level='1']) .sidebar-nav-item,\n.sidebar-nav-item--bold*/[nesting-level='1'].sc-scale-sidebar-nav-item-h .sidebar-nav-item.sc-scale-sidebar-nav-item,.sidebar-nav-item--bold.sc-scale-sidebar-nav-item{font:var(--font-bold)}/*!@:host([nesting-level='3']) .sidebar-nav-item*/[nesting-level='3'].sc-scale-sidebar-nav-item-h .sidebar-nav-item.sc-scale-sidebar-nav-item{border-left-color:var(--border-left-color-third-nesting);border-left-style:solid;border-left-width:0.0625rem}/*!@::slotted(a)*/.sc-scale-sidebar-nav-item-s>a{color:currentColor;display:flex;align-items:center;padding-top:1rem;padding-right:1rem;padding-bottom:1rem;padding-left:var(--spacing-indent);border-radius:var(--telekom-radius-small);text-decoration:none;outline:none;min-height:20px}/*!@:host([nesting-level='2']) ::slotted(a)*/.sc-scale-sidebar-nav-item-h[nesting-level='2'] .sc-scale-sidebar-nav-item-s>a{padding-left:calc(var(--spacing-indent) + 0.75rem)}/*!@::slotted(a:hover)*/.sc-scale-sidebar-nav-item-s>a:hover{color:var(--color-hover)}/*!@::slotted(a:focus)*/.sc-scale-sidebar-nav-item-s>a:focus{box-shadow:var(--box-shadow-focus)}/*!@::slotted(a:active)*/.sc-scale-sidebar-nav-item-s>a:active{color:var(--color-active)}/*!@.sidebar-nav-item--condensed*/.sidebar-nav-item--condensed.sc-scale-sidebar-nav-item{border-bottom-width:0}/*!@.sidebar-nav-item--condensed ::slotted(a)*/.sidebar-nav-item--condensed .sc-scale-sidebar-nav-item-s>a{padding-top:0.5rem;padding-left:0.75rem;padding-right:0.5rem;padding-bottom:0.5rem}";

const SR_ACTIVE_TEXT = ' Zurzeit aktiv';
const isActive = (current) => {
  try {
    return !!JSON.parse(current);
  }
  catch (e) {
    if (typeof current === 'string') {
      return true;
    }
    return !!current;
  }
};
const getScreenReaderText = (current) => {
  let text;
  try {
    text = JSON.parse(current);
  }
  catch (e) {
    text = current;
  }
  return typeof text === 'string' && text.length > 0
    ? ` ${text}`
    : SR_ACTIVE_TEXT;
};
class SidebarNavItem {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** Used normally for third level items, remove the bottom border */
    this.condensed = false;
    /** Bold text */
    this.bold = false;
    /** Text gets the active color */
    this.active = false;
    /**
     * Mark the child link as "current" with `aria-current=page`.
     * Provide the text hint if needed, default is: "Zurzeit aktiv"
     */
    this.current = null;
  }
  nestingLevelChanged(newValue) {
    if (newValue === 1) {
      this.bold = true;
    }
  }
  currentChanged(newValue) {
    this.handleAriaCurrentInSlottedA(newValue);
    this.syncActiveToCurrent(newValue);
  }
  componentDidLoad() {
    this.handleAriaCurrentInSlottedA(this.current);
    if (this.current) {
      this.syncActiveToCurrent(this.current);
    }
  }
  /**
   * If an item is `current`, it should be `active` as well
   */
  syncActiveToCurrent(newValue) {
    this.active = isActive(newValue);
  }
  /**
   * When `current` is set, this will:
   * - set the aria-current=page attribute on the link
   * - append a text-only hint for screen readers
   * so we end up with something like this:
   * <a href="..." aria-current="page">
   *    Example<span style="...visible to SR only..."> Active link</span>
   * </a>
   * @param current this.current
   */
  handleAriaCurrentInSlottedA(current) {
    const a = this.el.querySelector('a');
    if (this.srOnlyElement != null) {
      a.removeChild(this.srOnlyElement);
      this.srOnlyElement = null;
    }
    if (a != null) {
      a.removeAttribute('aria-current');
    }
    if (isActive(current) && a != null) {
      this.srOnlyElement = this.createScreenReaderOnlySpan();
      a.appendChild(this.srOnlyElement);
      a.setAttribute('aria-current', 'page');
    }
  }
  createScreenReaderOnlySpan() {
    const text = getScreenReaderText(this.current);
    const span = document.createElement('span');
    // .sr-only but inline
    Object.assign(span.style, {
      position: 'absolute',
      left: '-10000px',
      overflow: 'hidden',
    });
    span.textContent = text;
    return span;
  }
  render() {
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("li", { part: this.getBasePartMap(), class: this.getCssClassMap(), role: "listitem" }, hAsync("slot", null))));
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const component = 'sidebar-nav-item';
    const prefix = mode === 'basePart' ? '' : `${component}--`;
    return classnames(component, this.bold && `${prefix}bold`, this.condensed && `${prefix}condensed`, this.active && `${prefix}active`);
  }
  get el() { return getElement$1(this); }
  static get watchers() { return {
    "nestingLevel": ["nestingLevelChanged"],
    "current": ["currentChanged"]
  }; }
  static get style() { return sidebarNavItemCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-sidebar-nav-item",
    "$members$": {
      "condensed": [4],
      "bold": [4],
      "active": [1540],
      "current": [8],
      "nestingLevel": [2, "nesting-level"],
      "styles": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["active", "active"]]
  }; }
}

const sliderCss = "/*!@:host*/.sc-scale-slider-h{--width:368px;--height-track:6px;--background-track:var(--telekom-color-ui-faint);--radius-track:var(--telekom-radius-pill);--spacing-track:var(--telekom-spacing-composition-space-07) 0\n    var(--telekom-spacing-composition-space-06);--spacing-x-inner-track:10px;--background-bar:var(--telekom-color-primary-standard);--radius-thumb:var(--telekom-radius-circle);--size-thumb:24px;--border-color-thumb:rgba(0, 0, 0, 0.05);--background-thumb:var(--telekom-color-ui-white);--shadow-thumb:0 0 2px 0 rgba(0, 0, 0, 0.24), 0 2px 4px 0 rgba(0, 0, 0, 0.24),\n    0 4px 12px 0 rgba(0, 0, 0, 0.26);--color-focus:var(--telekom-color-functional-focus-standard);--spacing-x-step-marks:8px;--color-step-mark:var(--telekom-color-text-and-icon-additional);--radius-step-mark:var(--telekom-radius-circle);--size-step-mark:4px;--font-label:var(--telekom-text-style-ui);--font-helper-text:var(--telekom-text-style-small-bold);--color-helper-text:var(--telekom-color-text-and-icon-additional)}/*!@[part~='base']*/[part~='base'].sc-scale-slider{width:var(--width)}/*!@[part='label-wrapper']*/[part='label-wrapper'].sc-scale-slider{display:flex;justify-content:space-between;align-items:flex-start}/*!@[part='label']*/[part='label'].sc-scale-slider{font:var(--font-label)}/*!@[part='value-text']*/[part='value-text'].sc-scale-slider{font:var(--font-label);font-variant-numeric:tabular-nums}/*!@[part='track-wrapper']*/[part='track-wrapper'].sc-scale-slider{display:flex;position:relative;align-items:center}/*!@[part='track']*/[part='track'].sc-scale-slider{position:relative;box-sizing:border-box;display:flex;align-items:center;margin:var(--spacing-track);width:100%;height:var(--height-track);background:var(--background-track);border-radius:var(--radius-track);border:1px solid transparent}/*!@[part='inner-track']*/[part='inner-track'].sc-scale-slider{position:absolute;display:flex;align-items:center;left:var(--spacing-x-inner-track);width:calc(100% - var(--spacing-x-inner-track) * 2);height:100%}/*!@[part='bar']*/[part='bar'].sc-scale-slider{height:100%;position:absolute;z-index:1;border-radius:var(--radius-track);background-color:var(--background-bar);border:1px solid transparent}/*!@[part~='thumb-wrapper']*/[part~='thumb-wrapper'].sc-scale-slider{position:absolute;z-index:3;display:flex;align-items:center;justify-content:center;width:32px;height:32px;margin-left:-16px;background-color:transparent}/*!@[part~='thumb']*/[part~='thumb'].sc-scale-slider{--_border:0 0 0 var(--telekom-spacing-composition-space-01)\n    var(--border-color-thumb);width:var(--size-thumb);height:var(--size-thumb);box-sizing:border-box;border-radius:var(--radius-thumb);background-color:var(--background-thumb);box-shadow:var(--_border), var(--shadow-thumb);border:1px solid transparent}/*!@[part~='thumb']:focus*/[part~='thumb'].sc-scale-slider:focus{outline:var(--telekom-line-weight-highlight) solid var(--color-focus);outline-offset:1px}/*!@[part='step-marks']*/[part='step-marks'].sc-scale-slider{width:100%;position:relative;z-index:2;display:flex;justify-content:space-between;padding:0 var(--spacing-x-step-marks)}/*!@[part='step-mark']*/[part='step-mark'].sc-scale-slider{width:var(--size-step-mark);height:var(--size-step-mark);background:var(--color-step-mark);border-radius:var(--telekom-radius-circle)}@media screen and (forced-colors: active), (-ms-high-contrast: active){/*!@[part='step-mark']*/[part='step-mark'].sc-scale-slider{border:2px solid}}/*!@[part='meta']*/[part='meta'].sc-scale-slider{display:flex;justify-content:space-between}/*!@[part='helper-text']*/[part='helper-text'].sc-scale-slider{font:var(--font-helper-text);color:var(--color-helper-text)}/*!@[part~='disabled'] [part='label-wrapper'],\n[part~='disabled'] [part='helper-text']*/[part~='disabled'].sc-scale-slider [part='label-wrapper'].sc-scale-slider,[part~='disabled'].sc-scale-slider [part='helper-text'].sc-scale-slider{color:var(--telekom-color-text-and-icon-disabled)}/*!@[part~='disabled'] [part='bar']*/[part~='disabled'].sc-scale-slider [part='bar'].sc-scale-slider{background-color:var(--telekom-color-ui-border-disabled)}/*!@[part~='disabled'] [part~='thumb-wrapper']*/[part~='disabled'].sc-scale-slider [part~='thumb-wrapper'].sc-scale-slider{display:none}/*!@[part~='thumb-wrapper']:hover*/[part~='thumb-wrapper'].sc-scale-slider:hover{cursor:grab}/*!@[part~='thumb-wrapper']:active*/[part~='thumb-wrapper'].sc-scale-slider:active{cursor:grabbing}/*!@[part~='disabled'] [part='track-wrapper']*/[part~='disabled'].sc-scale-slider [part='track-wrapper'].sc-scale-slider{cursor:not-allowed}/*!@:host-context([data-platform='ios'])*/[data-platform='ios'].sc-scale-slider-h,[data-platform='ios'] .sc-scale-slider-h{--height-track:4px;--size-thumb:26px;--size-step-mark:2px}/*!@:host([platform='ios'])*/[platform='ios'].sc-scale-slider-h{--height-track:4px;--size-thumb:26px;--size-step-mark:2px}/*!@:host-context([data-platform='android'])*/[data-platform='android'].sc-scale-slider-h,[data-platform='android'] .sc-scale-slider-h{--background-thumb:var(--telekom-color-primary-standard)}/*!@:host([platform='android'])*/[platform='android'].sc-scale-slider-h{--background-thumb:var(--telekom-color-primary-standard)}/*!@:host-context([data-platform='android']) [part~='thumb']*/[data-platform='android'].sc-scale-slider-h [part~='thumb'].sc-scale-slider,[data-platform='android'] .sc-scale-slider-h [part~='thumb'].sc-scale-slider{box-shadow:var(--_border), var(--telekom-shadow-raised-standard)}/*!@:host([platform='android']) [part~='thumb']*/[platform='android'].sc-scale-slider-h [part~='thumb'].sc-scale-slider{box-shadow:var(--_border), var(--telekom-shadow-raised-standard)}";

class Slider {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleChange = createEvent$1(this, "scale-change", 7);
    this.scaleChangeLegacy = createEvent$1(this, "scaleChange", 7);
    this.scaleInput = createEvent$1(this, "scale-input", 7);
    this.scaleInputLegacy = createEvent$1(this, "scaleInput", 7);
    /** (optional) the value of the slider */
    this.value = 0;
    /** (optional) multi-thumb */
    this.range = false;
    /** (optional) when `range` is true, the "from" value */
    this.valueFrom = 0;
    /** (optional) when `range` is true, the "to" value */
    this.valueTo = 0;
    /** t(optional) he minimal value of the slider */
    this.min = 0;
    /** (optional) the maximal value of the slider */
    this.max = 100;
    /** (optional) the step size to increase or decrease when dragging slider */
    this.step = 1;
    /** (optional) show a mark for each step */
    this.showStepMarks = false;
    /** (optional) slider display value */
    this.showValue = true;
    /** (optional) slider value unit */
    this.unit = '';
    /** (optional) unit position */
    this.unitPosition = 'after';
    /** (optional) number of decimal places */
    this.decimals = 0;
    /** (optional) disabled  */
    this.disabled = false;
    /** (optional) Aria label for range slider */
    this.innerAriaValueText = '$from to $to';
    // The actual position in % of the slider thumb
    this.position = 0;
    this.positionFrom = 25;
    this.positionTo = 75;
    // Don't know how to make TypeScript handle `this[offsetKey]`
    // private offsetLeft: number;
    // private offsetLeftFrom: number;
    // private offsetLeftTo: number;
    this.activeRangeThumb = null;
    this.internalId = generateUniqueId();
    this.lastThumbZIndex = 3;
    this.onButtonDown = (event) => {
      if (this.disabled) {
        return;
      }
      this.setActiveRangeThumbFromEvent(event);
      this.onDragStart();
      this.addGlobalListeners(event);
    };
    this.onKeyDown = (event) => {
      let steps = 0;
      this.setActiveRangeThumbFromEvent(event);
      if (['ArrowRight', 'ArrowLeft'].includes(event.key)) {
        steps = event.key === 'ArrowRight' ? this.step : -this.step;
      }
      if (['ArrowUp', 'ArrowDown'].includes(event.key)) {
        steps = event.key === 'ArrowUp' ? this.step * 10 : -this.step * 10;
      }
      const valueKey = this.getKeyFor('value');
      this.setValue(this[valueKey] + steps, valueKey);
      emitEvent$1(this, 'scaleChange', this.range ? [this.valueFrom, this.valueTo] : this.value);
    };
    this.onDragStart = () => {
      const offsetKey = this.getKeyFor('offsetLeft');
      this.dragging = true;
      this[offsetKey] = this.sliderTrack.getBoundingClientRect().left;
    };
    this.onDragging = (event) => {
      if (!this.dragging) {
        return;
      }
      const valueKey = this.getKeyFor('value');
      const offsetLeftKey = this.getKeyFor('offsetLeft');
      const offsetLeft = this[offsetLeftKey];
      const currentX = this.handleTouchEvent(event).clientX;
      const position = ((currentX - offsetLeft) / this.sliderTrack.offsetWidth) * 100;
      const nextValue = (position * (this.max - this.min)) / 100 + this.min;
      // https://stackoverflow.com/q/14627566
      const roundedNextValue = Math.ceil(nextValue / this.step) * this.step;
      this.setValue(roundedNextValue, valueKey);
    };
    this.onDragEnd = () => {
      this.dragging = false;
      emitEvent$1(this, 'scaleChange', this.range ? [this.valueFrom, this.valueTo] : this.value);
      this.removeGlobalListeners();
    };
    this.setValue = (nextValue, valueKey = 'value') => {
      this[valueKey] = this.clamp(nextValue);
      emitEvent$1(this, 'scaleInput', this.range ? [this.valueFrom, this.valueTo] : this.value);
    };
    this.setActiveRangeThumbFromEvent = (event) => {
      if (!this.range) {
        this.activeRangeThumb = null;
        return;
      }
      const part = event.target.part;
      this.activeRangeThumb = part.contains('from') ? 'From' : 'To';
    };
    this.setPosition = (thumb) => {
      const valueKey = this.getKeyFor('value', thumb);
      const positionKey = this.getKeyFor('position', thumb);
      const clampedValue = this.clamp(this[valueKey]);
      // https://stackoverflow.com/a/25835683
      // ((input - min) * 100) / (max - min)
      this[positionKey] =
        ((clampedValue - this.min) * 100) / (this.max - this.min);
    };
    /**
     * Utility function
     * e.g. 'value' -> 'valueFrom' if `activeRangeThumb='From'`
     * @param propName
     * @returns {string} The prop name with the range suffix if needed
     */
    this.getKeyFor = (propName, thumb) => {
      var _a;
      if (this.range) {
        return `${propName}${(_a = this.activeRangeThumb) !== null && _a !== void 0 ? _a : thumb}`;
      }
      return propName;
    };
    this.getTextValue = () => {
      var _a, _b, _c, _d;
      if (this.range) {
        const from = (_a = this.valueFrom) === null || _a === void 0 ? void 0 : _a.toFixed(this.decimals);
        const to = (_b = this.valueTo) === null || _b === void 0 ? void 0 : _b.toFixed(this.decimals);
        return this.unitPosition === 'before'
          ? `${this.unit}${from} - ${this.unit}${to}`
          : `${from}${this.unit} - ${to}${this.unit}`;
      }
      return this.unitPosition === 'before'
        ? `${this.unit}${(_c = this.value) === null || _c === void 0 ? void 0 : _c.toFixed(this.decimals)}`
        : `${(_d = this.value) === null || _d === void 0 ? void 0 : _d.toFixed(this.decimals)}${this.unit}`;
    };
    this.getNumberOfSteps = () => {
      const n = (this.max - this.min) / this.step + 1;
      return [...Array(n).keys()];
    };
    this.clamp = (val) => {
      let min = this.min;
      let max = this.max;
      // Take into account the other thumb, when `range=true`
      if (this.range) {
        if (this.activeRangeThumb === 'From') {
          max = Math.min(this.valueTo, this.max);
        }
        else if (this.activeRangeThumb === 'To') {
          min = Math.max(this.valueFrom, this.min);
        }
      }
      // Regular generic clamp
      return Math.min(Math.max(val, min), max);
    };
    this.onDragging = this.onDragging.bind(this);
    this.onDragEnd = this.onDragEnd.bind(this);
  }
  handleValueChange() {
    this.setPosition();
  }
  componentWillLoad() {
    if (this.sliderId == null) {
      this.sliderId = 'slider-' + this.internalId;
    }
    // Set initial position
    if (this.range) {
      this.setPosition('From');
      this.setPosition('To');
    }
    else {
      this.setPosition();
    }
  }
  disconnectedCallback() {
    this.removeGlobalListeners();
  }
  componentDidLoad() {
    if (this.customColor !== undefined) {
      statusNote({
        tag: 'deprecated',
        message: `Property "customColor" is deprecated. 
          Please use css variable "--background-bar" to set the slider-bar color;
          e.g. <scale-slider value="20" style="--background-bar: green"></scale-slider>`,
        type: 'warn',
        source: this.hostElement,
      });
    }
    if (this.thumbLarge !== undefined) {
      statusNote({
        tag: 'deprecated',
        message: `Property "thumbLarge" is deprecated.`,
        type: 'warn',
        source: this.hostElement,
      });
    }
    if (this.trackSmall !== undefined) {
      statusNote({
        tag: 'deprecated',
        message: `Property "trackSmall" is deprecated.`,
        type: 'warn',
        source: this.hostElement,
      });
    }
  }
  handleTouchEvent(event) {
    return event.type.indexOf('touch') === 0 ? event.touches[0] : event;
  }
  addGlobalListeners(e) {
    this.lastThumbZIndex = this.lastThumbZIndex + 1;
    e.target.parentNode.style.zIndex = this.lastThumbZIndex.toString();
    window.addEventListener('mousemove', this.onDragging);
    window.addEventListener('mouseup', this.onDragEnd);
    window.addEventListener('touchmove', this.onDragging);
    window.addEventListener('touchend', this.onDragEnd);
  }
  removeGlobalListeners() {
    window.removeEventListener('mousemove', this.onDragging);
    window.removeEventListener('mouseup', this.onDragEnd);
    window.removeEventListener('touchmove', this.onDragging);
    window.removeEventListener('touchend', this.onDragEnd);
  }
  getRangeAriaValueText() {
    const filledText = this.innerAriaValueText
      .replace(/\$from/g, `${this.valueFrom}`)
      .replace(/\$to/g, `${this.valueTo}`);
    return filledText;
  }
  render() {
    const helperTextId = `helper-message-${this.internalId}`;
    const ariaDescribedByAttr = { 'aria-describedBy': helperTextId };
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { part: classnames('base', this.disabled && 'disabled') }, hAsync("div", { part: "label-wrapper" }, !!this.label && (hAsync("label", { part: "label", id: `${this.sliderId}-label`, htmlFor: this.sliderId }, this.label)), this.showValue && (hAsync("div", { part: "value-text" }, this.getTextValue()))), hAsync("div", { part: "track-wrapper" }, hAsync("div", { part: "track", ref: (el) => (this.sliderTrack = el) }, hAsync("div", { part: "bar", style: {
        left: (this.range ? this.positionFrom : 0) + '%',
        width: `${this.range
          ? this.positionTo - this.positionFrom
          : this.position}%`,
      } }), this.showStepMarks && (hAsync("div", { part: "step-marks" }, this.getNumberOfSteps().map(() => (hAsync("span", { part: "step-mark" }))))), hAsync("div", { part: "inner-track" }, this.range ? (hAsync(Fragment, null, hAsync("div", { part: "thumb-wrapper from", style: { left: `${this.positionFrom}%` }, onMouseDown: this.onButtonDown, onTouchStart: this.onButtonDown }, hAsync("div", Object.assign({ part: "thumb from", tabindex: "0", role: "slider", id: this.sliderId + '-from', "aria-valuemin": this.min, "aria-valuenow": `${this.valueFrom} to ${this.valueTo}`, "aria-valuemax": this.max, "aria-valuetext": `${this.valueFrom} to ${this.valueTo}`, "aria-labelledby": `${this.sliderId}-label`, "aria-orientation": "horizontal", "aria-disabled": this.disabled }, (this.helperText ? ariaDescribedByAttr : {}), { onKeyDown: this.onKeyDown }))), hAsync("div", { part: "thumb-wrapper to", style: { left: `${this.positionTo}%` }, onMouseDown: this.onButtonDown, onTouchStart: this.onButtonDown }, hAsync("div", Object.assign({ part: "thumb to", tabindex: "0", role: "slider", id: this.sliderId + '-to', "aria-valuemin": this.min, "aria-valuenow": this.value, "aria-valuemax": this.max, "aria-valuetext": this.getRangeAriaValueText(), "aria-labelledby": `${this.sliderId}-label`, "aria-orientation": "horizontal", "aria-disabled": this.disabled }, (this.helperText ? ariaDescribedByAttr : {}), { onKeyDown: this.onKeyDown }))))) : (hAsync("div", { part: "thumb-wrapper", style: { left: `${this.position}%` }, onMouseDown: this.onButtonDown, onTouchStart: this.onButtonDown }, hAsync("div", Object.assign({ part: "thumb", tabindex: "0", role: "slider", id: this.sliderId, "aria-valuemin": this.min, "aria-valuenow": this.value, "aria-valuemax": this.max, "aria-valuetext": `${this.value}`, "aria-labelledby": `${this.sliderId}-label`, "aria-orientation": "horizontal", "aria-disabled": this.disabled }, (this.helperText ? ariaDescribedByAttr : {}), { onKeyDown: this.onKeyDown }))))))), hAsync("input", { type: "hidden", value: this.getTextValue(), name: this.name }), this.helperText && (hAsync("div", { part: "meta", id: helperTextId, "aria-live": "polite", "aria-relevant": "additions removals" }, hAsync("div", { part: "helper-text" }, this.helperText))))));
  }
  get hostElement() { return getElement$1(this); }
  static get watchers() { return {
    "value": ["handleValueChange"],
    "valueFrom": ["handleValueChange"],
    "valueTo": ["handleValueChange"]
  }; }
  static get style() { return sliderCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-slider",
    "$members$": {
      "name": [1],
      "value": [1538],
      "range": [4],
      "valueFrom": [1538, "value-from"],
      "valueTo": [1538, "value-to"],
      "min": [2],
      "max": [2],
      "step": [2],
      "showStepMarks": [4, "show-step-marks"],
      "label": [1],
      "helperText": [1, "helper-text"],
      "showValue": [4, "show-value"],
      "unit": [1],
      "unitPosition": [1, "unit-position"],
      "decimals": [2],
      "platform": [513],
      "customColor": [1, "custom-color"],
      "disabled": [4],
      "trackSmall": [4, "track-small"],
      "thumbLarge": [4, "thumb-large"],
      "sliderId": [1025, "slider-id"],
      "innerAriaValueText": [1, "inner-aria-value-text"],
      "styles": [1],
      "position": [32],
      "positionFrom": [32],
      "positionTo": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["value", "value"], ["valueFrom", "value-from"], ["valueTo", "value-to"], ["platform", "platform"]]
  }; }
}

class SsrSlotFix {
  constructor(hostRef) {
    registerInstance(this, hostRef);
  }
  render() {
    return (hAsync(Host$1, null, hAsync("slot", null)));
  }
  static get cmpMeta() { return {
    "$flags$": 4,
    "$tagName$": "scale-ssr-slot-fix",
    "$members$": undefined,
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const switchCss = "scale-switch{--width:42px;--height:24px;--offset:2px;--radius:1em;--transition-duration:var(--telekom-motion-duration-immediate);--transition-easing:var(--telekom-motion-easing-standard);--shadow-thumb:0 0 2px 0 rgba(0, 0, 0, 0.24), 0 2px 4px 0 rgba(0, 0, 0, 0.24),\n    0 4px 12px 0 rgba(0, 0, 0, 0.26);--spacing-x-label:var(--telekom-spacing-composition-space-04);--font-label:var(--telekom-text-style-ui);--font-io-text:var(--telekom-text-style-small-bold);--color-label:var(--telekom-color-text-and-icon-standard)}.switch{--_background:var(--telekom-color-ui-faint);--_color-thumb:var(--telekom-color-ui-white, #fff);--_overlay-background:transparent;display:inline-block;position:relative}.switch__control{position:absolute;margin:0;top:0;width:var(--width);height:var(--height);opacity:0}.switch__wrapper{display:flex;align-items:center;cursor:pointer}.switch__toggle{position:relative;width:var(--width);height:var(--height);background:var(--_background);border-radius:var(--radius);transition-property:background;transition-duration:var(--transition-duration);transition-timing-function:var(--transition-easing)}.switch__toggle--overlay{position:absolute;width:var(--width);height:var(--height);border-radius:var(--radius);background:var(--_overlay-background)}[data-platform='android'] .switch__toggle--overlay{display:none}.switch:hover{--_overlay-background:var(--telekom-color-ui-state-fill-hovered)}.switch:active{--_overlay-background:var(--telekom-color-ui-state-fill-pressed)}.switch--checked{--_background:var(--telekom-color-primary-standard)}[data-platform='android'] .switch.switch--checked{--_background:var(--telekom-color-primary-standard);--_color-thumb:var(--telekom-color-ui-white)}[data-platform='android'] .switch{--_color-thumb:var(--telekom-color-ui-strong)}[data-platform='android'] .switch:hover{--_background:var(--telekom-color-ui-faint)}[data-platform='android'] .switch:active{--_background:var(--telekom-color-ui-faint)}[data-platform='android'] .switch:hover{--_color-thumb:var(--telekom-color-ui-extra-strong)}[data-platform='android'] .switch:active{--_color-thumb:var(--telekom-color-ui-extra-strong)}[data-platform='android'] .switch--checked:active,[data-platform='android'] .switch--checked:hover{--_color-thumb:var(--telekom-color-ui-white)}[data-platform='android'] .switch--checked:hover,.switch--checked:hover{--_background:var(--telekom-color-primary-hovered)}[data-platform='android'] .switch--checked:active,.switch--checked:active{--_background:var(--telekom-color-primary-pressed)}[data-platform='android'] .switch--disabled{--_background:var(--telekom-color-ui-faint);--_color-thumb:var(--telekom-color-ui-border-disabled)}[data-platform='android'] .switch--disabled:hover{--_color-thumb:var(--telekom-color-ui-border-disabled);--_background:var(--telekom-color-ui-faint)}[data-platform='android'] .switch--checked.switch--disabled:hover{--_background:var(--telekom-color-ui-border-disabled);--_color-thumb:var(--telekom-color-ui-faint)}.switch--disabled,.switch--disabled:hover,.switch--disabled:active{--_background:var(--telekom-color-ui-disabled);--_color-thumb:var(--telekom-color-ui-faint);--_overlay-background:transparent}.switch--checked .switch--disabled,.switch--checked .switch--disabled:hover,.switch--checked .switch--disabled:active{--_background:var(--telekom-color-ui-faint);--_color-thumb:var(--telekom-color-ui-disabled);box-shadow:var(--telekom-shadow-raised-standard);--_overlay-background:transparent}[data-platform='android'] .switch--disabled.switch--checked{--_background:var(--telekom-color-ui-border-disabled);--_color-thumb:var(--telekom-color-ui-faint)}.switch--disabled .switch__wrapper{cursor:not-allowed}.switch--disabled .switch__thumb{box-shadow:var(--telekom-shadow-raised-standard)}.switch--size-large{--width:56px;--height:32px}.switch--focus-visible-not-supported :focus~.switch__toggle,:focus-visible~.switch__toggle{outline:var(--telekom-spacing-composition-space-02) solid\n    var(--telekom-color-functional-focus-standard);outline-offset:var(--telekom-spacing-composition-space-01)}.switch__thumb{--_size:calc(var(--height) - var(--offset) * 2);position:relative;z-index:2;box-sizing:border-box;width:var(--_size);height:var(--_size);aspect-ratio:1 / 1;background:var(--_color-thumb);border-radius:50%;box-shadow:var(--shadow-thumb);margin:var(--offset);transition-property:margin, width, height, background, color;transition-duration:var(--transition-duration);transition-timing-function:var(--transition-easing);color:transparent;border:1px solid rgba(0, 0, 0, 0.04);display:inline-block}.switch--checked .switch__thumb{margin-left:1em;margin-inline-start:calc(var(--width) - var(--height) + var(--offset))}.switch__io-text{position:absolute;z-index:1;top:0;left:0;display:flex;justify-content:center;align-items:center;width:50%;height:var(--height);margin-left:calc(50% - var(--offset));font:var(--font-io-text);line-height:var(--telekom-typography-line-spacing-none)}.switch--size-large .switch__io-text{margin-top:1px;font:var(--telekom-text-style-caption-bold)}.switch--checked .switch__io-text{margin-left:var(--offset);color:var(--telekom-color-text-and-icon-white-standard)}.switch--disabled .switch__io-text{color:var(--telekom-color-text-and-icon-disabled)}.switch__label-text{font:var(--font-label);margin-inline-start:var(--spacing-x-label);color:var(--color-label)}[data-platform='android'] scale-switch{--width:56px;--height:32px;--offset:7px}[data-platform='android'] .switch__thumb{width:18px;height:18px}[data-platform='android'] scale-switch:not([disabled]):active .switch__thumb{width:28px;height:28px;--offset:2px}[data-platform='android'] .switch--checked .switch__thumb{width:24px;height:24px;--offset:4px}[data-platform='android'] .switch__thumb{display:flex;justify-content:center;align-items:center;box-shadow:none}scale-switch scale-icon-action-success{display:none !important}[data-platform='android'] .switch--checked scale-icon-action-success{position:absolute;display:inline-block !important;margin-top:2px;margin-left:1px}[data-platform='android'] .switch--checked .switch__thumb{color:var(--_background)}[data-platform='android'] .switch__io-text{display:none}[data-platform='android'] .switch--checked .switch__thumb{color:var(--telekom-color-primary-standard)}[data-platform='android'] .switch--disabled .switch__thumb{color:var(--telekom-color-ui-strong)}@media screen and (forced-colors: active), (-ms-high-contrast: active){.switch__toggle{border:1px solid}scale-icon-action-checkmark{visibility:hidden !important}}";

let i$3 = 0;
// For chrome that applies :focus upon click, and :focus-visible isn't widely supported
const isFocusVisibleSupported = isPseudoClassSupported(':focus-visible');
class Switch {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleChange = createEvent$1(this, "scale-change", 7);
    this.scaleChangeLegacy = createEvent$1(this, "scaleChange", 7);
    /** (optional) Active switch */
    this.checked = false;
    /** (optional) Disabled switch */
    this.disabled = false;
    this.size = 'large';
  }
  componentWillLoad() {
    if (this.inputId == null) {
      this.inputId = 'switch-' + i$3++;
    }
  }
  render() {
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { class: this.getCssClassMap() }, hAsync("label", { id: `${this.inputId}-label`, class: "switch__wrapper" }, hAsync("input", { type: "checkbox", name: this.name, class: "switch__control", checked: this.checked, disabled: this.disabled, "aria-labelledby": `${this.inputId}-label`, id: this.inputId, onChange: (event) => {
        this.checked = event.target.checked;
        emitEvent$1(this, 'scaleChange', { value: this.checked });
      } }), hAsync("span", { class: "switch__toggle", "aria-hidden": "true" }, hAsync("span", { class: "switch__thumb" }, hAsync("scale-icon-action-checkmark", { size: 12, decorative: true, selected: true })), hAsync("span", { class: "switch__io-text" }, hAsync("span", null, this.checked ? 'I' : '0'))), hAsync("span", { class: "switch__toggle--overlay", "aria-hidden": "true" }), this.label && hAsync("span", { class: "switch__label-text" }, this.label)))));
  }
  getCssClassMap() {
    return classnames('switch', this.checked && 'switch--checked', this.disabled && 'switch--disabled', this.size && `switch--size-${this.size}`, isFocusVisibleSupported && 'switch--focus-visible-supported', !isFocusVisibleSupported && 'switch--focus-visible-not-supported');
  }
  static get style() { return switchCss; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-switch",
    "$members$": {
      "checked": [1540],
      "disabled": [4],
      "name": [1],
      "inputId": [1025, "input-id"],
      "label": [1],
      "styles": [1],
      "size": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["checked", "checked"]]
  }; }
}

const iconCss$X = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class TProduct2FaTelekomApp {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M15.115 7.5v2.556h-.447v-.075c0-1.203-.671-1.955-1.94-1.955h-.074v5.414c0 .751.298 1.052 1.044 1.052h.224v.527h-3.879v-.527h.224c.746 0 1.044-.3 1.044-1.052V8.026h-.074c-1.268 0-1.94.752-1.94 1.955v.075H8.85V7.5h6.265zm0 3.342v1.67h-1.67v-1.67h1.67zm-4.594 0v1.67H8.85v-1.67h1.67zM12.002 21a1.25 1.25 0 110-2.5 1.25 1.25 0 010 2.5zm-2-17.5h4V2h-4v1.5zm6-3h-8a3 3 0 00-3 3v17a3 3 0 003 3h8a3 3 0 003-3v-17a3 3 0 00-3-3z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 18.5a1.25 1.25 0 110 2.5 1.25 1.25 0 010-2.5zm3.115-11v2.556h-.447v-.075c0-1.146-.609-1.882-1.762-1.95l-.177-.005h-.075v5.414c0 .705.262 1.013.91 1.049l.134.003h.224v.527h-3.879v-.527h.224c.7 0 1.005-.264 1.04-.917l.004-.135V8.026h-.074c-1.208 0-1.874.682-1.935 1.786l-.004.17v.074H8.85V7.5h6.265zm0 3.342v1.67h-1.67v-1.67h1.67zm-4.594 0v1.67H8.85v-1.67h1.67zM17.5 20.5c0 .827-.674 1.5-1.5 1.5H8c-.827 0-1.5-.673-1.5-1.5v-17C6.5 2.673 7.172 2 8 2h2v1.5h4V2h2c.826 0 1.5.673 1.5 1.5v17zM16 .5H8a3 3 0 00-3 3v17a3 3 0 003 3h8a3 3 0 003-3v-17a3 3 0 00-3-3z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$X; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-t-product-2fa-telekom-app",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$W = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class TProductMagentaCloud {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M13.5 3.7c1.9 0 3.6.65 4.95 1.8 1 .85 1.8 1.95 2.25 3.25 1.85.95 3.05 2.95 3.05 5.05 0 3.15-2.6 5.75-5.75 5.75-.5 0-1-.05-1.5-.2a8.77 8.77 0 01-3.75 1.538V15h3.3L12 10l-4.05 5h3.3v6a8.962 8.962 0 01-5.6-2c-1.15.1-2.35-.25-3.35-1-1.25-.95-2.05-2.4-2.05-4.1 0-1.9 1.05-3.6 2.7-4.5C3.2 7.05 5.2 5.25 7.6 5.25c.35 0 .75.05 1.1.15 1.35-1.1 3.05-1.7 4.8-1.7z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("defs", null, hAsync("path", { d: "M20.7 8.75c-.45-1.3-1.25-2.4-2.25-3.25-1.35-1.15-3.05-1.8-4.95-1.8-1.75 0-3.45.6-4.8 1.7-.35-.1-.75-.15-1.1-.15-2.4 0-4.4 1.8-4.65 4.15-1.65.9-2.7 2.6-2.7 4.5 0 1.7.8 3.15 2.05 4.1 1 .75 2.2 1.1 3.35 1 1.6 1.3 3.6 2 5.65 2 1.9 0 3.65-.55 5.2-1.65.5.15 1 .2 1.5.2 3.15 0 5.75-2.6 5.75-5.75 0-2.1-1.2-4.1-3.05-5.05zm-2.7 9.3c-.9 0-1.55-.3-1.8-.4-.3.2-1.3 1.25-3.45 1.7V15h3.3L12 10l-4.05 5h3.3v4.5c-.85 0-1.65-.15-2.45-.45a7.49 7.49 0 01-2.65-1.65c-.6.05-1.95.3-3.25-.9-.7-.65-1.2-1.6-1.2-2.65 0-2.75 2.6-3.5 2.65-3.55.05-.2-.2-1.65 1.1-2.8C6.4 6.7 7.7 6.45 9 7c1.55-1.55 3.35-1.9 4.45-1.9 1.5 0 2.85.5 3.95 1.4 1.5 1.25 1.9 2.85 2 3.2 0 0 2.8 1 2.8 4 .05 2.45-1.85 4.35-4.2 4.35z", id: "a" })), hAsync("use", { xlinkHref: "#a", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$W; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-t-product-magenta-cloud",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$V = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class TProductMagentaTv {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M22.825 10.75L18.5 3.25A2.5 2.5 0 0016.33 2H7.67A2.5 2.5 0 005.5 3.25l-4.33 7.5a2.5 2.5 0 000 2.5l4.33 7.5A2.5 2.5 0 007.67 22h8.66a2.5 2.5 0 002.17-1.25l4.33-7.5a2.5 2.5 0 00-.005-2.5zM9.5 16.33V7.67L17 12l-7.5 4.33z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M16.35 2c.793 0 1.587.436 2.055 1.103l.095.147 4.35 7.5c.371.696.398 1.608.04 2.336l-.09.164-4.35 7.5c-.42.7-1.145 1.182-1.971 1.243L16.3 22H7.65c-.84 0-1.593-.436-2.055-1.103L5.5 20.75l-4.35-7.5a2.49 2.49 0 01-.09-2.336l.09-.164 4.35-7.5c.42-.7 1.145-1.182 1.971-1.243L7.65 2h8.7zm-.05 1.5H7.65c-.306 0-.574.153-.77.392L6.8 4l-4.35 7.5a.91.91 0 00-.06.897L6.8 20c.133.267.425.454.734.493l.116.007h8.7c.306 0 .574-.153.77-.392L17.2 20l4.35-7.5c.131-.262.148-.602.016-.883L21.5 11.5 17.15 4c-.133-.267-.425-.454-.734-.493L16.3 3.5zM9.5 7.65L17 12l-7.5 4.35v-8.7z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$V; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-t-product-magenta-tv",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$U = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class TProductMagentaone {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12.315 15.1a1.255 1.255 0 00.885 2.135c.331-.001.65-.132.885-.365l2.05-2.05c.234-.235.365-.553.365-.885V1.75c0-.69-.56-1.25-1.25-1.25h-6a1.25 1.25 0 00-1 .5L3.07 8.265A1.25 1.25 0 003.375 10l4 2.77A1.24 1.24 0 009 12.625v9.625c0 .69.56 1.25 1.25 1.25h5c.69 0 1.25-.56 1.25-1.25v-3.04a1.25 1.25 0 10-2.5 0V21h-2.5V8.08c0-.04-.025-.08-.035-.125l-.04-.105a.775.775 0 00-.06-.11.695.695 0 00-.13-.195c-.03-.03-.05-.065-.08-.09l-.08-.07-.115-.085-.075-.035a1.05 1.05 0 00-.13-.065l-.11-.035-.145-.05h-.225a1.15 1.15 0 00-.13 0 .8.8 0 00-.115 0 .585.585 0 00-.1.03 1 1 0 00-.13.045.345.345 0 00-.095.05.855.855 0 00-.205.135l-.095.085a.5.5 0 00-.065.08.5.5 0 00-.09.115L7.735 10 5.84 8.695 9.915 3H14v10.415L12.315 15.1z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12.65 16.55c-.3.3-.3.75 0 1.05.3.3.75.3 1.05 0l2.05-2.05c.15-.15.2-.35.2-.55V1.75c.05-.4-.3-.75-.7-.75h-6c-.25 0-.45.1-.6.3L3.5 8.55c-.1.15-.15.35-.15.55.05.2.15.35.3.5l4 2.75c.15.1.4.15.6.1.2-.05.4-.15.5-.35l.75-1.2v11.3c0 .4.35.75.75.75h5c.4 0 .75-.35.75-.75v-3.05c0-.4-.35-.75-.75-.75s-.75.4-.75.8v2.3H11V8.55l.8-1.3a.8.8 0 00-.25-1.05.8.8 0 00-1.05.25l-2.65 4.2-2.75-1.9 4.5-6.3h4.9V14.7l-1.85 1.85z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$U; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-t-product-magentaone",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$T = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class TProductMeasureInternetSpeed {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 2.5c6.05 0 11 4.95 11 11 0 2.6-.95 5.1-2.6 7.1-.3.35-.575.625-.819.85l-.277.248-.354.302H5l-.319-.273-.247-.222a8.717 8.717 0 01-.884-.955C1.9 18.55 1 16.1 1 13.5c0-6.05 4.95-11 11-11zm6.45 8.5c.222-.133.484-.03.645.136l.055.064.03.081a.654.654 0 01-.112.554L19 11.9l-4.5 3.7A2.487 2.487 0 0112 18c-1.4 0-2.5-1.1-2.5-2.5S10.6 13 12 13c.333 0 .632.07.896.208l.154.092 5.4-2.3zM12 6c2.507 0 4.735 1.255 6.102 3.183l.148.217-1.4.6C15.75 8.5 14 7.5 12 7.5c-3.225 0-5.877 2.579-5.996 5.776L6 13.5H4.5C4.5 9.35 7.85 6 12 6z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 2.5c6.05 0 11 4.95 11 11 0 2.6-.95 5.1-2.6 7.1-.3.35-.575.625-.819.85l-.277.248-.354.302H5l-.319-.273-.247-.222a8.717 8.717 0 01-.884-.955C1.9 18.55 1 16.1 1 13.5c0-6.05 4.95-11 11-11zM12 4c-5.25 0-9.5 4.25-9.5 9.5a9.404 9.404 0 002.864 6.78l.236.22h12.8c2-1.8 3.1-4.35 3.1-7C21.5 8.25 17.25 4 12 4zm6.45 7c.222-.133.484-.03.645.136l.055.064.03.081a.654.654 0 01-.112.554L19 11.9l-4.5 3.7A2.487 2.487 0 0112 18c-1.4 0-2.5-1.1-2.5-2.5S10.6 13 12 13c.333 0 .632.07.896.208l.154.092 5.4-2.3zM12 6c2.507 0 4.735 1.255 6.102 3.183l.148.217-1.4.6C15.75 8.5 14 7.5 12 7.5c-3.225 0-5.877 2.579-5.996 5.776L6 13.5H4.5C4.5 9.35 7.85 6 12 6z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$T; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-t-product-measure-internet-speed",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$S = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class TProductSeamlessConnectivity {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M21.005 5.102a4.195 4.195 0 00-4.651.922l-.927.926-8.64 8.64-.921.922a2.227 2.227 0 01-3.807-1.574V9.043a2.203 2.203 0 011.378-2.059c.277-.114.574-.173.873-.173.586 0 1.148.237 1.556.658l3.724 3.725 1.44-1.44-3.724-3.725a4.205 4.205 0 00-4.656-.922A4.196 4.196 0 000 9.043v5.914a4.21 4.21 0 002.635 3.945 4.214 4.214 0 004.656-.926l.922-.926 8.64-8.64.921-.922A2.227 2.227 0 0121.6 9.043v5.914a2.227 2.227 0 01-3.806 1.574l-3.725-3.725-1.44 1.44 3.73 3.73a4.214 4.214 0 002.99 1.262 4.32 4.32 0 001.66-.336 4.21 4.21 0 002.636-3.945V9.043a4.195 4.195 0 00-2.64-3.94z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M21.45 5.1c-1.6-.65-3.3-.3-4.5.9L6 16.95c-.9.9-2.1.9-2.85.55-.8-.3-1.65-1.1-1.65-2.4V8.9c0-1.3.85-2.1 1.65-2.45.9-.4 2.05-.25 2.85.55l3.9 3.9 1.05-1.05L7.05 6c-1.2-1.2-2.95-1.55-4.5-.9C1 5.75 0 7.2 0 8.9v6.15c0 1.7 1 3.15 2.55 3.8 1.55.65 3.3.3 4.5-.9L18 7.05c.9-.9 2.1-.9 2.85-.55.8.35 1.65 1.15 1.65 2.45v6.15c0 1.3-.85 2.1-1.65 2.45-.8.35-1.95.35-2.85-.55l-3.9-3.9-1.05 1.05 3.9 3.9c1.2 1.2 2.95 1.55 4.5.9C23 18.3 24 16.85 24 15.15V8.9c0-1.7-1-3.15-2.55-3.8z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$S; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-t-product-seamless-connectivity",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$R = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class TProductTelekom1T1 {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M22.002 2v17a3 3 0 01-2.824 2.995L19 22H5a3 3 0 01-2.994-2.824L2 19V2h20zm-5.435 4.5H7.4v3.74h.655v-.11c0-1.76.982-2.86 2.837-2.86h.11v7.92c0 1.1-.437 1.54-1.529 1.54h-.327v.77h5.675v-.77h-.328c-1.091 0-1.528-.44-1.528-1.54V7.27h.11c1.855 0 2.837 1.1 2.837 2.86v.11h.655V6.5zm0 4.889h-2.445v2.444h2.445V11.39zm-6.723 0H7.4v2.444h2.444V11.39z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M16.567 6.5v3.74h-.655v-.11c0-1.76-.982-2.86-2.837-2.86h-.11v7.92c0 1.1.437 1.54 1.528 1.54h.328v.77H9.146v-.77h.327c1.092 0 1.528-.44 1.528-1.54V7.27h-.109c-1.855 0-2.837 1.1-2.837 2.86v.11H7.4V6.5h9.167zm0 4.889v2.444h-2.445V11.39h2.445zm-6.723 0v2.444H7.4V11.39h2.444zM2 2v17a3 3 0 003 3h14a3 3 0 003-3V2H2zm18.5 17c0 .827-.673 1.5-1.5 1.5H5c-.827 0-1.5-.673-1.5-1.5V3.5h17V19z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$R; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-t-product-telekom-1t1",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$Q = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class TProductTelekomPlan {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M15.5 16.5h-7a.75.75 0 010-1.5h7a.75.75 0 110 1.5zm0 1.5a.75.75 0 110 1.5h-7a.75.75 0 010-1.5h7zm-.385-12.5v2.556h-.447v-.075c0-1.146-.609-1.882-1.762-1.95l-.177-.005h-.075v5.414c0 .705.262 1.013.91 1.049l.134.003h.224v.527h-3.879v-.527h.224c.7 0 1.005-.264 1.04-.917l.004-.135V6.026h-.074c-1.208 0-1.874.682-1.935 1.786l-.004.17v.074H8.85V5.5h6.265zm0 3.342v1.67h-1.67v-1.67h1.67zm-4.594 0v1.67H8.85v-1.67h1.67zM3.5.5v20a3 3 0 003 3h11a3 3 0 003-3V.5h-17z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M8.5 19.5h7a.75.75 0 000-1.5h-7a.75.75 0 000 1.5zm7-4.5a.75.75 0 010 1.5h-7a.75.75 0 010-1.5zm-.385-9.5v2.556h-.447v-.075c0-1.146-.609-1.882-1.762-1.95l-.177-.005h-.075v5.414c0 .705.262 1.013.91 1.049l.134.003h.224v.527h-3.879v-.527h.224c.7 0 1.005-.264 1.04-.917l.004-.135V6.026h-.074c-1.208 0-1.874.682-1.935 1.786l-.004.17v.074H8.85V5.5h6.265zm0 3.342v1.67h-1.67v-1.67h1.67zm-4.594 0v1.67H8.85v-1.67h1.67zM19 20.5c0 .827-.673 1.5-1.5 1.5h-11c-.828 0-1.5-.673-1.5-1.5V2h14v18.5zM3.5.5v20a3 3 0 003 3h11a3 3 0 003-3V.5h-17z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$Q; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-t-product-telekom-plan",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$P = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class TProductTelekomShopB {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M21 1.5V5h.75c.902 0 1.67.722 1.744 1.609l.006.141V9H22v13.5H2V9H.5V6.75c0-.903.722-1.67 1.609-1.744L2.25 5H3V1.5h18zM15.12 11v2.55h-.446v-.075c0-1.2-.67-1.95-1.935-1.95h-.074v5.4c0 .75.297 1.05 1.041 1.05h.224v.525h-3.87v-.525h.224c.744 0 1.041-.3 1.041-1.05v-5.4h-.074c-1.265 0-1.935.75-1.935 1.95v.075H8.87V11h6.25zm0 3.333V16h-1.667v-1.667h1.667zm-4.583 0V16H8.87v-1.667h1.667zM19.5 3v2h-15V3h15z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M21 1.5V5h.75c.902 0 1.67.722 1.744 1.609l.006.141V9H22v13.5H2V9H.5V6.75c0-.903.722-1.67 1.609-1.744L2.25 5H3V1.5h18zM20.5 9h-17v12h17V9zm-5.38 2v2.55h-.446v-.075c0-1.2-.67-1.95-1.935-1.95h-.074v5.4c0 .75.297 1.05 1.041 1.05h.224v.525h-3.87v-.525h.224c.744 0 1.041-.3 1.041-1.05v-5.4h-.074c-1.265 0-1.935.75-1.935 1.95v.075H8.87V11h6.25zm0 3.333V16h-1.667v-1.667h1.667zm-4.583 0V16H8.87v-1.667h1.667zM19.5 3v2h-15V3h15z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$P; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-t-product-telekom-shop-b",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$O = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class TProductUsage {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 1c6.05 0 11 4.95 11 11s-4.95 11-11 11S1 18.05 1 12 5.95 1 12 1zM6.45 6.45a.722.722 0 01.965-.074l.085.074 4.1 4.1c.15-.05.25-.05.4-.05.85 0 1.5.65 1.5 1.5s-.65 1.5-1.5 1.5-1.5-.65-1.5-1.5c0-.113 0-.197.021-.295l.029-.105-4.1-4.1c-.3-.3-.3-.75 0-1.05zm-1.1 2.1l2.3 2.3c-.08.28-.128.592-.144.91L7.5 12h-3a7.28 7.28 0 01.706-3.172l.144-.278zM12 4.5a7.49 7.49 0 017.496 7.257L19.5 12h-3c0-2.5-2-4.5-4.5-4.5-.32 0-.64.032-.934.096l-.216.054-2.3-2.3c1-.55 2.2-.85 3.45-.85z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 1c6.05 0 11 4.95 11 11s-4.95 11-11 11S1 18.05 1 12 5.95 1 12 1zm0 1.5c-5.25 0-9.5 4.25-9.5 9.5s4.25 9.5 9.5 9.5 9.5-4.25 9.5-9.5-4.25-9.5-9.5-9.5zM6.45 6.45a.722.722 0 01.965-.074l.085.074 4.1 4.1c.15-.05.25-.05.4-.05.85 0 1.5.65 1.5 1.5s-.65 1.5-1.5 1.5-1.5-.65-1.5-1.5c0-.113 0-.197.021-.295l.029-.105-4.1-4.1c-.3-.3-.3-.75 0-1.05zm-1.1 2.1l2.3 2.3c-.08.28-.128.592-.144.91L7.5 12h-3a7.28 7.28 0 01.706-3.172l.144-.278zM12 4.5a7.49 7.49 0 017.496 7.257L19.5 12h-3c0-2.5-2-4.5-4.5-4.5-.32 0-.64.032-.934.096l-.216.054-2.3-2.3c1-.55 2.2-.85 3.45-.85z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$O; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-t-product-usage",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$N = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class TProductVoice {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M21.15 15.6c0 3.25-1.35 5.6-3.8 6.65-1.5.65-3.5.55-5.4-.1.4-.2.8-.35 1.15-.6 1.5-.9 2.7-2 3.6-3.15.65-.25 1.25-.55 1.85-.9.95-.55 1.85-1.2 2.6-1.9zM2.7 13c.45.9 1.05 1.8 1.75 2.6 1.05 1.25 2.3 2.1 3.6 2.7 1.25.6 2.8 1.05 4.4 1.05.4 0 .75-.05 1.15-.1-.4.35-.85.65-1.3.95-1.9 1.2-4.15 1.6-6.2 1.05-1.55-.4-2.8-1.3-3.5-2.55-.85-1.55-.8-3.7.1-5.7zm14-9.7c2.4 0 4.5.95 5.55 2.75 1.714 3.086-.218 7.419-4.293 9.85l-.257.15C13.45 18.5 8.55 17.9 6.75 14.8c-.65-1.2-.8-2.6-.4-4.1.65-2.3 2.5-4.55 4.95-5.9 1.8-1 3.65-1.5 5.4-1.5zm-4.75 5.3c-1.85 0-3.4 1.55-3.4 3.4 0 1.85 1.5 3.4 3.4 3.4 1.85 0 3.4-1.55 3.4-3.4 0-1.85-1.5-3.4-3.4-3.4zM4.8 3.15c2.1-1.9 5.2-2.2 8-.95-.85.3-1.65.65-2.45 1.1-2.9 1.65-5 4.2-5.75 6.95-.2.8-.3 1.6-.3 2.45-2-3.45-1.9-7.35.5-9.55z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M9.8 2.7c-1.55 0-2.9.5-4 1.5-2.1 1.9-2.2 5.35-.45 8.3v-.3c0-.6.1-1.2.25-1.8.65-2.4 2.5-4.65 5.05-6.1.7-.4 1.45-.7 2.15-.95l-.3-.1c-.5-.2-1.05-.35-1.6-.45l-.35-.05c-.25 0-.5-.05-.75-.05m2.15 5.9c1.9 0 3.4 1.55 3.4 3.4 0 1.85-1.55 3.4-3.4 3.4-1.9 0-3.4-1.55-3.4-3.4 0-1.85 1.5-3.4 3.4-3.4m4.15-4.25c-1.5 0-3.15.45-4.7 1.3C9.25 6.9 7.6 8.8 7.05 10.8c-.35 1.3-.25 2.55.35 3.55 1.55 2.7 5.85 3.2 9.55 1.1 3.7-2.05 5.5-6 3.95-8.75-.9-1.55-2.7-2.35-4.8-2.35m-12.35 8.4c-.15.3-.25.6-.35.95-.45 1.5-.35 2.95.25 4 .6 1.1 1.7 1.85 3.05 2.25 1.8.45 3.8.1 5.45-.95.4-.25.8-.55 1.15-.8-.35.05-.7.05-1 .05-1.35 0-2.65-.3-3.75-.85-1.2-.5-2.3-1.3-3.25-2.4-.6-.7-1.1-1.45-1.55-2.25M20 15.1l-.3.25c-.6.5-1.25 1-2 1.4-.55.3-1.05.55-1.6.75-.8 1-1.85 1.95-3.15 2.75-.3.2-.65.35-1 .5 1.7.6 3.4.65 4.7.1C18.8 20 19.95 17.9 20 15.1M4.8 3.1C6.35 1.65 8.5 1 10.75 1.25c1.5.15 2.95.75 4.2 1.65 3.1-.35 5.95.75 7.3 3.1 1.25 2.25.8 5.1-.85 7.5.55 4.15-.95 7.45-4.15 8.8-.8.35-1.7.5-2.65.5-1.25 0-2.6-.3-3.9-.85-.3-.15-.6-.3-.85-.45-.5.1-1 .15-1.5.15-.65 0-1.35-.1-1.95-.25-1.8-.45-3.2-1.5-4-2.95-.85-1.45-.95-3.3-.4-5.2.25-.85.6-1.6 1.05-2.35C2.2 8 2.75 5 4.8 3.1", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$N; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-t-product-voice",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const tabHeaderCss = "/*!@:host*/.sc-scale-tab-header-h{outline:none;--font:var(--telekom-text-style-ui-bold);--color:var(--telekom-color-text-and-icon-standard);--color-hover:var(--telekom-color-text-and-icon-primary-hovered);--color-active:var(--telekom-color-text-and-icon-primary-pressed);--color-selected:var(--telekom-color-text-and-icon-primary-standard);--focus-outline:var(--telekom-line-weight-highlight) solid\n    var(--telekom-color-functional-focus-standard);--spacing-right-slotted:var(--telekom-spacing-composition-space-04);--color-disabled:var(--telekom-color-text-and-icon-disabled);--radius:var(--telekom-radius-standard);--font-size-large:var(--telekom-typography-font-size-callout)}/*!@.tab-header*/.tab-header.sc-scale-tab-header{color:var(--color);cursor:pointer;display:inline-flex;outline:none;position:relative;box-sizing:border-box;align-items:center;height:var(--tab-height);font:var(--font);border-radius:var(--tab-radius);padding-right:var(--tab-spacing-horizontal);padding-left:var(--tab-spacing-horizontal);padding-top:var(--tab-spacing-vertical);padding-bottom:var(--tab-spacing-vertical)}/*!@.tab-header--disabled*/.tab-header--disabled.sc-scale-tab-header{cursor:auto;color:var(--color-disabled)}/*!@.tab-header--disabled:after*/.tab-header--disabled.sc-scale-tab-header:after{cursor:auto;background-color:var(--telekom-color-ui-border-disabled) !important}/*!@.tab-header--disabled:active*/.tab-header--disabled.sc-scale-tab-header:active{color:var(--color-disabled)}/*!@.tab-header--disabled:hover*/.tab-header--disabled.sc-scale-tab-header:hover{color:var(--color-disabled) !important}/*!@.tab-header--disabled:hover:after*/.tab-header--disabled.sc-scale-tab-header:hover:after{background-color:var(--telekom-color-ui-border-disabled) !important}/*!@.tab-header:after*/.tab-header.sc-scale-tab-header:after{left:0;right:0;width:100%;bottom:0;content:'';display:block;position:absolute;height:var(--tab-border-size);background-color:var(--tab-border-color)}/*!@.tab-header:before*/.tab-header.sc-scale-tab-header:before{left:0;right:0;width:100%;bottom:0;height:0;content:'';display:block;position:absolute;border-top:1px solid transparent}/*!@.tab-header:hover*/.tab-header.sc-scale-tab-header:hover{color:var(--color-hover)}/*!@.tab-header:hover:after*/.tab-header.sc-scale-tab-header:hover:after{background-color:var(--color-hover)}/*!@.tab-header:active*/.tab-header.sc-scale-tab-header:active{color:var(--color-active)}/*!@.tab-header:active:after*/.tab-header.sc-scale-tab-header:active:after{background-color:var(--color-active)}/*!@.tab-header:active:after*/.tab-header.sc-scale-tab-header:active:after{background-color:var(--color-active)}/*!@.tab-header ::slotted(*)*/.tab-header .sc-scale-tab-header-s>*{margin-right:var(--spacing-right-slotted)}/*!@.tab-header--has-focus*/.tab-header--has-focus.sc-scale-tab-header{border-radius:var(--tab-radius);outline:var(--focus-outline);z-index:1}/*!@.tab-header--has-focus.tab-header--selected:after*/.tab-header--has-focus.tab-header--selected.sc-scale-tab-header:after{border-radius:0 0 3px 3px;width:98%;margin-left:1%}/*!@.tab-header--selected*/.tab-header--selected.sc-scale-tab-header{color:var(--color-selected)}/*!@.tab-header--selected:after*/.tab-header--selected.sc-scale-tab-header:after{height:var(--tab-border-size-selected);background-color:var(--color-selected)}/*!@.tab-header--selected:before*/.tab-header--selected.sc-scale-tab-header:before{border-top:var(--tab-border-size-selected) solid transparent}/*!@.tab-header--large*/.tab-header--large.sc-scale-tab-header{font-size:var(--font-size-large);height:var(--tab-height-large)}";

const PER_SPEC_ICON_SIZE = 20;
let i$2 = 0;
class TabHeader {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleSelect = createEvent$1(this, "scale-select", 7);
    this.generatedId = i$2++;
    /** True for a disabled Tabnavigation */
    this.disabled = false;
    /** True for smaller height and font size */
    /** @deprecated - size should replace small */
    this.small = false;
    /** (optional) size  */
    this.size = 'small';
    this.hasFocus = false;
  }
  handleClick(event) {
    event.stopPropagation();
    if (this.disabled) {
      return;
    }
    this.scaleSelect.emit();
  }
  selectedChanged(newValue) {
    if (!this.hostElement.isConnected) {
      return;
    }
    if (!this.disabled) {
      if (newValue === true && this.tabsHaveFocus()) {
        // Having focus on the host element, and not on inner elements,
        // is required because screen readers.
        this.hostElement.focus();
      }
      this.updateSlottedIcon();
    }
  }
  disabledChanged() {
    if (this.disabled) {
      this.selected = false;
    }
  }
  componentDidLoad() {
    this.setChildrenIconSize();
  }
  componentDidRender() {
    if (this.small !== false) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "small" is deprecated. Please use css overwrites.',
        type: 'warn',
        source: this.hostElement,
      });
    }
  }
  /**
   * Whether current focused element is within parent `scale-tab-nav`.
   * Only if `true`, we imperatively focus the selected element.
   * @returns boolean
   */
  tabsHaveFocus() {
    const tabs = this.hostElement.closest('.scale-tab-nav');
    if (!tabs) {
      return false;
    }
    return tabs.contains(document.activeElement);
  }
  /**
   * Find slotted icons, and if any, add the `selected` attribute accordingly.
   */
  updateSlottedIcon() {
    const icons = Array.from(this.hostElement.childNodes).filter(isScaleIcon);
    const action = this.selected ? 'setAttribute' : 'removeAttribute';
    icons.forEach((child) => child[action]('selected', ''));
  }
  /**
   * Set any children icon's size according the button size.
   */
  setChildrenIconSize() {
    const icons = Array.from(this.hostElement.childNodes).filter(isScaleIcon);
    icons.forEach((icon) => {
      // This is meh people might actually want 24
      if (icon.size !== PER_SPEC_ICON_SIZE) {
        icon.size = PER_SPEC_ICON_SIZE;
      }
    });
  }
  render() {
    return (hAsync(Host$1, { id: `scale-tab-header-${this.generatedId}`, role: this.disabled ? false : 'tab', "aria-selected": this.selected ? 'true' : 'false', tabindex: this.disabled ? false : this.selected ? '0' : '-1', onFocus: () => (this.hasFocus = true), onBlur: () => (this.hasFocus = false) }, this.styles && hAsync("style", null, this.styles), hAsync("span", { part: this.getBasePartMap(), class: this.getCssClassMap() }, hAsync("slot", null))));
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const component = 'tab-header';
    const prefix = mode === 'basePart' ? '' : `${component}--`;
    return classnames(component, this.selected && `${prefix}selected`, this.size === 'large' && `${prefix}large`, this.hasFocus && `${prefix}has-focus`, this.disabled && `${prefix}disabled`);
  }
  get hostElement() { return getElement$1(this); }
  static get watchers() { return {
    "selected": ["selectedChanged"],
    "disabled": ["disabledChanged"]
  }; }
  static get style() { return tabHeaderCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-tab-header",
    "$members$": {
      "disabled": [516],
      "small": [4],
      "size": [1],
      "selected": [4],
      "styles": [1],
      "hasFocus": [32]
    },
    "$listeners$": [[0, "click", "handleClick"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["disabled", "disabled"]]
  }; }
}

const tabNavCss = "/*!@:host*/.sc-scale-tab-nav-h{--tab-height:3rem;--tab-spacing-horizontal:var(--telekom-spacing-composition-space-05);--tab-spacing-vertical:var(--telekom-spacing-composition-space-06);--tab-radius:var(--telekom-radius-small);--tab-border-size:var(--telekom-line-weight-standard);--tab-border-size-selected:var(--telekom-line-weight-highlight);--tab-border-size-selected:3px;--tab-border-color:var(--telekom-color-ui-subtle);--tab-height-large:3.25rem;--tab-spacing-horizontal-large:var(--telekom-spacing-composition-space-06);--tab-spacing-vertical-large:0.875rem}";

/**
 * @see https://github.com/GoogleChromeLabs/howto-components/blob/master/elements/howto-tabs/howto-tabs.js
 */
const ARROW_LEFT = 'ArrowLeft';
const ARROW_RIGHT = 'ArrowRight';
const HOME = 'Home';
const END = 'End';
class TabNav {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** True for smaller height and font size in tab headers. */
    /** @deprecated - size should replace small */
    this.small = false;
    /** (optional) size  */
    this.size = 'small';
  }
  handleSelect(event) {
    const nextTab = event.target;
    // Act only if it's a direct child
    if (this.getAllEnabledTabs().includes(nextTab) && !nextTab.disabled) {
      this.selectTab(nextTab);
    }
  }
  handleKeydown(event) {
    const target = event.target;
    let nextTab;
    if (target.getAttribute('role') !== 'tab') {
      return;
    }
    // Do not handle modifier shortcuts typically used by assistive technology
    if (event.altKey) {
      return;
    }
    switch (event.key) {
      case ARROW_LEFT:
        nextTab = this.getPreviousTab();
        break;
      case ARROW_RIGHT:
        nextTab = this.getNextTab();
        break;
      case HOME:
        nextTab = this.getFirstTab();
        break;
      case END:
        nextTab = this.getLastTab();
        break;
      default:
        return;
    }
    event.preventDefault();
    this.selectTab(nextTab);
  }
  connectedCallback() {
    if (!this.el.hasAttribute('role')) {
      this.el.setAttribute('role', 'tablist');
    }
  }
  componentDidRender() {
    Promise.all([
      customElements.whenDefined('scale-tab-header'),
      customElements.whenDefined('scale-tab-panel'),
    ]).then(() => {
      this.linkPanels();
      this.propagateSizeToTabs();
    });
    if (this.small !== false) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "small" is deprecated. Please use css overwrite!',
        type: 'warn',
        source: this.el,
      });
    }
  }
  getAllTabs() {
    return Array.from(this.el.querySelectorAll('scale-tab-header'));
  }
  getAllEnabledTabs() {
    return Array.from(this.el.querySelectorAll('scale-tab-header:not([disabled]), scale-tab-header[disabled="false"]'));
  }
  getAllPanels() {
    return Array.from(this.el.querySelectorAll('scale-tab-panel'));
  }
  getPreviousTab() {
    const tabs = this.getAllEnabledTabs();
    const index = tabs.findIndex((tab) => tab.selected) - 1;
    return tabs[(index + tabs.length) % tabs.length];
  }
  getNextTab() {
    const tabs = this.getAllEnabledTabs();
    const index = tabs.findIndex((tab) => tab.selected) + 1;
    return tabs[index % tabs.length];
  }
  getFirstTab() {
    const tabs = this.getAllEnabledTabs();
    return tabs[0];
  }
  getLastTab() {
    const tabs = this.getAllEnabledTabs();
    return tabs[tabs.length - 1];
  }
  linkPanels() {
    const tabs = this.getAllTabs();
    const selectedTab = tabs.find((x) => x.selected) || tabs.filter((x) => !x.disabled)[0];
    tabs.forEach((tab) => {
      const panel = tab.nextElementSibling;
      tab.setAttribute('aria-controls', panel.id);
      panel.setAttribute('aria-labelledby', tab.id);
    });
    this.selectTab(selectedTab);
  }
  reset() {
    const tabs = this.getAllEnabledTabs();
    const panels = this.getAllPanels();
    tabs.forEach((tab) => (tab.selected = false));
    panels.forEach((panel) => (panel.hidden = true));
  }
  findPanelForTab(tab) {
    const panelId = tab.getAttribute('aria-controls');
    return this.el.querySelector(`#${panelId}`);
  }
  selectTab(nextTab) {
    const nextPanel = this.findPanelForTab(nextTab);
    this.reset();
    nextPanel.hidden = false;
    nextTab.selected = true;
  }
  /**
   * Sets or removes the `large` prop in `scale-tab-header` and `scale-tab-panel` children.
   */
  propagateSizeToTabs() {
    const action = this.size === 'large' ? 'setAttribute' : 'removeAttribute';
    const tabs = this.getAllTabs();
    const panels = this.getAllPanels();
    [...tabs, ...panels].forEach((child) => child[action]('size', 'large'));
  }
  render() {
    return (hAsync(Host$1, { class: "scale-tab-nav" }, this.styles && hAsync("style", null, this.styles), hAsync("div", { part: this.getBasePartMap(), class: this.getCssClassMap() }, hAsync("slot", { name: "tab" }), hAsync("slot", { name: "panel" }))));
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const component = 'tab-nav';
    const prefix = mode === 'basePart' ? '' : `${component}--`;
    return classnames(component, `${prefix}`);
  }
  get el() { return getElement$1(this); }
  static get style() { return tabNavCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-tab-nav",
    "$members$": {
      "small": [4],
      "size": [1],
      "styles": [1]
    },
    "$listeners$": [[0, "scale-select", "handleSelect"], [0, "keydown", "handleKeydown"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const tabPanelCss = "/*!@:host*/.sc-scale-tab-panel-h{--spacing-top:var(--telekom-spacing-composition-space-08)}/*!@.tab-panel*/.tab-panel.sc-scale-tab-panel{margin-top:var(--spacing-top)}";

let i$1 = 0;
class TabPanel {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.generatedId = i$1++;
    /** True for smaller height and font size */
    /** @deprecated - no more size difference */
    this.small = false;
    /** (optional) size  */
    /** @deprecated  - no more size difference */
    this.size = 'small';
    /** (optional) adds tab-index="0" to the panel, set to false to exclude the tab-panel from the tab sequence, e.g. if the first element in the panel is a focusable button */
    this.tabbablePanel = true;
  }
  componentDidRender() {
    if (this.small !== false) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "small" is deprecated.',
        type: 'warn',
        source: this.el,
      });
    }
  }
  setTabIndex() {
    if (this.tabbablePanel === true) {
      return { tabindex: '0' };
    }
  }
  render() {
    return (hAsync(Host$1, Object.assign({ id: `scale-tab-panel-${this.generatedId}`, role: "tabpanel" }, this.setTabIndex()), this.styles && hAsync("style", null, this.styles), hAsync("div", { part: "tab-panel", class: "tab-panel" }, hAsync("slot", null))));
  }
  get el() { return getElement$1(this); }
  static get style() { return tabPanelCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-tab-panel",
    "$members$": {
      "small": [4],
      "size": [1],
      "tabbablePanel": [4, "tabbable-panel"],
      "styles": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const tableCss = "scale-table{--radius:var(--telekom-radius-standard) var(--telekom-radius-standard) 0 0;--background:var(--telekom-color-ui-state-fill-standard);--color:var(--telekom-color-text-and-icon-standard);--color-hover:var(--telekom-color-text-and-icon-primary-hovered);--color-active:var(--telekom-color-text-and-icon-primary-pressed);--font-size:var(--telekom-typography-font-size-small);--font-weight:var(--telekom-typography-font-weight-bold);--spacing-tbody-td:var(--telekom-spacing-composition-space-06)\n    var(--telekom-spacing-composition-space-04);--border-bottom-tbody-td:var(--telekom-spacing-composition-space-01) solid\n    var(--telekom-color-ui-faint);--background-tbody:var(--telekom-color-ui-state-fill-standard);--background-tbody-tr-hover:var(--telekom-color-ui-state-fill-hovered);--background-tfoot:var(--telekom-color-ui-state-fill-standard);--border-bottom-tfoot-td:var(--telekom-spacing-composition-space-01) solid\n    var(--telekom-color-ui-extra-strong);--spacing-th-sortable:0 0 0 0;--background-th-sortable-hover:var(--telekom-color-ui-subtle);--background-th-sortable-active:var(--telekom-color-ui-faint);--box-shadow-th-sortable-focus:inset 0 0 0\n    var(--telekom-spacing-composition-space-02)\n    var(--telekom-color-functional-focus-standard);--background-tr-striped:var(--telekom-color-ui-subtle);--padding:var(--telekom-spacing-composition-space-00)\n    var(--telekom-spacing-composition-space-04)}.table{display:block;overflow:auto;border-radius:var(--radius);background:var(--background);color:var(--color)}.table table{width:100%;white-space:nowrap;border-spacing:0;border-collapse:collapse}.table th{padding:var(--padding);text-align:left;line-height:32px;color:var(--color);font-size:var(--font-size);background:var(--telekom-color-background-surface-subtle)}.table td{padding:var(--padding)}.table tbody tr td{padding:8px}.table tbody td{border-bottom:var(--border-bottom-tbody-td)}.table thead tr th:last-of-type,.table tbody tr td:last-of-type,.table tfoot tr td:last-of-type{padding-right:12px}.table tfoot{background:var(--background-tfoot)}.table tbody{background:var(--background-tbody)}.table tfoot tr td{padding:8px;font-weight:var(--font-weight);border-bottom:var(--border-bottom-tfoot-td)}.table .scale-sort-indicator-icon{display:none !important}.table tbody tr:hover{background:var(--background-tbody-tr-hover)}.table th:focus{outline:none}.table--size-default tbody tr td{padding:var(--spacing-tbody-td)}.table--sortable th{cursor:pointer;padding:var(--spacing-th-sortable);padding-right:0}.table--sortable th:hover{padding:var(--spacing-th-sortable);background:var(--background-th-sortable-hover)}.table--sortable th:active{background:var(--background-th-sortable-active)}.table--sortable th:focus{box-shadow:var(--box-shadow-th-sortable-focus);border-radius:var(--radius)}.table--sortable th .scale-sort-indicator-icon{display:inline-flex !important}.table--sortable th[aria-disabled]{padding:var(--padding);pointer-events:none}.table--sortable th:not([aria-sort]){padding:var(--padding);padding-right:var(--telekom-spacing-composition-space-07)}.table--sortable th[aria-sort='none']{padding:var(--padding);padding-right:var(--telekom-spacing-composition-space-05)}.table--sortable th[aria-sort='ascending'] .scale-sort-indicator .up{color:var(--color)}.table--sortable th:hover .scale-sort-indicator .up{color:var(--color-hover)}.table--sortable th:hover[aria-sort='ascending'] .scale-sort-indicator-icon.up{color:var(--color-hover)}.table--sortable th:active[aria-sort='ascending'] .scale-sort-indicator-icon.up{color:var(--color-active)}.table--sortable th[aria-sort='ascending'] .scale-sort-indicator{color:transparent}.table--sortable th:hover[aria-sort='ascending'] .scale-sort-indicator{color:transparent}.table--sortable th:active[aria-sort='ascending'] .scale-sort-indicator{color:transparent}.table--sortable th[aria-sort='descending'] .scale-sort-indicator-icon.up{color:transparent}.table--sortable th:hover[aria-sort='descending'] .scale-sort-indicator-icon.up{color:transparent}.table--sortable th:active[aria-sort='descending'] .scale-sort-indicator-icon.up{color:transparent}.table--sortable th[aria-sort='descending'] .scale-sort-indicator-icon{color:var(--color)}.table--sortable th:hover[aria-sort='descending'] .scale-sort-indicator-icon{color:var(--color-hover)}.table--sortable th:active[aria-sort='descending'] .scale-sort-indicator-icon{color:var(--color-active)}.table--sortable th .scale-sort-indicator{width:16px;height:16px;margin:0 0 0 4px;display:inline-block;position:relative}.table--sortable th .scale-sort-indicator-icon{top:4px;left:0;width:16px;height:16px;position:absolute}.table--sortable th .scale-sort-indicator{color:transparent}.table--sortable th[aria-sort='none']:hover{padding:0 0 0 0}.table--sortable th[aria-sort='none'] .scale-sort-indicator{display:none}.table--sortable th:not([aria-sort]):hover{padding:0 8px 0 0}.table--sortable th:not([aria-sort]) .scale-sort-indicator{display:none}.table--sortable th:hover .scale-sort-indicator{display:inline-block}.table--striped table tr:nth-child(even){background:var(--background-tr-striped)}";

class Table {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) Display sort arrows on/off */
    this.showSort = false;
    /** (optional) Striped Table */
    this.striped = false;
    /** object of the slots in use */
    this.slots = {};
  }
  addSortIndicator(el) {
    el.insertAdjacentHTML('afterbegin', `
        <span class="scale-sort-indicator" aria-hidden="true">
          <scale-icon-content-sort-indicator-up class="scale-sort-indicator-icon up" size="16"></scale-icon-content-sort-indicator-up>
          <scale-icon-content-sort-indicator-down class="scale-sort-indicator-icon down" size="16"></scale-icon-content-sort-indicator-down>
        </span>`);
  }
  componentWillLoad() {
    if (this.showSort) {
      this.hostElement.querySelectorAll('th').forEach((th) => {
        this.addSortIndicator(th);
      });
    }
  }
  componentWillUpdate() {
    this.hostElement.querySelectorAll('th').forEach((th) => {
      // only cols that are NOT added dynamically have children (the sorting icon), added on componentWillLoad
      if (th.children.length === 0) {
        // this may not be needed
        th.classList.add('dynamically-added');
        if (this.showSort) {
          this.addSortIndicator(th);
        }
      }
    });
  }
  componentDidLoad() {
    const table = this.hostElement;
    const progressbar = table.querySelectorAll('scale-progress-bar');
    if (progressbar) {
      progressbar.forEach((el) => {
        el.showStatus = false;
      });
    }
    this.mutationObserver = new MutationObserver(() => {
      this.forceUpdate = String(Date.now());
    });
    this.mutationObserver.observe(this.hostElement, {
      childList: true,
      subtree: true,
    });
  }
  componentDidRender() {
    if (this.size) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "size" is deprecated. Please use css overwrites for a small version!',
        type: 'warn',
        source: this.hostElement,
      });
    }
  }
  disconnectedCallback() {
    if (this.mutationObserver) {
      this.mutationObserver.disconnect();
    }
  }
  render() {
    return (hAsync(Host$1, { class: this.getCssClassMap() }, this.styles && hAsync("style", null, this.styles), hAsync("slot", null)));
  }
  getCssClassMap() {
    return classnames('table', this.showSort && 'table--sortable', this.striped && 'table--striped');
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return tableCss; }
  static get cmpMeta() { return {
    "$flags$": 4,
    "$tagName$": "scale-table",
    "$members$": {
      "showSort": [4, "show-sort"],
      "size": [1],
      "striped": [4],
      "styles": [1],
      "forceUpdate": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const tagCss = "/*!@:host*/.sc-scale-tag-h{--background:var(--telekom-color-ui-faint);--color:var(--telekom-color-text-and-icon-standard);--font:var(--telekom-text-style-caption-bold);--radius:2px;--focus-outline:var(--telekom-line-weight-highlight) solid\n    var(--telekom-color-functional-focus-standard);--icon-color:var(--telekom-color-text-and-icon-additional);--icon-color-hover:var(--color);--background-disabled:var(--telekom-color-ui-faint);--color-disabled:var(--telekom-color-text-and-icon-disabled);--spacing-dismissable:var(--telekom-spacing-composition-space-02)\n    var(--telekom-spacing-composition-space-02)\n    var(--telekom-spacing-composition-space-02)\n    var(--telekom-spacing-composition-space-03);--spacing-dismissable-small:var(--telekom-spacing-composition-space-02)\n    var(--telekom-spacing-composition-space-02)\n    var(--telekom-spacing-composition-space-02)\n    var(--telekom-spacing-composition-space-03);--height:24px;--height-small:20px;--border-button-dismissable-focus:1px solid transparent;--box-shadow-button-dismissable-focus:var(--box-shadow-focus);--background-button-dismissable-hover:var(\n    --telekom-color-ui-state-fill-hovered\n  );--background-button-standard-strong-dismissible-hover:var(\n    --telekom-color-ui-state-fill-hovered-inverted\n  );--background-button-standard-dismissible-hover:var(\n    --telekom-color-ui-state-fill-hovered\n  );--background-button-dismissable-active:var(\n    --telekom-color-ui-state-fill-pressed\n  );--height-button-dismissable:20px;--width-button-dismissable:20px;--height-button-dismissable-small:16px;--width-button-dismissable-small:16px;--spacing-small:0 var(--telekom-spacing-composition-space-04);--font-size-small:var(--telekom-typography-font-size-small);--line-height-small:var(--telekom-typography-line-spacing-loose)}/*!@.tag*/.tag.sc-scale-tag{display:inline-flex;outline:none;padding:0 8px;text-align:center;transition:all 0.15s ease-in-out;align-items:center;white-space:nowrap;border-radius:var(--telekom-radius-small);vertical-align:baseline;justify-content:center;font:var(--font);line-height:1;background:var(--background);color:var(--color);cursor:default;height:var(--height)}/*!@.tag scale-icon-action-close*/.tag.sc-scale-tag scale-icon-action-close.sc-scale-tag{color:var(--icon-color)}/*!@.tag:not(.tag--disabled) scale-icon-action-close:hover*/.tag.sc-scale-tag:not(.tag--disabled) scale-icon-action-close.sc-scale-tag:hover{color:var(--icon-color-hover)}/*!@.tag::slotted(*)*/.tag.sc-scale-tag-s>*{padding:100px}/*!@.tag--dismissable*/.tag--dismissable.sc-scale-tag{padding:0 0 0 8px}/*!@.tag--dismissable button*/.tag--dismissable.sc-scale-tag button.sc-scale-tag{border:none;cursor:pointer;height:var(--height-button-dismissable);width:var(--width-button-dismissable);margin:0;outline:none;padding:0;background:transparent;margin:var(--spacing-dismissable);border-radius:var(--radius);align-items:center}/*!@.tag--dismissable scale-icon-action-close*/.tag--dismissable.sc-scale-tag scale-icon-action-close.sc-scale-tag{display:flex !important;align-items:center;justify-content:center}/*!@.tag--dismissable button:focus*/.tag--dismissable.sc-scale-tag button.sc-scale-tag:focus{justify-content:center;outline:var(--focus-outline);outline-offset:1px}/*!@.tag--dismissable:not(.tag--disabled) button:hover*/.tag--dismissable.sc-scale-tag:not(.tag--disabled) button.sc-scale-tag:hover{background:var(--background-button-dismissable-hover)}/*!@.tag--dismissable.tag--color-standard:not(.tag--disabled) button:hover*/.tag--dismissable.tag--color-standard.sc-scale-tag:not(.tag--disabled) button.sc-scale-tag:hover{background:var(--background-button-standard-dismissible-hover)}/*!@.tag--dismissable.tag--type-strong.tag--color-standard:not(.tag--disabled)\n  button:hover*/.tag--dismissable.tag--type-strong.tag--color-standard.sc-scale-tag:not(.tag--disabled) button.sc-scale-tag:hover{background:var(--background-button-standard-strong-dismissible-hover)}/*!@.tag--dismissable button:active*/.tag--dismissable.sc-scale-tag button.sc-scale-tag:active{background:var(--background-button-dismissable-active)}/*!@.tag--dismissable.tag--color-standard button:active*/.tag--dismissable.tag--color-standard.sc-scale-tag button.sc-scale-tag:active{background:var(--background-button-standard-dismissible-hover)}/*!@.tag--dismissable.tag--type-strong.tag--color-standard button:active*/.tag--dismissable.tag--type-strong.tag--color-standard.sc-scale-tag button.sc-scale-tag:active{background:var(--background-button-standard-strong-dismissible-hover)}/*!@.tag--size-small*/.tag--size-small.sc-scale-tag{font-size:var(--font-size-small);padding:0 6px;height:var(--height-small)}/*!@.tag--size-small.tag--dismissable*/.tag--size-small.tag--dismissable.sc-scale-tag{padding-right:0px}/*!@.tag--size-small.tag--dismissable button*/.tag--size-small.tag--dismissable.sc-scale-tag button.sc-scale-tag{height:var(--height-button-dismissable-small);width:var(--width-button-dismissable-small);margin:var(--spacing-dismissable-small)}/*!@.tag--disabled*/.tag--disabled.sc-scale-tag{background-color:var(--telekom-color-ui-faint) !important;color:var(--color-disabled) !important;pointer-events:none}/*!@.tag--disabled scale-icon-action-close*/.tag--disabled.sc-scale-tag scale-icon-action-close.sc-scale-tag{color:var(--color-disabled) !important;pointer-events:none}/*!@.tag--link*/.tag--link.sc-scale-tag{text-decoration:none}/*!@.tag--link:focus*/.tag--link.sc-scale-tag:focus{outline:var(--focus-outline)}/*!@.tag--link*/.tag--link.sc-scale-tag{background:var(--background-secondary)}/*!@.tag--link:hover*/.tag--link.sc-scale-tag:hover{background:var(--background-secondary)}/*!@.tag--type-standard.tag--color-cyan*/.tag--type-standard.tag--color-cyan.sc-scale-tag{background-color:var(--telekom-color-additional-cyan-subtle);color:var(--telekom-color-text-and-icon-on-subtle-cyan)}/*!@.tag--type-standard.tag--color-cyan.tag--dismissable scale-icon-action-close*/.tag--type-standard.tag--color-cyan.tag--dismissable.sc-scale-tag scale-icon-action-close.sc-scale-tag{color:var(--telekom-color-text-and-icon-on-subtle-cyan)}/*!@.tag--type-standard.tag--color-yellow*/.tag--type-standard.tag--color-yellow.sc-scale-tag{background-color:var(--telekom-color-additional-yellow-subtle);color:var(--telekom-color-text-and-icon-on-subtle-yellow)}/*!@.tag--type-standard.tag--color-yellow.tag--dismissable scale-icon-action-close*/.tag--type-standard.tag--color-yellow.tag--dismissable.sc-scale-tag scale-icon-action-close.sc-scale-tag{color:var(--telekom-color-text-and-icon-on-subtle-yellow)}/*!@.tag--type-standard.tag--color-green*/.tag--type-standard.tag--color-green.sc-scale-tag{background-color:var(--telekom-color-functional-success-subtle);color:var(--telekom-color-text-and-icon-on-subtle-success)}/*!@.tag--type-standard.tag--color-green.tag--dismissable scale-icon-action-close*/.tag--type-standard.tag--color-green.tag--dismissable.sc-scale-tag scale-icon-action-close.sc-scale-tag{color:var(--telekom-color-text-and-icon-on-subtle-success)}/*!@.tag--type-standard.tag--color-orange*/.tag--type-standard.tag--color-orange.sc-scale-tag{background-color:var(--telekom-color-functional-warning-subtle);color:var(--telekom-color-text-and-icon-on-subtle-warning)}/*!@.tag--type-standard.tag--color-orange.tag--dismissable scale-icon-action-close*/.tag--type-standard.tag--color-orange.tag--dismissable.sc-scale-tag scale-icon-action-close.sc-scale-tag{color:var(--telekom-color-text-and-icon-on-subtle-warning)}/*!@.tag--type-standard.tag--color-red*/.tag--type-standard.tag--color-red.sc-scale-tag{background-color:var(--telekom-color-functional-danger-subtle);color:var(--telekom-color-text-and-icon-on-subtle-danger)}/*!@.tag--type-standard.tag--color-red.tag--dismissable scale-icon-action-close*/.tag--type-standard.tag--color-red.tag--dismissable.sc-scale-tag scale-icon-action-close.sc-scale-tag{color:var(--telekom-color-text-and-icon-on-subtle-danger)}/*!@.tag--type-standard.tag--color-violet*/.tag--type-standard.tag--color-violet.sc-scale-tag{background-color:var(--telekom-color-additional-violet-subtle);color:var(--telekom-color-text-and-icon-on-subtle-violet)}/*!@.tag--type-standard.tag--color-violet.tag--dismissable scale-icon-action-close*/.tag--type-standard.tag--color-violet.tag--dismissable.sc-scale-tag scale-icon-action-close.sc-scale-tag{color:var(--telekom-color-text-and-icon-on-subtle-violet)}/*!@.tag--type-standard.tag--color-brown*/.tag--type-standard.tag--color-brown.sc-scale-tag{background-color:var(--telekom-color-additional-brown-subtle);color:var(--telekom-color-text-and-icon-on-subtle-brown)}/*!@.tag--type-standard.tag--color-brown.tag--dismissable scale-icon-action-close*/.tag--type-standard.tag--color-brown.tag--dismissable.sc-scale-tag scale-icon-action-close.sc-scale-tag{color:var(--telekom-color-text-and-icon-on-subtle-brown)}/*!@.tag--type-standard.tag--color-olive*/.tag--type-standard.tag--color-olive.sc-scale-tag{background-color:var(--telekom-color-additional-olive-subtle);color:var(--telekom-color-text-and-icon-on-subtle-olive)}/*!@.tag--type-standard.tag--color-olive.tag--dismissable scale-icon-action-close*/.tag--type-standard.tag--color-olive.tag--dismissable.sc-scale-tag scale-icon-action-close.sc-scale-tag{color:var(--telekom-color-text-and-icon-on-subtle-olive)}/*!@.tag--type-standard.tag--color-teal*/.tag--type-standard.tag--color-teal.sc-scale-tag{background-color:var(--telekom-color-additional-teal-subtle);color:var(--telekom-color-text-and-icon-on-subtle-teal)}/*!@.tag--type-standard.tag--color-teal.tag--dismissable scale-icon-action-close*/.tag--type-standard.tag--color-teal.tag--dismissable.sc-scale-tag scale-icon-action-close.sc-scale-tag{color:var(--telekom-color-text-and-icon-on-subtle-teal)}/*!@.tag--type-strong.tag--color-standard*/.tag--type-strong.tag--color-standard.sc-scale-tag{background-color:var(--telekom-color-ui-extra-strong);color:var(--telekom-color-text-and-icon-inverted-standard)}/*!@.tag--type-strong.tag--color-standard.tag--dismissable scale-icon-action-close*/.tag--type-strong.tag--color-standard.tag--dismissable.sc-scale-tag scale-icon-action-close.sc-scale-tag{color:var(--telekom-color-text-and-icon-inverted-additional)}/*!@.tag--type-strong.tag--color-cyan*/.tag--type-strong.tag--color-cyan.sc-scale-tag{background-color:var(--telekom-color-additional-cyan-400);color:var(--telekom-color-text-and-icon-black-standard)}/*!@.tag--type-strong.tag--color-cyan.tag--dismissable scale-icon-action-close*/.tag--type-strong.tag--color-cyan.tag--dismissable.sc-scale-tag scale-icon-action-close.sc-scale-tag{color:var(--telekom-color-text-and-icon-black-additional)}/*!@.tag--type-strong.tag--color-yellow*/.tag--type-strong.tag--color-yellow.sc-scale-tag{background-color:var(--telekom-color-additional-yellow-400);color:var(--telekom-color-text-and-icon-black-standard)}/*!@.tag--type-strong.tag--color-yellow.tag--dismissable scale-icon-action-close*/.tag--type-strong.tag--color-yellow.tag--dismissable.sc-scale-tag scale-icon-action-close.sc-scale-tag{color:var(--telekom-color-text-and-icon-black-additional)}/*!@.tag--type-strong.tag--color-green*/.tag--type-strong.tag--color-green.sc-scale-tag{background-color:var(--telekom-color-functional-success-standard);color:var(--telekom-color-text-and-icon-black-standard)}/*!@.tag--type-strong.tag--color-green.tag--dismissable scale-icon-action-close*/.tag--type-strong.tag--color-green.tag--dismissable.sc-scale-tag scale-icon-action-close.sc-scale-tag{color:var(--telekom-color-text-and-icon-black-additional)}/*!@.tag--type-strong.tag--color-orange*/.tag--type-strong.tag--color-orange.sc-scale-tag{background-color:var(--telekom-color-functional-warning-standard);color:var(--telekom-color-text-and-icon-black-standard)}/*!@.tag--type-strong.tag--color-orange.tag--dismissable scale-icon-action-close*/.tag--type-strong.tag--color-orange.tag--dismissable.sc-scale-tag scale-icon-action-close.sc-scale-tag{color:var(--telekom-color-text-and-icon-black-additional)}/*!@.tag--type-strong.tag--color-red*/.tag--type-strong.tag--color-red.sc-scale-tag{background-color:var(--telekom-color-functional-danger-standard);color:var(--telekom-color-text-and-icon-black-standard)}/*!@.tag--type-strong.tag--color-red.tag--dismissable scale-icon-action-close*/.tag--type-strong.tag--color-red.tag--dismissable.sc-scale-tag scale-icon-action-close.sc-scale-tag{color:var(--telekom-color-text-and-icon-black-additional)}/*!@.tag--type-strong.tag--color-violet*/.tag--type-strong.tag--color-violet.sc-scale-tag{background-color:var(--telekom-color-additional-violet-300);color:var(--telekom-color-text-and-icon-black-standard)}/*!@.tag--type-strong.tag--color-violet.tag--dismissable scale-icon-action-close*/.tag--type-strong.tag--color-violet.tag--dismissable.sc-scale-tag scale-icon-action-close.sc-scale-tag{color:var(--telekom-color-text-and-icon-black-additional)}/*!@.tag--type-strong.tag--color-brown*/.tag--type-strong.tag--color-brown.sc-scale-tag{background-color:var(--telekom-color-additional-brown-400);color:var(--telekom-color-text-and-icon-black-standard)}/*!@.tag--type-strong.tag--color-brown.tag--dismissable scale-icon-action-close*/.tag--type-strong.tag--color-brown.tag--dismissable.sc-scale-tag scale-icon-action-close.sc-scale-tag{color:var(--telekom-color-text-and-icon-black-additional)}/*!@.tag--type-strong.tag--color-olive*/.tag--type-strong.tag--color-olive.sc-scale-tag{background-color:var(--telekom-color-additional-olive-400);color:var(--telekom-color-text-and-icon-black-standard)}/*!@.tag--type-strong.tag--color-olive.tag--dismissable scale-icon-action-close*/.tag--type-strong.tag--color-olive.tag--dismissable.sc-scale-tag scale-icon-action-close.sc-scale-tag{color:var(--telekom-color-text-and-icon-black-additional)}/*!@.tag--type-strong.tag--color-teal*/.tag--type-strong.tag--color-teal.sc-scale-tag{background-color:var(--telekom-color-additional-teal-400);color:var(--telekom-color-text-and-icon-black-standard)}/*!@.tag--type-strong.tag--color-teal.tag--dismissable scale-icon-action-close*/.tag--type-strong.tag--color-teal.tag--dismissable.sc-scale-tag scale-icon-action-close.sc-scale-tag{color:var(--telekom-color-text-and-icon-black-additional)}";

class Tag {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleClose = createEvent$1(this, "scale-close", 7);
    this.scaleCloseLegacy = createEvent$1(this, "scaleClose", 7);
    /** (optional) Tag type */
    this.type = 'standard';
    /** (optional) Tag color */
    this.color = 'standard';
    /** (optional) Tag href */
    this.href = '';
    /** (optional) Tag target */
    this.target = '_self';
    /** (optional) Tag dismissable */
    this.dismissable = false;
    /** (optional) Tag disabled */
    this.disabled = false;
    /** (optional) Dismiss label */
    this.dismissText = 'dismiss';
    this.handleClose = (event) => {
      event.preventDefault();
      event.stopPropagation();
      if (this.disabled) {
        return;
      }
      emitEvent$1(this, 'scaleClose', event);
    };
  }
  componentWillUpdate() { }
  disconnectedCallback() { }
  render() {
    const Element = !!this.href && !this.disabled ? 'a' : 'span';
    const linkProps = !!this.href
      ? {
        href: this.href,
        target: this.target,
      }
      : {};
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync(Element, Object.assign({ part: this.getBasePartMap(), class: this.getCssClassMap() }, linkProps), hAsync("slot", null), this.dismissable && (hAsync("button", { part: "button-dismissable", disabled: this.disabled, "aria-label": this.dismissText, onClick: this.handleClose }, hAsync("scale-icon-action-close", { part: "icon-dismissable", size: 16 }))))));
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const component = 'tag';
    const prefix = mode === 'basePart' ? '' : `${component}--`;
    return classnames(mode === 'basePart' ? 'base' : component, this.size && `${prefix}size-${this.size}`, this.type && `${prefix}type-${this.type}`, this.color && `${prefix}color-${this.color}`, !!this.href && `${prefix}link`, !!this.dismissable && `${prefix}dismissable`, !!this.disabled && `${prefix}disabled`);
  }
  static get style() { return tagCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-tag",
    "$members$": {
      "size": [1],
      "type": [1],
      "color": [1],
      "href": [1],
      "target": [1],
      "dismissable": [4],
      "disabled": [4],
      "dismissText": [1, "dismiss-text"],
      "styles": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const telekomFooterCss = ".scale-telekom-footer{--font-size:var(--telekom-typography-font-size-caption);--font-color:var(--telekom-color-text-and-icon-white-standard);--font-large:var(--telekom-text-style-ui);--background-footer:var(--telekom-color-ui-black);--background-footer-minimal:var(--telekom-color-background-canvas);--_nav-items-bottom-margin:var(--telekom-spacing-composition-space-08);--_nav-items-spacing:var(--telekom-spacing-composition-space-05)}.scale-telekom-footer :where(ul),.scale-telekom-footer[type='minimal'] :where(ul){display:flex;flex-wrap:wrap;align-items:flex-start;flex-direction:column;gap:var(--_nav-items-spacing);padding:0;margin:0;width:100%;color:var(--font-color);list-style:none}.scale-telekom-footer[type='minimal'] scale-telekom-footer-content{--background-footer:var(--background-footer-minimal);--_font-color:var(--telekom-color-text-and-icon-additional);--_display-logo:none;--_navigation-container-padding:var(--telekom-spacing-composition-space-06) 0\n    var(--telekom-spacing-composition-space-06) 0;--_nav-items-bottom-margin:0}.scale-telekom-footer :where(a,span),.scale-telekom-footer[type='minimal'] :where(a,span){display:flex;justify-content:center;font-size:var(--font-size);color:var(--font-color);line-height:140%;text-decoration:none;border:1px solid rgba(0, 0, 0, 0);border-radius:2px}.scale-telekom-footer[type='minimal'] :where(a,span){color:var(--telekom-color-text-and-icon-standard)}.scale-telekom-footer[type='minimal'] :where(ul){margin-bottom:0}.scale-telekom-footer[type='minimal'] a:hover{color:var(--telekom-color-text-and-icon-primary-hovered)}.scale-telekom-footer[type='minimal'] a:active{color:var(--telekom-color-text-and-icon-primary-pressed)}.scale-telekom-footer :where(a:hover){border-radius:0;border-bottom:1px solid var(--font-color)}.scale-telekom-footer :where(a:active){color:var(--telekom-color-text-and-icon-white-additional);border-bottom:1px solid var(--telekom-color-text-and-icon-white-additional)}.scale-telekom-footer[type='minimal'] :where(a:focus-visible){outline:var(--telekom-line-weight-highlight) solid\n    var(--telekom-color-functional-focus-standard);outline-offset:1px}.scale-telekom-footer:not([type='minimal']) :where(a:focus-visible){outline:var(--telekom-line-weight-highlight) solid\n    var(--telekom-color-functional-focus-on-dark-background);outline-offset:1px}.scale-telekom-footer:not([type='minimal']) scale-telekom-footer-extended-navigation-column :where(a:focus-visible){outline:var(--telekom-line-weight-highlight) solid\n    var(--telekom-color-functional-focus-standard);outline-offset:1px}@media screen and (min-width: 640px){.scale-telekom-footer :where(ul),.scale-telekom-footer[type='minimal'] :where(ul){display:flex;flex-direction:row;align-items:center;list-style:none;column-gap:var(--_nav-items-spacing);row-gap:var(--telekom-spacing-composition-space-03)}}@media screen and (min-width: 1040px){.scale-telekom-footer :where(ul),.scale-telekom-footer[type='minimal'] :where(ul){--_nav-items-spacing:var(--telekom-spacing-composition-space-08);row-gap:var(--telekom-spacing-composition-space-04)}.scale-telekom-footer :where(a,span){font:var(--font-large)}}@media screen and (min-width: 1296px){.scale-telekom-footer :where(ul),.scale-telekom-footer[type='minimal'] :where(ul){--_nav-items-spacing:var(--telekom-spacing-composition-space-14)}}";

class TelekomFooter {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.type = 'standard';
  }
  render() {
    return (hAsync(Host$1, { class: classnames('scale-telekom-footer', {
      // slim: this.type === 'minimal',
      }) }, hAsync("slot", null)));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return telekomFooterCss; }
  static get cmpMeta() { return {
    "$flags$": 4,
    "$tagName$": "scale-telekom-footer",
    "$members$": {
      "type": [513]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["type", "type"]]
  }; }
}

const telekomFooterContentCss = "/*!@:host*/.sc-scale-telekom-footer-content-h{--_max-width-container:none;--_spacing-x-container:var(--telekom-spacing-composition-space-06);--_nav-items-bottom-margin:var(--telekom-spacing-composition-space-08);--_nav-items-spacing:var(--telekom-spacing-composition-space-05);--_logo-top-margin:var(--telekom-spacing-composition-space-12);--_logo-bottom-margin:var(--telekom-spacing-composition-space-12);--_font-color:var(--telekom-color-text-and-icon-white-standard);--_font-size:var(--telekom-typography-font-size-caption);--focus-outline:var(--telekom-line-weight-highlight) solid\n    var(--telekom-color-functional-focus-standard);--_display-logo:flex;--_navigation-container-padding:0 0 0 0}/*!@footer*/footer.sc-scale-telekom-footer-content{width:100%;background-color:var(--background-footer);display:flex;justify-content:center;flex-direction:column;padding-bottom:var(--_nav-items-bottom-margin);align-items:center}/*!@[part~='base']*/[part~='base'].sc-scale-telekom-footer-content{height:100%;max-width:var(--_max-width-container);padding-left:var(--_spacing-x-container);padding-right:var(--_spacing-x-container);position:relative;display:flex;flex:1;flex-direction:column;width:-moz-available;width:-webkit-fill-available;width:fill-available}/*!@[part~='logo']*/[part~='logo'].sc-scale-telekom-footer-content{display:var(--_display-logo);justify-content:center;height:100%;width:100%;margin-top:var(--_logo-top-margin);margin-bottom:var(--_logo-bottom-margin)}/*!@[part~='body']*/[part~='body'].sc-scale-telekom-footer-content{display:flex;flex-direction:column;width:100%;padding:var(--_navigation-container-padding);margin:0;bottom:0}/*!@[part~='notice']*/[part~='notice'].sc-scale-telekom-footer-content{color:var(--_font-color);display:flex;flex:1 0 auto;margin-bottom:var(--telekom-spacing-composition-space-07);font-size:var(--_font-size);line-height:140%;margin-right:var(--telekom-spacing-composition-space-07)}/*!@[part~='app-logo']*/[part~='app-logo'].sc-scale-telekom-footer-content{--logo-size:var(--telekom-spacing-composition-space-11)}/*!@.scale-icon*/.scale-icon.sc-scale-telekom-footer-content{height:16px;width:16px;margin-right:9px}@media screen and (min-width: 640px){/*!@:host*/.sc-scale-telekom-footer-content-h{--_logo-top-margin:var(--telekom-spacing-composition-space-10);--_logo-bottom-margin:var(--telekom-spacing-composition-space-14);--_nav-items-spacing:var(--telekom-spacing-composition-space-06)}/*!@[part~='body']*/[part~='body'].sc-scale-telekom-footer-content{flex-direction:column}/*!@[part~='navigation'] ul*/[part~='navigation'].sc-scale-telekom-footer-content ul.sc-scale-telekom-footer-content{list-style:none;display:flex;flex-direction:row;align-items:center}/*!@[part~='notice']*/[part~='notice'].sc-scale-telekom-footer-content{margin-bottom:var(--telekom-spacing-composition-space-04)}}@media screen and (min-width: 1040px){/*!@:host*/.sc-scale-telekom-footer-content-h{--_logo-top-margin:var(--telekom-spacing-composition-space-14);--_logo-bottom-margin:var(--telekom-spacing-composition-space-18);--_nav-items-spacing:var(--telekom-spacing-composition-space-08);--_slim-padding:var(--telekom-spacing-composition-space-08);--_font-size:var(--telekom-typography-font-size-body);--_spacing-x-container:var(--telekom-spacing-composition-space-08)}/*!@[part~='body']*/[part~='body'].sc-scale-telekom-footer-content{flex-direction:row}/*!@:host [part~='app-logo']*/.sc-scale-telekom-footer-content-h [part~='app-logo'].sc-scale-telekom-footer-content{--logo-size:var(--telekom-spacing-composition-space-13)}/*!@:host [part~='notice']*/.sc-scale-telekom-footer-content-h [part~='notice'].sc-scale-telekom-footer-content{margin-bottom:0}}@media screen and (min-width: 1296px){/*!@:host*/.sc-scale-telekom-footer-content-h{--_logo-top-margin:var(--telekom-spacing-composition-space-16);--_logo-bottom-margin:var(--telekom-spacing-composition-space-19);--_nav-items-bottom-margin:var(--telekom-spacing-composition-space-10);--_nav-items-spacing:var(--telekom-spacing-composition-space-14);--_slim-padding:var(--telekom-spacing-composition-space-10)}/*!@:host [part~='app-logo']*/.sc-scale-telekom-footer-content-h [part~='app-logo'].sc-scale-telekom-footer-content{--logo-size:var(--telekom-spacing-composition-space-14)}}@media screen and (min-width: 1680px){/*!@:host*/.sc-scale-telekom-footer-content-h{--_max-width-container:var(--scl-grid-max-width, 1504px);--_logo-top-margin:var(--telekom-spacing-composition-space-18);--_logo-bottom-margin:96px}/*!@:host [part~='app-logo']*/.sc-scale-telekom-footer-content-h [part~='app-logo'].sc-scale-telekom-footer-content{--logo-size:var(--telekom-spacing-composition-space-16)}}";

class TelekomFooterContent {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) Logo link */
    this.logoHref = '';
    /** (optional) set logo specific title */
    this.logoTitle = 'Telekom Logo';
    /** (optional) set logo specific title */
    this.logoHideTitle = false;
  }
  render() {
    return (hAsync(Host$1, null, hAsync("footer", null, hAsync("slot", { name: "extended-navigation" }), hAsync("div", { part: "base" }, hAsync("div", { part: "logo" }, hAsync("scale-logo", { part: "app-logo", variant: "white", style: {
        '--focus-outline': 'var(--telekom-line-weight-highlight) solid var(--telekom-color-functional-focus-on-dark-background)',
      }, transparent: true, href: this.logoHref, logoHideTitle: this.logoHideTitle, logoTitle: this.logoHideTitle ? undefined : this.logoTitle, focusable: this.logoHref ? true : false })), hAsync("div", { part: "body" }, hAsync("div", { part: "notice" }, hAsync("slot", { name: "notice" })), hAsync("div", { part: "navigation" }, hAsync("slot", { name: "navigation" })))))));
  }
  static get style() { return telekomFooterContentCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-telekom-footer-content",
    "$members$": {
      "logoHref": [1, "logo-href"],
      "logoTitle": [1, "logo-title"],
      "logoHideTitle": [4, "logo-hide-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

// import { findRootNode, findSelected } from '../../../utils/menu-utils';
// import { renderIcon } from '../../../utils/render-icon';
const readData$2 = (data) => {
  let parsedData;
  try {
    parsedData = JSON.parse(data);
  }
  catch (error) {
    parsedData = data;
  }
  return parsedData;
};
class TelekomFooterDataBackCompat {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.type = 'standard';
    this.footerNavigation = [];
    this.copyright = '© Deutsche Telekom AG';
  }
  render() {
    return (hAsync("scale-telekom-footer", { type: this.type }, hAsync("scale-telekom-footer-content", null, hAsync("span", { slot: "notice" }, " ", this.copyright, " "), hAsync("ul", { slot: "navigation" }, readData$2(this.footerNavigation).map(({ name, id, href = 'javascript:void(0);', target = '_self', }) => {
      return (hAsync("li", null, hAsync("a", { href: href, id: id, target: target }, name)));
    })))));
  }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-telekom-footer-data-back-compat",
    "$members$": {
      "type": [513],
      "footerNavigation": [8, "footer-navigation"],
      "copyright": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["type", "type"]]
  }; }
}

const telekomFooterExtendedNavigationCss = "[part~='telekom-footer-extended-navigation']{--extended-navigation-background:var(\n    --telekom-color-background-surface-subtle\n  );--_max-width-container:var(--scl-grid-max-width, 1680px);--spacing-x:var(--telekom-spacing-composition-space-08);--column-gap:var(--telekom-spacing-composition-space-10);--heading-color:var(--telekom-color-text-and-icon-standard);--heading-weight:var(--telekom-typography-font-weight-bold);--link-color:var(--telekom-color-text-and-icon-standard);width:100%;display:flex;background-color:var(--extended-navigation-background);align-items:center;justify-content:center}[part~='extended-navigation-container']{max-width:var(--_max-width-container);padding-left:var(--_spacing-x-container);padding-right:var(--_spacing-x-container);width:100%;display:flex;flex-direction:column}[part~='telekom-footer-extended-navigation'] :where(ul){display:flex;flex-direction:column;align-items:flex-start;list-style:none;padding:0;margin:0;gap:0}[part~='telekom-footer-extended-navigation'] :where(a){font:var(--telekom-text-style-body);color:var(--link-color);margin-top:var(--telekom-spacing-composition-space-07);border:none}[part~='telekom-footer-extended-navigation'] :where(li:first-child){padding-top:1px}[part~='telekom-footer-extended-navigation'] :where(li:first-child) a{margin-top:0}[part~='telekom-footer-extended-navigation'] :where(a):hover{color:var(--telekom-color-text-and-icon-primary-hovered)}[part~='telekom-footer-extended-navigation'] :where(a):active{color:var(--telekom-color-text-and-icon-primary-pressed)}[part~='telekom-footer-extended-navigation'] :where(scale-telekom-footer-extended-navigation-column){display:grid;flex-direction:column;grid-column:auto / span 4}scale-telekom-footer-extended-navigation-column,scale-telekom-footer-extended-navigation-column[expanded]{border-bottom:1px solid var(--telekom-color-ui-faint)}scale-telekom-footer-extended-navigation-column:last-of-type,scale-telekom-footer-extended-navigation-column[expanded]:last-of-type{border-bottom:none;margin-bottom:var(--telekom-spacing-composition-space-07);padding-bottom:0}scale-telekom-footer-extended-navigation-column:first-of-type{margin-top:var(--telekom-spacing-composition-space-07)}@media screen and (min-width: 640px){[part~='telekom-footer-extended-navigation'] :where(li:first-child){padding-top:var(--telekom-spacing-composition-space-07)}[part~='extended-navigation-container']{display:grid;grid-template-columns:repeat(16, minmax(0, 1fr));column-gap:var(--column-gap)}scale-telekom-footer-extended-navigation-column,scale-telekom-footer-extended-navigation-column[expanded],scale-telekom-footer-extended-navigation-column:first-of-type,scale-telekom-footer-extended-navigation-column:last-of-type,scale-telekom-footer-extended-navigation-column[expanded]:last-of-type{margin-bottom:var(--telekom-spacing-composition-space-14);margin-top:var(--telekom-spacing-composition-space-14);padding-bottom:0;border-bottom:0}}@media screen and (max-width: 640px){[part~='telekom-footer-extended-navigation'] :where(ul){padding-bottom:20px}[part~='telekom-footer-extended-navigation'] :where(li:first-child){padding-top:0px}}";

class TelekomFooterExtendedNavigation {
  constructor(hostRef) {
    registerInstance(this, hostRef);
  }
  //   @Prop() variant: 'standard' | 'slim' = 'standard';
  render() {
    return (hAsync(Host$1, { part: "telekom-footer-extended-navigation" }, hAsync("div", { part: "extended-navigation-container" }, hAsync("slot", null))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return telekomFooterExtendedNavigationCss; }
  static get cmpMeta() { return {
    "$flags$": 4,
    "$tagName$": "scale-telekom-footer-extended-navigation",
    "$members$": undefined,
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const telekomFooterExtendedNavigationColumnCss = "/*!@[part~='telekom-footer-extended-navigation-column']*/[part~='telekom-footer-extended-navigation-column'].sc-scale-telekom-footer-extended-navigation-column{--heading-color:var(--telekom-color-text-and-icon-standard);--heading-weight:var(--telekom-typography-font-weight-bold);--link-color:var(--telekom-color-text-and-icon-standard)}/*!@[part~='links-hidden']*/[part~='links-hidden'].sc-scale-telekom-footer-extended-navigation-column{display:none}/*!@[part~='links-expanded']*/[part~='links-expanded'].sc-scale-telekom-footer-extended-navigation-column{display:block}/*!@[part~='telekom-footer-extended-navigation-column-links']*/[part~='telekom-footer-extended-navigation-column-links'].sc-scale-telekom-footer-extended-navigation-column{font-size:var(--telekom-typography-font-size-body);line-height:140%}/*!@[part~='heading'],\n[part~='heading-button']*/[part~='heading'].sc-scale-telekom-footer-extended-navigation-column,[part~='heading-button'].sc-scale-telekom-footer-extended-navigation-column{font-family:var(--telekom-typography-font-family-sans);font-size:var(--telekom-typography-font-size-body);line-height:140%;margin:0;color:var(--heading-color);font-weight:var(--heading-weight);background:none;border:none}/*!@[part~='heading-button']*/[part~='heading-button'].sc-scale-telekom-footer-extended-navigation-column{display:flex;padding:0;width:100%;cursor:pointer;align-items:center;justify-content:space-between}/*!@[part~='heading']*/[part~='heading'].sc-scale-telekom-footer-extended-navigation-column{display:none}/*!@[part~='heading-container'] h2*/[part~='heading-container'].sc-scale-telekom-footer-extended-navigation-column h2.sc-scale-telekom-footer-extended-navigation-column{margin-block-start:0;margin-block-end:0}/*!@[part~='heading-container'] button*/[part~='heading-container'].sc-scale-telekom-footer-extended-navigation-column button.sc-scale-telekom-footer-extended-navigation-column{padding-top:20px;padding-bottom:20px}/*!@scale-divider*/scale-divider.sc-scale-telekom-footer-extended-navigation-column{--spacing:0}@media screen and (min-width: 640px){/*!@[part~='heading-with-button']*/[part~='heading-with-button'].sc-scale-telekom-footer-extended-navigation-column{display:none}/*!@[part~='heading']*/[part~='heading'].sc-scale-telekom-footer-extended-navigation-column{display:block}/*!@[part~='telekom-footer-extended-navigation-column-links']*/[part~='telekom-footer-extended-navigation-column-links'].sc-scale-telekom-footer-extended-navigation-column{display:block}/*!@scale-divider*/scale-divider.sc-scale-telekom-footer-extended-navigation-column{display:none}}/*!@[part~='expanded'] scale-icon-navigation-collapse-down*/[part~='expanded'].sc-scale-telekom-footer-extended-navigation-column scale-icon-navigation-collapse-down.sc-scale-telekom-footer-extended-navigation-column{transform:rotate(0.5turn)}";

// import { emitEvent } from '../../../utils/utils';
class TelekomFooterExtendedNavigationColumn {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** Set to `true` to expand */
    this.expanded = false;
    // Optional heading level - default h2
    this.headingLevel = '2';
    this.handleClick = () => {
      this.expanded = !this.expanded;
      // emitEvent(this, 'scaleExpand', { expanded: this.expanded });
    };
  }
  render() {
    return (hAsync(Host$1, null, hAsync("div", { part: classnames('telekom-footer-extended-navigation-column', {
        expanded: this.expanded,
      }) }, hAsync("div", { part: "heading-container" }, hAsync("span", { role: "heading", "aria-level": this.headingLevel, part: "heading-with-button" }, hAsync("button", { onClick: this.handleClick, part: "heading-button" }, hAsync("span", null, " ", this.heading), hAsync("scale-icon-navigation-collapse-down", { selected: true, size: 16 }))), hAsync("span", { part: "heading", role: "heading", "aria-level": this.headingLevel }, this.heading)), hAsync("div", { part: classnames('telekom-footer-extended-navigation-column-links', this.expanded ? 'links-expanded' : 'links-hidden') }, hAsync("slot", null)))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return telekomFooterExtendedNavigationColumnCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-telekom-footer-extended-navigation-column",
    "$members$": {
      "heading": [1],
      "expanded": [516],
      "headingLevel": [1, "heading-level"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["expanded", "expanded"]]
  }; }
}

const telekomHeaderCss = "/*!@:host*/.sc-scale-telekom-header-h{--shadow:0px 2px 9px rgba(0, 0, 0, 0.15);--background:var(--telekom-color-background-surface);--background-logo:var(--telekom-color-primary-standard);--transition-common-scrolled:height var(--telekom-motion-duration-immediate)\n      var(--telekom-motion-easing-standard),\n    width var(--telekom-motion-duration-immediate),\n    margin var(--telekom-motion-duration-immediate);--font-size-app-name:var(--telekom-typography-font-size-body);--line-height-app-name:var(--telekom-typography-line-spacing-tight);--font-weight-app-name:var(--telekom-typography-font-weight-extra-bold);--_height:60px;--_base-height:60px;--_height-logo-svg:36px;--_height-bottom-bar:60px;--_height-top-bar:0;--_display-bottom-app-name:none;--_display-top-app-name:none;--_display-main-nav:none;--_display-meta-nav:none;--_display-meta-nav-external:none;--_display-lang-switcher:none;--_max-width-container:none;--_spacing-x-container:var(--telekom-spacing-composition-space-06);--_column-gap-container:var(--telekom-spacing-composition-space-10);--_grid-template-columns-container:auto;--_grid-column-body:auto;--_spacing-left-body:0;--_spacing-right-top-app-name:var(--telekom-spacing-composition-space-10);--_spacing-right-bottom-app-name:var(--telekom-spacing-composition-space-10);--_left-logo:0;--_justify-content-bottom-body:end;--_animation-name:toggle;--scl-telekom-header-height:var(--_height)}@media screen and (min-width: 640px){/*!@:host*/.sc-scale-telekom-header-h{--_display-bottom-app-name:block;--_spacing-left-body:74px}}@media screen and (min-width: 1040px){/*!@:host,\n  :host([scrolled-back])*/.sc-scale-telekom-header-h,[scrolled-back].sc-scale-telekom-header-h{--_height:84px;--_base-height:84px;--_height-logo-svg:44px;--_height-top-bar:30px;--_height-bottom-bar:54px;--_display-main-nav:block;--_display-meta-nav:block;--_display-meta-nav-external:block;--_display-lang-switcher:block;--_display-top-app-name:block;--_display-bottom-app-name:none;--_grid-template-columns-container:repeat(16, minmax(0, 1fr));--_grid-column-body:3 / span 14;--_spacing-left-body:0;--_spacing-right-bottom-app-name:52px;--_spacing-x-container:var(--telekom-spacing-composition-space-08);--_justify-content-bottom-body:space-between;--scl-telekom-header-height:var(--_height)}/*!@:host([type='slim'])*/[type='slim'].sc-scale-telekom-header-h{--_animation-name:none;--_spacing-right-bottom-app-name:var(\n      --telekom-spacing-composition-space-07\n    )}/*!@:host([type='slim'][scrolled])*/[type='slim'][scrolled].sc-scale-telekom-header-h{--_spacing-right-bottom-app-name:var(\n      --telekom-spacing-composition-space-07\n    )}/*!@:host([type='slim']),\n  :host([scrolled])*/[type='slim'].sc-scale-telekom-header-h,[scrolled].sc-scale-telekom-header-h{--_height:72px;--_height-logo-svg:40px;--_height-top-bar:0;--_height-bottom-bar:72px;--_display-meta-nav:none;--_display-meta-nav-external:none;--_display-lang-switcher:none;--_display-top-app-name:none;--_display-bottom-app-name:block;--_spacing-left-body:var(--telekom-spacing-composition-space-06);--scl-telekom-header-height:var(--_height)}/*!@:host([scrolled])*/[scrolled].sc-scale-telekom-header-h{--_spacing-left-body:0}/*!@:host([type='slim']),\n  :host([scrolled][app-name])*/[type='slim'].sc-scale-telekom-header-h,[scrolled][app-name].sc-scale-telekom-header-h{--_grid-column-body:2 / span 15}}@media screen and (min-width: 1296px){/*!@:host,\n  :host([scrolled-back])*/.sc-scale-telekom-header-h,[scrolled-back].sc-scale-telekom-header-h{--_height:96px;--_base-height:96px;--_height-logo-svg:48px;--_height-top-bar:30px;--_height-bottom-bar:66px;--scl-telekom-header-height:var(--_height)}/*!@:host([type='slim'])*/[type='slim'].sc-scale-telekom-header-h{--_height:84px;--_base-height:84px;--_height-logo-svg:44px;--_height-top-bar:0;--_height-bottom-bar:84px;--_spacing-right-bottom-app-name:var(\n      --telekom-spacing-composition-space-14\n    );--_spacing-left-body:4px}/*!@:host([type='slim'][scrolled])*/[type='slim'][scrolled].sc-scale-telekom-header-h{--_height:72px;--_height-logo-svg:40px;--_height-top-bar:0;--_height-bottom-bar:72px;--_spacing-right-bottom-app-name:var(\n      --telekom-spacing-composition-space-15\n    );--_spacing-left-body:0}}@media screen and (min-width: 1680px){/*!@:host,\n  :host([scrolled-back])*/.sc-scale-telekom-header-h,[scrolled-back].sc-scale-telekom-header-h{--_height:120px;--_base-height:120px;--_height-logo-svg:60px;--_height-top-bar:30px;--_height-bottom-bar:90px;--_spacing-right-bottom-app-name:var(\n      --telekom-spacing-composition-space-12\n    );--_left-logo:var(--_spacing-x-container);--scl-telekom-header-height:var(--_height)}/*!@:host*/.sc-scale-telekom-header-h{--_max-width-container:var(--scl-grid-max-width, 1504px)}/*!@:host([type='slim'])*/[type='slim'].sc-scale-telekom-header-h{--_height:96px;--_base-height:96px;--_height-logo-svg:48px;--_height-top-bar:0;--_height-bottom-bar:96px;--_display-meta-nav:none;--_display-meta-nav-external:none;--_display-lang-switcher:none;--_display-top-app-name:none;--_display-bottom-app-name:block;--_spacing-left-body:24px;--_spacing-right-bottom-app-name:var(\n      --telekom-spacing-composition-space-14\n    );--scl-telekom-header-height:var(--_height);--scl-telekom-header-bottom-spacing:36px}/*!@:host([type='slim'][scrolled])*/[type='slim'][scrolled].sc-scale-telekom-header-h{--_height:72px;--_height-logo-svg:40px;--_height-top-bar:0;--_height-bottom-bar:72px;--_display-meta-nav:none;--_display-meta-nav-external:none;--_display-lang-switcher:none;--_display-top-app-name:none;--_display-bottom-app-name:block;--_spacing-right-bottom-app-name:var(\n      --telekom-spacing-composition-space-12\n    );--scl-telekom-header-height:var(--_height)}}/*!@:host([type='subtle'])*/[type='subtle'].sc-scale-telekom-header-h{--shadow:none;--background:transparent}/*!@slot[name='logo']*/slot[name='logo'].sc-scale-telekom-header{position:absolute;top:0;left:var(--_left-logo);display:flex;align-items:center;justify-content:center;height:var(--_height);width:var(--_height);background:var(--background-logo);transition:var(--transition-common-scrolled)}/*!@[part~='meta-nav-external']*/[part~='meta-nav-external'].sc-scale-telekom-header{display:var(--_display-meta-nav-external);flex:1}/*!@[part~='meta-nav']*/[part~='meta-nav'].sc-scale-telekom-header{display:var(--_display-meta-nav)}/*!@[part~='lang-switcher']*/[part~='lang-switcher'].sc-scale-telekom-header{display:var(--_display-lang-switcher)}/*!@slot[name='main-nav']*/slot[name='main-nav'].sc-scale-telekom-header{display:var(--_display-main-nav);flex:1}/*!@slot[name='functions']*/slot[name='functions'].sc-scale-telekom-header{display:block}@media screen and (min-width: 1040px){/*!@slot[name='main-nav'],\n  slot[name='functions']*/slot[name='main-nav'].sc-scale-telekom-header,slot[name='functions'].sc-scale-telekom-header{padding-top:var(--telekom-spacing-composition-space-06)}}@media screen and (min-width: 1296px){/*!@slot[name='main-nav'],\n  slot[name='functions']*/slot[name='main-nav'].sc-scale-telekom-header,slot[name='functions'].sc-scale-telekom-header{padding-top:var(--telekom-spacing-composition-space-07)}}@media screen and (min-width: 1680px){/*!@slot[name='main-nav'],\n  slot[name='functions']*/slot[name='main-nav'].sc-scale-telekom-header,slot[name='functions'].sc-scale-telekom-header{padding-top:var(--telekom-spacing-composition-space-10)}/*!@:host([scrolled]) slot[name='functions'],\n  :host([scrolled]) slot[name='main-nav']*/[scrolled].sc-scale-telekom-header-h slot[name='functions'].sc-scale-telekom-header,[scrolled].sc-scale-telekom-header-h slot[name='main-nav'].sc-scale-telekom-header{padding-top:var(--telekom-spacing-composition-space-02)}}/*!@[part~='base']*/[part~='base'].sc-scale-telekom-header{height:var(--_base-height);width:100%;transition:var(--transition-common-scrolled)}/*!@[part~='fixed-wrapper']*/[part~='fixed-wrapper'].sc-scale-telekom-header{position:fixed;z-index:99;width:100%;height:var(--_height);background-color:var(--background);box-shadow:var(--shadow);transition:var(--transition-common-scrolled)}/*!@[part~='container']*/[part~='container'].sc-scale-telekom-header{box-sizing:content-box;display:grid;grid-template-columns:var(--_grid-template-columns-container);column-gap:var(--_column-gap-container);position:relative;max-width:var(--_max-width-container);margin-left:auto;margin-right:auto;padding-left:var(--_spacing-x-container);padding-right:var(--_spacing-x-container);transition:var(--transition-common-scrolled)}/*!@[part~='app-logo']*/[part~='app-logo'].sc-scale-telekom-header{height:var(--_height);width:var(--_height);display:flex;align-items:center;justify-content:center;transition:var(--transition-common-scrolled)}/*!@:host::part(logo-svg)*/.sc-scale-telekom-header-h::part(logo-svg){height:var(--_height-logo-svg);transition:var(--transition-common-scrolled);margin-top:4px}/*!@:host::part(logo)*/.sc-scale-telekom-header-h::part(logo){height:calc(var(--_height) - 6px);width:calc(var(--_height) - 6px);display:flex;align-items:center;justify-content:center;transition:var(--transition-common-scrolled)}/*!@[part~='body']*/[part~='body'].sc-scale-telekom-header{display:block;grid-column:var(--_grid-column-body);flex:1;margin-left:var(--_spacing-left-body);transition:var(--transition-common-scrolled)}/*!@[part~='top-bar']*/[part~='top-bar'].sc-scale-telekom-header{height:var(--_height-top-bar);display:flex;align-items:end;width:100%;transition:var(--transition-common-scrolled)}/*!@[part~='top-app-name']*/[part~='top-app-name'].sc-scale-telekom-header{display:var(--_display-top-app-name);margin-right:var(--_spacing-right-top-app-name)}/*!@[part~='top-body']*/[part~='top-body'].sc-scale-telekom-header{display:inline-flex;flex:1;transition:var(--transition-common-scrolled)}/*!@[part~='bottom-bar']*/[part~='bottom-bar'].sc-scale-telekom-header{display:flex;justify-content:space-between;align-items:center;transition:var(--transition-common-scrolled)}/*!@[part~='bottom-app-name']*/[part~='bottom-app-name'].sc-scale-telekom-header{display:var(--_display-bottom-app-name);margin-right:var(--_spacing-right-bottom-app-name);animation-duration:var(--telekom-motion-duration-animation);min-width:108px}@media screen and (min-width: 1040px){/*!@:host([scrolled]) [part~='bottom-app-name']*/[scrolled].sc-scale-telekom-header-h [part~='bottom-app-name'].sc-scale-telekom-header{animation-name:var(--_animation-name);animation-timing-function:var(--telekom-motion-easing-enter)}/*!@:host([scrolled-back]) [part~=' bottom-app-name']*/[scrolled-back].sc-scale-telekom-header-h [part~=' bottom-app-name'].sc-scale-telekom-header{animation-name:var(--_animation-name);animation-direction:reverse;animation-timing-function:var(--telekom-motion-easing-exit)}}/*!@[part~='bottom-body'],\n[part~='main-nav']*/[part~='bottom-body'].sc-scale-telekom-header,[part~='main-nav'].sc-scale-telekom-header{justify-content:var(--_justify-content-bottom-body);height:var(--_height-bottom-bar);display:inline-flex;flex:1;transition:var(--transition-common-scrolled)}/*!@[part~='app-name-text']*/[part~='app-name-text'].sc-scale-telekom-header{font-size:var(--font-size-app-name);font-weight:var(--font-weight-app-name);line-height:var(--line-height-app-name);color:var(--telekom-color-text-and-icon-primary-standard);letter-spacing:0.02em;text-decoration:none}@media screen and (min-width: 1040px){/*!@:host*/.sc-scale-telekom-header-h{--font-size-app-name:var(--telekom-typography-font-size-small)}}/*!@[part~='app-name-text']:hover*/[part~='app-name-text'].sc-scale-telekom-header:hover{color:var(--telekom-color-text-and-icon-primary-hovered)}/*!@[part~='app-name-text']:active*/[part~='app-name-text'].sc-scale-telekom-header:active{color:var(--telekom-color-text-and-icon-primary-pressed)}@keyframes toggle{from{opacity:0;transform:translate3d(\n      var(--translate-x),\n      var(--translate-y),\n      var(--translate-z)\n    )}}";

class TelekomHeader {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.type = '';
    this.metaNavAriaLabel = 'Meta navigation';
    this.metaNavExternalAriaLabel = 'External meta navigation';
    this.langSwitcherAriaLabel = 'Language switcher';
    this.mainNavAriaLabel = 'Main navigation';
    this.scrolledBack = false;
    this.pageYOffset = 0;
  }
  onScroll() {
    // 48px is the height of the header, set scrolled when the user scrolls past it
    // todo: calculate this value dynamically (for slim header, smaller viewports, etc)
    this.scrolled = window.pageYOffset > 48;
    this.scrolledBack =
      this.pageYOffset !== window.pageYOffset && window.pageYOffset <= 0;
    this.pageYOffset = pageYOffset;
  }
  render() {
    return (hAsync(Host$1, { scrolled: this.type !== 'subtle' && this.scrolled, "scrolled-back": this.type !== 'subtle' && this.scrolledBack }, hAsync("header", { part: classnames('base', this.type, {
        scrolled: this.type !== 'subtle' && this.scrolled,
        'scrolled-back': this.type !== 'subtle' && this.scrolledBack,
      }) }, hAsync("div", { part: "fixed-wrapper" }, hAsync("div", { part: "container" }, hAsync("slot", { name: "logo" }, hAsync("scale-logo", { part: "app-logo", variant: "white", href: this.logoHref, logoTitle: this.logoTitle, logoHideTitle: this.logoHideTitle, focusable: this.logoHref ? true : false })), hAsync("div", { part: "body" }, hAsync("div", { part: "top-bar" }, this.appName ? (hAsync("div", { part: "top-app-name" }, this.appNameLink ? (hAsync("a", { part: "app-name-text", onClick: this.appNameClick, href: this.appNameLink }, this.appName)) : (hAsync("span", { part: "app-name-text" }, this.appName)))) : null, hAsync("div", { part: "top-body" }, hAsync("nav", { part: "meta-nav-external", "aria-label": this.metaNavExternalAriaLabel }, hAsync("slot", { name: "meta-nav-external" })), hAsync("nav", { part: "meta-nav", "aria-label": this.metaNavAriaLabel }, hAsync("slot", { name: "meta-nav" })), hAsync("nav", { part: "lang-switcher", "aria-label": this.langSwitcherAriaLabel }, hAsync("slot", { name: "lang-switcher" })))), hAsync("div", { part: "bottom-bar" }, this.appName ? (hAsync("div", { part: "bottom-app-name" }, this.appNameLink ? (hAsync("a", { part: "app-name-text", onClick: this.appNameClick, href: this.appNameLink }, this.appName)) : (hAsync("span", { part: "app-name-text" }, this.appName)))) : null, hAsync("div", { part: "bottom-body" }, hAsync("nav", { part: "main-nav", "aria-label": this.mainNavAriaLabel }, hAsync("slot", { name: "main-nav" })), hAsync("slot", { name: "functions" })))))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return telekomHeaderCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-telekom-header",
    "$members$": {
      "appName": [513, "app-name"],
      "appNameLink": [1, "app-name-link"],
      "appNameClick": [8, "app-name-click"],
      "logoHref": [1, "logo-href"],
      "logoTitle": [1, "logo-title"],
      "logoHideTitle": [4, "logo-hide-title"],
      "type": [1],
      "metaNavAriaLabel": [1, "meta-nav-aria-label"],
      "metaNavExternalAriaLabel": [1, "meta-nav-external-aria-label"],
      "langSwitcherAriaLabel": [1, "lang-switcher-aria-label"],
      "mainNavAriaLabel": [1, "main-nav-aria-label"],
      "scrolled": [32],
      "scrolledBack": [32],
      "pageYOffset": [32]
    },
    "$listeners$": [[5, "scroll", "onScroll"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["appName", "app-name"]]
  }; }
}

const telekomHeaderDataBackCompatCss = "/**\n * @license\n * Scale https://github.com/telekom/scale\n *\n * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n\n\nscale-telekom-header-data-back-compat .user-menu-mobile {\n  display: block;\n}\n\nscale-telekom-header-data-back-compat .user-menu-desktop {\n  display: none;\n}\n\nscale-telekom-header-data-back-compat .user-menu-desktop scale-menu-flyout {\n  display: flex;\n}\n\nscale-telekom-header-data-back-compat .user-menu-trigger {\n  position: relative;\n  left: 24px;\n}\n\n@media screen and (min-width: 640px) {\n  scale-telekom-header-data-back-compat .user-menu-trigger {\n    top: calc(var(--_spacing-bottom-slotted-bottom) + 8px);\n  }\n}\n\n@media screen and (min-width: 1040px) {\n  scale-telekom-header-data-back-compat .user-menu-mobile {\n    display: none;\n  }\n\n  scale-telekom-header-data-back-compat .user-menu-desktop {\n    display: block;\n  }\n}\n\ndia screen and (--xl) {\n  scale-telekom-header-data-back-compat .user-menu-trigger {\n    top: calc(var(--_spacing-bottom-slotted-bottom) + 12px);\n  }\n}\n";

const readData$1 = (data) => {
  let parsedData;
  try {
    parsedData = JSON.parse(data);
  }
  catch (error) {
    parsedData = data;
  }
  return parsedData;
};
class TelekomHeaderDataBackCompat {
  constructor(hostRef) {
    registerInstance(this, hostRef);
  }
  render() {
    const { shortName = 'Login', badge, badgeLabel, } = (readData$1(this.userNavigation) || []).find(({ type }) => type === 'userInfo') || {
      shortName: 'Login',
    };
    return (hAsync("scale-telekom-header", { "app-name": this.appName, "app-name-link": this.appNameLink, "app-name-click": this.appNameClick, "logo-href": this.logoHref, "logo-title": this.logoTitle, "logo-hide-title": this.logoHideTitle }, !readData$1(this.sectorNavigation) ? null : (hAsync("scale-telekom-nav-list", { slot: "meta-nav-external", variant: "meta-nav-external", alignment: "left" }, readData$1(this.sectorNavigation).map((item) => {
      return (hAsync("scale-telekom-nav-item", null, hAsync("a", { href: item.href || 'javascript:void(0);', id: item.id, target: item.target || '_self', onClick: (event) => {
          if (typeof item.onClick === 'function') {
            item.onClick(event);
          }
        } }, item.name)));
    }))), !readData$1(this.addonNavigation) ? null : (hAsync("scale-telekom-nav-list", { slot: "meta-nav", variant: "meta-nav", alignment: "right" }, readData$1(this.addonNavigation).map((item) => {
      return (hAsync("scale-telekom-nav-item", null, hAsync("a", { href: item.href || 'javascript:void(0);', id: item.id, target: item.target || '_self', onClick: (event) => {
          if (typeof item.onClick === 'function') {
            item.onClick(event);
          }
        } }, item.name)));
    }))), !readData$1(this.mainNavigation) ? null : (hAsync("scale-telekom-nav-list", { variant: "main-nav", slot: "main-nav" }, readData$1(this.mainNavigation).map((item) => {
      const { selected } = findSelected(readData$1(this.mainNavigation), this.activeRouteId);
      const rootNode = selected &&
        findRootNode(readData$1(this.mainNavigation), selected.id);
      const isActive = (itemId) => rootNode && rootNode.id === itemId;
      return (hAsync("scale-telekom-nav-item", { active: isActive(item.id) }, hAsync("a", { href: item.href || 'javascript:void(0);', id: item.id, target: item.target || '_self', onClick: (event) => {
          if (typeof item.onClick === 'function') {
            item.onClick(event);
          }
        } }, hAsync("span", null, item.name)), !item.children ? null : (hAsync("scale-telekom-nav-flyout", { hover: true }, hAsync("scale-telekom-mega-menu", null, item.children.map((child) => {
        return (hAsync("scale-telekom-mega-menu-column", null, hAsync("a", { href: child.href || 'javascript:void(0);', target: child.target || '_self', onClick: (event) => {
            if (typeof child.onClick === 'function') {
              child.onClick(event);
            }
          }, slot: "heading" }, child.name), !child.children ? null : (hAsync("ul", null, child.children.map((grandChild) => {
          return (hAsync("li", null, hAsync("a", { href: grandChild.href ||
              'javascript:void(0);', target: grandChild.target || '_self', onClick: (event) => {
              if (typeof grandChild.onClick ===
                'function') {
                grandChild.onClick(event);
              }
            } }, grandChild.name)));
        })))));
      }))))));
    }))), !readData$1(this.iconNavigation) &&
      !readData$1(this.userNavigation) ? null : (hAsync("scale-telekom-nav-list", { variant: "functions", slot: "functions", alignment: "right" }, readData$1(this.userNavigation).length > 0 && (hAsync("scale-telekom-nav-item", { class: "user-menu-desktop" }, hAsync("a", { href: "javascript:void(0);", ref: (el) => (this.userMenuDesktopLink = el), onKeyDown: (e) => {
        if ([' ', 'Enter', 'Escape'].includes(e.key)) {
          e.preventDefault();
          this.userMenuDesktopTrigger.click();
        }
      }, onClick: (e) => {
        e.stopPropagation();
        this.userMenuDesktopTrigger.click();
      } }, hAsync("scale-menu-flyout", { direction: "bottom-left" }, badge ? (hAsync("scale-badge", { count: badgeLabel, label: shortName, "label-visually-hidden": true }, hAsync("scale-icon-user-file-user", null, " "))) : (hAsync("scale-icon-user-file-user", null, " ")), hAsync("scale-menu-flyout-list", null, hAsync("app-navigation-user-menu", { hide: () => {
        this.userMenuDesktopTrigger.click();
        this.userMenuDesktopLink.focus();
      }, navigation: readData$1(this.userNavigation) })), hAsync("div", { slot: "trigger", class: "user-menu-trigger", ref: (el) => (this.userMenuDesktopTrigger = el) }))))), readData$1(this.userNavigation).length > 0 && (hAsync("scale-telekom-nav-item", { class: "user-menu-mobile" }, hAsync("button", { ref: (el) => {
        this.userMenuMobileTrigger = el;
      } }, hAsync("scale-badge", { count: badgeLabel, label: shortName, "label-visually-hidden": true }, hAsync("scale-icon-user-file-user", null, " "))), hAsync("scale-telekom-nav-flyout", { variant: "mobile" }, hAsync("scale-telekom-mobile-flyout-canvas", null, hAsync("app-navigation-user-menu", { slot: "mobile-main-nav", hide: () => {
        this.userMenuMobileTrigger.click();
        this.userMenuMobileTrigger.focus();
      }, navigation: readData$1(this.userNavigation) }))))), (readData$1(this.iconNavigation) || [])
      .filter(({ id }) => id !== 'menu')
      .map((item) => {
      return (hAsync("scale-telekom-nav-item", null, hAsync("a", { href: item.href || 'javascript:void(0);', target: item.target || '_self', id: item.id, onClick: (event) => {
          if (typeof item.onClick === 'function') {
            item.onClick(event);
          }
        } }, item.badgeLabel ? (hAsync("scale-badge", { count: item.badgeCount, label: item.badgeLabel, "label-visually-hidden": item.labelVisuallyHidden, "aria-label-translation": item.ariaLabelTranslation }, renderIcon({
        tag: `scale-icon-${item.icon}`,
        attributes: {},
      }))) : (renderIcon({
        tag: `scale-icon-${item.icon}`,
        attributes: {},
      })))));
    }), !readData$1(this.mainNavigation) &&
      !readData$1(this.sectorNavigation) &&
      !readData$1(this.addonNavigation) ? null : (hAsync("scale-telekom-nav-item", { "hide-on-desktop": true }, hAsync("button", null, hAsync("scale-badge", null, hAsync("scale-icon-action-menu", null))), hAsync("scale-telekom-nav-flyout", { variant: "mobile" }, hAsync("scale-telekom-mobile-flyout-canvas", { "app-name": this.appName, "app-name-link": this.appNameLink || 'javascript:void(0);', "app-name-click": (event) => {
        if (typeof this.appNameClick === 'function') {
          this.appNameClick(event);
        }
      } }, !readData$1(this.mainNavigation) ? null : (hAsync("scale-telekom-mobile-menu", { slot: "mobile-main-nav" }, readData$1(this.mainNavigation).map((item) => {
      const { selected, parent } = findSelected(readData$1(this.mainNavigation), this.activeRouteId);
      const rootNode = selected &&
        findRootNode(readData$1(this.mainNavigation), selected.id);
      const isRootOpen = (itemId) => rootNode &&
        rootNode.id === itemId &&
        itemId !== this.activeRouteId;
      const isActive = (itemId) => itemId === this.activeRouteId;
      return (hAsync("scale-telekom-mobile-menu-item", { open: isRootOpen(item.id), active: isActive(item.id) }, hAsync("a", { href: item.href || 'javascript:void(0);', target: item.target || '_self', onClick: (event) => {
          if (typeof item.onClick === 'function') {
            item.onClick(event);
          }
        } }, item.name), !item.children
        ? null
        : item.children.map((child) => {
          return (hAsync("scale-telekom-mobile-menu-item", { slot: "children", active: isActive(child.id), open: parent && parent.id === child.id }, hAsync("a", { href: child.href || 'javascript:void(0);', target: child.target || '_self', onClick: (event) => {
              if (typeof child.onClick ===
                'function') {
                child.onClick(event);
              }
            } }, child.name), !child.children
            ? null
            : child.children.map((grandChild) => (hAsync("scale-telekom-mobile-menu-item", { slot: "children", active: isActive(grandChild.id) }, hAsync("a", { href: grandChild.href ||
                'javascript:void(0);', target: grandChild.target || '_self', onClick: (event) => {
                if (typeof grandChild.onClick ===
                  'function') {
                  grandChild.onClick(event);
                }
              } }, grandChild.name))))));
        })));
    }))), !readData$1(this.sectorNavigation) ? null : (hAsync("scale-telekom-nav-list", { variant: "meta-nav", slot: "mobile-meta-nav-external", alignment: "left" }, readData$1(this.sectorNavigation).map((item) => {
      return (hAsync("scale-telekom-nav-item", null, hAsync("a", { id: item.id, href: item.href || 'javascript:void(0);', target: item.target || '_self', onClick: (event) => {
          if (typeof item.onClick === 'function') {
            item.onClick(event);
          }
        } }, item.name)));
    }))), !readData$1(this.addonNavigation) ? null : (hAsync("scale-telekom-nav-list", { variant: "meta-nav", slot: "mobile-meta-nav", alignment: "left" }, readData$1(this.addonNavigation).map((item) => {
      return (hAsync("scale-telekom-nav-item", null, hAsync("a", { href: item.href || 'javascript:void(0);', id: item.id, target: item.target || '_self', onClick: (event) => {
          if (typeof item.onClick === 'function') {
            item.onClick(event);
          }
        } }, item.name)));
    })))))))))));
  }
  static get style() { return telekomHeaderDataBackCompatCss; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-telekom-header-data-back-compat",
    "$members$": {
      "appName": [513, "app-name"],
      "appNameLink": [1, "app-name-link"],
      "appNameClick": [8, "app-name-click"],
      "logoHref": [1, "logo-href"],
      "logoTitle": [1, "logo-title"],
      "logoHideTitle": [4, "logo-hide-title"],
      "mainNavigation": [8, "main-navigation"],
      "iconNavigation": [8, "icon-navigation"],
      "addonNavigation": [8, "addon-navigation"],
      "sectorNavigation": [8, "sector-navigation"],
      "userNavigation": [8, "user-navigation"],
      "activeRouteId": [1, "active-route-id"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["appName", "app-name"]]
  }; }
}

const telekomMegaMenuCss = ".scale-telekom-mega-menu{--spacing-y:var(--telekom-spacing-composition-space-18);--column-gap:var(--telekom-spacing-composition-space-10);--max-width-container:var(--scl-grid-max-width, 1504px);--spacing-x:var(--telekom-spacing-composition-space-08);--grid-template-columns:repeat(16, minmax(0, 1fr));display:block;padding-left:var(--spacing-x);padding-right:var(--spacing-x);margin-left:auto;margin-right:auto;max-width:var(--max-width-container)}.scale-telekom-mega-menu-container{box-sizing:border-box;display:grid;grid-template-columns:var(--grid-template-columns);grid-column:auto;column-gap:var(--column-gap);padding-top:var(--spacing-y);padding-bottom:var(--spacing-y);font-size:var(--telekom-typography-font-size-body);line-height:var(--telekom-typography-line-spacing-standard)}.scale-telekom-mega-menu :where(ul,ol){list-style:none;margin:0;padding:0}.scale-telekom-mega-menu :where(a){display:inline-block;color:var(--telekom-color-text-and-icon-standard);text-decoration:none}.scale-telekom-mega-menu :where(ul a){width:100%}.scale-telekom-mega-menu .scale-icon{width:20px;height:20px}.scale-telekom-mega-menu :where(a):hover{color:var(--telekom-color-text-and-icon-primary-hovered)}.scale-telekom-mega-menu :where(a):active{color:var(--telekom-color-text-and-icon-primary-pressed)}.scale-telekom-mega-menu :where(a):focus-visible{outline:var(--telekom-line-weight-highlight) solid\n    var(--telekom-color-functional-focus-standard);outline-offset:1px;border-radius:var(--telekom-radius-small)}.scale-telekom-mega-menu :where(li+li){margin-top:var(--telekom-spacing-composition-space-07)}@media screen and (min-width: 1040px){.scale-telekom-mega-menu{--spacing-x:var(--telekom-spacing-composition-space-08)}}.scale-telekom-mega-menu[children-too-many] scale-telekom-mega-menu-column:first-child{grid-column:2 / span 3}@media screen and (min-width: 1680px){.scale-telekom-mega-menu[children-too-many] scale-telekom-mega-menu-column:first-child{grid-column:1 / span 3}}";

class TelekomMegaMenu {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** :) */
    this.childrenTooMany = false;
  }
  connectedCallback() {
    if (this.hostElement.children.length > 4) {
      this.childrenTooMany = true;
    }
  }
  render() {
    return (hAsync(Host$1, { class: "scale-telekom-mega-menu", "children-too-many": this.childrenTooMany }, hAsync("div", { class: "scale-telekom-mega-menu-container" }, hAsync("slot", null))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return telekomMegaMenuCss; }
  static get cmpMeta() { return {
    "$flags$": 4,
    "$tagName$": "scale-telekom-mega-menu",
    "$members$": {
      "childrenTooMany": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const telekomMegaMenuColumnCss = "/*!@:host*/.sc-scale-telekom-mega-menu-column-h{--spacing-x-icon:1ch;grid-column:auto / span 3}/*!@:host(:first-child)*/.sc-scale-telekom-mega-menu-column-h:first-child{grid-column:3 / span 3}/*!@[part~='base']*/[part~='base'].sc-scale-telekom-mega-menu-column{display:flex;flex-direction:column}/*!@[part~='icon']*/[part~='icon'].sc-scale-telekom-mega-menu-column{transform:translateY(-0.125ch)}@media screen and (min-width: 1296px){/*!@[part~='base']*/[part~='base'].sc-scale-telekom-mega-menu-column{flex-direction:row}/*!@[part~='icon'] ::slotted(*)*/[part~='icon'] .sc-scale-telekom-mega-menu-column-s>*{padding-right:var(--spacing-x-icon)}}/*!@[part~='heading']*/[part~='heading'].sc-scale-telekom-mega-menu-column{display:flex;align-items:flex-start;height:calc(var(--telekom-typography-line-spacing-standard) * 2rem);font-weight:var(--telekom-typography-font-weight-bold);line-height:var(--telekom-typography-line-spacing-tight)}/*!@[part~='heading-has-link'] [part~='heading']:hover*/[part~='heading-has-link'].sc-scale-telekom-mega-menu-column [part~='heading'].sc-scale-telekom-mega-menu-column:hover{color:var(--telekom-color-text-and-icon-primary-hovered)}/*!@[part~='heading-has-link'] [part~='heading']:active*/[part~='heading-has-link'].sc-scale-telekom-mega-menu-column [part~='heading'].sc-scale-telekom-mega-menu-column:active{color:var(--telekom-color-text-and-icon-primary-pressed)}/*!@[part~='icon-arrow-right']*/[part~='icon-arrow-right'].sc-scale-telekom-mega-menu-column{margin-top:0.5ch;margin-left:0.5ch}";

/**
 * Usage example:
 *
 * ```html
 *  <scale-telekom-mega-menu-column>
 *    <scale-icon-home-home slot="icon"></scale-icon-home-home>
 *    <a href="#" slot="heading">My heading</a>
 *    <ul>
 *      <li><a href="#">Link One</a></li>
 *      <li><a href="#">Link Two</a></li>
 *      <li><a href="#">Link Three</a></li>
 *      <li><a href="#">Link Four</a></li>
 *    </ul>
 *  </scale-telekom-mega-menu-column>
 * ```
 */
class TelekomMegaMenuColumn {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.headingLevel = 2;
    this.headingHasLink = false;
  }
  connectedCallback() {
    if (this.hostElement.querySelector('a[slot="heading"]')) {
      this.headingHasLink = true;
    }
  }
  render() {
    return (hAsync(Host$1, null, hAsync("div", { part: classnames({
        base: true,
        'heading-has-link': this.headingHasLink,
      }) }, hAsync("div", { part: "icon", "aria-hidden": "true" }, hAsync("slot", { name: "icon" })), hAsync("div", { part: "body" }, hAsync("div", { part: "heading", role: "heading", "aria-level": this.headingLevel }, hAsync("slot", { name: "heading" }), hAsync("scale-icon-navigation-right", { part: "icon-arrow-right", size: 11, selected: true })), hAsync("slot", null)))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return telekomMegaMenuColumnCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-telekom-mega-menu-column",
    "$members$": {
      "headingLevel": [2, "heading-level"],
      "headingHasLink": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const telekomMobileFlyoutCanvasCss = "/*!@:host*/.sc-scale-telekom-mobile-flyout-canvas-h{display:block;height:100%;overflow-y:auto;--max-width:572px;--spacing:var(--telekom-spacing-composition-space-07)\n    var(--telekom-spacing-composition-space-06)\n    var(--telekom-spacing-composition-space-14);background:var(--telekom-color-background-surface)}/*!@[part='base']*/[part='base'].sc-scale-telekom-mobile-flyout-canvas{padding:var(--spacing);display:flex;justify-content:center;flex-direction:column;margin:0 auto;max-width:var(--max-width)}/*!@[part~='header']*/[part~='header'].sc-scale-telekom-mobile-flyout-canvas{display:flex;justify-content:space-between;align-items:flex-start}/*!@[part~='heading']*/[part~='heading'].sc-scale-telekom-mobile-flyout-canvas{margin:0;font-size:var(--font-size-app-name);font-weight:var(--font-weight-app-name);line-height:var(--line-height-app-name);color:var(--telekom-color-text-and-icon-primary-standard);letter-spacing:0.02em;text-decoration:none}/*!@[part~='close-button']*/[part~='close-button'].sc-scale-telekom-mobile-flyout-canvas{position:absolute;right:var(--telekom-spacing-composition-space-06);color:var(--telekom-color-text-and-icon-standard)}/*!@[part~='close-button']:hover*/[part~='close-button'].sc-scale-telekom-mobile-flyout-canvas:hover{color:var(--telekom-color-text-and-icon-primary-hovered)}/*!@[part~='close-button']:active*/[part~='close-button'].sc-scale-telekom-mobile-flyout-canvas:active{color:var(--telekom-color-text-and-icon-primary-pressed)}/*!@[part~='body'],\nslot[name='row']::slotted(*)*/[part~='body'].sc-scale-telekom-mobile-flyout-canvas,slot[name='row'].sc-scale-telekom-mobile-flyout-canvas-s>*{margin-top:var(--telekom-spacing-composition-space-08)}/*!@:host([type='subtle']) [part~='body']*/[type='subtle'].sc-scale-telekom-mobile-flyout-canvas-h [part~='body'].sc-scale-telekom-mobile-flyout-canvas{margin-top:var(--telekom-spacing-composition-space-06)}/*!@:host([type='subtle']) [part~='meta']*/[type='subtle'].sc-scale-telekom-mobile-flyout-canvas-h [part~='meta'].sc-scale-telekom-mobile-flyout-canvas{margin-top:var(--telekom-spacing-composition-space-05)}";

// TODO I wonder if we need the `mobile-` prefix for the slots if this is a different component from `telekom-header`
// TODO try and find a better name for mobile-bottom slot?
class TelekomMobileFlyoutCanvas {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleCloseNavFlyout = createEvent$1(this, "scale-close-nav-flyout", 7);
    this.closeButtonLabel = 'Close';
    this.closeButtonTitle = null;
  }
  render() {
    return (hAsync(Host$1, null, hAsync("div", { part: "base" }, hAsync("div", { part: "header" }, hAsync("slot", { name: "heading" }, hAsync("h2", { part: "heading" }, this.appName)), hAsync("a", { href: "javascript:void(0)", onClick: (event) => {
        event.preventDefault();
        emitEvent$1(this, 'scaleCloseNavFlyout', {
          originalEvent: event,
        });
      }, title: this.closeButtonTitle, "aria-label": this.closeButtonLabel, part: "close-button" }, hAsync("slot", { name: "close-icon" }, hAsync("scale-icon-action-close", { decorative: true, size: 20 })))), hAsync("div", { part: "body" }, hAsync("slot", { name: "row" }, hAsync("slot", { name: "mobile-before-main-nav" }), hAsync("slot", { name: "mobile-main-nav" }), hAsync("slot", { name: "mobile-after-main-nav" }), hAsync("div", { part: "meta" }, hAsync("div", null, hAsync("slot", { name: "mobile-meta-nav-external" }), hAsync("slot", { name: "mobile-meta-nav" })), hAsync("div", null, hAsync("slot", { name: "mobile-lang-switcher" }))), hAsync("slot", { name: "mobile-bottom" }))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return telekomMobileFlyoutCanvasCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-telekom-mobile-flyout-canvas",
    "$members$": {
      "appName": [1, "app-name"],
      "appNameLink": [1, "app-name-link"],
      "appNameClick": [8, "app-name-click"],
      "closeButtonLabel": [1, "close-button-label"],
      "closeButtonTitle": [1, "close-button-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const telekomMobileMenuCss = "/*!@:host*/.sc-scale-telekom-mobile-menu-h{--spacing:var(--telekom-spacing-composition-space-06);--background:var(--telekom-color-background-surface);--max-width:572px;--spacing-close-button:var(--telekom-spacing-composition-space-04);--radius-close-button:var(--telekom-radius-standard);--transition-close-button:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);--box-shadow-close-button-focus:0 0 0 var(--telekom-line-weight-highlight)\n    var(--telekom-color-functional-focus-standard);--color:var(--telekom-color-text-and-icon-standard);--color-hover:var(--telekom-color-primary-hovered);--color-active:var(--telekom-color-primary-pressed)}/*!@:host::part(base)*/.sc-scale-telekom-mobile-menu-h::part(base){margin:0 auto;background:var(--background);display:flex;justify-content:center;flex-direction:column;max-width:var(--max-width)}/*!@:host::part(back-button)*/.sc-scale-telekom-mobile-menu-h::part(back-button){display:flex;align-items:center;border:none;background:transparent;color:var(--color);font:var(--telekom-text-style-lead-text);width:100%;height:72px;cursor:pointer;padding:0}/*!@scale-icon-navigation-left*/scale-icon-navigation-left.sc-scale-telekom-mobile-menu{margin-right:12px}/*!@:host::part(nav)*/.sc-scale-telekom-mobile-menu-h::part(nav){padding:var(--spacing) 0;max-width:var(--max-width);width:100%}/*!@:host::part(links-top)*/.sc-scale-telekom-mobile-menu-h::part(links-top){display:flex}/*!@[part~='app-name'] > **/[part~='app-name'].sc-scale-telekom-mobile-menu>*.sc-scale-telekom-mobile-menu{font-size:var(--font-size-app-name);font-weight:var(--font-weight-app-name);line-height:var(--line-height-app-name);color:var(--telekom-color-text-and-icon-primary-standard);letter-spacing:0.02em;text-decoration:none}/*!@[part~='app-name'] > *:hover*/[part~='app-name'].sc-scale-telekom-mobile-menu>*.sc-scale-telekom-mobile-menu:hover{color:var(--telekom-color-text-and-icon-primary-hovered)}/*!@[part~='app-name'] > *:active*/[part~='app-name'].sc-scale-telekom-mobile-menu>*.sc-scale-telekom-mobile-menu:active{color:var(--telekom-color-text-and-icon-primary-pressed)}";

function elementDepth(el) {
  let depth = 0;
  while (null !== el.parentElement) {
    el = el.parentElement;
    depth++;
  }
  return depth;
}
class TelekomMobileMenu {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleCloseNavFlyout = createEvent$1(this, "scale-close-nav-flyout", 7);
    this.backButtonTitle = 'Back';
    this.setLevelAttributeForAllItems = () => {
      const offset = Math.min(...Array.from(this.menuItems).map((x) => elementDepth(x)));
      Array.from(this.menuItems).forEach((item) => {
        const level = elementDepth(item) - offset;
        item.setAttribute('level', String(level));
      });
    };
    this.back = () => {
      Array.from(this.openItems).forEach((element) => {
        if (element.getAttribute('level') === String(+this.currentLevel - 1)) {
          element.setAttribute('active', '');
          // @ts-ignore
          element.open = false;
          return element.removeAttribute('open');
        }
      });
      this.currentLevel = String(+this.currentLevel - 1);
      Array.from(this.menuItems).forEach((element) => {
        element.setAttribute('current-level', this.currentLevel);
      });
    };
  }
  handleSetMenuItemActive(e) {
    this.menuItems.forEach((element) => element.removeAttribute('active'));
    e.target.setAttribute('active', '');
    if (e.target.parentElement.tagName === 'SCALE-TELEKOM-MOBILE-MENU-ITEM') {
      e.target.parentElement.setAttribute('active', '');
    }
  }
  handleSetMenuItemOpen(e) {
    e.target.setAttribute('open', '');
    this.currentLevel = String(+e.target.getAttribute('level') + 1);
    Array.from(this.menuItems).forEach((element) => {
      element.setAttribute('current-level', this.currentLevel);
    });
  }
  connectedCallback() {
    this.setLevelAttributeForAllItems();
    this.currentLevel = this.activeItem
      ? String(+this.activeItem.getAttribute('level'))
      : '0';
    Array.from(this.menuItems).forEach((element) => {
      element.setAttribute('current-level', this.currentLevel);
    });
  }
  componentWillRender() { }
  get menuItems() {
    return this.hostElement.querySelectorAll('scale-telekom-mobile-menu-item');
  }
  get activeItem() {
    return Array.from(this.menuItems).find((element) => 
    // @ts-ignore
    element.hasAttribute('active') || element.active);
  }
  get openItems() {
    return Array.from(this.menuItems).filter((element) => 
    // @ts-ignore
    element.hasAttribute('open') || element.open);
  }
  render() {
    return (hAsync(Host$1, null, hAsync("div", { part: "base" }, hAsync("nav", { part: "nav" }, +this.currentLevel > 0 ? (hAsync("button", { part: "back-button", onClick: () => {
        this.back();
      } }, hAsync("scale-icon-navigation-left", { size: 20 }), this.backButtonTitle)) : null, hAsync("slot", null)))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return telekomMobileMenuCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-telekom-mobile-menu",
    "$members$": {
      "backButtonTitle": [1, "back-button-title"],
      "appName": [1, "app-name"],
      "appNameLink": [1, "app-name-link"],
      "appNameClick": [8, "app-name-click"],
      "currentLevel": [32]
    },
    "$listeners$": [[0, "scale-set-menu-item-active", "handleSetMenuItemActive"], [0, "scale-set-menu-item-open", "handleSetMenuItemOpen"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const telekomMobileMenuItemCss = "/*!@:host*/.sc-scale-telekom-mobile-menu-item-h{--height:72px;--max-width:572px;--font-bold:var(--telekom-text-style-heading-5);--font-thin:var(--telekom-text-style-lead-text);--color:var(--telekom-color-text-and-icon-standard);--color-active:var(--telekom-color-primary-standard);--border-color:var(--telekom-color-ui-faint);--_box-shadow-active:none;--_spacing-level:0px;--_font:var(--font-thin);--_color:var(--color);position:relative}/*!@:host::part(level-0)*/.sc-scale-telekom-mobile-menu-item-h::part(level-0){--_spacing-level:0px;--_font:var(--font-bold)}/*!@:host::part(level-0 active)*/.sc-scale-telekom-mobile-menu-item-h::part(level-0 active).sc-scale-telekom-mobile-menu-item{--_spacing-level:0px}/*!@:host::part(level-0 open)*/.sc-scale-telekom-mobile-menu-item-h::part(level-0 open).sc-scale-telekom-mobile-menu-item{--_spacing-level:36px}/*!@:host::part(level-1),\n:host::part(level-2),\n:host::part(level-3),\n:host::part(level-4)*/.sc-scale-telekom-mobile-menu-item-h::part(level-1),.sc-scale-telekom-mobile-menu-item-h::part(level-2),.sc-scale-telekom-mobile-menu-item-h::part(level-3),.sc-scale-telekom-mobile-menu-item-h::part(level-4){--_spacing-level:36px}/*!@:host::part(level-1 current-level-2),\n:host::part(level-2 current-level-3),\n:host::part(level-3 current-level-4)*/.sc-scale-telekom-mobile-menu-item-h::part(level-1 current-level-2).sc-scale-telekom-mobile-menu-item,.sc-scale-telekom-mobile-menu-item-h::part(level-2 current-level-3).sc-scale-telekom-mobile-menu-item,.sc-scale-telekom-mobile-menu-item-h::part(level-3 current-level-4).sc-scale-telekom-mobile-menu-item{--_font:var(--font-bold)}/*!@:host::part(active),\n:host::part(level-0 current-level-0 active),\n:host::part(level-1 current-level-1 active),\n:host::part(level-2 current-level-2 active),\n:host::part(level-3 current-level-3 active)*/.sc-scale-telekom-mobile-menu-item-h::part(active),.sc-scale-telekom-mobile-menu-item-h::part(level-0 current-level-0.sc-scale-telekom-mobile-menu-item active).sc-scale-telekom-mobile-menu-item,.sc-scale-telekom-mobile-menu-item-h::part(level-1 current-level-1.sc-scale-telekom-mobile-menu-item active).sc-scale-telekom-mobile-menu-item,.sc-scale-telekom-mobile-menu-item-h::part(level-2 current-level-2.sc-scale-telekom-mobile-menu-item active).sc-scale-telekom-mobile-menu-item,.sc-scale-telekom-mobile-menu-item-h::part(level-3 current-level-3.sc-scale-telekom-mobile-menu-item active).sc-scale-telekom-mobile-menu-item{--_color:var(--color-active);--_box-shadow-active:2px 0px 0px 0px var(--color-active) inset}/*!@:host::part(level-0 current-level-1),\n:host::part(level-1 current-level-2),\n:host::part(level-2 current-level-3),\n:host::part(level-3 current-level-4)*/.sc-scale-telekom-mobile-menu-item-h::part(level-0 current-level-1).sc-scale-telekom-mobile-menu-item,.sc-scale-telekom-mobile-menu-item-h::part(level-1 current-level-2).sc-scale-telekom-mobile-menu-item,.sc-scale-telekom-mobile-menu-item-h::part(level-2 current-level-3).sc-scale-telekom-mobile-menu-item,.sc-scale-telekom-mobile-menu-item-h::part(level-3 current-level-4).sc-scale-telekom-mobile-menu-item{--_color:var(--color)}/*!@:host::part(active-indicator)*/.sc-scale-telekom-mobile-menu-item-h::part(active-indicator){box-shadow:var(--_box-shadow-active);min-height:28px;min-width:2px}/*!@:host::part(base)*/.sc-scale-telekom-mobile-menu-item-h::part(base){font:var(--_font);max-width:var(--max-width)}/*!@::slotted(a)*/.sc-scale-telekom-mobile-menu-item-s>a{position:relative;display:flex;align-items:center;height:var(--height);width:calc(100% - var(--_spacing-level));max-width:572px;padding-left:var(--_spacing-level);color:var(--_color);text-decoration:none}/*!@:host::part(header)*/.sc-scale-telekom-mobile-menu-item-h::part(header){height:var(--height);border-style:solid;border-width:0 0 1px 0;border-color:var(--border-color);display:flex;width:100%;align-items:center;justify-content:flex-end;border-style:solid;border-width:0 0 1px 0;border-color:var(--border-color)}/*!@:host::part(hidden)*/.sc-scale-telekom-mobile-menu-item-h::part(hidden){display:none}/*!@:host::part(icon-right-container)*/.sc-scale-telekom-mobile-menu-item-h::part(icon-right-container){display:flex;align-items:center;position:absolute}";

class TelekomMobileMenuItem {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleSetMenuItemActive = createEvent$1(this, "scale-set-menu-item-active", 7);
    this.scaleSetMenuItemOpen = createEvent$1(this, "scale-set-menu-item-open", 7);
    this.scaleCloseNavFlyout = createEvent$1(this, "scale-close-nav-flyout", 7);
    this.open = false;
    this.active = false;
    this.level = '0';
    this.currentLevel = '0';
    this.handleClick = (e) => {
      e.stopImmediatePropagation();
      const hasLink = !(e.target.getAttribute('href') || '').includes('javascript:void(0)');
      const hasLinkNoChildren = hasLink && !this.children.length;
      if (hasLinkNoChildren) {
        emitEvent$1(this, 'scaleCloseNavFlyout', e);
        return emitEvent$1(this, 'scaleSetMenuItemActive', e.detail);
      }
      const hasLinkAndChildrenAndOpen = hasLink && this.children.length && this.open;
      if (hasLinkAndChildrenAndOpen) {
        emitEvent$1(this, 'scaleCloseNavFlyout', e);
        return emitEvent$1(this, 'scaleSetMenuItemActive', e.detail);
      }
      // EITHER hos link and children - ready to expand children without firing the link click
      // OR no link but has children
      e.preventDefault();
      this.toggleChildrenVisibility(true);
      return emitEvent$1(this, 'scaleSetMenuItemOpen', e.detail);
    };
  }
  openChanged(newValue) {
    this.toggleChildrenVisibility(newValue);
  }
  toggleChildrenVisibility(show) {
    this.children.forEach((element) => {
      show && element.getAttribute('level') === String(+this.level + 1)
        ? element.removeAttribute('hidden')
        : element.setAttribute('hidden', '');
    });
  }
  get children() {
    return this.hostElement.querySelectorAll('scale-telekom-mobile-menu-item');
  }
  get openChildren() {
    return Array.from(this.hostElement.querySelectorAll('scale-telekom-mobile-menu-item')).filter((element) => element.hasAttribute('open') || element.open);
  }
  render() {
    return (hAsync(Host$1, { onClick: this.handleClick }, hAsync("nav", { part: classnames('base', `level-${this.level}`, `current-level-${this.currentLevel}`, {
        open: this.open,
        active: this.active,
        hidden: !this.open && this.level !== this.currentLevel,
      }) }, hAsync("div", { part: classnames('header', {
        hidden: !!this.openChildren.length,
      }) }, hAsync("slot", null), hAsync("div", { part: "icon-right-container" }, !!this.children.length && !this.open && (hAsync("scale-icon-navigation-right", { size: 20, color: this.active
        ? 'var(--telekom-color-primary-standard)'
        : 'var(--telekom-color-text-and-icon-standard)' })))), hAsync("slot", { name: "children" }))));
  }
  get hostElement() { return getElement$1(this); }
  static get watchers() { return {
    "open": ["openChanged"]
  }; }
  static get style() { return telekomMobileMenuItemCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-telekom-mobile-menu-item",
    "$members$": {
      "open": [4],
      "active": [4],
      "level": [1],
      "currentLevel": [1, "current-level"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const telekomNavFlyoutCss = "/*!@:host*/.sc-scale-telekom-nav-flyout-h{--top:var(--scl-telekom-header-height, 0);--left:0;--width:100vw;--height:auto;--min-height:25vh;--position:fixed;--background:var(--telekom-color-background-surface);--background-variant-mobile:var(--telekom-color-background-canvas);--background-backdrop:var(--telekom-color-background-canvas);--shadow:none;--z-index:7;--duration:0;--duration-backdrop-in:0;--duration-backdrop-out:0;--translate-x:0;--translate-y:0;--translate-z:0;display:contents}/*!@[part~='variant-mobile']*/[part~='variant-mobile'].sc-scale-telekom-nav-flyout{--height:100vh;--top:0;--background:var(--background-variant-mobile)}/*!@:host([debug]) [part~='base']*/[debug].sc-scale-telekom-nav-flyout-h [part~='base'].sc-scale-telekom-nav-flyout{outline:1px dotted gold}/*!@[part~='base']*/[part~='base'].sc-scale-telekom-nav-flyout{display:none;position:var(--position);z-index:var(--z-index);top:var(--top);left:var(--left);width:var(--width);height:var(--height);min-height:var(--min-height);background:var(--background);box-shadow:var(--shadow);animation-duration:var(--duration);border-top:1px solid var(--telekom-color-ui-faint)}/*!@[part~='base'][part~='expanded']*/[part~='base'][part~='expanded'].sc-scale-telekom-nav-flyout{display:block}/*!@[part~='backdrop']*/[part~='backdrop'].sc-scale-telekom-nav-flyout{display:none;position:var(--position);background-color:var(--telekom-color-background-backdrop);top:var(--top);left:var(--left);width:var(--width);height:100vh;animation-duration:var(--duration)}/*!@[part~='backdrop'][part~='expanded']:not([part~='variant-mobile'])*/[part~='backdrop'][part~='expanded'].sc-scale-telekom-nav-flyout:not([part~='variant-mobile']){display:block}/*!@[part~='backdrop'][part~='expanded'][part~='in']*/[part~='backdrop'][part~='expanded'][part~='in'].sc-scale-telekom-nav-flyout{animation-duration:var(--duration-backdrop-in)}/*!@[part~='backdrop'][part~='expanded'][part~='out']*/[part~='backdrop'][part~='expanded'][part~='out'].sc-scale-telekom-nav-flyout{animation-duration:var(--duration-backdrop-out)}@keyframes toggle{from{opacity:0;transform:translate3d(\n      var(--translate-x),\n      var(--translate-y),\n      var(--translate-z)\n    )}}/*!@[part~='in']*/[part~='in'].sc-scale-telekom-nav-flyout{animation-name:toggle;animation-timing-function:var(--telekom-motion-easing-enter)}/*!@[part~='out']*/[part~='out'].sc-scale-telekom-nav-flyout{animation-name:toggle;animation-fill-mode:forwards;animation-direction:reverse;animation-timing-function:var(--telekom-motion-easing-exit)}";

/*
TODO add something like this with a better-named prop defaulting to false

if (this.allowInjectingStyleToBody) {
  this.bodyOverflowValue = document.body.style.overflow;
  // The following style will disable body from scrolling when modal is open
  document.body.style.setProperty('overflow', 'hidden');
}
*/
class TelekomNavItem$1 {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleExpanded = createEvent$1(this, "scale-expanded", 7);
    /** Open the flyout menu */
    this.expanded = false;
    /** (optional) Variant ("mobile" gives it a fixed height of `100vh`) */
    this.variant = null;
    /** (optinal) Whether the flyout should open on hover (needs better name!) */
    this.hover = false;
    this.isExpanded = this.expanded;
    this.handleSpaceOrEnterForHover = (event) => {
      if (this.isExpanded) {
        return;
      }
      if (event.key === 'Enter' || event.key === ' ') {
        this.expanded = true;
        this.show();
      }
    };
    this.handleTriggerClick = (event) => {
      if (event.ctrlKey) {
        return;
      }
      event.preventDefault();
      event.stopImmediatePropagation();
      this.expanded = !this.expanded;
      this.parentElement.removeEventListener('mouseleave', this.handlePointerOut);
    };
    this.handlePointerIn = () => {
      if (this.isExpanded) {
        return;
      }
      this.expanded = true;
      this.hostElement.parentElement.addEventListener('mouseleave', this.handlePointerOut);
      if (this.hostElement.querySelector('scale-telekom-mega-menu') !== null) {
        this.hostElement
          .querySelector('scale-telekom-mega-menu')
          .addEventListener('mouseleave', this.handlePointerOut);
      }
    };
    this.handlePointerOut = () => {
      this.expanded = false;
      this.hostElement.removeEventListener('mouseleave', this.handlePointerOut);
      if (this.hostElement.querySelector('scale-telekom-mega-menu') !== null) {
        this.hostElement
          .querySelector('scale-telekom-mega-menu')
          .addEventListener('mouseleave', this.handlePointerOut);
      }
    };
  }
  handleWindowKeydown(event) {
    if (!this.isExpanded) {
      return;
    }
    if (event.key === 'Escape') {
      this.expanded = false;
      try {
        this.triggerElement.focus();
      }
      catch (err) { }
    }
  }
  handleScaleCloseNavFlyout() {
    this.expanded = false;
  }
  handleDocumentClick(event) {
    if (!this.isExpanded) {
      return;
    }
    const { target } = event;
    const isNotTrigger = () => target !== this.triggerElement && !this.triggerElement.contains(target);
    const isNotWithin = () => !this.hostElement.contains(target);
    if (isNotTrigger() && isNotWithin()) {
      this.expanded = false;
    }
  }
  expandedChanged(newValue) {
    newValue ? this.show() : this.hide();
  }
  connectedCallback() {
    this.parentElement = this.hostElement.parentElement;
    if (this.triggerElement == null) {
      return;
    }
    this.triggerElement.setAttribute('aria-haspopup', 'true');
    this.triggerElement.setAttribute('aria-expanded', String(this.expanded));
    if (this.hover) {
      this.triggerElement.addEventListener('mouseenter', this.handlePointerIn);
      this.triggerElement.addEventListener('keypress', this.handleSpaceOrEnterForHover);
    }
    else {
      this.triggerElement.addEventListener('click', this.handleTriggerClick);
    }
  }
  disconnectedCallback() {
    this.triggerElement.removeEventListener('click', this.handleTriggerClick);
    this.triggerElement.removeEventListener('mouseenter', this.handlePointerIn);
    this.triggerElement.removeEventListener('keypress', this.handleSpaceOrEnterForHover);
  }
  async show() {
    this.isExpanded = true;
    this.animationState = 'in';
    requestAnimationFrame(async () => {
      await animationsFinished(this.hostElement.shadowRoot);
      this.animationState = undefined;
      this.triggerElement.setAttribute('aria-expanded', 'true');
      emitEvent$1(this, 'scaleExpanded', { expanded: true });
    });
  }
  async hide() {
    this.animationState = 'out';
    requestAnimationFrame(async () => {
      await animationsFinished(this.hostElement.shadowRoot);
      this.animationState = undefined;
      this.isExpanded = false;
      this.triggerElement.setAttribute('aria-expanded', 'false');
      emitEvent$1(this, 'scaleExpanded', { expanded: false });
    });
  }
  /**
   * Get the trigger element "on demand".
   * Either query by `trigger-selector` or
   * get the previous sibling.
   */
  get triggerElement() {
    if (this.triggerSelector) {
      return this.hostElement.ownerDocument.querySelector(this.triggerSelector);
    }
    return this.hostElement.previousElementSibling;
  }
  render() {
    return (hAsync(Host$1, null, hAsync("div", { part: classnames('base', this.animationState, `variant-${this.variant}`, {
        expanded: this.isExpanded,
      }) }, hAsync("slot", null)), hAsync("div", { part: classnames('backdrop', this.animationState, `variant-${this.variant}`, {
        expanded: this.isExpanded,
      }), onClick: () => (this.expanded = false) })));
  }
  get hostElement() { return getElement$1(this); }
  static get watchers() { return {
    "expanded": ["expandedChanged"]
  }; }
  static get style() { return telekomNavFlyoutCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-telekom-nav-flyout",
    "$members$": {
      "expanded": [1540],
      "triggerSelector": [1, "trigger-selector"],
      "variant": [1],
      "hover": [4],
      "isExpanded": [32],
      "animationState": [32],
      "show": [64],
      "hide": [64]
    },
    "$listeners$": [[8, "keydown", "handleWindowKeydown"], [0, "scale-close-nav-flyout", "handleScaleCloseNavFlyout"], [4, "click", "handleDocumentClick"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["expanded", "expanded"]]
  }; }
}

const telekomNavItemCss = "@media screen and (max-width: 1039px){.scl-hide-on-mobile{display:none}}@media screen and (min-width: 1040px){.scl-hide-on-desktop{display:none}}.scale-telekom-nav-item{--_spacing-top-slotted-top:var(--telekom-spacing-composition-space-07);--_spacing-bottom-slotted-bottom:var(--telekom-spacing-composition-space-07);--_font-size-main-nav:var(--telekom-typography-font-size-body);--focus-outline:var(--telekom-line-weight-highlight) solid\n    var(--telekom-color-functional-focus-standard);--color:var(--telekom-color-text-and-icon-standard);color:var(--color)}@media screen and (min-width: 640px){.scale-telekom-nav-item{--_spacing-bottom-slotted-bottom:var(\n      --telekom-spacing-composition-space-07\n    )}}@media screen and (min-width: 1040px){.scale-telekom-nav-item{--_spacing-top-slotted-top:var(--telekom-spacing-composition-space-05);--_spacing-bottom-slotted-bottom:var(\n      --telekom-spacing-composition-space-06\n    )}[scrolled] .scale-telekom-nav-item{--_spacing-bottom-slotted-bottom:var(\n      --telekom-spacing-composition-space-08\n    )}[type='slim'] .scale-telekom-nav-item,[type='slim'][scrolled] .scale-telekom-nav-item{--_spacing-bottom-slotted-bottom:var(\n      --telekom-spacing-composition-space-08\n    )}}@media screen and (min-width: 1296px){.scale-telekom-nav-item{--_spacing-top-slotted-top:var(--telekom-spacing-composition-space-05);--_spacing-bottom-slotted-bottom:var(\n      --telekom-spacing-composition-space-08\n    )}[type='slim'] .scale-telekom-nav-item{--_spacing-bottom-slotted-bottom:calc(\n      var(--telekom-spacing-composition-space-10) - 2px\n    )}}@media screen and (min-width: 1680px){.scale-telekom-nav-item{--_spacing-top-slotted-top:var(--telekom-spacing-composition-space-05);--_spacing-bottom-slotted-bottom:var(\n      --telekom-spacing-composition-space-10\n    );--_font-size-main-nav:var(--telekom-typography-font-size-callout)}[type='slim'] .scale-telekom-nav-item,[type='slim'][scrolled-back] .scale-telekom-nav-item{--_spacing-bottom-slotted-bottom:calc(\n      var(--telekom-spacing-composition-space-11)\n    )}[type='slim'][scrolled] .scale-telekom-nav-item{--_spacing-bottom-slotted-bottom:calc(\n      var(--telekom-spacing-composition-space-08)\n    )}}.scale-telekom-nav-item[debug]{border:1px dotted cyan}.scale-telekom-nav-item>:where(a,button){box-sizing:border-box;display:flex;align-items:flex-end;height:100%;position:relative;font:inherit;color:inherit;background:none;appearance:none;padding:0;border:none;text-decoration:none;cursor:pointer;transition:padding-bottom var(--telekom-motion-duration-immediate)\n    var(--telekom-motion-easing-standard)}.scale-telekom-nav-item>:where(a,button):hover,.scale-telekom-nav-item>:where(button[aria-expanded='true']){color:var(--telekom-color-text-and-icon-primary-hovered)}.scale-telekom-nav-item>:where(a,button):active{color:var(--telekom-color-text-and-icon-primary-pressed)}.scale-telekom-nav-item>:where(a,button):focus{border-radius:var(--telekom-radius-extra-small);outline:var(--focus-outline)}.scale-telekom-nav-list[variant='main-nav']>.scale-telekom-nav-item>:where(a,button),.scale-telekom-nav-list[variant='functions']>.scale-telekom-nav-item>:where(a,button),.scale-telekom-nav-list[variant='main-nav']>scale-menu-flyout>.scale-telekom-nav-item>:where(a,button){font-size:var(--_font-size-main-nav);line-height:var(--telekom-typography-line-spacing-loose);font-weight:var(--telekom-typography-font-weight-extra-bold);padding-bottom:var(--_spacing-bottom-slotted-bottom)}@media screen and (min-width: 1680px){.scale-telekom-nav-list[variant='main-nav']>.scale-telekom-nav-item>:where(a,button),.scale-telekom-nav-list[variant='functions']>.scale-telekom-nav-item>:where(a,button){line-height:var(--telekom-typography-line-spacing-extra-tight);line-height:1.2}}.scale-telekom-nav-list[variant='main-nav']>.scale-telekom-nav-item[active]>:where(a,button),.scale-telekom-nav-list[variant='main-nav']>scale-menu-flyout>.scale-telekom-nav-item[active]>:where(a,button){color:var(--telekom-color-text-and-icon-primary-standard)}.scale-telekom-nav-list[variant='main-nav']>.scale-telekom-nav-item>:where(a,button):hover:after,.scale-telekom-nav-list[variant='main-nav']>.scale-telekom-nav-item>:where(button[aria-expanded='true']):after,.scale-telekom-nav-list[variant='functions']>.scale-telekom-nav-item>:where(a,button):hover:after,.scale-telekom-nav-list[variant='functions']>.scale-telekom-nav-item>:where(button[aria-expanded='true']):after,.scale-telekom-nav-list[variant='main-nav']>scale-menu-flyout>.scale-telekom-nav-item>:where(a,button):hover:after{content:'';height:var(--telekom-spacing-composition-space-02);background:var(--telekom-color-text-and-icon-primary-hovered);display:block;position:absolute;bottom:0;left:0}.scale-telekom-nav-list[variant='main-nav']>.scale-telekom-nav-item>:where(a,button):has(scale-badge[label]):hover:after,.scale-telekom-nav-list[variant='main-nav']>.scale-telekom-nav-item>:where(button[aria-expanded='true']):has(scale-badge[label]):after,.scale-telekom-nav-list[variant='functions']>.scale-telekom-nav-item>:where(a,button):has(scale-badge[label]):hover:after,.scale-telekom-nav-list[variant='functions']>.scale-telekom-nav-item>:where(button[aria-expanded='true']):has(scale-badge[label]):after{width:24px}.scale-telekom-nav-list[variant='main-nav']>.scale-telekom-nav-item>:where(a,button):active:after,.scale-telekom-nav-list[variant='main-nav']>.scale-telekom-nav-item>:where(button[aria-expanded='true']):after,.scale-telekom-nav-list[variant='functions']>.scale-telekom-nav-item>:where(a,button):active:after,.scale-telekom-nav-list[variant='functions']>.scale-telekom-nav-item>:where(button[aria-expanded='true']):after,.scale-telekom-nav-list[variant='main-nav']>scale-menu-flyout>.scale-telekom-nav-item>:where(a,button):active:after{content:'';height:var(--telekom-spacing-composition-space-02);background:var(--telekom-color-text-and-icon-primary-pressed);display:block;position:absolute;bottom:0;left:0}.scale-telekom-nav-list[variant='main-nav']>.scale-telekom-nav-item[active]>:where(a,button):after,.scale-telekom-nav-list[variant='functions']>.scale-telekom-nav-item[active]>:where(a,button):after,.scale-telekom-nav-list[variant='main-nav']>scale-menu-flyout>.scale-telekom-nav-item[active]>:where(a,button):after{content:'';height:var(--telekom-spacing-composition-space-03);background:var(--telekom-color-text-and-icon-primary-standard);display:block;position:absolute;bottom:0;left:0}@media screen and (forced-colors: active), (-ms-high-contrast: active){.scale-telekom-nav-list[variant='main-nav']>.scale-telekom-nav-item[active]>:where(a,button),.scale-telekom-nav-list[variant='functions']>.scale-telekom-nav-item[active]>:where(a,button),.scale-telekom-nav-list[variant='main-nav']>scale-menu-flyout>.scale-telekom-nav-item[active]>:where(a,button){border-bottom:2px solid hsl(0, 0%, 100%)}}.scale-telekom-nav-list[variant='meta-nav-external']>.scale-telekom-nav-item>:where(a,button),.scale-telekom-nav-list[variant='meta-nav']>.scale-telekom-nav-item>:where(a,button),.scale-telekom-nav-list[variant='lang-switcher']>.scale-telekom-nav-item>:where(a,button){font-size:var(--telekom-typography-font-size-small);line-height:var(--telekom-typography-line-spacing-tight);font-weight:var(--telekom-typography-font-weight-regular);padding-top:var(--_spacing-top-slotted-top)}.scale-telekom-nav-list[variant='meta-nav-external']>.scale-telekom-nav-item>:where(a,button){display:flex;align-items:center}.scale-telekom-nav-list[variant='meta-nav-external']>.scale-telekom-nav-item>:where(a,button)>*{margin-inline-start:0.5ch}.scale-telekom-nav-list[variant='lang-switcher']>.scale-telekom-nav-item>a,.scale-telekom-nav-list[variant='meta-nav-external']>.scale-telekom-nav-item>a{font-size:var(--telekom-typography-font-size-body)}.scale-telekom-nav-list[variant='lang-switcher']>.scale-telekom-nav-item>:where(a,button):where([aria-current='true']){font-weight:var(--telekom-typography-font-weight-extra-bold)}.scale-telekom-nav-list[slot='mobile-meta-nav-external']>.scale-telekom-nav-item>a,.scale-telekom-nav-list[slot='mobile-meta-nav']>.scale-telekom-nav-item>a{font-size:var(--telekom-typography-font-size-body)}@media screen and (min-width: 1040px){.scale-telekom-nav-list[variant='meta-nav']{margin-right:var(--telekom-spacing-composition-space-10)}.scale-telekom-nav-list[variant='lang-switcher']>.scale-telekom-nav-item>a,.scale-telekom-nav-list[variant='meta-nav-external']>.scale-telekom-nav-item>a{font-size:var(--telekom-typography-font-size-small)}}.scale-telekom-nav-list[variant='functions'] .scale-icon{height:20px;width:20px}.scale-telekom-nav-list[variant='functions'] [slot='dot'] .scale-icon{height:12px;width:12px}@media screen and (min-width: 1680px){.scale-telekom-nav-list[variant='functions'] .scale-icon{height:24px;width:24px}}scale-telekom-mobile-flyout-canvas .scale-telekom-nav-list[variant='meta-nav-external'] .scale-icon{height:12px;width:12px}[slot='mobile-meta-nav'] .scale-telekom-nav-item,[slot='mobile-meta-nav-external'] .scale-telekom-nav-item{--_font-size-main-nav:16px;line-height:var(--telekom-typography-line-spacing-standard)}.scale-telekom-nav-list>scale-menu-flyout::part(trigger){height:100%}";

// TODO maybe we want to add the <scale-icon-navigation-external-link size="11"> icon
// automatically when inside variant="meta-nav-external"?
// TODO? turn into util
function toggleAriaCurrent(element, value, attrValue = 'page') {
  if (value) {
    element.setAttribute('aria-current', attrValue);
  }
  else {
    element.removeAttribute('aria-current');
  }
}
class TelekomNavItem {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.active = false;
    this.variant = 'main-nav';
    this.role = 'none';
    this.hideOnMobile = false;
    this.hideOnDesktop = false;
  }
  activeChanged(newValue) {
    if (this.linkElement == null) {
      return;
    }
    if (this.variant === 'lang-switcher' || this.variant === 'main-nav') {
      toggleAriaCurrent(this.linkElement, newValue, this.active ? 'true' : 'false');
    }
  }
  connectedCallback() {
    this.activeChanged(this.active);
  }
  componentDidLoad() {
    var _a;
    const child = Array.from(this.hostElement.children).find((el) => el.matches('a, button'));
    const parentRole = (_a = this.hostElement.parentElement) === null || _a === void 0 ? void 0 : _a.getAttribute('role');
    if (parentRole === 'menu') {
      child.setAttribute('role', 'menuitem');
    }
  }
  get linkElement() {
    return this.hostElement.querySelector('a, button');
  }
  render() {
    return (
    // The `scale-telekom-nav-item` class is used to avoid coupling styles to the tagname
    // (which can be different based on who defines it)
    hAsync(Host$1, { class: {
        'scale-telekom-nav-item': true,
        'scl-hide-on-mobile': this.hideOnMobile,
        'scl-hide-on-desktop': this.hideOnDesktop,
      } }, hAsync("slot", null)));
  }
  get hostElement() { return getElement$1(this); }
  static get watchers() { return {
    "active": ["activeChanged"],
    "variant": ["activeChanged"]
  }; }
  static get style() { return telekomNavItemCss; }
  static get cmpMeta() { return {
    "$flags$": 4,
    "$tagName$": "scale-telekom-nav-item",
    "$members$": {
      "active": [516],
      "variant": [513],
      "role": [513],
      "hideOnMobile": [516, "hide-on-mobile"],
      "hideOnDesktop": [516, "hide-on-desktop"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["active", "active"], ["variant", "variant"], ["role", "role"], ["hideOnMobile", "hide-on-mobile"], ["hideOnDesktop", "hide-on-desktop"]]
  }; }
}

const telekomNavListCss = ".scale-telekom-nav-list{--width:100%;--height:100%;--spacing-x-start:0;--flex-direction:row;--_spacing-x-slotted:var(--_spacing-x-slotted-main-nav, 24px);--_spacing-x-slotted-meta-nav-external:var(\n    --telekom-spacing-composition-space-07\n  );--_spacing-x-slotted-meta-nav:var(--telekom-spacing-composition-space-07);--_spacing-x-slotted-lang-switcher:var(\n    --telekom-spacing-composition-space-04\n  );--_spacing-x-slotted-main-nav:var(--telekom-spacing-composition-space-10);--_spacing-x-slotted-functions:var(--telekom-spacing-composition-space-08);display:flex;align-items:stretch;flex-direction:var(--flex-direction);width:var(--width);height:var(--height);margin-inline-start:var(--spacing-x-start)}.scale-telekom-nav-list[debug]{border:1px dotted gold}@media screen and (min-width: 1296px){.scale-telekom-nav-list{--_spacing-x-slotted-main-nav:var(--telekom-spacing-composition-space-14);--_spacing-x-slotted-meta-nav:var(--telekom-spacing-composition-space-07);--_spacing-x-slotted-meta-nav-external:var(\n      --telekom-spacing-composition-space-07\n    )}.scale-telekom-nav-list[debug]{border:1px dotted cyan}}@media screen and (min-width: 1680px){.scale-telekom-nav-list{--_spacing-x-slotted-main-nav:var(--telekom-spacing-composition-space-16)}.scale-telekom-nav-list[debug]{border:1px dotted magenta}}.scale-telekom-nav-list[variant='meta-nav-external']{--_spacing-x-slotted:var(--_spacing-x-slotted-meta-nav-external)}.scale-telekom-nav-list[variant='meta-nav']{--_spacing-x-slotted:var(--_spacing-x-slotted-meta-nav)}.scale-telekom-nav-list[variant='lang-switcher']{--_spacing-x-slotted:var(--telekom-spacing-composition-space-08)}@media screen and (min-width: 1040px){.scale-telekom-nav-list[variant='lang-switcher']{--_spacing-x-slotted:var(--telekom-spacing-composition-space-04)}}.scale-telekom-nav-list[variant='main-nav']{--_spacing-x-slotted:var(--_spacing-x-slotted-main-nav)}.scale-telekom-nav-list[variant='functions']{--_spacing-x-slotted:var(--_spacing-x-slotted-functions)}.scale-telekom-nav-list[alignment='left']{justify-content:flex-start}.scale-telekom-nav-list[alignment='right']{justify-content:flex-end}.scale-telekom-nav-list[alignment='center']{justify-content:center}.scale-telekom-nav-list[alignment='left']:not([variant='main-nav'])>.scale-telekom-nav-item button,.scale-telekom-nav-list[alignment='left']:not([variant='main-nav'])>.scale-telekom-nav-item a{margin-inline-end:var(--_spacing-x-slotted)}.scale-telekom-nav-list[variant='main-nav']>.scale-telekom-nav-item{position:relative;left:calc(-1 * var(--telekom-spacing-composition-space-06));margin-inline-end:0}.scale-telekom-nav-list[variant='main-nav']>.scale-telekom-nav-item button,.scale-telekom-nav-list[variant='main-nav']>.scale-telekom-nav-item a{padding-inline-start:var(--telekom-spacing-composition-space-06)}.scale-telekom-nav-list[variant='main-nav']>.scale-telekom-nav-item button,.scale-telekom-nav-list[variant='main-nav']>.scale-telekom-nav-item a{padding-inline-end:calc(\n    var(--_spacing-x-slotted) - var(--telekom-spacing-composition-space-06)\n  )}.scale-telekom-nav-list[variant='main-nav']>.scale-telekom-nav-item button::after,.scale-telekom-nav-list[variant='main-nav']>.scale-telekom-nav-item a::after{margin-inline-start:var(--telekom-spacing-composition-space-06);width:calc(100% - var(--_spacing-x-slotted))}.scale-telekom-nav-list[alignment='right']:not([variant='main-nav'])>*:not(:first-child){margin-inline-start:var(--_spacing-x-slotted)}.scale-telekom-nav-list[slot='mobile-meta-nav'],.scale-telekom-nav-list[slot='mobile-meta-nav-external']{--flex-direction:column}";

const isDirectChild = (parent, child) => [...parent.children].includes(child);
class TelekomNavList {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.role = 'menu';
    this.alignment = 'left';
    this.variant = 'main-nav';
  }
  handleScaleExpanded(event) {
    if (event.detail.expanded) {
      this.closeExpandedFlyoutSiblings(event.target);
    }
  }
  closeExpandedFlyoutSiblings(target) {
    const siblingItems = [...this.hostElement.children].filter((x) => !x.contains(target));
    siblingItems.forEach((item) => {
      const flyout = item.querySelector('scale-telekom-nav-flyout');
      if (isDirectChild(item, flyout) && flyout.expanded) {
        flyout.expanded = false;
      }
    });
  }
  connectedCallback() {
    [...this.hostElement.children].forEach((el) => {
      el.setAttribute('variant', this.variant);
    });
  }
  render() {
    return (hAsync(Host$1, { class: "scale-telekom-nav-list" }, hAsync("slot", null)));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return telekomNavListCss; }
  static get cmpMeta() { return {
    "$flags$": 4,
    "$tagName$": "scale-telekom-nav-list",
    "$members$": {
      "role": [513],
      "alignment": [513],
      "variant": [513]
    },
    "$listeners$": [[0, "scale-expanded", "handleScaleExpanded"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["role", "role"], ["alignment", "alignment"], ["variant", "variant"]]
  }; }
}

const telekomProfileMenuCss = "/**\n * @license\n * Scale https://github.com/telekom/scale\n *\n * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n\n */\n/**\n * @license\n * Scale https://github.com/telekom/scale\n *\n * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n\nscale-telekom-profile-menu scale-menu-flyout {\n  display: flex;\n  height: 100%;\n\n  > a {\n    box-sizing: border-box;\n    display: flex;\n    align-items: flex-end;\n    height: 100%;\n    position: relative;\n    font: inherit;\n    color: inherit;\n    background: none;\n    appearance: none;\n    padding: 0 0 var(--_spacing-bottom-slotted-bottom) 0;\n    border: none;\n    text-decoration: none;\n    cursor: pointer;\n    transition: padding-bottom var(--telekom-motion-duration-immediate)\n      var(--telekom-motion-easing-standard);\n\n    line-height: var(--telekom-typography-line-spacing-loose);\n    font-weight: var(--telekom-typography-font-weight-extra-bold);\n\n    > .flyout-label {\n      font-size: var(--scl-font-size-12);\n      font-weight: var(--telekom-typography-font-weight-regular);\n      margin-left: var(--scl-spacing-8);\n    }\n  }\n\n  > a:hover,\n  > a:hover svg {\n    color: var(--telekom-color-text-and-icon-primary-hovered);\n  }\n\n  > a[aria-expanded='true'],\n  > a[aria-expanded='true'] svg {\n    color: var(--telekom-color-text-and-icon-primary-standard);\n  }\n\n  > a[aria-expanded='true'] .flyout-label {\n    color: var(--telekom-color-text-and-icon-standard);\n  }\n}\n\n.user-menu-mobile {\n  display: flex;\n  height: 100%;\n}\n.user-menu-mobile .flyout-label [aria-hidden='true'] {\n  display: none;\n}\n.user-menu-mobile .mydot .scale-icon {\n  width: 12px;\n  height: 12px;\n}\n\n.scale-telekom-nav-item > button {\n  padding-bottom: var(--_spacing-bottom-slotted-bottom);\n}\n\n.user-menu-desktop {\n  display: none;\n}\n\n.user-menu-desktop scale-menu-flyout {\n  display: flex;\n}\n\n.user-menu-trigger {\n  position: relative;\n  left: 24px;\n}\n\n@media screen and (min-width: 640px) {\n  .user-menu-trigger {\n    top: calc(var(--_spacing-bottom-slotted-bottom) + 8px);\n  }\n}\n\n@media screen and (min-width: 1040px) {\n  .user-menu-mobile {\n    display: none;\n  }\n\n  .user-menu-desktop {\n    display: flex;\n    height: 100%;\n  }\n\n  scale-telekom-profile-menu scale-menu-flyout-list::part(base) {\n    top: calc(100% + var(--telekom-spacing-composition-space-03) - 16px);\n  }\n}\n\n@media screen and (min-width: 1296px) {\n  scale-telekom-header-data-back-compat .user-menu-trigger {\n    top: calc(var(--_spacing-bottom-slotted-bottom) + 12px);\n  }\n}\n\n.profile-menu-login {\n  min-width: 15em;\n  padding-right: var(--telekom-spacing-composition-space-06);\n\n  > scale-button {\n    display: block;\n    --width: 100%;\n    margin: 1.5em 0;\n  }\n}\n\n.profile-menu-login > strong {\n  display: flex;\n  font: var(--telekom-text-style-heading-5);\n  padding: var(--telekom-spacing-composition-space-04) 0;\n}\n@media screen and (min-width: 640px) {\n  .profile-menu-login > strong {\n    padding-top: var(--telekom-spacing-composition-space-10);\n  }\n  .profile-menu-login .footer {\n    padding-top: var(--telekom-spacing-composition-space-04);\n  }\n}\n@media screen and (min-width: 1040px) {\n  .profile-menu-login {\n    padding: 12px 24px 4px 24px;\n  }\n  .profile-menu-login > strong {\n    padding-top: 0;\n  }\n  .profile-menu-login > scale-button {\n    margin: 16px 0;\n  }\n  .profile-menu-login .footer {\n    padding-top: 0;\n  }\n}\n\n.profile-menu-login p {\n  line-height: 1.4em;\n  color: var(--telekom-color-text-and-icon-additional);\n  margin: 0;\n}\n.profile-menu-login #signUp {\n  margin-top: var(--telekom-spacing-composition-space-04);\n}\n.profile-menu-login #signUp p {\n  margin: 0;\n}\n\n.scale-telekom-nav-list[variant='functions']::part(circle) .scale-icon {\n  height: 12px;\n  width: 12px;\n}\n\n.mydot {\n  background: var(--telekom-color-functional-success-standard);\n  border: 2px solid #fff;\n  border-radius: 50%;\n  color: #fff;\n  display: flex;\n  height: 12px;\n  width: 12px;\n  position: absolute;\n  top: -4px;\n  right: -6px;\n}\nscale-telekom-profile-menu scale-menu-flyout a .mydot .scale-icon {\n  color: #fff !important;\n  height: 12px;\n  width: 12px;\n}\n\napp-navigation-user-menu {\n  --color-divider: transparent;\n}\n\napp-navigation-user-menu::part(userInfo) {\n  margin: 0;\n}\napp-navigation-user-menu::part(userInfo)\n  .app-navigation-user-menu__user-info--name {\n  margin-bottom: 0;\n}\n\napp-navigation-user-menu::part(rule-horizontal) {\n  visibility: hidden;\n  margin: var(--telekom-spacing-composition-space-05) 0;\n}\n\n@media screen and (min-width: 640px) {\n  app-navigation-user-menu::part(userInfo) {\n    padding-top: var(--telekom-spacing-composition-space-08);\n  }\n  app-navigation-user-menu::part(rule-horizontal) {\n    margin: var(--telekom-spacing-composition-space-08) 0\n      var(--telekom-spacing-composition-space-06) 0;\n  }\n}\n\napp-navigation-user-menu::part(item) {\n  margin-top: var(--telekom-spacing-composition-space-05);\n  margin-bottom: var(--telekom-spacing-composition-space-05);\n  padding: 0;\n  border-top: 1px solid transparent;\n  border-bottom: 1px solid transparent;\n}\n\napp-navigation-user-menu::part(button) {\n  padding-top: 0;\n  padding-left: 0;\n}\n@media screen and (min-width: 640px) {\n  app-navigation-user-menu::part(button) {\n    margin-top: -10px;\n  }\n}\n\n@media screen and (min-width: 1040px) {\n  app-navigation-user-menu::part(item) {\n    line-height: 200%;\n    margin-top: 10px;\n    margin-bottom: 10px;\n    padding-top: 0;\n    padding-bottom: 0;\n    border: 0;\n  }\n\n  app-navigation-user-menu::part(userInfo) {\n    padding-top: 0;\n  }\n  app-navigation-user-menu::part(rule-horizontal) {\n    padding-top: 16px;\n    padding-bottom: 6px;\n    margin: 0;\n  }\n  app-navigation-user-menu::part(button) {\n    margin-top: 7px;\n    padding-bottom: 0;\n  }\n}\n\n.visually-hidden {\n  /* see https://www.a11yproject.com/posts/how-to-hide-content/ */\n  clip: rect(0 0 0 0);\n  clip-path: inset(50%);\n  height: 1px;\n  overflow: hidden;\n  position: absolute;\n  white-space: nowrap;\n  width: 1px;\n}\n";

const LOGIN_DEFAULT = 'https://www.telekom.de';
const LOGIN_HELP_DEFAULT = 'https://www.telekom.de';
const REGISTER_DEFAULT = 'https://www.telekom.de';
const LOGIN_SETTINGS_DEFAULT = 'https://account.idm.telekom.com/account-manager/';
const LOGOUT_DEFAULT = 'https://accounts.login.idm.telekom.com/sessionmessage/logout';
const readData = (data) => {
  let parsedData;
  try {
    parsedData = JSON.parse(data);
  }
  catch (error) {
    // console.error("Error parsing data! error: " + error);
    // console.error("data: " + data);
    parsedData = data;
  }
  return parsedData;
};
class TelekomProfileMenu {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.menuOpen = false;
  }
  onKeydown(event) {
    if (this.menuOpen && 'Escape' === event.key) {
      this.userMenuDesktopTrigger.click();
    }
  }
  openMenu(event) {
    if (event.target.id === 'user-menu-desktop') {
      this.menuOpen = true;
    }
  }
  closeMenu(event) {
    if (event.target.id === 'user-menu-desktop') {
      this.menuOpen = false;
    }
  }
  printSignInMenu() {
    return (hAsync("div", { class: "profile-menu-login" }, hAsync("strong", null, this.serviceName), hAsync("p", null, this.serviceDescription), hAsync("scale-button", { href: this.loginUrl || LOGIN_DEFAULT }, this.loginLabel), hAsync("div", { class: "footer" }, hAsync("p", null, hAsync("scale-link", { "omit-underline": "true", href: this.loginHelpUrl || LOGIN_HELP_DEFAULT }, this.loginHelpLabel)), hAsync("div", { id: "signUp" }, hAsync("p", null, this.registerHeadline), hAsync("p", null, hAsync("scale-link", { "omit-underline": "true", href: this.registerUrl || REGISTER_DEFAULT }, this.registerLabel))))));
  }
  printProfileTrigger() {
    if (!this.loggedIn) {
      return (hAsync("scale-icon-user-file-user", { selected: this.menuOpen }));
    }
    // logged in
    return (hAsync("scale-badge", { "no-dot": "true" }, hAsync("scale-icon-user-file-user", { selected: this.menuOpen }), hAsync("div", { slot: "dot", class: "mydot" }, hAsync("scale-icon-action-checkmark", null))));
  }
  buildUserNavigation() {
    const divider = [{ type: 'divider' }];
    const userInfo = readData(this.userInfo);
    userInfo.type = 'userInfo';
    let serviceLinks = readData(this.serviceLinks);
    if (!serviceLinks) {
      // console.error("serviceLinks missing");
      serviceLinks = [];
    }
    for (const el of serviceLinks) {
      el.type = 'item';
    }
    const loginSettings = {
      type: 'item',
      name: this.loginSettingsLabel || 'Login-Settings',
      href: this.loginSettingsUrl || LOGIN_SETTINGS_DEFAULT,
      icon: 'service-settings',
    };
    const logout = {
      type: 'button',
      name: this.logoutLabel,
      href: this.logoutUrl || LOGOUT_DEFAULT,
      variant: 'secondary',
    };
    let menu = [];
    menu = menu.concat(userInfo);
    if (!this.serviceLinksEmpty()) {
      menu = menu.concat(divider);
    }
    menu = menu.concat(serviceLinks);
    if (!this.hideLoginSettings) {
      menu = menu.concat(loginSettings);
    }
    if (!this.serviceLinksEmpty()) {
      menu = menu.concat(divider);
    }
    menu = menu.concat(logout);
    return menu;
  }
  serviceLinksEmpty() {
    return (this.hideLoginSettings && this.serviceLinks.length < 1) === true;
  }
  buildDesktopMenuStyles() {
    let style = '.app-navigation-user-menu { padding: 12px 24px 4px 24px; box-sizing: border-box; }';
    style +=
      '.scale-icon { width: 20px; height: 20px; display: flex; align-self: center; }';
    if (this.serviceLinksEmpty()) {
      style += 'scale-button { margin-top: 32px !important; }';
    }
    return style;
  }
  buildMobileMenuStyles() {
    let style = '.app-navigation-user-menu__user-info--name { margin-bottom: 0 !important; }';
    style += '.scale-icon { width: 20px; height: 20px; }';
    if (this.serviceLinksEmpty()) {
      style += 'scale-button { margin-top: 32px !important; }';
    }
    return style;
  }
  printLabel() {
    if (!this.accessibilityLabel) {
      return hAsync("span", { class: "flyout-label" }, this.label);
    }
    return (hAsync("div", { class: "flyout-label" }, hAsync("span", { "aria-hidden": "true" }, this.label), hAsync("span", { class: "visually-hidden" }, this.accessibilityLabel)));
  }
  render() {
    return (hAsync(Host$1, null, hAsync("scale-telekom-nav-item", { class: "user-menu-desktop" }, hAsync("scale-menu-flyout", { direction: "bottom-left", "onScale-open": (event) => this.openMenu(event), "onScale-close": (event) => this.closeMenu(event), triggerHasPopup: false }, hAsync("a", { href: "javascript:void(0);", slot: "trigger", role: "button", "aria-controls": "user-menu-desktop" }, this.printProfileTrigger(), this.printLabel()), hAsync("scale-menu-flyout-list", { id: "user-menu-desktop", preventFlipVertical: true, role: "none" }, this.loggedIn && [
      hAsync("app-navigation-user-menu", { hide: () => {
          this.userMenuDesktopTrigger.click();
        }, navigation: this.buildUserNavigation(), styles: this.buildDesktopMenuStyles() }),
    ], !this.loggedIn && [
      hAsync("app-navigation-user-menu", { navigation: [] }, this.printSignInMenu()),
    ]), hAsync("div", { slot: "trigger", class: "user-menu-trigger", ref: (el) => (this.userMenuDesktopTrigger = el) }))), hAsync("scale-telekom-nav-item", { class: "user-menu-mobile" }, hAsync("button", null, this.printProfileTrigger(), this.printLabel()), hAsync("scale-telekom-nav-flyout", { variant: "mobile" }, hAsync("scale-telekom-mobile-flyout-canvas", { appName: this.appName, closeButtonLabel: this.closeMenuAccessibilityLabel }, this.loggedIn && [
      hAsync("app-navigation-user-menu", { slot: "mobile-main-nav", navigation: this.buildUserNavigation(), styles: this.buildMobileMenuStyles() }),
    ], !this.loggedIn && [
      hAsync("app-navigation-user-menu", { slot: "mobile-main-nav", navigation: [] }, this.printSignInMenu()),
    ])))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return telekomProfileMenuCss; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-telekom-profile-menu",
    "$members$": {
      "label": [1],
      "accessibilityLabel": [1, "accessibility-label"],
      "closeMenuAccessibilityLabel": [1, "close-menu-accessibility-label"],
      "appName": [1, "app-name"],
      "serviceName": [1, "service-name"],
      "serviceDescription": [1, "service-description"],
      "loggedIn": [4, "logged-in"],
      "loginUrl": [1, "login-url"],
      "loginLabel": [1, "login-label"],
      "loginHelpUrl": [1, "login-help-url"],
      "loginHelpLabel": [1, "login-help-label"],
      "registerHeadline": [1, "register-headline"],
      "registerUrl": [1, "register-url"],
      "registerLabel": [1, "register-label"],
      "userInfo": [8, "user-info"],
      "serviceLinks": [8, "service-links"],
      "loginSettingsLabel": [1, "login-settings-label"],
      "loginSettingsUrl": [1, "login-settings-url"],
      "hideLoginSettings": [4, "hide-login-settings"],
      "logoutLabel": [1, "logout-label"],
      "logoutUrl": [1, "logout-url"],
      "menuOpen": [32]
    },
    "$listeners$": [[0, "keydown", "onKeydown"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const textFieldCss = "scale-text-field{--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);--radius:var(--telekom-radius-standard);--border:var(--telekom-spacing-composition-space-01) solid\n    var(--telekom-color-ui-border-standard);--border-error:var(--telekom-spacing-composition-space-02) solid\n    var(--telekom-color-functional-danger-standard);--border-success:var(--telekom-spacing-composition-space-02) solid\n    var(--telekom-color-functional-success-standard);--border-warning:var(--telekom-spacing-composition-space-02) solid\n    var(--telekom-color-functional-warning-standard);--border-color-hover:var(--telekom-color-ui-border-hovered);--border-color-focus:var(--telekom-color-ui-border-hovered);--border-color-disabled:var(--telekom-color-ui-border-disabled);--background-color-hover:var(--telekom-color-ui-state-fill-hovered);--background-color-disabled:none;--focus-outline:var(--telekom-line-weight-highlight) solid\n    var(--telekom-color-functional-focus-standard);--height:44px;--spacing-x:var(--telekom-spacing-composition-space-05);--color-disabled:var(--telekom-color-text-and-icon-disabled);--background-disabled:none;--border-color-readonly:var(--telekom-color-ui-border-disabled);--background-readonly:var(--telekom-color-ui-disabled);--font-weight-meta:var(--telekom-line-weight-bold);--font-size-meta:var(--telekom-typography-font-size-small);--line-height-meta:var(--telekom-typography-line-spacing-standard);--spacing-y-meta:var(--telekom-spacing-composition-space-03);--color-meta:var(--telekom-color-text-and-icon-standard);--color-meta-error:var(--telekom-color-text-and-icon-functional-danger);--spacing-control:1.125rem\n    calc(2rem - var(--telekom-spacing-composition-space-01)) 0.25rem\n    calc(0.75rem - var(--telekom-spacing-composition-space-01));--transition-control:var(--transition);--background-control:var(--telekom-color-ui-state-fill-standard);--margin-bottom-control:var(--telekom-spacing-composition-space-03);--transition-counter:var(--transition);--color-counter-error:var(--color-meta-error);--font-size-helper-text:var(--telekom-typography-font-size-small);--line-height-helper-text:1.35;--font-weight-helper-text:var(--telekom-typography-font-weight-bold);--color-helper-text:var(\n    --telekom-color-text-and-icon-functional-informational\n  );--color-helper-text-error:var(--color-meta-error);--color-helper-text-success:var(\n    --telekom-color-text-and-icon-functional-success\n  );--color-helper-text-warning:var(\n    --telekom-color-text-and-icon-functional-warning\n  );--color-helper-text-neutral:var(--telekom-color-text-and-icon-additional);--helper-text-icon-size:11px;--transition-placeholder:var(--transition);--color-placeholder:var(--telekom-color-text-and-icon-additional);--color-label:var(--telekom-color-text-and-icon-additional);--color-label-readonly:var(--telekom-color-text-and-icon-standard);--z-index-label:var(--scl-z-index-10);--transition-label:var(--transition)}.text-field{position:relative}.text-field .text-field__control{width:100%;height:var(--height);margin:0;display:flex;outline:none;padding:var(--spacing-control);z-index:1;box-sizing:border-box;transition:var(--transition-control);font:var(--telekom-text-style-body);border-radius:var(--radius);border:var(--border);background-color:var(--background-control);color:var(--color-meta)}.text-field--hide-label .text-field__control{padding:5px var(--telekom-spacing-composition-space-12) 5px\n    calc(var(--spacing-x) - 1px)}.text-field--hide-label .text-field__label{visibility:hidden}.text-field.text-field--helper-text .text-field__control{margin-bottom:var(--margin-bottom-control)}.text-field .text-field__counter{display:flex;transition:var(--transition-counter);margin-left:auto;justify-content:flex-end;font:var(--telekom-text-style-small);color:var(--telekom-color-text-and-icon-standard)}.text-field scale-helper-text{--color-informational:var(--color-helper-text);--color-warning:var(--color-helper-text-warning);--color-danger:var(--color-helper-text-error);--color-success:var(--color-helper-text-success);--color-neutral:var(--color-helper-text-neutral);--font-size:var(--font-size-helper-text);--font-weight:var(--font-weight-helper-text);--line-height:var(--line-height-helper-text);--icon-size-helper-text:var(--helper-text-icon-size);font-weight:var(--telekom-typography-font-weight-bold);display:flex}.text-field .text-field__meta{display:flex;justify-content:space-between;margin-top:var(--spacing-y-meta);color:var(--color-meta)}.text-field:not(.text-field--disabled):not(.text-field--readonly) .text-field__control:hover{border-color:var(--border-color-hover);background-color:var(--background-color-hover)}.text-field:not(.text-field--disabled):not(.text-field--readonly) .text-field__control:focus{border-color:var(--border-color-focus);outline:var(--focus-outline);outline-offset:1px}.text-field:not(.text-field--disabled) .text-field__control:focus::placeholder{color:var(--color-placeholder)}.text-field .text-field__control::placeholder,.text-field ::placeholder{color:transparent;transition:var(--transition-placeholder)}.text-field__label{top:0;left:0;color:var(--color-label);display:flex;z-index:var(--z-index-label);position:absolute;transition:var(--transition-label);pointer-events:none;font:var(--telekom-text-style-ui);transform:translate(var(--spacing-x), 0.875rem)}.text-field--has-focus:not(.text-field--readonly) .text-field__label,.animated .text-field__label{font:var(--telekom-text-style-small-bold);transform:translate(\n    var(--spacing-x),\n    calc(0.25rem + var(--telekom-spacing-composition-space-01))\n  )}.text-field--variant-danger .text-field__control{border:var(--border-error)}.text-field--variant-success .text-field__control{border:var(--border-success)}.text-field--variant-warning .text-field__control{border:var(--border-warning)}.text-field--variant-danger:not(.text-field--disabled):not(.text-field--readonly) .text-field__control:hover,.text-field--variant-danger:not(.text-field--disabled):not(.text-field--readonly) .text-field__control:focus{border-color:var(--telekom-color-functional-danger-hovered)}.text-field--variant-success:not(.text-field--disabled):not(.text-field--readonly) .text-field__control:hover,.text-field--variant-success:not(.text-field--disabled):not(.text-field--readonly) .text-field__control:focus{border-color:var(--telekom-color-functional-success-hovered)}.text-field--variant-warning:not(.text-field--disabled):not(.text-field--readonly) .text-field__control:hover,.text-field--variant-warning:not(.text-field--disabled):not(.text-field--readonly) .text-field__control:focus{border-color:var(--telekom-color-functional-warning-hovered)}.text-field--variant-danger .text-field__helper-text{color:var(--color-helper-text-error)}.text-field--variant-danger .text-field__counter{color:var(--color-counter-error)}.text-field--variant-success .text-field__helper-text{color:var(--color-helper-text-success)}.text-field--variant-success .text-field__counter{color:var(--telekom-color-text-and-icon-functional-success)}.text-field--variant-warning .text-field__helper-text{color:var(--color-helper-text-warning)}.text-field--variant-warning .text-field__counter{color:var(--telekom-color-text-and-icon-functional-warning)}.text-field--transparent .text-field__control{background-color:transparent}.text-field--readonly input,.text-field--readonly .text-field__control{color:var(--color-label-readonly);border:none;background:var(--background-readonly)}.text-field--readonly .text-field__control:focus{outline:var(--focus-outline);outline-offset:1px}.text-field--disabled label,.text-field--disabled .text-field__label,.text-field--disabled input,.text-field--disabled .text-field__control,.text-field--disabled .text-field__meta,.text-field--disabled .text-field__counter,.text-field--disabled .text-field__helper-text{cursor:not-allowed;border-color:var(--border-color-disabled);background-color:var(--background-color-disabled);color:var(--color-disabled);background:transparent}.text-field--disabled.animated label.text-field__label{color:var(--color-disabled)}input::-webkit-outer-spin-button,input::-webkit-inner-spin-button{-webkit-appearance:none}input[type='number']{-moz-appearance:textfield}input[type='datetime-local']::-webkit-calendar-picker-indicator,input[type='time']::-webkit-calendar-picker-indicator,input[type='date']::-webkit-calendar-picker-indicator,input[type='week']::-webkit-calendar-picker-indicator,input[type='month']::-webkit-calendar-picker-indicator{position:absolute;right:12px}input:-webkit-autofill,input:-webkit-autofill:hover,input:-webkit-autofill:focus,input:-webkit-autofill:active{color-scheme:dark}@media screen and (forced-colors: active), (-ms-high-contrast: active){.text-field--readonly input,.text-field--readonly .text-field__control{border:1px solid}}";

class TextField {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleInput = createEvent$1(this, "scale-input", 7);
    this.scaleInputLegacy = createEvent$1(this, "scaleInput", 7);
    this.scaleChange = createEvent$1(this, "scale-change", 7);
    this.scaleChangeLegacy = createEvent$1(this, "scaleChange", 7);
    this.scaleFocus = createEvent$1(this, "scale-focus", 7);
    this.scaleFocusLegacy = createEvent$1(this, "scaleFocus", 7);
    this.scaleBlur = createEvent$1(this, "scale-blur", 7);
    this.scaleBlurLegacy = createEvent$1(this, "scaleBlur", 7);
    this.scaleKeyDown = createEvent$1(this, "scale-keydown", 7);
    this.scaleKeyDownLegacy = createEvent$1(this, "scaleKeydown", 7);
    /** (optional) Input type */
    this.type = 'text';
    /** (optional) Input mode */
    this.inputModeType = 'text';
    /** (optional) Input name */
    this.name = '';
    /** Input label */
    this.label = '';
    /** (optional) Input helper text */
    this.helperText = '';
    /** @deprecated - invalid should replace status */
    this.status = '';
    /** (optional) Input status */
    this.invalid = false;
    /** (optional) Variant */
    this.variant = 'informational';
    /** (optional) Input placeHolder */
    this.placeholder = '';
    /** (optional) Input value */
    this.value = '';
    /** (optional) the step attribute specifies the interval between legal numbers in an <input type="number"> element. */
    this.step = '1';
    /** (optional) to avoid displaying the label */
    this.hideLabelVisually = false;
    /** (optional)) Makes type `input` behave as a controlled component in React */
    this.experimentalControlled = false;
    /** Whether the input element has focus */
    this.hasFocus = false;
    this.internalId = generateUniqueId();
    this.handleInput = (event) => {
      const target = event.target;
      if (this.experimentalControlled) {
        this.hostElement.querySelector('input').value = String(this.value);
        this.forceUpdate = String(Date.now());
      }
      if (target) {
        this.value = target.value || '';
        this.emitChange();
      }
      emitEvent$1(this, 'scaleInput', event);
    };
    this.handleChange = (event) => {
      const target = event.target;
      if (target) {
        this.value = target.value || '';
        this.emitChange();
      }
    };
    this.handleFocus = () => {
      emitEvent$1(this, 'scaleFocus');
      this.hasFocus = true;
    };
    this.handleBlur = () => {
      emitEvent$1(this, 'scaleBlur');
      this.hasFocus = false;
    };
    this.handleKeyDown = (event) => {
      emitEvent$1(this, 'scaleKeyDown', event);
    };
  }
  componentWillLoad() {
    if (this.inputId == null) {
      this.inputId = 'input-text-field-' + this.internalId;
    }
  }
  componentDidRender() {
    // When `experimentalControlled` is true,
    // make sure the <input> is always in sync with the value.
    const value = this.value == null ? '' : this.value.toString();
    const input = this.hostElement.querySelector('input');
    if (this.experimentalControlled && input.value.toString() !== value) {
      input.value = value;
    }
    if (this.status !== '') {
      statusNote({
        tag: 'deprecated',
        message: 'Property "status" is deprecated. Please use the "invalid" property!',
        type: 'warn',
        source: this.hostElement,
      });
    }
    if (this.size) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "size" is deprecated. Please use css overwrites for a small version!',
        type: 'warn',
        source: this.hostElement,
      });
    }
  }
  // We're not watching `value` like we used to
  // because we get unwanted `scaleChange` events
  // because how we keep this.value up-to-date for type="select"
  // `this.value = selectedValue`
  emitChange() {
    emitEvent$1(this, 'scaleChange', {
      value: this.value == null ? this.value : this.value.toString(),
    });
  }
  render() {
    const ariaInvalidAttr = this.status === 'error' || this.invalid ? { 'aria-invalid': 'true' } : {};
    const helperTextId = `helper-message-${this.internalId}`;
    const ariaDescribedByAttr = { 'aria-describedBy': helperTextId };
    const ariaDetailedById = { 'aria-details': this.ariaDetailedId };
    const numericTypes = [
      'number',
      'date',
      'month',
      'week',
      'time',
      'datetime-local',
    ];
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { class: this.getCssClassMap() }, hAsync("label", { class: "text-field__label", htmlFor: this.inputId }, this.label), hAsync("input", Object.assign({ type: this.type, inputMode: this.inputModeType, class: "text-field__control", value: this.value }, (!!this.name ? { name: this.name } : {}), (!!this.inputAutofocus ? { autofocus: 'true' } : {}), { required: this.required, minLength: this.minLength, maxLength: this.maxLength, min: this.min, max: this.max, id: this.inputId, list: this.list, onInput: this.handleInput, onChange: this.handleChange, onFocus: this.handleFocus, onBlur: this.handleBlur, onKeyDown: this.handleKeyDown }, (!!this.placeholder && !this.readonly
      ? { placeholder: this.placeholder }
      : {}), { disabled: this.disabled, readonly: this.readonly, autocomplete: this.inputAutocomplete }, ariaDetailedById, ariaInvalidAttr, (this.helperText ? ariaDescribedByAttr : {}), (numericTypes.includes(this.type) ? { step: this.step } : {}))), (!!this.helperText || !!this.counter) && (hAsync("div", { class: "text-field__meta", "aria-live": "polite", "aria-relevant": "additions removals" }, this.helperText && (hAsync("scale-helper-text", { id: helperTextId, helperText: this.helperText, variant: this.invalid ? 'danger' : this.variant })), this.counter && (hAsync("div", { class: "text-field__counter" }, !!this.value ? String(this.value).length : 0, " /", ' ', this.maxLength)))))));
  }
  getCssClassMap() {
    // the numeric type as followings, eg input[type="date"], will print a placeholder in some browsers
    const numericTypes = ['date', 'month', 'week', 'time', 'datetime-local'];
    const animated = (this.value != null && this.value !== '') ||
      numericTypes.includes(this.type);
    return classnames('text-field', this.type && `text-field--type-${this.type}`, this.hasFocus && 'text-field--has-focus', this.disabled && `text-field--disabled`, this.transparent && 'text-field--transparent', this.status && `text-field--status-${this.status}`, this.invalid && `text-field--variant-danger`, this.variant && `text-field--variant-${this.variant}`, this.helperText && `text-field--helper-text`, this.readonly && `text-field--readonly`, this.hideLabelVisually && `text-field--hide-label`, animated && 'animated');
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return textFieldCss; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-text-field",
    "$members$": {
      "type": [1],
      "inputModeType": [1, "input-mode-type"],
      "name": [1],
      "label": [1],
      "size": [1],
      "helperText": [1, "helper-text"],
      "status": [1],
      "invalid": [4],
      "variant": [1],
      "maxLength": [2, "max-length"],
      "minLength": [2, "min-length"],
      "max": [2],
      "min": [2],
      "placeholder": [1],
      "disabled": [4],
      "readonly": [4],
      "required": [4],
      "counter": [4],
      "value": [1032],
      "inputId": [1, "input-id"],
      "transparent": [4],
      "step": [1],
      "list": [1],
      "inputAutofocus": [4, "input-autofocus"],
      "inputAutocomplete": [1, "input-autocomplete"],
      "ariaDetailedId": [1, "aria-detailed-id"],
      "hideLabelVisually": [4, "hide-label-visually"],
      "styles": [1],
      "experimentalControlled": [4, "experimental-controlled"],
      "hasFocus": [32],
      "forceUpdate": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const textareaCss = "scale-textarea{--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);--radius:var(--telekom-radius-standard);--border:var(--telekom-line-weight-standard) solid\n    var(--telekom-color-ui-border-standard);--border-error:var(--telekom-line-weight-highlight) solid\n    var(--telekom-color-functional-danger-standard);--border-color-hover:var(--telekom-color-ui-border-hovered);--border-color-focus:var(--telekom-color-ui-border-hovered);--border-color-disabled:var(--telekom-color-ui-border-disabled);--background-color-hover:var(--telekom-color-ui-state-fill-hovered);--background-color-disabled:none;--focus-outline:var(--telekom-line-weight-highlight) solid\n    var(--telekom-color-functional-focus-standard);--spacing-x-control:var(--telekom-spacing-composition-space-05);--spacing-bottom-control:var(--telekom-spacing-composition-space-05);--spacing-top-control:calc(\n    1.125rem - var(--telekom-spacing-composition-space-01)\n  );--color-disabled:var(--telekom-color-text-and-icon-disabled);--background-disabled:transparent;--border-color-readonly:transparent;--background-readonly:var(--telekom-color-ui-disabled);--font-weight-meta:var(--telekom-typography-font-weight-bold);--font-size-meta:var(--telekom-typography-font-size-small);--line-height-meta:var(--telekom-typography-line-spacing-standard);--spacing-y-meta:var(--telekom-spacing-composition-space-03);--color-meta:var(--telekom-color-text-and-icon-standard);--color-meta-error:var(--telekom-color-text-and-icon-functional-danger);--spacing-control:0 calc(2rem - var(--telekom-spacing-composition-space-01))\n    0.25rem calc(0.75rem - var(--telekom-spacing-composition-space-01));--transition-control:var(--transition);--background-control:var(--telekom-color-ui-state-fill-standard);--transition-counter:var(--transition);--color-counter-error:var(--color-meta-error);--transition-placeholder:var(--transition);--color-placeholder:var(--telekom-color-text-and-icon-additional);--color-label:var(--telekom-color-text-and-icon-additional);--color-label-readonly:var(--telekom-color-text-and-icon-standard);--z-index-label:var(--scl-z-index-10);--transition-label:var(--transition)}.textarea{position:relative;display:flex;flex-direction:column}.textarea__wrapper{display:flex;flex-direction:column;border-radius:var(--radius);border:var(--border)}.textarea__wrapper .textarea__control{margin:0;width:100%;resize:vertical;display:flex;outline:none;padding:var(--spacing-control);z-index:1;box-sizing:border-box;transition:var(--transition-control);font:var(--telekom-text-style-body);border:none;background-color:transparent;color:var(--color-meta);margin-top:var(--spacing-top-control)}.textarea .textarea__counter{display:flex;flex-shrink:0;transition:var(--transition-counter);margin-left:auto;justify-content:flex-end;font:var(--telekom-text-style-small);color:var(--telekom-color-text-and-icon-standard)}.textarea .textarea__meta{display:flex;justify-content:space-between;margin-top:var(--spacing-y-meta);color:var(--color-meta)}.textarea:not(.textarea--disabled):not(.textarea--readonly) .textarea__wrapper:hover{border-color:var(--border-color-hover);background-color:var(--background-color-hover)}.textarea:not(.textarea--disabled):not(.textarea--readonly).textarea--has-focus .textarea__wrapper{border-color:var(--border-color-focus);outline:var(--focus-outline);outline-offset:1px}.textarea:not(.textarea--disabled) .textarea__control:focus::placeholder{color:var(--color-placeholder)}.textarea .textarea__control::placeholder,.textarea ::placeholder{color:transparent;transition:var(--transition-placeholder)}.textarea__label{top:0;left:0;color:var(--color-label);display:flex;z-index:var(--z-index-label);position:absolute;transition:var(--transition-label);pointer-events:none;font:var(--telekom-text-style-ui);transform:translate(var(--spacing-x-control), 0.875rem)}.textarea--has-focus .textarea__label,.animated .textarea__label{font:var(--telekom-text-style-small-bold);transform:translate(\n    var(--spacing-x-control),\n    calc(0.25rem + var(--telekom-spacing-composition-space-01))\n  )}.textarea--status-error .textarea__wrapper{border:var(--border-error)}.textarea--status-error:not(.textarea--disabled):not(.textarea--readonly) .textarea__wrapper:hover,.textarea--status-error:not(.textarea--disabled):not(.textarea--readonly).textarea--has-focus .textarea__wrapper{border-color:var(--telekom-color-functional-danger-hovered)}.textarea--status-error .textarea__counter{color:var(--color-counter-error)}.textarea--transparent .textarea__control{background-color:transparent}.textarea--readonly .textarea__wrapper{border-color:var(--border-color-readonly);background:var(--background-readonly)}.textarea--readonly.textarea--has-focus .textarea__wrapper{outline:var(--focus-outline);outline-offset:1px}.textarea--readonly textarea,.textarea--readonly .textarea__wrapper .textarea__control{color:var(--color-label-readonly)}.textarea--disabled label,.textarea--disabled .textarea__label,.textarea--disabled textarea,.textarea--disabled .textarea__wrapper,.textarea--disabled .textarea__control,.textarea--disabled .textarea__meta{cursor:not-allowed;color:var(--color-disabled)}.textarea--disabled .textarea__wrapper{border-color:var(--border-color-disabled);background-color:var(--background-color-disabled)}";

class Textarea {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleInput = createEvent$1(this, "scale-input", 7);
    this.scaleInputLegacy = createEvent$1(this, "scaleInput", 7);
    this.scaleChange = createEvent$1(this, "scale-change", 7);
    this.scaleChangeLegacy = createEvent$1(this, "scaleChange", 7);
    this.scaleFocus = createEvent$1(this, "scale-focus", 7);
    this.scaleFocusLegacy = createEvent$1(this, "scaleFocus", 7);
    this.scaleBlur = createEvent$1(this, "scale-blur", 7);
    this.scaleBlurLegacy = createEvent$1(this, "scaleBlur", 7);
    this.scaleKeyDown = createEvent$1(this, "scale-keydown", 7);
    this.scaleKeyDownLegacy = createEvent$1(this, "scaleKeyDown", 7);
    /** (optional) Input name */
    this.name = '';
    /** (optional) Input label */
    this.label = '';
    /** (optional) Input helper text */
    this.helperText = '';
    /** @deprecated - invalid should replace status */
    this.status = '';
    /** (optional) Input status */
    this.invalid = false;
    /** (optional) Variant */
    this.variant = 'informational';
    /** (optional) Input placeHolder */
    this.placeholder = '';
    /** (optional) Input value */
    this.value = '';
    /** Whether the input element has focus */
    this.hasFocus = false;
    this.internalId = generateUniqueId();
    this.handleInput = (event) => {
      const target = event.target;
      if (target) {
        this.value = target.value || '';
        this.emitChange();
      }
      emitEvent$1(this, 'scaleInput', event);
    };
    this.handleChange = (event) => {
      const target = event.target;
      if (target) {
        this.value = target.value || '';
        this.emitChange();
      }
    };
    this.handleFocus = () => {
      emitEvent$1(this, 'scaleFocus');
      this.hasFocus = true;
    };
    this.handleBlur = () => {
      emitEvent$1(this, 'scaleBlur');
      this.hasFocus = false;
    };
    this.handleKeyDown = (event) => {
      emitEvent$1(this, 'scaleKeyDown', event);
    };
  }
  componentWillLoad() {
    if (this.inputId == null) {
      this.inputId = 'input-textarea-' + this.internalId;
    }
  }
  componentDidRender() {
    if (this.status !== '') {
      statusNote({
        tag: 'deprecated',
        message: 'Property "status" is deprecated. Please use the "invalid" property!',
        type: 'warn',
        source: this.hostElement,
      });
    }
  }
  // We're not watching `value` like we used to
  // because we get unwanted `scaleChange` events
  // because how we keep this.value up-to-date for type="select"
  // `this.value = selectedValue`
  emitChange() {
    emitEvent$1(this, 'scaleChange', {
      value: this.value == null ? this.value : this.value.toString(),
    });
  }
  render() {
    const ariaInvalidAttr = this.status === 'error' || this.invalid ? { 'aria-invalid': 'true' } : {};
    const helperTextId = `helper-message-${this.internalId}`;
    const ariaDescribedByAttr = { 'aria-describedBy': helperTextId };
    const readonlyAttr = this.readonly ? { readonly: 'readonly' } : {};
    return (hAsync(Host$1, null, hAsync("div", { class: this.getCssClassMap() }, hAsync("div", { class: "textarea__wrapper", onClick: () => this.focusableElement.focus(), style: !!this.resize &&
        this.resize === 'horizontal' && { width: 'max-content' } }, hAsync("label", { class: "textarea__label", htmlFor: this.inputId }, this.label), hAsync("textarea", Object.assign({ class: "textarea__control", style: !!this.resize && { resize: this.resize }, value: this.value }, (!!this.name ? { name: this.name } : {}), (!!this.inputAutofocus ? { autofocus: 'true' } : {}), { required: this.required, minLength: this.minLength, maxLength: this.maxLength, id: this.inputId, onInput: this.handleInput, onChange: this.handleChange, onFocus: this.handleFocus, onBlur: this.handleBlur, onKeyDown: this.handleKeyDown }, (!!this.placeholder ? { placeholder: this.placeholder } : {}), { disabled: this.disabled }, readonlyAttr, (!!this.rows ? { rows: this.rows } : {}), (!!this.cols ? { cols: this.cols } : {}), ariaInvalidAttr, (this.helperText ? ariaDescribedByAttr : {}), { ref: (el) => (this.focusableElement = el) }))), (!!this.helperText || !!this.counter) && (hAsync("div", { class: "textarea__meta", id: helperTextId, "aria-live": "polite", "aria-relevant": "additions removals" }, !!this.helperText && (hAsync("scale-helper-text", { helperText: this.helperText, variant: this.invalid ? 'danger' : this.variant })), this.counter && (hAsync("div", { class: "textarea__counter" }, !!this.value ? String(this.value).length : 0, " /", ' ', this.maxLength)))))));
  }
  getCssClassMap() {
    return classnames('textarea', this.hasFocus && 'textarea--has-focus', this.resize && `textarea--resize-${this.resize}`, this.disabled && `textarea--disabled`, this.transparent && 'textarea--transparent', this.status && `textarea--status-${this.status}`, this.invalid && `textarea--status-error`, this.variant && `textarea--variant-${this.variant}`, this.readonly && `textarea--readonly`, this.value != null && this.value !== '' && 'animated');
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return textareaCss; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-textarea",
    "$members$": {
      "name": [1],
      "label": [1],
      "rows": [2],
      "cols": [2],
      "helperText": [1, "helper-text"],
      "status": [1],
      "invalid": [4],
      "variant": [1],
      "maxLength": [2, "max-length"],
      "minLength": [2, "min-length"],
      "placeholder": [1],
      "disabled": [4],
      "readonly": [4],
      "required": [4],
      "counter": [4],
      "resize": [1],
      "value": [1032],
      "inputId": [1, "input-id"],
      "transparent": [4],
      "inputAutofocus": [4, "input-autofocus"],
      "styles": [1],
      "hasFocus": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const toastCss = "/*!@:host*/.sc-scale-toast-h{--width:400px;--radius:var(--telekom-radius-small);--background:var(--scl-color-background-standard);--box-shadow:var(--telekom-shadow-app-bar-top-raised);--spacing:var(--telekom-spacing-composition-space-06);--border-header:1px solid var(--scl-color-grey-20);--font-size-header:var(--telekom-text-style-heading-4);--font-size-header-small:var(--telekom-typography-font-size-small);--height-progress:var(--telekom-spacing-composition-space-02)}/*!@.toast*/.toast.sc-scale-toast{width:var(--width);display:flex;opacity:0;z-index:1;position:fixed;background:var(--background);box-shadow:var(--box-shadow);box-sizing:border-box;border-radius:var(--radius);flex-direction:column;justify-content:space-between}/*!@.toast__body*/.toast__body.sc-scale-toast{padding:var(--spacing)}/*!@.toast__header*/.toast__header.sc-scale-toast{margin:0;display:flex;padding:var(--spacing);border-bottom:var(--border-header);justify-content:space-between;font:var(--font-size-header)}/*!@.toast__header a*/.toast__header.sc-scale-toast a.sc-scale-toast{cursor:pointer}/*!@.toast__header small*/.toast__header.sc-scale-toast small.sc-scale-toast{margin-top:5px;margin-left:120px;font-size:var(--font-size-header-small)}/*!@.toast__progress*/.toast__progress.sc-scale-toast{left:0;bottom:0;height:var(--height-progress);display:block;overflow:hidden;position:absolute;background:red}";

class Toast {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) Toast size */
    this.size = '';
    /** (optional) Toast variant */
    this.variant = '';
    /** (optional) Toast autohide time */
    this.autoHide = false;
    /** (optional) Animated toast */
    this.animated = true;
    /** (optional) Toast position at the top */
    this.positionTop = 12;
    /** (optional) Toast position right */
    this.positionRight = 12;
    /** (optional) Toast fade duration */
    this.fadeDuration = 500;
    /** (optional) Toast state progress */
    this.progress = 0;
    /** (optional) Toast state height with offset */
    this.toastHeightWithOffset = 0;
    this.hideToast = false;
    this.timerId = null;
    this.close = () => {
      clearInterval(this.timerId);
      this.hideToast = true;
      setTimeout(() => {
        this.timerId = null;
        this.opened = false;
        this.progress = 0;
      }, this.fadeDuration);
    };
    this.getTime = () => {
      const formattedTime = this.time &&
        formatDistance(subSeconds(this.time, 3), new Date(), { addSuffix: true });
      return formattedTime;
    };
    this.setToastTimeout = () => {
      if (this.opened && this.autoHide !== false && !this.timerId) {
        this.timerId = setInterval(() => {
          this.progress += 1 / (this.getAutoHide() / 1000);
          if (this.progress >= 100) {
            this.close();
          }
        }, 10);
      }
    };
    this.transitions = (offset) => `
    @keyframes fadeIn {
      from {
        opacity: 0;
        top: -${offset}px;
      }
      to {
        opacity: 1;
        top: ${this.positionTop}px;
      }
    }

    @keyframes fadeOut {
      from {
        opacity: 1;
        top: ${this.positionTop}px;
      }
      to {
        opacity: 0;
        top: -${offset}px;
      }
    }
  `;
    this.animationStyle = (offset) => {
      return `
      .toast--show {
        right: ${this.positionRight}px;
        animation: fadeIn ${this.fadeDuration / 1000}s ease-in-out;
        top: ${this.positionTop}px;
        opacity: 1;
      },
      .toast--show {
        right: ${this.positionRight}px;
        animation: fadeOut ${this.fadeDuration / 1000}s ease-in-out;
        top: -${offset}px;
        opacity: 0;
      }
    `;
    };
  }
  connectedCallback() {
    statusNote({ source: this.element, type: 'warn' });
  }
  disconnectedCallback() {
    if (this.timerId) {
      clearTimeout(this.timerId);
      this.timerId = null;
      this.opened = false;
      this.progress = 0;
    }
  }
  /** Toast method: open() */
  async open() {
    this.opened = true;
    this.hideToast = false;
  }
  render() {
    this.setToastTimeout();
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("style", null, this.transitions(this.toastHeightWithOffset)), hAsync("style", null, this.animationStyle(this.toastHeightWithOffset)), hAsync("div", { class: this.getCssClassMap(), part: this.getBasePartMap() }, hAsync("div", { part: "header", class: "toast__header" }, hAsync("slot", { name: "header" }), hAsync("small", null, this.getTime()), hAsync("a", { onClick: this.close }, hAsync("span", { "aria-hidden": "true" }, "\u00D7"))), this.autoHide && (hAsync("div", { part: "progress", class: "toast__progress", style: { width: `${this.progress}%` } }, "\u00A0")), hAsync("div", { part: "body", class: "toast__body" }, hAsync("slot", null)))));
  }
  getToastHeightWithOffset() {
    const toastHeight = this.element.shadowRoot.querySelector('.toast').scrollHeight;
    this.toastHeightWithOffset = toastHeight + this.positionTop;
  }
  getAutoHide() {
    if (typeof this.autoHide === 'number' ||
      typeof this.autoHide === 'string') {
      return Number(this.autoHide);
    }
    else {
      return 0;
    }
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const component = 'toast';
    const prefix = mode === 'basePart' ? '' : `${component}`;
    return classnames(mode === 'basePart' ? 'base' : component, this.size && `${prefix}--size-${this.size}`, this.variant && `${prefix}--variant-${this.variant}`, !!this.opened && `${prefix}--opened`, !!!this.hideToast && `${prefix}--show`, !!this.hideToast && `${prefix}--hide`);
  }
  get element() { return getElement$1(this); }
  static get style() { return toastCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-toast",
    "$members$": {
      "size": [1],
      "variant": [1],
      "opened": [516],
      "autoHide": [8, "auto-hide"],
      "animated": [4],
      "time": [2],
      "positionTop": [2, "position-top"],
      "positionRight": [2, "position-right"],
      "fadeDuration": [2, "fade-duration"],
      "styles": [513],
      "progress": [32],
      "toastHeightWithOffset": [32],
      "open": [64]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["opened", "opened"], ["styles", "styles"]]
  }; }
}

const toggleButtonCss = "/*!@:host*/.sc-scale-toggle-button-h{--width:auto;--spacing-x:var(--telekom-spacing-composition-space-08);--spacing-x-icon-only:var(--telekom-spacing-composition-space-04);--min-height:var(--telekom-spacing-composition-space-08);--height-xs:var(--telekom-spacing-composition-space-08);--height-small:var(--telekom-spacing-composition-space-10);--height-regular:var(--telekom-spacing-composition-space-12);--height-large:var(--telekom-spacing-composition-space-14);--radius:var(--telekom-radius-small);--transition:all var(--telekom-motion-duration-transition)\n      var(--telekom-motion-easing-standard),\n    border-radius var(--telekom-motion-duration-instant);--box-shadow-focus:inset 0 0 0 var(--telekom-line-weight-highlight)\n    var(--telekom-color-functional-focus-standard);--font-weight:var(--telekom-typography-font-weight-bold);--font-size-large:var(--telekom-typography-font-size-body);--font-size-small:var(--telekom-typography-font-size-caption);--font-size-xs:var(--telekom-typography-font-size-small);--line-height:var(--telekom-spacing-composition-space-04);--spacing-icon-x:var(--telekom-spacing-composition-space-04);--vertical-align:middle;--border-color:var(--telekom-color-ui-border-standard);--border-color-disabled:var(--telekom-color-ui-border-disabled);--color-disabled:var(--telekom-color-text-and-icon-disabled);--font-size-small:var(--telekom-typography-font-size-small);--line-height-small:var(--telekom-typography-line-spacing-standard);--min-height-small:var(--telekom-spacing-composition-space-10);--radius-primary:var(--radius);--background-primary:var(--telekom-color-ui-subtle);--background-primary-disabled:var(--telekom-color-ui-disabled);--color-primary:var(--telekom-color-ui-extra-strong);--color-primary-hover:var(--telekom-color-primary-hovered);--color-primary-active:var(--telekom-color-primary-pressed);--background-secondary:transparent;--color-secondary:var(--telekom-color-text-and-icon-standard);--background-secondary-hover:var(--telekom-color-ui-state-fill-hovered);--background-secondary-active:var(--telekom-color-ui-state-fill-pressed);--background-secondary-disabled:none;--border-secondary:var(--telekom-color-ui-border-standard);--border-secondary-hover:var(--telekom-color-ui-border-hovered);--border-secondary-active:var(--telekom-color-ui-border-pressed);--border-secondary-focus:var(--telekom-color-functional-focus-standard);--color-selected:var(--telekom-color-text-and-icon-white-standard);--background-selected-light:var(--telekom-color-primary-standard);--background-selected-hover-light:var(--telekom-color-primary-hovered);--background-selected-active-light:var(--telekom-color-primary-pressed);--background-selected-dark:var(--telekom-color-ui-extra-strong);--background-selected-hover-dark:var(--telekom-color-ui-strong);--background-selected-active-dark:var(--telekom-color-ui-strong);--color-high-contrast:var(--telekom-color-text-and-icon-white-standard)}/*!@.toggle-button*/.toggle-button.sc-scale-toggle-button{box-sizing:border-box;display:inline-flex;align-items:center;position:relative;border:0;outline:none;cursor:pointer;user-select:none;font-family:inherit;word-spacing:inherit;letter-spacing:inherit;justify-content:center;text-decoration:none;font-weight:var(--font-weight);font-size:var(--font-size);line-height:var(--line-height);min-height:var(--min-height);width:var(--width);padding-left:var(--spacing-x);padding-right:var(--spacing-x);vertical-align:var(--vertical-align);transition:var(--transition);margin:0;color:var(--color-primary)}/*!@.toggle-button--primary*/.toggle-button--primary.sc-scale-toggle-button{background:var(--background-primary)}/*!@.toggle-button--secondary*/.toggle-button--secondary.sc-scale-toggle-button{color:var(--color-secondary);background:var(--background-secondary)}/*!@.toggle-button--icon-before ::slotted(*)*/.toggle-button--icon-before .sc-scale-toggle-button-s>*{margin-right:var(--spacing-icon-x);pointer-events:none}/*!@.toggle-button--icon-after ::slotted(*)*/.toggle-button--icon-after .sc-scale-toggle-button-s>*{margin-left:var(--spacing-icon-x);pointer-events:none}/*!@.toggle-button--icon-only ::slotted(*)*/.toggle-button--icon-only .sc-scale-toggle-button-s>*{pointer-events:none}/*!@.toggle-button--xs*/.toggle-button--xs.sc-scale-toggle-button{height:var(--height-xs);font-size:var(--font-size-xs)}/*!@.toggle-button--small*/.toggle-button--small.sc-scale-toggle-button{height:var(--height-small);font-size:var(--font-size-small)}/*!@.toggle-button--regular*/.toggle-button--regular.sc-scale-toggle-button{height:var(--height-regular);font-size:var(--font-size-large)}/*!@.toggle-button--large*/.toggle-button--large.sc-scale-toggle-button{height:var(--height-large);font-size:var(--font-size-large)}/*!@.toggle-button:not(.button--disabled):focus*/.toggle-button.sc-scale-toggle-button:not(.button--disabled):focus{box-shadow:var(--box-shadow-focus)}/*!@.toggle-button:not(.button--disabled):hover*/.toggle-button.sc-scale-toggle-button:not(.button--disabled):hover{color:var(--color-secondary-hover);background-color:var(--background-secondary-hover)}/*!@.toggle-button:not(.button--disabled):active*/.toggle-button.sc-scale-toggle-button:not(.button--disabled):active{color:var(--color-secondary-active);background-color:var(--background-secondary-active)}/*!@.toggle-button:disabled*/.toggle-button.sc-scale-toggle-button:disabled{color:var(--color-disabled);pointer-events:none;border:1px solid var(--border-color-disabled)}/*!@.toggle-button:disabled.toggle-button--primary*/.toggle-button.sc-scale-toggle-button:disabled.toggle-button--primary{background:var(--background-primary-disabled)}/*!@.toggle-button--selected.toggle-button--color*/.toggle-button--selected.toggle-button--color.sc-scale-toggle-button{color:var(--color-selected);background:var(--background-selected-light)}/*!@.toggle-button--selected:not(.button--disabled).toggle-button--color:hover*/.toggle-button--selected.sc-scale-toggle-button:not(.button--disabled).toggle-button--color:hover{color:var(--color-selected);background:var(--background-selected-hover-light)}/*!@.toggle-button--selected:not(.button--disabled).toggle-button--color:active*/.toggle-button--selected.sc-scale-toggle-button:not(.button--disabled).toggle-button--color:active{color:var(--color-selected);background:var(--background-selected-active-light)}/*!@.toggle-button--selected.toggle-button--monochrome*/.toggle-button--selected.toggle-button--monochrome.sc-scale-toggle-button{color:var(--telekom-color-text-and-icon-inverted-standard);background:var(--background-selected-dark)}/*!@.toggle-button--selected:not(.button--disabled).toggle-button--monochrome:hover*/.toggle-button--selected.sc-scale-toggle-button:not(.button--disabled).toggle-button--monochrome:hover{color:var(--color-selected);background:var(--background-selected-hover-dark)}/*!@.toggle-button--selected:not(.button--disabled).toggle-button--monochrome:active*/.toggle-button--selected.sc-scale-toggle-button:not(.button--disabled).toggle-button--monochrome:active{color:var(--color-selected);background:var(--background-selected-active-dark)}/*!@.toggle-button--border*/.toggle-button--border.sc-scale-toggle-button{border:1px solid var(--border-color)}/*!@.toggle-button--left,\n.toggle-button--left:disabled*/.toggle-button--left.sc-scale-toggle-button,.toggle-button--left.sc-scale-toggle-button:disabled{border-right:0;border-radius:var(--radius-primary) 0 0 var(--radius-primary)}/*!@.toggle-button--right,\n.toggle-button--right:disabled*/.toggle-button--right.sc-scale-toggle-button,.toggle-button--right.sc-scale-toggle-button:disabled{border-left:0;border-radius:0 var(--radius-primary) var(--radius-primary) 0}/*!@.toggle-button--both,\n.toggle-button--both:disabled*/.toggle-button--both.sc-scale-toggle-button,.toggle-button--both.sc-scale-toggle-button:disabled{border-radius:var(--radius-primary)}/*!@.toggle-button--all,\n.toggle-button--all:disabled*/.toggle-button--all.sc-scale-toggle-button,.toggle-button--all.sc-scale-toggle-button:disabled{border-radius:var(--radius-primary)}/*!@.toggle-button--neither,\n.toggle-button--neither:disabled*/.toggle-button--neither.sc-scale-toggle-button,.toggle-button--neither.sc-scale-toggle-button:disabled{border-right:0;border-left:0;border-radius:0}@media screen and (forced-colors: active), (-ms-high-contrast: active){/*!@.toggle-button*/.toggle-button.sc-scale-toggle-button{color:var(--color-high-contrast)}}";

var iconSizes;
(function (iconSizes) {
  iconSizes["xs"] = "12";
  iconSizes["small"] = "16";
  iconSizes["regular"] = "22";
  iconSizes["large"] = "24";
})(iconSizes || (iconSizes = {}));
let i = 0;
class ToggleButton {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleClick = createEvent$1(this, "scale-click", 7);
    this.scaleClickLegacy = createEvent$1(this, "scaleClick", 7);
    /** (optional) The size of the button */
    this.size = 'regular';
    /** (optional) Button background */
    this.background = 'white';
    /** @deprecated - variant should replace colorScheme */
    this.colorScheme = 'color';
    /** (optional) background variant of a selected toggle-button */
    this.variant = 'color';
    /** (optional) If `true`, the button is disabled */
    this.disabled = false;
    /** (optional) If `true`, the button is selected */
    this.selected = false;
    /** (optional) Button type */
    this.iconOnly = false;
    /** (optional) Icon position related to the label */
    this.iconPosition = 'before';
    /** (optional) set the border-radius left, right or both */
    this.radius = null;
    /** (optional) translation of 'selected */
    this.ariaLangSelected = 'selected';
    /** (optional) translation of 'deselected */
    this.ariaLangDeselected = 'deselected';
    /** a11y text for getting meaningful value. `$buttonNumber` and `$selected` are template variables and will be replaces by their corresponding properties.  */
    this.ariaDescriptionTranslation = '$selected';
    this.hasScaleIcon = false;
    this.handleClick = (event) => {
      event.preventDefault();
      this.selected = !this.selected;
      this.handleIconShape();
      this.scaleClick.emit({ id: this.toggleButtonId, selected: this.selected });
      emitEvent$1(this, 'scaleClick', {
        id: this.toggleButtonId,
        selected: this.selected,
      });
    };
    this.handleIconShape = () => {
      if (this.hasScaleIcon) {
        Array.from(this.hostElement.children).forEach((node) => {
          if (node.nodeName.substr(0, 10) === 'SCALE-ICON') {
            if (this.selected) {
              node.setAttribute('selected', 'true');
            }
            else {
              node.removeAttribute('selected');
            }
          }
        });
      }
    };
  }
  async setFocus() {
    this.focusableElement.focus();
  }
  connectedCallback() {
    this.setIconPositionProp();
    this.handleIconShape();
  }
  componentDidLoad() {
    this.handleIconSize();
  }
  componentDidRender() {
    this.handleIconSize();
    if (this.hostElement.hasAttribute('aria-label')) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "ariaLabel" is deprecated. Please use the "ariaLabelToggleButton" property!',
        type: 'warn',
        source: this.hostElement,
      });
    }
  }
  componentWillLoad() {
    if (this.toggleButtonId == null) {
      this.toggleButtonId = 'toggle-button-' + i++;
    }
  }
  getAriaDescriptionTranslation() {
    const replaceSelected = this.selected
      ? this.ariaLangSelected
      : this.ariaLangDeselected;
    const filledText = this.ariaDescriptionTranslation
      .replace(/\$position/g, `${this.position}`)
      .replace(/\$selected/g, `${replaceSelected}`);
    return filledText;
  }
  handleIconSize() {
    Array.from(this.hostElement.children).forEach((child) => {
      if (child.tagName.substr(0, 10) === 'SCALE-ICON') {
        child.setAttribute('size', iconSizes[this.size]);
      }
    });
  }
  /**
   * Detect whether a child node is a scale icon and contains text.
   * If so, we set `iconPosition` to `after`, if the icon comes after the text.
   */
  setIconPositionProp() {
    const nodes = Array.from(this.hostElement.childNodes).filter((node) => {
      if (node.nodeName.substr(0, 10) === 'SCALE-ICON') {
        this.hasScaleIcon = true;
      }
      // ignore empty text nodes, which are probably due to formatting
      return !(node.nodeType === 3 && node.nodeValue.trim() === '');
    });
    if (!this.iconOnly &&
      nodes &&
      nodes.length &&
      nodes[nodes.length - 1] &&
      nodes[nodes.length - 1].nodeName.substr(0, 10) === 'SCALE-ICON') {
      this.iconPosition = 'after';
    }
  }
  render() {
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("button", { ref: (el) => (this.focusableElement = el), class: this.getCssClassMap(), id: this.toggleButtonId, onClick: this.handleClick, disabled: this.disabled, type: "button", "aria-label": this.ariaLabelToggleButton, "aria-pressed": this.selected, part: this.getBasePartMap(), "aria-description": this.getAriaDescriptionTranslation() }, hAsync("slot", null))));
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const prefix = mode === 'basePart' ? '' : 'toggle-button--';
    return classnames('toggle-button', this.size && `${prefix}${this.size}`, this.background &&
      `${prefix}${this.background === 'grey' ? 'primary' : 'secondary'}`, !this.iconOnly &&
      this.iconPosition &&
      `toggle-button--icon-${this.iconPosition}`, this.iconOnly && `${prefix}icon-only`, !this.disabled && this.selected && `${prefix}selected`, this.radius && `${prefix}${this.radius}`, this.colorScheme && `${prefix}${this.colorScheme}`, this.variant && `${prefix}${this.variant}`, !this.hideBorder && `${prefix}border`);
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return toggleButtonCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-toggle-button",
    "$members$": {
      "size": [1],
      "background": [1],
      "colorScheme": [1, "color-scheme"],
      "variant": [1],
      "disabled": [4],
      "selected": [1028],
      "iconOnly": [4, "icon-only"],
      "iconPosition": [1537, "icon-position"],
      "hideBorder": [4, "hide-border"],
      "radius": [1],
      "toggleButtonId": [513, "toggle-button-id"],
      "ariaLabelToggleButton": [1, "aria-label-toggle-button"],
      "styles": [1],
      "position": [2],
      "ariaLangSelected": [1, "aria-lang-selected"],
      "ariaLangDeselected": [1, "aria-lang-deselected"],
      "ariaDescriptionTranslation": [1, "aria-description-translation"],
      "setFocus": [64]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["iconPosition", "icon-position"], ["toggleButtonId", "toggle-button-id"]]
  }; }
}

const toggleGroupCss = "/*!@:host*/.sc-scale-toggle-group-h{--border-color:var(--telekom-color-ui-border-standard);--border-color-disabled:var(--telekom-color-ui-border-disabled);--border:var(--telekom-spacing-composition-space-01) solid\n    var(--border-color);--border-disabled:var(--telekom-spacing-composition-space-01) solid\n    var(--border-color-disabled);--radius:var(--telekom-radius-standard)}/*!@.toggle-group--inline*/.toggle-group--inline.sc-scale-toggle-group{display:inline-flex}/*!@.toggle-group--block*/.toggle-group--block.sc-scale-toggle-group{display:flex}/*!@.toggle-group--block ::slotted(*)*/.toggle-group--block .sc-scale-toggle-group-s>*{flex-grow:1}";

class ToggleGroup {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleChange = createEvent$1(this, "scale-change", 7);
    this.scaleChangeLegacy = createEvent$1(this, "scaleChange", 7);
    /** toggle button position within group */
    this.position = 0;
    /** number of slotted toggle-buttons */
    this.slottedButtons = 0;
    /** state */
    this.status = [];
    /** (optional) The size of the button */
    this.size = 'regular';
    /** (optional) Button Group background */
    this.background = 'white';
    /** (optional) 100% width */
    this.fullWidth = false;
    /** (optional) If `true`, the button is disabled */
    this.disabled = false;
    /** (optional) If `true`, the group has a border */
    this.hideBorder = false;
    /** (optional) more than one button selected possible */
    this.singleSelect = false;
    /** (optional) aria-label attribute needed for icon-only buttons */
    this.ariaLabelTranslation = `toggle button group with $slottedButtons buttons`;
    /** @deprecated - variant should replace colorScheme */
    this.colorScheme = 'color';
    /** (optional) background variant of a selected toggle-button */
    this.variant = 'color';
  }
  scaleClickHandler(ev) {
    let tempState;
    if (this.singleSelect) {
      if (!ev.detail.selected) {
        tempState = this.status.map((obj) => ev.detail.id === obj.id ? ev.detail : Object.assign({}, obj));
        /* clicked button has now selected state */
      }
      else {
        tempState = this.status.map((obj) => ev.detail.id === obj.id ? ev.detail : Object.assign(Object.assign({}, obj), { selected: false }));
      }
    }
    else {
      tempState = this.status.map((obj) => ev.detail.id === obj.id ? ev.detail : Object.assign({}, obj));
    }
    this.setNewState(tempState);
  }
  handlePropsChange() {
    this.propagatePropsToChildren();
  }
  componentDidLoad() {
    const tempState = [];
    const toggleButtons = this.getAllToggleButtons();
    this.slottedButtons = toggleButtons.length;
    toggleButtons.forEach((toggleButton) => {
      this.position++;
      tempState.push({
        id: toggleButton.getAttribute('toggle-button-id'),
        selected: toggleButton.hasAttribute('selected'),
      });
      toggleButton.setAttribute('position', this.position.toString());
      toggleButton.setAttribute('aria-description-translation', '$position $selected');
    });
    this.propagatePropsToChildren();
    this.position = 0;
    this.status = tempState;
  }
  getAllToggleButtons() {
    return Array.from(this.hostElement.querySelectorAll('scale-toggle-button'));
  }
  /**
   * Keep props, needed in children buttons, in sync
   */
  propagatePropsToChildren() {
    this.getAllToggleButtons().forEach((el) => {
      el.setAttribute('size', this.size);
      el.setAttribute('background', this.background);
      el.setAttribute('disabled', this.disabled && 'disabled');
      /** DEPRECATED */
      // if attribute variant is set it overrides color-scheme
      el.setAttribute('color-scheme', this.variant !== 'color' ? this.variant : this.colorScheme);
      // if attribute color-scheme is set it overrides variant
      el.setAttribute('variant', this.colorScheme !== 'color' ? this.colorScheme : this.variant);
      el.setAttribute('hide-border', this.hideBorder ? 'true' : 'false');
    });
  }
  getAriaLabelTranslation() {
    const filledText = this.ariaLabelTranslation.replace(/\$slottedButtons/g, `${this.slottedButtons}`);
    return filledText;
  }
  componentDidRender() {
    if (this.fullWidth) {
      this.setButtonWidth();
    }
    this.setChildrenCorners();
    if (this.colorScheme !== 'color') {
      statusNote({
        tag: 'deprecated',
        message: 'Property "colorScheme" is deprecated. Please use the "variant" property!',
        type: 'warn',
        source: this.hostElement,
      });
    }
  }
  setNewState(tempState) {
    const toggleButtons = Array.from(this.hostElement.querySelectorAll('scale-toggle-button'));
    toggleButtons.forEach((button, i) => {
      button.setAttribute('selected', tempState[i].selected ? 'true' : 'false');
    });
    this.status = tempState;
    emitEvent$1(this, 'scaleChange', this.status);
  }
  setButtonWidth() {
    Array.from(this.hostElement.children).forEach((child) => {
      const button = child.shadowRoot.querySelector('button');
      button.style.width = '100%';
    });
  }
  setChildrenCorners() {
    const children = Array.from(this.hostElement.children);
    if (children.length === 1) {
      // set four border radius when there is only one child
      children[0].setAttribute('radius', 'all');
    }
    else {
      for (let i = 0; i < children.length; i++) {
        if (i === 0) {
          children[i].setAttribute('radius', 'left');
        }
        if (i > 0 && i < children.length - 1) {
          children[i].setAttribute('radius', 'neither');
        }
        if (i === children.length - 1) {
          children[i].setAttribute('radius', 'right');
        }
      }
    }
  }
  render() {
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { class: this.getCssClassMap(), part: this.getBasePartMap(), "aria-label": this.getAriaLabelTranslation(), role: "group" }, hAsync("slot", null))));
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const prefix = mode === 'basePart' ? '' : 'toggle-group--';
    return classnames('toggle-group', this.fullWidth && `${prefix}block`, !this.fullWidth && `${prefix}inline`, this.disabled && `${prefix}disabled`);
  }
  get hostElement() { return getElement$1(this); }
  static get watchers() { return {
    "background": ["handlePropsChange"],
    "disabled": ["handlePropsChange"],
    "hideBorder": ["handlePropsChange"],
    "size": ["handlePropsChange"],
    "variant": ["handlePropsChange"]
  }; }
  static get style() { return toggleGroupCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-toggle-group",
    "$members$": {
      "size": [1],
      "background": [1],
      "fullWidth": [4, "full-width"],
      "disabled": [4],
      "hideBorder": [4, "hide-border"],
      "singleSelect": [4, "single-select"],
      "ariaLabelTranslation": [1, "aria-label-translation"],
      "colorScheme": [1, "color-scheme"],
      "variant": [1],
      "styles": [1],
      "status": [32]
    },
    "$listeners$": [[0, "scaleClick", "scaleClickHandler"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

/* eslint-disable @typescript-eslint/ban-types */
function offsetParent(element) {
    return offsetParentPolyfill(element);
}
function flatTreeParent(element) {
    if (element.assignedSlot) {
        return element.assignedSlot;
    }
    if (element.parentNode instanceof ShadowRoot) {
        return element.parentNode.host;
    }
    return element.parentNode;
}
function offsetParentPolyfill(element) {
    // Do an initial walk to check for display:none ancestors.
    for (let ancestor = element; ancestor; ancestor = flatTreeParent(ancestor)) {
        if (!(ancestor instanceof Element)) {
            continue;
        }
        if (getComputedStyle(ancestor).display === 'none') {
            return null;
        }
    }
    for (let ancestor = flatTreeParent(element); ancestor; ancestor = flatTreeParent(ancestor)) {
        if (!(ancestor instanceof Element)) {
            continue;
        }
        const style = getComputedStyle(ancestor);
        // Display:contents nodes aren't in the layout tree so they should be skipped.
        if (style.display === 'contents') {
            continue;
        }
        if (style.position !== 'static' || style.filter !== 'none') {
            return ancestor;
        }
        if (ancestor.tagName === 'BODY') {
            return ancestor;
        }
    }
    return null;
}

const tooltipCss = "/*!@:host*/.sc-scale-tooltip-h{--radius:var(--telekom-radius-small);--background:var(--telekom-color-background-surface-highlight);--color:var(--telekom-color-text-and-icon-white-standard);--font-weight:var(--telekom-typography-font-weight-regular);--font-size:var(--telekom-typography-font-size-body);--line-height:var(--telekom-typography-line-spacing-standard);--spacing:var(--telekom-spacing-composition-space-02)\n    var(--telekom-spacing-composition-space-04);--width:auto;--arrow-size:12px;--transition-delay-hide:var(--telekom-motion-duration-instant);--transition-duration-hide:var(--telekom-motion-duration-immediate);--transition-timing-function-hide:var(--telekom-motion-easing-standard);--transition-duration-show:var(--telekom-motion-duration-immediate);--transition-timing-function-show:var(--telekom-motion-easing-standard);--z-index:var(--scl-z-index-70);display:contents;box-sizing:border-box}/*!@[part='tooltip']*/[part='tooltip'].sc-scale-tooltip{position:absolute;width:var(--width);z-index:var(--z-index);top:0;left:0;background:var(--background);color:var(--color);font-weight:var(--font-weight);font-size:var(--font-size);line-height:var(--line-height);padding:var(--spacing);border-radius:var(--radius);transition-property:opacity;transition-duration:var(--transition-duration-show);transition-timing-function:var(--transition-timing-function-show)}/*!@[part='tooltip'][aria-hidden='true']*/[part='tooltip'][aria-hidden='true'].sc-scale-tooltip{opacity:0;transition-delay:var(--transition-delay-hide);transition-duration:var(--transition-duration-hide);transition-timing-function:var(--transition-timing-function-hide);pointer-events:none}/*!@[part='trigger']*//*!@[part='arrow']*/[part='arrow'].sc-scale-tooltip{position:absolute;z-index:-1;background:var(--background);width:var(--arrow-size);height:var(--arrow-size);transform:rotate(45deg)}@media screen and (-ms-high-contrast: active){/*!@[part='tooltip']*/[part='tooltip'].sc-scale-tooltip{border:1px solid yellow}}";

let id = 0;
class Tooltip {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.tooltipBeforeShow = createEvent$1(this, "scale-before-show", 7);
    this.tooltipShow = createEvent$1(this, "scale-show", 7);
    this.tooltipBeforeHide = createEvent$1(this, "scale-before-hide", 7);
    this.tooltipHide = createEvent$1(this, "scale-hide", 7);
    this.componentId = `tooltip-${++id}`;
    /** (optional) The content of the Tooltip, supporting text only */
    this.content = '';
    /** (optional) Position of the Tooltip around the trigger element */
    this.placement = 'top';
    /** (optional) Disable the tooltip */
    this.disabled = false;
    /** (optional) Tooltip distance from the target element (related to `placement`) */
    this.distance = 10;
    /** (optional) How much of the arrow element is "hidden" */
    this.arrowOffset = -4;
    /** (optional) Padding between the arrow and the edges of the tooltip */
    this.arrowPadding = 8;
    /** (optional) Set the tooltip to opened by default (will still be closed on closing events) */
    this.opened = false;
    /** (optional) Set custom trigger event (hover, focus, click) */
    this.trigger = 'hover focus';
    /** (optional) Switching the flip option of the tooltip on and off */
    this.flip = true;
    this.mouseOverTooltip = false;
    /**
     * @see https://floating-ui.com/docs/tutorial#arrow-middleware
     */
    this.update = async () => {
      if (this.disabled || this.triggerEl == null) {
        return;
      }
      // Position tooltip
      const { x, y, placement, middlewareData } = await computePosition(this.triggerEl, this.tooltipEl, {
        placement: this.placement,
        middleware: [
          offset(this.distance),
          ...(this.flip ? [flip()] : []),
          arrow({ element: this.arrowEl, padding: this.arrowPadding }),
          shift({ crossAxis: true }),
        ],
        platform: Object.assign(Object.assign({}, platform), { getOffsetParent: (element) => platform.getOffsetParent(element, offsetParent) }),
      });
      Object.assign(this.tooltipEl.style, {
        left: `${x}px`,
        top: `${y}px`,
      });
      // Position arrow
      const { x: arrowX, y: arrowY } = middlewareData.arrow;
      const [side] = placement.split('-');
      const staticSide = {
        top: 'bottom',
        right: 'left',
        bottom: 'top',
        left: 'right',
      }[side];
      Object.assign(this.arrowEl.style, {
        left: arrowX != null ? `${arrowX}px` : '',
        top: arrowY != null ? `${arrowY}px` : '',
        right: '',
        bottom: '',
        [staticSide]: `${this.arrowOffset}px`,
      });
    };
    this.handleBlur = () => {
      if (this.hasTrigger('focus')) {
        this.hideTooltip();
      }
    };
    this.handleClick = () => {
      if (this.hasTrigger('click')) {
        this.opened && !this.hasTrigger('focus')
          ? this.hideTooltip()
          : this.showTooltip();
      }
    };
    this.handleFocus = () => {
      if (this.hasTrigger('focus')) {
        this.showTooltip();
      }
    };
    this.handleKeyDown = (event) => {
      if (this.opened && event.key === 'Escape') {
        event.stopPropagation();
        this.hideTooltip();
      }
    };
    this.handleMouseOver = () => {
      if (this.hasTrigger('hover')) {
        this.showTooltip();
      }
    };
    this.handleMouseOut = () => {
      if (!this.mouseOverTooltip) {
        if (this.hasTrigger('hover')) {
          this.hideTooltip();
        }
      }
    };
    this.handleTooltipMouseOver = () => {
      this.mouseOverTooltip = true;
    };
    this.handleTooltipBlur = () => {
      this.mouseOverTooltip = false;
      this.handleMouseOut();
    };
    this.hasTrigger = (triggerType) => {
      const triggers = this.trigger.split(' ');
      return triggers.includes(triggerType);
    };
  }
  handleOpenChange() {
    this.opened ? this.showTooltip() : this.hideTooltip();
  }
  connectedCallback() {
    statusNote({ source: this.hostElement, tag: 'beta' });
    if (this.hostElement.hasAttribute('open')) {
      statusNote({
        tag: 'deprecated',
        message: 'The `open` prop is deprecated in favor of `opened`',
        source: this.hostElement,
      });
    }
    const children = Array.from(this.hostElement.children).filter((x) => !x.hasAttribute('slot'));
    if (children.length === 0) {
      // If not children found to be used as trigger, warn
      statusNote({
        tag: 'warning',
        message: 'An element is required, if using text, wrap it in a `<span>`',
        type: 'warn',
        source: this.hostElement,
      });
      return;
    }
    this.triggerEl = children[0];
    this.triggerEl.addEventListener('blur', this.handleBlur, true);
    this.triggerEl.addEventListener('click', this.handleClick, true);
    this.triggerEl.addEventListener('focus', this.handleFocus, true);
    this.triggerEl.addEventListener('mouseover', this.handleMouseOver, true);
    this.triggerEl.addEventListener('mouseout', this.handleMouseOut, true);
  }
  disconnectedCallback() {
    this.triggerEl.removeEventListener('blur', this.handleBlur, true);
    this.triggerEl.removeEventListener('click', this.handleClick, true);
    this.triggerEl.removeEventListener('focus', this.handleFocus, true);
    this.triggerEl.removeEventListener('mouseover', this.handleMouseOver, true);
    this.triggerEl.removeEventListener('mouseout', this.handleMouseOut, true);
  }
  handleOutsideClick(event) {
    if (isClickOutside(event, this.hostElement)) {
      this.hideTooltip();
    }
  }
  componentDidUpdate() {
    this.update();
    if (this.opened) {
      this.showTooltip();
    }
  }
  componentDidRender() {
    this.update();
  }
  async showTooltip() {
    if (this.opened) {
      return;
    }
    const scaleShow = this.tooltipBeforeShow.emit();
    if (scaleShow.defaultPrevented) {
      this.opened = false;
      return;
    }
    this.opened = true;
    this.update();
  }
  async hideTooltip() {
    if (!this.opened) {
      return;
    }
    const tooltipBeforeHide = this.tooltipBeforeHide.emit();
    if (tooltipBeforeHide.defaultPrevented) {
      this.opened = true;
      return;
    }
    this.opened = false;
    this.update();
  }
  render() {
    return (hAsync(Host$1, { onKeyDown: this.handleKeyDown }, this.styles && hAsync("style", null, this.styles), hAsync("span", { part: "trigger", "aria-describedby": this.componentId }, hAsync("slot", null)), !this.disabled && (hAsync("div", { part: "tooltip", role: "tooltip", "aria-hidden": this.opened ? 'false' : 'true', ref: (el) => (this.tooltipEl = el), id: this.componentId, onMouseOver: this.handleTooltipMouseOver, onMouseLeave: this.handleTooltipBlur }, hAsync("slot", { name: "content" }, this.content), hAsync("div", { "aria-hidden": "true", part: "arrow", ref: (el) => (this.arrowEl = el) })))));
  }
  get hostElement() { return getElement$1(this); }
  static get watchers() { return {
    "opened": ["handleOpenChange"]
  }; }
  static get style() { return tooltipCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-tooltip",
    "$members$": {
      "content": [1],
      "placement": [1],
      "disabled": [4],
      "distance": [2],
      "arrowOffset": [2, "arrow-offset"],
      "arrowPadding": [2, "arrow-padding"],
      "opened": [1540],
      "trigger": [1],
      "flip": [4],
      "styles": [1],
      "mouseOverTooltip": [32],
      "showTooltip": [64],
      "hideTooltip": [64]
    },
    "$listeners$": [[4, "click", "handleOutsideClick"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["opened", "opened"]]
  }; }
}

const iconCss$M = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileAdmin {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M18.796 12.5l.262 1.444a.523.523 0 00.738.379l.074-.043 1.206-.835 1.479 1.478-.835 1.207a.523.523 0 00.253.79l.083.022 1.444.262v2.091l-1.444.263a.523.523 0 00-.379.738l.043.074.835 1.206-1.478 1.479-1.207-.835a.523.523 0 00-.79.253l-.022.083L18.796 24h-2.091l-.262-1.444a.523.523 0 00-.738-.379l-.075.043-1.207.835-1.478-1.478.835-1.207a.523.523 0 00-.253-.79l-.083-.022L12 19.296v-2.091l1.444-.263a.523.523 0 00.379-.738l-.043-.074-.835-1.206 1.478-1.479 1.207.835c.288.2.678.063.79-.253l.022-.083.262-1.444h2.091zm-1.046 3.981a1.77 1.77 0 100 3.538 1.77 1.77 0 000-3.538zM7.405 15l3.095 3.095V20H.281l.172-1.031a4.734 4.734 0 014.461-3.964L5.138 15h2.267zM10.5.5c3.476 0 6 2.523 6 6 0 3.38-2.411 7-6 7s-6-3.62-6-7c0-3.477 2.523-6 6-6z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M18.796 12.5l.262 1.444a.523.523 0 00.738.379l.074-.043 1.206-.835 1.479 1.478-.835 1.207a.523.523 0 00.253.79l.083.022 1.444.262v2.091l-1.444.263a.523.523 0 00-.379.738l.043.074.835 1.206-1.478 1.479-1.207-.835a.523.523 0 00-.79.253l-.022.083L18.796 24h-2.091l-.262-1.444a.523.523 0 00-.738-.379l-.075.043-1.207.835-1.478-1.478.835-1.207a.523.523 0 00-.253-.79l-.083-.022L12 19.296v-2.091l1.444-.263a.523.523 0 00.379-.738l-.043-.074-.835-1.206 1.478-1.479 1.207.835c.288.2.678.063.79-.253l.022-.083.262-1.444h2.091zm-1.046 3.981a1.77 1.77 0 100 3.538 1.77 1.77 0 000-3.538zM7.405 15l3.095 3.095V20H.281l.172-1.031a4.734 4.734 0 014.461-3.964L5.138 15h2.267zM10.5.5c3.476 0 6 2.523 6 6 0 3.38-2.411 7-6 7s-6-3.62-6-7c0-3.477 2.523-6 6-6zm0 1.5C7.892 2 6 3.892 6 6.5 6 9.156 7.808 12 10.5 12S15 9.156 15 6.5C15 3.892 13.107 2 10.5 2z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$M; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-admin",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$L = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileAnalytics {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M21 17.5L15.5 23v-4a1.5 1.5 0 011.356-1.493L17 17.5h4zM21 1v15.5h-4a2.5 2.5 0 00-2.495 2.336L14.5 19v4H6a3 3 0 01-2.995-2.824L3 20V1h18zm-3.654 6.01a.755.755 0 00-.634.16l-.082.08-3.465 3.95-3-2.5-3.935 4.56a.75.75 0 00.57 1.24.76.76 0 00.49-.188l.075-.077 2.965-3.44 3 2.5 4.435-5.05a.753.753 0 00-.42-1.234z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M21 1v17l-5 5H6a3.01 3.01 0 01-2.995-2.824L3 20V1h18zm-1.5 1.5h-15V20c0 .8.576 1.423 1.352 1.493L6 21.5h9v-3c0-.8.576-1.423 1.352-1.493L16.5 17h3V2.5zm-2.85 4.75c.25-.3.75-.3 1.05-.05.273.227.298.661.112.964l-.062.086-4.45 5.05-3-2.5-2.95 3.45c-.15.15-.35.25-.55.25-.15 0-.35-.05-.45-.2-.32-.23-.348-.668-.157-.971l.057-.079L10.2 8.7l3 2.5 3.45-3.95z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$L; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-analytics",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$K = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileAttachment {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M7 23a6.24 6.24 0 01-4.435-10.64l11.5-11.5a1 1 0 011.4 1.4l-11.5 11.5A4.264 4.264 0 0010 19.785L20.77 9a2.507 2.507 0 10-3.545-3.545L6.44 16.235A.76.76 0 107.5 17.31l7.97-7.955a1 1 0 111.4 1.4L8.915 18.71a2.74 2.74 0 11-3.875-3.875L15.82 4.05a4.5 4.5 0 116.355 6.355L11.39 21.185A6.2 6.2 0 017 23z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("defs", null, hAsync("path", { d: "M7 22.75c-1.55 0-3.05-.6-4.25-1.75a6.005 6.005 0 010-8.5L14.25 1c.3-.3.75-.3 1.05 0 .3.3.3.75 0 1.05L3.8 13.55a4.496 4.496 0 000 6.35 4.496 4.496 0 006.35 0l10.8-10.8c1.05-1.05 1.05-2.8 0-3.9-.5-.5-1.2-.8-1.95-.8s-1.4.3-1.95.8L6.25 16.05c-.15.2-.25.45-.25.7 0 .25.1.5.3.7.4.4 1.05.4 1.4 0l7.95-7.95c.3-.3.75-.3 1.05 0 .3.3.3.75 0 1.05l-7.95 8c-.45.45-1.1.75-1.75.75-.65 0-1.3-.25-1.75-.75-.5-.5-.75-1.1-.75-1.8s.25-1.25.7-1.75L16 4.2a4.255 4.255 0 016 0 4.255 4.255 0 010 6L11.2 21c-1.15 1.2-2.7 1.75-4.2 1.75z", id: "a" })), hAsync("use", { xlinkHref: "#a", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$K; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-attachment",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$J = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileAudioFile {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M21 17.5L15.5 23v-4a1.5 1.5 0 011.356-1.493L17 17.5h4zM21 1v15.5h-4a2.5 2.5 0 00-2.495 2.336L14.5 19v4H6a3 3 0 01-2.995-2.824L3 20V1h18zm-9.5 4.225v7a3 3 0 00-.91-.205c-1.345-.09-2.45.73-2.465 1.83-.015 1.1 1.065 2.04 2.41 2.15l.19.008c.86.01 2.173-.373 2.27-2.143l.005-.21V8.79l2.375.565V7.58L11.5 5.225z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M21 1v17l-5 5H6a3.01 3.01 0 01-2.995-2.824L3 20V1h18zm-1.5 1.5h-15V20c0 .8.576 1.423 1.352 1.493L6 21.5h9v-3c0-.8.576-1.423 1.352-1.493L16.5 17h3V2.5zm-8 2.65l4 2.45v1.75l-2.5-.6v4.9c0 1.738-1.096 2.243-1.956 2.337l-.209.016a2.999 2.999 0 01-.1.002L10.55 16c-1.35-.1-2.4-1.05-2.4-2.15 0-1.054 1.01-1.879 2.283-1.858L10.6 12c.24 0 .48.064.72.14l.18.06V5.15z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$J; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-audio-file",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$I = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileBilling {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M19 4.03v1.5l1.145.105-1.4 15.435a1.5 1.5 0 01-1.5 1.365h-.14L7.15 21.53 7 21.5H4.67A3 3 0 007.015 23l9.985.925c.092.005.183.005.275 0a3 3 0 003-2.73L21.77 4.28 19 4.03zM7 4V0L1.5 5.5h4A1.5 1.5 0 007 4zm10.5 13V0H8v4a2.5 2.5 0 01-2.5 2.5h-4V17a3 3 0 003 3h10a3 3 0 003-3zm-5.535-2.135c-.162.064-.33.114-.5.15-.17.035-.34.06-.5.08-.16.02-.345 0-.5 0A3.235 3.235 0 018.43 14.5a3.3 3.3 0 01-1.115-2.045h-1l.355-1h.535v-.64h-.9l.355-1h.68c.096-.43.265-.842.5-1.215a2.92 2.92 0 01.73-.805 2.71 2.71 0 01.915-.455 3.775 3.775 0 011.015-.205 5.14 5.14 0 011.74.29l-.385 1.115a2.625 2.625 0 00-.555-.15 5.44 5.44 0 00-.75-.045c-.4-.011-.794.104-1.125.33a2.05 2.05 0 00-.715 1.08h2.84l-.285 1h-2.72a1.03 1.03 0 000 .17v.47h2.5l-.285 1H8.71c.109.433.352.82.695 1.105a2 2 0 001.265.375c.268.005.536-.03.795-.1.21-.06.41-.143.6-.25l.295 1.09c-.12.1-.253.185-.395.25z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M19 4.05l2.8.25-1.55 16.95a2.978 2.978 0 01-3.074 2.71L17 23.95 7 23a2.777 2.777 0 01-2.261-1.344L4.65 21.5H7a.161.161 0 00.112.05h.038l9.95.9a1.49 1.49 0 001.635-1.218l.015-.132 1.4-15.45-1.15-.1v-1.5zM17.5 0v17a3.01 3.01 0 01-2.824 2.995L14.5 20h-10a3.01 3.01 0 01-2.995-2.824L1.5 17V5l5-5h11zM16 1.5H7.5v3c0 .8-.576 1.423-1.352 1.493L6 6H3v11c0 .8.576 1.423 1.352 1.493l.148.007h10c.8 0 1.423-.576 1.493-1.352L16 17V1.5zM8.6 7.9c.941-.706 2.414-.747 3.5-.375l.2.075-.4 1.1c-.6-.25-1.75-.35-2.45.15a2.152 2.152 0 00-.64.92l-.06.18h2.85l-.3 1H8.55v.65h2.5l-.3 1H8.7c.15.5.4.85.7 1.1.562.422 1.608.536 2.52.096l.18-.096.3 1.1c-.85.6-2.8.65-3.95-.2-.5-.41-.835-.983-1.042-1.798l-.058-.252h-1l.35-1h.55v-.65h-.9l.35-1h.7c.2-.8.55-1.5 1.2-2z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$I; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-billing",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$H = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileBoy {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M9.561 19.006L12 21.447l2.44-2.44h1.674c1.017 0 1.948.395 2.637 1.052.792.755 1.028 1.532 1.18 2.442H4.068c.165-.99.455-1.835 1.347-2.591a3.811 3.811 0 012.471-.902h1.675zM12.204 2.5l.343 1.098c4.177-.135 5.488 3.414 5.813 6.473a8.354 8.354 0 01-.794.107 6.4 6.4 0 01.085 1.02c0 3.18-2.27 6.585-5.651 6.585-3.38 0-5.652-3.405-5.652-6.585 0-1.297.108-2.313.304-3.104-1.212-1.523-.654-2.962-.654-2.962l1.793.324c.243-1.522 1.664-2.61 4.413-2.956zM9.733 9.21c-.324.611-1.037 1.14-1.85 1.442-.02.179-.035.36-.035.546 0 2.455 1.668 5.085 4.152 5.085 2.483 0 4.151-2.629 4.151-5.086 0-.363-.044-.71-.12-1.04a6.616 6.616 0 01-2.397-.758c.308.882.612 1.722.612 1.722-2.821-.437-4.104-1.508-4.428-1.822l-.055-.056-.03-.033z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M9.561 19.006L12 21.447l2.44-2.44h1.674c1.017 0 1.948.395 2.637 1.052.792.755 1.028 1.532 1.18 2.442H4.068c.165-.99.455-1.835 1.347-2.591a3.811 3.811 0 012.471-.902h1.675zM12.204 2.5l.343 1.098c4.177-.135 5.488 3.414 5.813 6.473a8.354 8.354 0 01-.794.107 6.4 6.4 0 01.085 1.02c0 3.18-2.27 6.585-5.651 6.585-3.38 0-5.652-3.405-5.652-6.585 0-1.297.108-2.313.304-3.104-1.212-1.523-.654-2.962-.654-2.962l1.793.324c.243-1.522 1.664-2.61 4.413-2.956zM9.733 9.21c-.324.611-1.037 1.14-1.85 1.442-.02.179-.035.36-.035.546 0 2.455 1.668 5.085 4.152 5.085 2.483 0 4.151-2.629 4.151-5.086 0-.363-.044-.71-.12-1.04a6.616 6.616 0 01-2.397-.758c.308.882.612 1.722.612 1.722-2.821-.437-4.104-1.508-4.428-1.822l-.055-.056-.03-.033z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$H; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-boy",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$G = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileBussinesUsers {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M11.285 15.695a.884.884 0 011.354-.09l.076.09.975 1.345a2.42 2.42 0 01-.814.737l-.151.073.545 1.81 2.875-4.16h1.215a4.737 4.737 0 014.643 3.75l.042.22.17 1.03H1.78l.175-1.03a4.737 4.737 0 014.46-3.965l.225-.005h1.215l2.875 4.16.545-1.81a2.308 2.308 0 01-.842-.652l-.123-.158.975-1.345zM12 1c3.475 0 6 2.525 6 6 0 3.38-2.41 7-6 7s-6-3.62-6-7c0-3.475 2.525-6 6-6z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M11.285 15.695a.884.884 0 011.354-.09l.076.09.975 1.345a2.42 2.42 0 01-.814.737l-.151.073.545 1.81 2.875-4.16h1.215a4.737 4.737 0 014.643 3.75l.042.22.17 1.03H1.78l.175-1.03a4.737 4.737 0 014.46-3.965l.225-.005h1.215l2.875 4.16.545-1.81a2.308 2.308 0 01-.842-.652l-.123-.158.975-1.345zM12 1c3.475 0 6 2.525 6 6 0 3.38-2.41 7-6 7s-6-3.62-6-7c0-3.475 2.525-6 6-6zm0 1.5C9.395 2.5 7.5 4.395 7.5 7c0 2.655 1.81 5.5 4.5 5.5s4.5-2.845 4.5-5.5c0-2.605-1.895-4.5-4.5-4.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$G; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-bussines-users",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$F = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileCommunities {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M15.7 14.6a3.542 3.542 0 013.462 2.763l.038.187.25 1.45H4.6l.25-1.4a3.45 3.45 0 013.257-2.945l.193-.005h1.35L12 17l2.35-2.4h1.35zm4.65-.05c1.39 0 2.595.964 2.914 2.277L23.3 17l.4 2h-1.55l-.35-1.75c-.093-.653-.666-1.132-1.31-1.193l-.14-.007h-.05a5.02 5.02 0 00-.833-1.27l-.217-.23h1.1zm-15.55 0c-.375.375-.68.785-.946 1.23l-.154.27h-.05c-.653 0-1.22.436-1.414 1.063l-.036.137L1.85 19H.3l.4-2c.24-1.39 1.398-2.366 2.77-2.445l.18-.005H4.8zM12 4.25c2.5 0 4.4 1.9 4.4 4.4 0 2.45-1.8 5.05-4.4 5.05-2.6 0-4.4-2.65-4.4-5.05 0-2.5 1.9-4.4 4.4-4.4zm-5.6 1.1c.2 0 .45 0 .65.05-.25.45-.5.95-.65 1.45-1.35 0-2.3.95-2.3 2.3 0 1.35.95 2.85 2.3 2.85.15 0 .35-.05.5-.1.25.45.5.85.85 1.25-.4.2-.85.3-1.35.3-2.1 0-3.8-1.95-3.8-4.3 0-2.15 1.65-3.8 3.8-3.8zm11.2-.1c2.15 0 3.8 1.65 3.8 3.8 0 2.4-1.7 4.35-3.8 4.35-.45 0-.9-.1-1.35-.3.35-.35.6-.8.85-1.25.15.05.3.1.5.1 1.4 0 2.3-1.45 2.3-2.85 0-1.35-.95-2.3-2.3-2.35-.15-.55-.35-1-.65-1.45.2-.05.4-.05.65-.05z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M15.7 14.6a3.542 3.542 0 013.462 2.763l.038.187.25 1.45H4.6l.25-1.4a3.45 3.45 0 013.257-2.945l.193-.005h1.35L12 17l2.35-2.4h1.35zm4.65-.05c1.39 0 2.595.964 2.914 2.277L23.3 17l.4 2h-1.55l-.35-1.75c-.093-.653-.666-1.132-1.31-1.193l-.14-.007h-.05a5.02 5.02 0 00-.833-1.27l-.217-.23h1.1zm-15.55 0c-.375.375-.68.785-.946 1.23l-.154.27h-.05c-.653 0-1.22.436-1.414 1.063l-.036.137L1.85 19H.3l.4-2c.24-1.39 1.398-2.366 2.77-2.445l.18-.005H4.8zM12 4.25c2.5 0 4.4 1.9 4.4 4.4 0 2.45-1.8 5.05-4.4 5.05-2.6 0-4.4-2.65-4.4-5.05 0-2.5 1.9-4.4 4.4-4.4zm-5.6 1.1c.2 0 .45 0 .65.05-.25.45-.5.95-.65 1.45-1.35 0-2.3.95-2.3 2.3 0 1.35.95 2.85 2.3 2.85.15 0 .35-.05.5-.1.25.45.5.85.85 1.25-.4.2-.85.3-1.35.3-2.1 0-3.8-1.95-3.8-4.3 0-2.15 1.65-3.8 3.8-3.8zm11.2-.1c2.15 0 3.8 1.65 3.8 3.8 0 2.4-1.7 4.35-3.8 4.35-.45 0-.9-.1-1.35-.3.35-.35.6-.8.85-1.25.15.05.3.1.5.1 1.4 0 2.3-1.45 2.3-2.85 0-1.35-.95-2.3-2.3-2.35-.15-.55-.35-1-.65-1.45.2-.05.4-.05.65-.05zm-5.6.5c-1.7 0-2.9 1.15-2.9 2.9 0 1.7 1.15 3.55 2.9 3.55s2.9-1.8 2.9-3.55c0-1.7-1.2-2.9-2.9-2.9z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$F; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-communities",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$E = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileContacts {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M18 1.5H3v21h15a3 3 0 003-3v-15a3 3 0 00-3-3zM12 8a2 2 0 012.085 2.09c0 1.27-.88 2.5-2.085 2.5s-2.085-1.225-2.085-2.5A2 2 0 0112 8zm-3.75 7.5l.135-.72A1.665 1.665 0 0110 13.415h.82L12 14.58l1.165-1.165H14c.803.001 1.49.575 1.635 1.365l.115.72h-7.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M18 1.5a3.01 3.01 0 012.995 2.824L21 4.5v15a3.01 3.01 0 01-2.824 2.995L18 22.5H3v-21h15zM18 3H4.5v18H18c.8 0 1.423-.576 1.493-1.352l.007-.148v-15c0-.8-.576-1.423-1.352-1.493L18 3zm-4 10.4c.75 0 1.368.527 1.566 1.252l.034.148.15.7h-7.5l.1-.7a1.66 1.66 0 011.501-1.344L10 13.45h.85L12 14.6l1.2-1.2h.8zM12 8c1.15 0 2.1.85 2.1 2.1s-.9 2.5-2.1 2.5c-1.2 0-2.1-1.25-2.1-2.5S10.85 8 12 8z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$E; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-contacts",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$D = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileContactsFromCloud {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12.003 7.998c1.15 0 2.1.85 2.1 2.1s-.9 2.499-2.1 2.499c-1.2 0-2.1-1.249-2.1-2.499s.95-2.1 2.1-2.1m1.427 7.498H8.254l.1-.7c.15-.8.85-1.35 1.649-1.35h.85l1.15 1.151 1.2-1.201h.8c.774 0 1.405.566 1.58 1.329.061-.003.122-.008.183-.008.06 0 .12.001.179.004a5.395 5.395 0 012.829-.806c.783 0 1.54.174 2.227.488V4.499A3.008 3.008 0 0018.002 1.5H3.005v20.994h7.854a4.154 4.154 0 01-.356-1.681c0-1.241.556-2.409 1.488-3.195a3.91 3.91 0 011.439-2.122m7.635 6.498h-6.382a1.181 1.181 0 01-.58-2.207l.712-.402.047-.817a.906.906 0 011.112-.827l.722.176.577-.468a2.389 2.389 0 011.501-.534c1.012 0 1.892.612 2.241 1.561l.2.543.513.268c.469.245.773.744.773 1.272 0 .792-.644 1.435-1.436 1.435m1.357-4.036a3.876 3.876 0 00-3.648-2.543c-.893 0-1.753.308-2.445.869a2.409 2.409 0 00-2.964 2.198 2.683 2.683 0 00-1.362 2.331 2.683 2.683 0 002.68 2.681h6.382A2.938 2.938 0 0024 20.559a2.942 2.942 0 00-1.578-2.601", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12.003 12.597c1.2 0 2.1-1.25 2.1-2.5s-.95-2.1-2.1-2.1c-1.15 0-2.1.85-2.1 2.1s.9 2.5 2.1 2.5zm-7.498 8.398V2.999h13.497c.849 0 1.499.65 1.499 1.5v9.469c.524.072 1.028.22 1.5.436V4.499a3.008 3.008 0 00-2.999-3H3.005v20.995h7.854a4.137 4.137 0 01-.346-1.5H4.505zm3.849-6.2l-.1.7h5.176a3.883 3.883 0 012.153-.77c-.175-.763-.806-1.328-1.58-1.328h-.8l-1.2 1.2-1.15-1.15h-.85c-.799 0-1.499.549-1.649 1.349zm14.068 3.163a3.876 3.876 0 00-3.648-2.543c-.893 0-1.753.308-2.445.87a2.409 2.409 0 00-2.964 2.198 2.68 2.68 0 00-1.362 2.33 2.683 2.683 0 002.68 2.68h6.382A2.938 2.938 0 0024 20.56a2.942 2.942 0 00-1.578-2.601z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$D; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-contacts-from-cloud",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$C = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileContracts {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M3 .5v19a3 3 0 003 3h7.5v-1.88a2.25 2.25 0 112.5 0v1.88h2a3 3 0 003-3V.5H3zm13 13H8A.75.75 0 118 12h8a.75.75 0 110 1.5zm0-3H8A.75.75 0 118 9h8a.75.75 0 110 1.5zm0-3H8A.75.75 0 118 6h8a.75.75 0 110 1.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M14.75 16.5c1.25 0 2.25 1 2.25 2.25 0 .692-.34 1.342-.865 1.752L16 20.6v2.9l-1.25-.5-1.25.5v-2.9c-.6-.4-1-1.05-1-1.85 0-1.25 1-2.25 2.25-2.25zM21 .5v19a3.01 3.01 0 01-2.824 2.995L18 22.5h-.5V21h.5c.8 0 1.423-.576 1.493-1.352l.007-.148V2h-15v17.5c0 .8.576 1.423 1.352 1.493L6 21h6v1.5H6a3.01 3.01 0 01-2.995-2.824L3 19.5V.5h18zM16 12c.4 0 .75.35.75.75a.772.772 0 01-.651.743L16 13.5H8c-.4 0-.75-.35-.75-.75 0-.367.294-.691.651-.743L8 12h8zm0-3c.4 0 .75.35.75.75a.772.772 0 01-.651.743L16 10.5H8c-.4 0-.75-.35-.75-.75 0-.367.294-.691.651-.743L8 9h8zm0-3c.4 0 .75.35.75.75a.772.772 0 01-.651.743L16 7.5H8c-.4 0-.75-.35-.75-.75 0-.367.294-.691.651-.743L8 6h8z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$C; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-contracts",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$B = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileDraftFile {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M22.5 3.5v17a3 3 0 01-2.824 2.995l-.176.005h-10a3 3 0 01-2.49-1.33L6.906 22H19.5a1.5 1.5 0 001.493-1.356L21 20.5V5h-2V3.5h3.5zm-5-3v17a3 3 0 01-2.824 2.995l-.176.005h-10a3 3 0 01-2.995-2.824L1.5 17.5V7h4a2.5 2.5 0 002.492-2.302L8 4.5v-4h9.5zM7 .5v4a1.5 1.5 0 01-1.356 1.493L5.5 6h-4L7 .5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M22.5 3.5v17a3.003 3.003 0 01-2.824 2.995l-.176.005h-10a2.995 2.995 0 01-2.492-1.336L6.905 22H19.5c.776 0 1.42-.598 1.493-1.356L21 20.5V5h-2V3.5h3.5zm-5-3v17a3.003 3.003 0 01-2.824 2.995l-.176.005h-10a3.003 3.003 0 01-2.995-2.824L1.5 17.5v-12l5-5h11zM16 2H7.5v3c0 .781-.593 1.42-1.355 1.493L6 6.5H3v11c0 .776.598 1.42 1.356 1.493L4.5 19h10c.776 0 1.42-.598 1.493-1.356L16 17.5V2z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$B; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-draft-file",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$A = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileFamilies {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12.25 16.5l2.85 2.75 2.75-2.75h1.6c1.883 0 3.532 1.305 3.914 3.15l.036.2.1.65H6.6l.1-.65c.29-1.883 1.884-3.253 3.75-3.345l.2-.005h1.6zm-5.4 0c-.375.375-.68.785-.946 1.23L5.75 18H4.5c-.897 0-1.66.58-1.87 1.445l-.03.155-.15.9H.95l.2-1.15c.24-1.589 1.594-2.76 3.168-2.845L4.5 16.5h2.35zm8.2-11.75C18 4.75 20.1 6.9 20.1 9.8c0 2.8-2.05 5.85-5.05 5.85C12 15.65 10 12.6 10 9.8c0-2.95 2.1-5.05 5.05-5.05zm-7 1.15c.55 0 1.05.1 1.5.25-.25.4-.5.85-.65 1.35-.25-.05-.55-.1-.85-.1-1.7 0-2.85 1.2-2.85 2.85 0 1.7 1.15 3.5 2.85 3.5.5 0 .9-.15 1.3-.4.25.45.5.85.8 1.25-.6.4-1.3.65-2.1.65-2.6 0-4.35-2.6-4.35-5 0-2.5 1.9-4.35 4.35-4.35z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12.25 16.5l2.85 2.75 2.75-2.75h1.6c1.883 0 3.532 1.305 3.914 3.15l.036.2.1.65H6.6l.1-.65c.29-1.883 1.884-3.253 3.75-3.345l.2-.005h1.6zm-5.4 0c-.375.375-.68.785-.946 1.23L5.75 18H4.5c-.897 0-1.66.58-1.87 1.445l-.03.155-.15.9H.95l.2-1.15c.24-1.589 1.594-2.76 3.168-2.845L4.5 16.5h2.35zm8.2-11.75C18 4.75 20.1 6.9 20.1 9.8c0 2.8-2.05 5.85-5.05 5.85C12 15.65 10 12.6 10 9.8c0-2.95 2.1-5.05 5.05-5.05zm-7 1.15c.55 0 1.05.1 1.5.25-.25.4-.5.85-.65 1.35-.25-.05-.55-.1-.85-.1-1.7 0-2.85 1.2-2.85 2.85 0 1.7 1.15 3.5 2.85 3.5.5 0 .9-.15 1.3-.4.25.45.5.85.8 1.25-.6.4-1.3.65-2.1.65-2.6 0-4.35-2.6-4.35-5 0-2.5 1.9-4.35 4.35-4.35zm7 .35c-2.1 0-3.55 1.45-3.55 3.55 0 2.1 1.45 4.35 3.55 4.35 2.15 0 3.55-2.25 3.55-4.35 0-2.1-1.45-3.55-3.55-3.55z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$A; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-families",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$z = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileFamily {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M6.556 12.5c.013 1.604.591 3.059 1.521 4.135a4.72 4.72 0 00-3.533 3.642l-.04.222-.161 1.001H.009l-.006-.325.007-.622.01-.383.026-.65.056-.99.06-.813.08-.859.063-.59a4.25 4.25 0 014.015-3.763l.208-.005h2.028zm13.512 2a3.734 3.734 0 013.703 3.157c.084.525.137 1.199.171 1.857l.028.648.017.602.012.736h-4.841l-.161-1a4.723 4.723 0 00-3.172-3.75c.5-.55.9-1.205 1.18-1.934l.111-.316h2.952zM10.405 18L12 19.595 13.595 18h.711a3.234 3.234 0 013.175 2.556l.034.181.123.763H5.862l.122-.764a3.234 3.234 0 013.025-2.73L9.193 18h1.212zM12 8.5c2.25 0 3.946 1.697 3.946 3.946C15.946 14.957 14.176 17 12 17s-3.946-2.043-3.946-4.554C8.054 10.196 9.75 8.5 12 8.5zM17.566 4c2.38 0 4.174 1.794 4.175 4.174 0 2.428-1.782 4.918-4.32 4.817.04-.498.038-.924-.058-1.505 1.697.159 2.877-1.619 2.877-3.312 0-1.575-1.1-2.674-2.674-2.674-1.447 0-2.482.934-2.642 2.307a5.363 5.363 0 00-1.423-.609C13.918 5.322 15.525 4 17.566 4zM6.992 1.5c2.51 0 4.403 1.892 4.403 4.402 0 .382-.048.768-.13 1.148a5.513 5.513 0 00-1.714.499 4.24 4.24 0 00.343-1.647C9.894 4.193 8.701 3 6.992 3S4.09 4.193 4.09 5.902c0 1.928 1.405 3.89 3.307 3.559-.29.46-.511.973-.654 1.524-2.494-.162-4.153-2.7-4.153-5.083 0-2.51 1.892-4.402 4.402-4.402z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M6.556 12.5c.013 1.604.591 3.059 1.521 4.135a4.72 4.72 0 00-3.533 3.642l-.04.222-.161 1.001H.009l-.006-.325.007-.622.01-.383.026-.65.056-.99.06-.813.08-.859.063-.59a4.25 4.25 0 014.015-3.763l.208-.005h2.028zm13.512 2a3.734 3.734 0 013.703 3.157c.084.525.137 1.199.171 1.857l.028.648.017.602.012.736h-4.841l-.161-1a4.723 4.723 0 00-3.172-3.75c.5-.55.9-1.205 1.18-1.934l.111-.316h2.952zM10.405 18L12 19.595 13.595 18h.711a3.234 3.234 0 013.175 2.556l.034.181.123.763H5.862l.122-.764a3.234 3.234 0 013.025-2.73L9.193 18h1.212zM12 8.5c2.25 0 3.946 1.697 3.946 3.946C15.946 14.957 14.176 17 12 17s-3.946-2.043-3.946-4.554C8.054 10.196 9.75 8.5 12 8.5zm0 1.5c-1.44 0-2.446 1.006-2.446 2.446 0 1.475.983 3.054 2.446 3.054s2.446-1.579 2.446-3.054C14.446 11.006 13.44 10 12 10zm5.566-6c2.38 0 4.174 1.794 4.175 4.174 0 2.428-1.782 4.918-4.32 4.817.04-.498.038-.924-.058-1.505 1.697.159 2.877-1.619 2.877-3.312 0-1.575-1.1-2.674-2.674-2.674-1.447 0-2.482.934-2.642 2.307a5.363 5.363 0 00-1.423-.609C13.918 5.322 15.525 4 17.566 4zM6.992 1.5c2.51 0 4.403 1.892 4.403 4.402 0 .382-.048.768-.13 1.148a5.513 5.513 0 00-1.714.499 4.24 4.24 0 00.343-1.647C9.894 4.193 8.701 3 6.992 3S4.09 4.193 4.09 5.902c0 1.928 1.405 3.89 3.307 3.559-.29.46-.511.973-.654 1.524-2.494-.162-4.153-2.7-4.153-5.083 0-2.51 1.892-4.402 4.402-4.402z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$z; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-family",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$y = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileFile {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M21 17.5L15.5 23v-4a1.5 1.5 0 011.356-1.493L17 17.5h4zM21 1v15.5h-4a2.5 2.5 0 00-2.495 2.336L14.5 19v4H6a3 3 0 01-2.995-2.824L3 20V1h18z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("defs", null, hAsync("path", { d: "M3 1v19c0 1.65 1.35 3 3 3h10l5-5V1H3zm1.5 19V2.5h15V17h-3c-.85 0-1.5.65-1.5 1.5v3H6c-.85 0-1.5-.65-1.5-1.5z", id: "a" }), hAsync("path", { id: "c", d: "M0 0h12.002v16H0z" })), hAsync("g", { fill: "none", "fill-rule": "evenodd" }, hAsync("mask", { id: "b", fill: "#fff" }, hAsync("use", { xlinkHref: "#a" })), hAsync("use", { fill: "#000", xlinkHref: "#a" }), hAsync("g", { mask: "url(#b)" }, hAsync("g", { transform: "translate(6 4)" }, hAsync("mask", { id: "d", fill: "#fff" }, hAsync("use", { xlinkHref: "#c" })), hAsync("path", { d: "M10.131 15h-8.25a.94.94 0 01-.88-.996V2a.94.94 0 01.876-1h4.124v5a.5.5 0 00.5.5h4.5V14a.94.94 0 01-.87 1zm.46-9.5h-3.59V1.58l3.59 3.92zm1.28-.09L7.061.16a.518.518 0 00-.37-.16h-4.81a1.94 1.94 0 00-1.88 1.998V14a1.94 1.94 0 001.878 2h8.252a1.94 1.94 0 001.87-2V5.75a.53.53 0 00-.13-.34z", fill: "#000", mask: "url(#d)" }))))))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$y; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-file",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$x = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileFileCollection {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M15.55.46V4a2.33 2.33 0 002.145 2.328l.185.007h3.62v8.875a2.245 2.245 0 01-2.052 2.242l-.198.008h-.75v.79a2.245 2.245 0 01-2.052 2.242l-.198.008h-.75v.75a2.245 2.245 0 01-2.052 2.242l-.198.008h-9a2.245 2.245 0 01-2.242-2.052L2 21.25V6.5h3v-3h3V.46h7.55zM5 8H3.5v13.25c0 .38.282.693.648.743L4.25 22h9a.75.75 0 00.743-.648L14 21.25v-.75H7.25a2.245 2.245 0 01-2.242-2.052L5 18.25V8zm3-3H6.5v13.25c0 .38.282.693.648.743L7.25 19h9a.75.75 0 00.743-.648L17 18.25v-.79h-6.75a2.245 2.245 0 01-2.242-2.052L8 15.21V5zM16.625.46L21.5 5.335h-3.545a1.33 1.33 0 01-1.322-1.185L16.625 4V.46z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M17.75.5H8v3H5v3H2v14.75a2.25 2.25 0 002.25 2.25h9a2.25 2.25 0 002.25-2.25v-.75h.75a2.25 2.25 0 002.25-2.25v-.75h.75a2.25 2.25 0 002.25-2.25V4.363L17.75.5zM14 21.25a.75.75 0 01-.75.75h-9a.75.75 0 01-.75-.75V8H5v10.25a2.25 2.25 0 002.25 2.25H14v.75zm3-3a.75.75 0 01-.75.75h-9a.75.75 0 01-.75-.75V5H8v10.25a2.25 2.25 0 002.25 2.25H17v.75zM19.25 16h-9a.75.75 0 01-.75-.75V2H16v2.17c0 .734.595 1.33 1.33 1.33H20v9.75a.75.75 0 01-.75.75z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$x; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-file-collection",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$w = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileGirl {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M9.561 19.006L12 21.447l2.44-2.44h1.674c1.017 0 1.948.395 2.636 1.052.732.697.99 1.413 1.144 2.234l.037.208H4.068c.165-.99.455-1.835 1.347-2.591a3.807 3.807 0 012.239-.896l.232-.007h1.675zM20.576 4.5c.962 2.544-1.409 4.275-3.567 3.954.413.8.643 1.729.643 2.745 0 3.18-2.27 6.585-5.651 6.585-3.38 0-5.652-3.405-5.652-6.585 0-1.016.23-1.946.644-2.745-2.16.321-4.53-1.409-3.569-3.954l.065.06.112.09a2.2 2.2 0 001.238.451 2.1 2.1 0 00.598-.076l.414-.117c.412-.115.83-.185 1.39.119.64.347.935 1.217 1.065 1.795.97-.805 2.244-1.274 3.695-1.274 1.45 0 2.724.469 3.694 1.274.13-.578.424-1.448 1.064-1.795.498-.27.884-.245 1.253-.156l.552.154a2.1 2.1 0 00.598.076 2.2 2.2 0 001.238-.45l.112-.09.064-.06zM12 8.804l-.106.221c-.508.993-1.658 2.415-4.027 2.61.183 2.321 1.796 4.648 4.133 4.648 2.336 0 3.95-2.327 4.133-4.648-2.551-.21-3.688-1.843-4.133-2.83z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M9.561 19.006L12 21.447l2.44-2.44h1.674c1.017 0 1.948.395 2.636 1.052.732.697.99 1.413 1.144 2.234l.037.208H4.068c.165-.99.455-1.835 1.347-2.591a3.807 3.807 0 012.239-.896l.232-.007h1.675zM20.576 4.5c.962 2.544-1.409 4.275-3.567 3.954.413.8.643 1.729.643 2.745 0 3.18-2.27 6.585-5.651 6.585-3.38 0-5.652-3.405-5.652-6.585 0-1.016.23-1.946.644-2.745-2.16.321-4.53-1.409-3.569-3.954l.065.06.112.09a2.2 2.2 0 001.238.451 2.1 2.1 0 00.598-.076l.414-.117c.412-.115.83-.185 1.39.119.64.347.935 1.217 1.065 1.795.97-.805 2.244-1.274 3.695-1.274 1.45 0 2.724.469 3.694 1.274.13-.578.424-1.448 1.064-1.795.498-.27.884-.245 1.253-.156l.552.154a2.1 2.1 0 00.598.076 2.2 2.2 0 001.238-.45l.112-.09.064-.06zM12 8.804l-.106.221c-.508.993-1.658 2.415-4.027 2.61.183 2.321 1.796 4.648 4.133 4.648 2.336 0 3.95-2.327 4.133-4.648-2.551-.21-3.688-1.843-4.133-2.83z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$w; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-girl",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$v = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileHandshake {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("defs", null, hAsync("path", { d: "M23.424 7.2c0-.366-.48-.624-.864-.528l-2.4.672c-.48.096-1.008 0-1.44-.336l-1.344-1.056a4.26 4.26 0 00-2.592-.912c-.912 0-1.776.288-2.544.864-1.2-1.008-3.024-1.104-4.32-.24L6.336 6.72c-.768.48-1.68.672-2.592.48l-2.4-.48a.79.79 0 00-.864.576.79.79 0 00.576.864l2.4.48c.336.048.624.096.96.096.96 0 1.92-.288 2.736-.816l1.536-1.056c.72-.48 1.68-.48 2.352 0L8.304 9.168c-.912.816-1.008 2.208-.192 3.072a2.12 2.12 0 002.736.384L14.4 10.56c.336-.192.72-.096.96.192 0 0 2.496 3.264 3.072 4.032.528.72.288 1.536-.144 1.776-.288.192-1.008.144-1.008.144s-.096.864-.528 1.104c-.384.24-1.248 0-1.248 0s-.24.672-.528.864c-.48.336-1.344-.048-1.344-.048s-.336.576-.528.72c-.24.144-.576.192-.912.048.528-1.104.384-2.352-.432-3.024a1.826 1.826 0 00-.816-.384c-.144-.24-.288-.384-.48-.576-.24-.192-.48-.288-.768-.384-.144-.24-.288-.48-.528-.672-.192-.144-.384-.24-.576-.336-.144-.288-.336-.576-.576-.768-1.008-.816-2.496-.48-3.552.672l-3.024-.912c-.384-.144-.768.096-.912.48-.144.384.096.768.48.912l2.784.912c-.336 1.008-.096 2.016.624 2.592.192.144.384.24.576.336.144.288.336.576.576.768.24.192.48.288.768.384.144.24.288.48.528.672.24.192.528.336.816.384.144.24.288.384.48.576.384.288.816.432 1.296.432.624 0 1.344-.288 1.92-.768.432.24.864.336 1.296.336.432 0 .912-.144 1.296-.384.144-.096.24-.192.384-.288.528.048 1.056-.048 1.536-.384.192-.144.384-.288.528-.48a2.38 2.38 0 001.248-.384c.384-.24.624-.576.816-.96.24-.048.48-.144.672-.288.576-.384.96-1.008 1.056-1.776.048-.24 0-.48 0-.72l2.684-.803c.384-.096.532-.449.532-.98V7.2z", id: "a" })), hAsync("use", { xlinkHref: "#a", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("defs", null, hAsync("path", { d: "M22.608 13.008l-3.024.912-3.12-4.08a2.16 2.16 0 00-2.832-.528l-3.504 2.112a.68.68 0 01-.912-.144c-.288-.288-.24-.768.048-1.056l3.6-3.12a2.853 2.853 0 011.824-.672c.624 0 1.248.192 1.728.576l1.344 1.056c.768.576 1.728.816 2.64.576l2.496-.576a.716.716 0 10-.336-1.392l-2.4.672c-.48.096-1.008 0-1.44-.336l-1.344-1.056a4.26 4.26 0 00-2.592-.912c-.912 0-1.776.288-2.544.864-1.2-1.008-3.024-1.104-4.32-.24L6.336 6.72c-.768.48-1.68.672-2.592.48l-2.4-.48a.79.79 0 00-.864.576.79.79 0 00.576.864l2.4.48c.336.048.624.096.96.096.96 0 1.92-.288 2.736-.816l1.536-1.056c.72-.48 1.68-.48 2.352 0L8.304 9.168c-.912.816-1.008 2.208-.192 3.072a2.12 2.12 0 002.736.384L14.4 10.56c.336-.192.72-.096.96.192 0 0 2.496 3.264 3.072 4.032.528.72.288 1.536-.144 1.776-.288.192-1.008.144-1.008.144s-.096.864-.528 1.104c-.384.24-1.248 0-1.248 0s-.24.672-.528.864c-.48.336-1.344-.048-1.344-.048s-.336.576-.528.72c-.24.144-.576.192-.912.048.528-1.104.384-2.352-.432-3.024a1.826 1.826 0 00-.816-.384c-.144-.24-.288-.384-.48-.576-.24-.192-.48-.288-.768-.384-.144-.24-.288-.48-.528-.672-.192-.144-.384-.24-.576-.336-.144-.288-.336-.576-.576-.768-1.008-.816-2.496-.48-3.552.672l-3.024-.912c-.384-.144-.768.096-.912.48-.144.384.096.768.48.912l2.784.912c-.336 1.008-.096 2.016.624 2.592.192.144.384.24.576.336.144.288.336.576.576.768.24.192.48.288.768.384.144.24.288.48.528.672.24.192.528.336.816.384.144.24.288.384.48.576.384.288.816.432 1.296.432.624 0 1.344-.288 1.92-.768.432.24.864.336 1.296.336.432 0 .912-.144 1.296-.384.144-.096.24-.192.384-.288.528.048 1.056-.048 1.536-.384.192-.144.384-.288.528-.48a2.38 2.38 0 001.248-.384c.384-.24.624-.576.816-.96.24-.048.48-.144.672-.288.576-.384.96-1.008 1.056-1.776.048-.24 0-.48 0-.72l2.928-.864c.384-.096.576-.528.48-.912-.24-.48-.624-.672-1.008-.576zm-11.952 6.24c-.528.672-1.296.816-1.632.576-.24-.192-.336-.864-.336-.864s-.672.144-.96-.096c-.288-.24-.336-.912-.336-.912s-.672.144-.96-.096c-.288-.24-.288-.912-.288-.912s-.576.048-.864-.144c-.336-.288-.336-1.056.24-1.728.528-.672 1.296-.864 1.632-.576.336.288.288.912.288.912s.624-.048.864.192c.288.288.288.912.288.912s.624-.144.96.096c.336.24.336.864.336.864s.624-.144.96.096c.336.24.336 1.008-.192 1.68z", id: "a" })), hAsync("use", { xlinkHref: "#a", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$v; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-handshake",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$u = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileHtmlFile {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M18.652 12.077h-2.057V8.403h.743v2.987h1.314v.687zm-2.805 0h-.742v-2.073h-.034l-.901 1.617h-.237l-.897-1.617h-.032v2.073h-.743V8.403h.682l1.095 2.035h.032l1.09-2.035h.687v3.674zm-4.07-2.986h-.941v2.986h-.743V9.091h-.94v-.688h2.624v.688zM8.67 12.077h-.743v-1.523H6.612v1.523H5.87V8.403h.742v1.463h1.315V8.403h.743v3.674zM3.004 1v19a3 3 0 003 3h8.5v-4a2.5 2.5 0 012.5-2.5h4V1h-18zm12.5 18v4l5.5-5.5h-4a1.5 1.5 0 00-1.5 1.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M18.652 11.39h-1.314V8.404h-.743v3.673h2.057v-.687zm-5.648-1.386h.032l.897 1.617h.237l.9-1.617h.035v2.073h.742V8.404h-.687l-1.09 2.035h-.032l-1.095-2.035h-.682v3.673h.743v-2.073zm-2.911 2.073h.743V9.09h.94v-.687H9.154v.687h.94v2.986zm-3.481-1.523h1.315v1.523h.743V8.404h-.743v1.463H6.612V8.404H5.87v3.673h.742v-1.523zM19.504 17h-3a1.5 1.5 0 00-1.5 1.5v3h-9a1.5 1.5 0 01-1.5-1.5V2.5h15V17zM3.004 1v19a3 3 0 003 3h10l5-5V1h-18z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$u; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-html-file",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$t = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileIdCard {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M.5 3.5v14a3 3 0 003 3h17a3 3 0 003-3v-14H.5zm7.755 4.47a2 2 0 012.08 2.095c0 1.265-.875 2.5-2.08 2.5s-2.085-1.225-2.085-2.5A2 2 0 018.255 7.97zM4.5 15.47l.13-.72a1.665 1.665 0 011.64-1.365h.815L8.25 14.55l1.16-1.165h.815a1.665 1.665 0 011.64 1.365l.135.72H4.5zM19.25 14h-5a.75.75 0 110-1.5h5a.75.75 0 110 1.5zm0-3h-5a.75.75 0 110-1.5h5a.75.75 0 110 1.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M23.5 3.5v14a3.01 3.01 0 01-2.824 2.995l-.176.005h-17a3.01 3.01 0 01-2.995-2.824L.5 17.5v-14h23zM22 5H2v12.5c0 .8.576 1.423 1.352 1.493L3.5 19h17c.8 0 1.423-.576 1.493-1.352L22 17.5V5zM7.15 13.5l1.15 1.1 1.1-1.1h.75c.703 0 1.318.483 1.516 1.162l.034.138.1.7H4.7l.15-.7c.14-.703.72-1.23 1.41-1.294l.14-.006h.75zm12.1-1c.4 0 .75.35.75.75a.772.772 0 01-.651.743L19.25 14h-5c-.4 0-.75-.35-.75-.75 0-.367.294-.691.651-.743l.099-.007h5zm-11-4.45c1.15 0 2.1.85 2.1 2.1s-.9 2.5-2.1 2.5c-1.2 0-2.1-1.25-2.1-2.5s.95-2.1 2.1-2.1zm11 1.45c.4 0 .75.35.75.75a.772.772 0 01-.651.743L19.25 11h-5c-.4 0-.75-.35-.75-.75 0-.367.294-.691.651-.743l.099-.007h5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$t; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-id-card",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$s = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileImageFile {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M21 17.5L15.5 23v-4a1.5 1.5 0 011.356-1.493L17 17.5h4zM21 1v15.5h-4a2.5 2.5 0 00-2.495 2.336L14.5 19v4H6a3 3 0 01-2.995-2.824L3 20V1h18zm-7.5 8l-2.64 3.4-1.5-1.935L6.23 14.5h11.54L13.5 9zM7.75 7a1.25 1.25 0 100 2.5 1.25 1.25 0 000-2.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M21 1v17l-5 5H6a3.003 3.003 0 01-2.995-2.824L3 20V1h18zm-1.5 1.5h-15V20c0 .776.598 1.42 1.356 1.493L6 21.5h9v-3c0-.781.593-1.42 1.355-1.493L16.5 17h3V2.5zm-6 6.5l4.27 5.5H6.23l3.13-4.035 1.5 1.935L13.5 9zM7.75 7a1.25 1.25 0 110 2.5 1.25 1.25 0 010-2.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$s; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-image-file",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$r = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileLogout {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M18 16l5.7 3.75L18 23.5v-3h-3.25c-.4 0-.75-.35-.75-.75 0-.367.294-.691.651-.743L14.75 19H18v-3zm-10.6-.5l3.1 3.1 3.1-3.1h2.429c.114.002.219.007.32.021l.151.029v1.95h-1.75c-1.4 0-2.5 1.25-2.2 2.7.033.067.044.133.063.2l.037.1H.3l.15-1.05a4.73 4.73 0 014.474-3.945l.226-.005H7.4zM10.5 1c3.5 0 6 2.5 6 6 0 3.4-2.4 7-6 7s-6-3.6-6-7c0-3.5 2.5-6 6-6z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M18 16l5.7 3.75L18 23.5v-3h-3.25c-.4 0-.75-.35-.75-.75 0-.367.294-.691.651-.743L14.75 19H18v-3zm-10.6-.5l3.1 3.1 3.1-3.1h2.429c.114.002.219.007.32.021l.151.029v1.95h-1.75c-1.4 0-2.5 1.25-2.2 2.7.033.067.044.133.063.2l.037.1H.3l.15-1.05a4.73 4.73 0 014.474-3.945l.226-.005H7.4zM10.5 1c3.5 0 6 2.5 6 6 0 3.4-2.4 7-6 7s-6-3.6-6-7c0-3.5 2.5-6 6-6zm0 1.5C7.9 2.5 6 4.4 6 7c0 2.65 1.8 5.5 4.5 5.5S15 9.65 15 7c0-2.6-1.9-4.5-4.5-4.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$r; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-logout",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$q = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileMan {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M8.905 17.5L12 20.595l3.095-3.095h2.265a4.73 4.73 0 014.645 3.757l.04.213.175 1.03H1.78l.175-1.03a4.73 4.73 0 014.468-3.966l.217-.004h2.265zM11.5 2a4.96 4.96 0 014.07 2c1.72.252 2.388 1.705 2.428 4.705L18 9l-.003.22C17.895 12.537 15.512 16 12 16s-5.895-3.464-5.997-6.78L6 8.95l.001-.193c.003-.194.009-.388.019-.583l.026-.39C6.284 4.861 7.529 2 11.5 2zm3.115 4.195l-.117.169-.112.147-.15.182-.184.21C13.34 7.68 11.969 8.836 10 9c.109-.492.14-.998.095-1.5a7.37 7.37 0 01-2.281 1.28l-.314.1V9c0 2.655 1.81 5.5 4.5 5.5 2.62 0 4.404-2.697 4.496-5.29L16.5 9v-.205a8.275 8.275 0 01-1.885-2.6z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M8.905 17.5L12 20.595l3.095-3.095h2.266a4.734 4.734 0 014.644 3.749l.042.22.172 1.031H1.781l.172-1.031a4.734 4.734 0 014.461-3.964l.224-.005h2.267zM11.5 2c2.127 0 3.396 1.128 4.068 2.014 1.723.24 2.393 1.691 2.434 4.667l.002.292-.006-.009L18 9c0 3.38-2.411 7-6 7-3.26 0-5.548-2.986-5.94-6.067-.117-.917-.051-2.172.1-3.087C6.583 4.279 7.957 2 11.5 2zm3.094 4.204l-.075.11-.093.127-.13.166-.078.095-.184.21c-.708.776-2.077 1.933-4.054 2.097l.036-.174.033-.19.034-.233c.036-.291.058-.634.011-.896l-.153.123-.227.167-.2.137-.234.15a8.116 8.116 0 01-.13.079l-.282.158c-.394.212-.86.417-1.363.55-.062 2.726 1.79 5.62 4.495 5.62 2.746 0 4.598-2.975 4.491-5.706-.61-.574-1.389-1.457-1.897-2.59z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$q; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-man",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$p = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFilePdfFile {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M21 17.5L15.5 23v-4a1.5 1.5 0 011.356-1.493L17 17.5h4zM21 1v15.5h-4a2.5 2.5 0 00-2.495 2.336L14.5 19v4H6a3 3 0 01-2.995-2.824L3 20V1h18zM8.545 6.877L8.4 6.88H6.605v4.845h.975v-1.63h.82A1.5 1.5 0 0010 8.5a1.5 1.5 0 00-1.455-1.623zm3.83.003H10.69v4.845h1.685c1.26 0 2.05-.845 2.05-2.42 0-1.51-.726-2.353-1.895-2.42l-.155-.005zm5.625 0h-2.805v4.845h1V9.79h1.73v-.91h-1.73V7.79H18v-.91zm-5.7.91c.7 0 1.11.48 1.11 1.53 0 .988-.385 1.445-.993 1.495l-.117.005h-.63V7.79h.63zm-3.965 0A.635.635 0 019 8.5a.635.635 0 01-.556.681l-.109.004H7.58V7.79h.755z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M21 1v17l-5 5H6a3.003 3.003 0 01-2.995-2.824L3 20V1h18zm-1.5 1.5h-15V20c0 .776.598 1.42 1.356 1.493L6 21.5h9v-3c0-.781.593-1.42 1.355-1.493L16.5 17h3V2.5zM8.315 7.05c.94 0 1.6.58 1.6 1.61 0 .973-.589 1.535-1.446 1.595l-.154.005H7.5v1.63h-.98V7.05h1.795zm3.885 0c1.26 0 2.05.845 2.05 2.42 0 1.505-.726 2.348-1.895 2.416l-.155.004h-1.68V7.05h1.68zm5.59-.005v.91h-1.795v1.09h1.73v.91h-1.73v1.935h-.98V7.045h2.775zm-5.665.91h-.63v3.03h.63c.675 0 1.11-.45 1.11-1.515 0-1.002-.385-1.46-.993-1.51l-.117-.005zm-3.875 0h-.755v1.4h.755c.365 0 .65-.245.65-.695 0-.418-.231-.659-.551-.699l-.099-.006z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$p; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-pdf-file",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$o = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileSwitchUsers {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M18 18.65v1.85h2.75c.4 0 .75.35.75.75a.772.772 0 01-.651.743L20.75 22H18v1.85l-4-2.6 4-2.6zM7.1 15.5l2.9 2.9 2.85-2.9h2c-.3.45-.45 1.05-.3 1.7.089.489.375.899.719 1.23l.131.12L13.15 20H.6l.15-.8a4.402 4.402 0 014.136-3.695L5.1 15.5h2zm12.4-1.35l4 2.6-4 2.6V17.5h-2.75c-.4 0-.75-.35-.75-.75 0-.367.294-.691.651-.743L16.75 16h2.75v-1.85zM10 2.25c3.2 0 5.55 2.35 5.55 5.55 0 3.1-2.25 6.45-5.55 6.45S4.45 10.9 4.45 7.8c0-3.2 2.35-5.55 5.55-5.55z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M18 18.65v1.85h2.75c.4 0 .75.35.75.75a.772.772 0 01-.651.743L20.75 22H18v1.85l-4-2.6 4-2.6zM7.1 15.5l2.9 2.9 2.85-2.9h2c-.3.45-.45 1.05-.3 1.7.089.489.375.899.719 1.23l.131.12L13.15 20H.6l.15-.8a4.402 4.402 0 014.136-3.695L5.1 15.5h2zm12.4-1.35l4 2.6-4 2.6V17.5h-2.75c-.4 0-.75-.35-.75-.75 0-.367.294-.691.651-.743L16.75 16h2.75v-1.85zM10 2.25c3.2 0 5.55 2.35 5.55 5.55 0 3.1-2.25 6.45-5.55 6.45S4.45 10.9 4.45 7.8c0-3.2 2.35-5.55 5.55-5.55zm0 1.5c-2.35 0-4.05 1.7-4.05 4.05 0 2.4 1.65 4.95 4.05 4.95s4.05-2.55 4.05-4.95c0-2.35-1.7-4.05-4.05-4.05z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$o; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-switch-users",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$n = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileUser {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M8.9 16.5l3.1 3.1 3.1-3.1h2.25a4.73 4.73 0 014.656 3.73l.044.22.2 1.05H1.8l.15-1.05a4.73 4.73 0 014.474-3.945l.226-.005H8.9zM12 2c3.5 0 6 2.5 6 6 0 3.4-2.4 7-6 7s-6-3.6-6-7c0-3.5 2.5-6 6-6z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M8.9 16.5l3.1 3.1 3.1-3.1h2.25a4.73 4.73 0 014.656 3.73l.044.22.2 1.05H1.8l.15-1.05a4.73 4.73 0 014.474-3.945l.226-.005H8.9zM12 2c3.5 0 6 2.5 6 6 0 3.4-2.4 7-6 7s-6-3.6-6-7c0-3.5 2.5-6 6-6zm0 1.5C9.4 3.5 7.5 5.4 7.5 8c0 2.65 1.8 5.5 4.5 5.5s4.5-2.85 4.5-5.5c0-2.6-1.9-4.5-4.5-4.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$n; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-user",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$m = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileVideos {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M21 17.5L15.5 23v-4a1.5 1.5 0 011.356-1.493L17 17.5h4zM21 1v15.5h-4a2.5 2.5 0 00-2.495 2.336L14.5 19v4H6a3 3 0 01-2.995-2.824L3 20V1h18zM9.5 8.25v7.5L15.24 12 9.5 8.25z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M21 1v17l-5 5H6a3.01 3.01 0 01-2.995-2.824L3 20V1h18zm-1.5 1.5h-15V20c0 .8.576 1.423 1.352 1.493L6 21.5h9v-3c0-.8.576-1.423 1.352-1.493L16.5 17h3V2.5zm-10 5.75L15.25 12 9.5 15.75v-7.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$m; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-videos",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$l = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileWoman {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M8.905 17.5L12 20.595l3.095-3.095h2.265a4.73 4.73 0 014.645 3.757l.04.213.175 1.03H1.78l.175-1.03a4.73 4.73 0 014.468-3.966l.217-.004h2.265zM11.5 2a4.92 4.92 0 013.695 1.55 2.47 2.47 0 012.24 1.4c.394.77.493 1.417.527 2.087l.014.405.015.633c.03.874.133 1.885.704 3.285a18.8 18.8 0 001.205 2.39c-.143.091-.39.19-.714.29l-.348.1a14.42 14.42 0 01-.604.144l-.448.09c-.154.03-.313.058-.477.085l-.5.075-.256.035-.523.06c-.176.017-.353.033-.53.046A5.29 5.29 0 0112 16a5.26 5.26 0 01-3.475-1.33l-.254-.02-.506-.05a10.045 10.045 0 01-.25-.029l-.49-.065-.24-.037-.462-.079-.437-.085-.406-.09-.368-.093-.325-.095c-.302-.095-.532-.19-.662-.277a18.8 18.8 0 001.2-2.39c.53-1.3.645-2.267.686-3.126l.03-.906c.026-.663.083-1.308.359-2.058C7.09 3.395 8.685 2 11.5 2zm2.75 4.415c-2.345 2.11-4.585 2.965-6.75 2.71.06 2.62 1.895 5.375 4.5 5.375s4.375-2.65 4.5-5.225a8.94 8.94 0 01-2.25-2.86z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M8.905 17.5L12 20.595l3.095-3.095h2.266a4.734 4.734 0 014.644 3.749l.042.22.172 1.031H1.781l.172-1.031a4.734 4.734 0 014.461-3.964l.224-.005h2.267zm2.6-15.5c1.766 0 2.942.78 3.675 1.551 1.044.054 1.785.507 2.242 1.399.471.922.53 1.613.54 2.352l.005.685c.008.476.038.998.168 1.627.21 1.016.683 2.31 1.748 4.136-.166.107-.474.225-.88.341l-.371.098-.202.049-.431.093c-.3.06-.62.117-.953.167l-.51.07c-.345.044-.698.08-1.053.106-.95.816-2.131 1.326-3.479 1.326-1.348 0-2.53-.511-3.48-1.329-.265-.02-.53-.044-.792-.074l-.517-.065a20.5 20.5 0 01-.978-.16l-.449-.09-.413-.095-.191-.049-.348-.099c-.324-.099-.57-.198-.71-.289 1.083-1.858 1.542-3.155 1.743-4.186a9.143 9.143 0 00.157-1.52l.02-.802c.022-.614.084-1.225.358-1.971C7.092 3.395 8.692 2 11.504 2zm2.745 4.416c-2.343 2.11-4.585 2.966-6.74 2.71.055 2.619 1.845 5.374 4.495 5.374 2.598 0 4.368-2.65 4.487-5.224-.733-.648-1.705-1.66-2.242-2.86z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$l; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-woman",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$k = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherCloudy {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M10.469 8.3a5.664 5.664 0 015.29 3.608 4.368 4.368 0 012.242 3.81 4.368 4.368 0 01-4.151 4.357l-.211.006H4.81A4.015 4.015 0 01.8 16.07a4.01 4.01 0 011.897-3.405 3.635 3.635 0 013.611-3.256c.23 0 .461.024.697.074A5.659 5.659 0 0110.469 8.3zm9.278 4.646a.6.6 0 01.766-.069l.083.07.849.848a.6.6 0 01-.774.912l-.075-.064-.849-.848a.6.6 0 010-.848zM16.601 6.8c1.655 0 3 1.346 3 3 0 1.111-.61 2.08-1.51 2.598a5.558 5.558 0 00-1.379-1.314 6.835 6.835 0 00-2.598-2.947A2.992 2.992 0 0116.6 6.8zm6.25 2.4a.6.6 0 01.097 1.192l-.097.008h-1.2a.6.6 0 01-.097-1.192l.097-.008h1.2zM11.758 4.957a.6.6 0 01.765-.07l.083.07.849.848a.6.6 0 01-.774.912l-.075-.063-.848-.849a.6.6 0 010-.848zm8.838 0a.6.6 0 01.918.765l-.069.083-.849.849a.596.596 0 01-.848 0 .6.6 0 01-.07-.766l.07-.083.848-.848zM16.601 2.95a.6.6 0 01.592.503l.008.097v1.2a.6.6 0 01-1.192.097L16 4.75v-1.2a.6.6 0 01.6-.6z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M10.5 8.381a5.577 5.577 0 015.242 3.639A4.246 4.246 0 0118 15.764a4.242 4.242 0 01-4.025 4.23l-.211.006H4.673A3.877 3.877 0 01.8 16.127c0-1.391.75-2.669 1.942-3.355a3.486 3.486 0 014.262-3.158A5.574 5.574 0 0110.5 8.381zm0 1.2a4.377 4.377 0 00-2.758.978l-.191.165-.262.238-.335-.115a2.286 2.286 0 00-.738-.125c-1.206 0-2.196.94-2.277 2.126l-.005.156.024.517-.373.166A2.677 2.677 0 002 16.127a2.676 2.676 0 002.504 2.668l.169.005h9.09a3.04 3.04 0 003.037-3.036 3.044 3.044 0 00-1.613-2.68l-.178-.088-.243-.11-.082-.253A4.381 4.381 0 0010.5 9.58zm9.246 3.365a.6.6 0 01.766-.069l.083.07.849.848a.6.6 0 01-.774.912l-.075-.063-.849-.849a.6.6 0 010-.849zM16.6 6.8c1.654 0 3 1.346 3 3 0 1.132-.63 2.118-1.558 2.63a5.44 5.44 0 00-1.344-1.24 6.765 6.765 0 00-2.628-2.996A2.998 2.998 0 0116.6 6.8zm6.25 2.4a.6.6 0 01.097 1.192l-.097.008h-1.2a.6.6 0 01-.097-1.192l.097-.008h1.2zm-2.254-4.244a.6.6 0 01.917.766l-.069.083-.849.849a.598.598 0 01-.848 0 .6.6 0 01-.07-.766l.07-.083.849-.849zm-8.84 0a.6.6 0 01.766-.069l.083.07.849.848a.6.6 0 01-.774.912l-.075-.063-.848-.849a.6.6 0 010-.849zM16.6 2.95a.6.6 0 01.592.503l.008.097v1.2a.6.6 0 01-1.192.097L16 4.75v-1.2a.6.6 0 01.6-.6z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$k; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-cloudy",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$j = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherCloudyRain {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M9.366 18.195a.142.142 0 01.234.08v.046l-.479 3.063a1.227 1.227 0 01-1.402 1.023c-.974-.152-1.364-1.319-.728-2.027l.09-.09 2.285-2.095zm-1.25-4.16a.142.142 0 01.234.08v.047l-.529 3.386a1.342 1.342 0 01-1.533 1.118c-1.069-.167-1.496-1.45-.79-2.224l.09-.09 2.528-2.316zm4.934-1.304a.142.142 0 01.234.08v.046l-.615 3.936a1.537 1.537 0 01-1.756 1.28c-1.226-.191-1.714-1.669-.896-2.554l.096-.096 2.937-2.692zM10.51 5.95a5.56 5.56 0 015.233 3.674 4.25 4.25 0 012.261 3.753c0 2.265-1.775 4.12-3.999 4.231l-.23.005c.052-.13.098-.265.133-.405l.044-.214.616-3.936a1.441 1.441 0 00-2.28-1.382l-.119.098-2.518 2.308a1.443 1.443 0 00-2.294-1.103l-.12.098-2.528 2.316a2.616 2.616 0 00-.846 2.13 3.86 3.86 0 01-3.059-3.777c0-1.4.755-2.684 1.952-3.366C2.86 8.558 4.365 7.107 6.2 7.107c.27 0 .54.033.806.098A5.53 5.53 0 0110.51 5.95zm9.236 4.596a.6.6 0 01.765-.069l.083.07.85.848a.6.6 0 01-.775.912l-.074-.064-.849-.848a.6.6 0 010-.849zM16.601 4.4c1.654 0 3 1.345 3 3 0 1.132-.63 2.118-1.558 2.63a5.43 5.43 0 00-1.344-1.24 6.768 6.768 0 00-2.628-2.996 2.997 2.997 0 012.53-1.394zm6.25 2.4a.6.6 0 01.097 1.192L22.85 8h-1.2a.6.6 0 01-.098-1.192l.098-.008h1.2zM11.757 2.556a.6.6 0 01.766-.069l.083.07.849.848a.6.6 0 01-.775.912l-.074-.064-.849-.848a.6.6 0 010-.849zm8.84 0a.6.6 0 01.917.766l-.07.083-.848.848a.596.596 0 01-.849 0 .6.6 0 01-.07-.765l.07-.083.85-.849zM16.6.55a.6.6 0 01.592.503l.008.097v1.2a.6.6 0 01-1.193.097L16 2.35v-1.2a.6.6 0 01.6-.6z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M9.365 18.196a.141.141 0 01.235.078v.047l-.48 3.063a1.227 1.227 0 01-1.401 1.023c-.974-.152-1.365-1.319-.728-2.027l.089-.09 2.285-2.094zm-1.25-4.16a.142.142 0 01.235.079v.047l-.53 3.386a1.342 1.342 0 01-1.533 1.118c-1.068-.167-1.495-1.45-.79-2.224l.091-.09 2.527-2.316zm4.934-1.304a.141.141 0 01.235.079v.047l-.616 3.935a1.536 1.536 0 01-1.755 1.28c-1.227-.191-1.715-1.669-.897-2.554l.096-.096 2.937-2.691zm-2.55-6.75a5.577 5.577 0 015.243 3.638A4.246 4.246 0 0118 13.364a4.242 4.242 0 01-4.025 4.23l-.211.006h-.085c.053-.13.098-.266.132-.407l.043-.215.092-.587a3.038 3.038 0 002.854-3.027 3.044 3.044 0 00-1.613-2.68l-.178-.088-.243-.11-.082-.253A4.381 4.381 0 0010.5 7.18a4.377 4.377 0 00-2.757.978l-.191.165-.262.238-.335-.115a2.286 2.286 0 00-.738-.125c-1.206 0-2.196.94-2.277 2.126l-.005.156.024.517-.373.166A2.677 2.677 0 002 13.727c0 1.296.927 2.379 2.152 2.621-.158.37-.22.776-.187 1.184A3.877 3.877 0 01.8 13.727c0-1.391.75-2.669 1.942-3.355a3.486 3.486 0 014.262-3.158A5.574 5.574 0 0110.5 5.981zm9.247 4.564a.6.6 0 01.766-.069l.083.07.849.848a.6.6 0 01-.774.912l-.075-.063-.849-.849a.6.6 0 010-.849zM16.6 4.4c1.654 0 3 1.346 3 3 0 1.132-.63 2.118-1.558 2.63a5.44 5.44 0 00-1.344-1.24 6.765 6.765 0 00-2.628-2.996A2.998 2.998 0 0116.6 4.4zm6.25 2.4a.6.6 0 01.097 1.192L22.85 8h-1.2a.6.6 0 01-.097-1.192l.097-.008h1.2zm-2.254-4.244a.6.6 0 01.917.766l-.069.083-.849.849a.598.598 0 01-.848 0 .6.6 0 01-.07-.766l.07-.083.849-.849zm-8.84 0a.6.6 0 01.766-.069l.083.07.849.848a.6.6 0 01-.774.912l-.075-.063-.848-.849a.6.6 0 010-.849zM16.6.55a.6.6 0 01.592.503l.008.097v1.2a.6.6 0 01-1.192.097L16 2.35v-1.2a.6.6 0 01.6-.6z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$j; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-cloudy-rain",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$i = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherCloudySleet {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M11.599 19.171a.138.138 0 01.23.077v.046l-.47 3a1.2 1.2 0 01-1.372 1c-.954-.149-1.337-1.29-.713-1.985l.087-.088 2.238-2.05zm-5.079-3.35L7.201 17l.68-1.179 1.04.6-.68 1.178H9.6v1.2H8.24l.68 1.178-1.04.6L7.2 19.4l-.68 1.179-1.04-.6.681-1.18h-1.36V17.6h1.36l-.68-1.18 1.04-.6zm7.356-2.006a.12.12 0 01.197.062l.002.045-.522 3.333a1.302 1.302 0 11-2.256-1.068l.091-.092 2.488-2.28zM10.507 5.95a5.56 5.56 0 015.233 3.674 4.25 4.25 0 012.261 3.753 4.236 4.236 0 01-3.168 4.1l.004-.02.522-3.334a1.42 1.42 0 00-2.243-1.363l-.117.096-2.49 2.281a2.626 2.626 0 00-.283.303l-.12.165L7.7 14.21a1 1 0 00-.881-.06l-.12.058-2.698 1.552a.999.999 0 00-.494.748l-.007.118v.802a3.861 3.861 0 01-2.7-3.683c0-1.4.755-2.684 1.952-3.366.102-1.822 1.608-3.273 3.443-3.273.27 0 .54.033.806.098a5.53 5.53 0 013.505-1.255zm9.24 4.596a.6.6 0 01.765-.069l.083.07.85.848a.6.6 0 01-.775.912l-.074-.064-.849-.848a.6.6 0 010-.849zM16.601 4.4c1.654 0 3 1.345 3 3 0 1.132-.63 2.118-1.558 2.63a5.43 5.43 0 00-1.344-1.24 6.768 6.768 0 00-2.628-2.996 2.997 2.997 0 012.53-1.394zm6.25 2.4a.6.6 0 01.097 1.192L22.85 8h-1.2a.6.6 0 01-.098-1.192l.098-.008h1.2zM11.757 2.556a.6.6 0 01.765-.069l.084.07.849.848a.6.6 0 01-.775.912l-.074-.064-.849-.848a.6.6 0 010-.849zm8.84 0a.6.6 0 01.917.766l-.07.083-.848.848a.596.596 0 01-.849 0 .6.6 0 01-.07-.765l.07-.083.85-.849zM16.6.55a.6.6 0 01.592.503l.008.097v1.2a.6.6 0 01-1.193.097L16 2.35v-1.2a.6.6 0 01.6-.6z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M11.828 19.294l-.47 3a1.201 1.201 0 01-1.25 1.013l-.122-.013c-.995-.155-1.368-1.392-.626-2.072l2.238-2.05a.138.138 0 01.23.122zM6.52 15.821l.68 1.18.681-1.179 1.04.6L8.24 17.6H9.6v1.2H8.239l.68 1.178-1.039.6L7.2 19.4l-.68 1.18-1.04-.601.681-1.179H4.8v-1.2h1.361l-.68-1.179 1.039-.6zm7.554-1.899l-.522 3.334a1.302 1.302 0 01-1.354 1.098l-.132-.014c-1.078-.168-1.483-1.508-.678-2.245l2.487-2.28a.12.12 0 01.199.107zM10.5 5.982a5.577 5.577 0 015.242 3.638A4.246 4.246 0 0118 13.364a4.24 4.24 0 01-3.273 4.121l.011-.044.2-1.278a3.04 3.04 0 001.862-2.8 3.044 3.044 0 00-1.613-2.68l-.178-.087-.243-.11-.082-.253A4.381 4.381 0 0010.5 7.18a4.377 4.377 0 00-2.757.978l-.191.165-.262.238-.335-.115a2.286 2.286 0 00-.738-.125c-1.206 0-2.196.94-2.277 2.126l-.005.156.024.517-.373.166A2.677 2.677 0 002 13.727c0 1.028.584 1.921 1.437 2.368l.163.079v1.272a3.877 3.877 0 01-2.8-3.719c0-1.391.75-2.669 1.942-3.355a3.486 3.486 0 014.262-3.158A5.574 5.574 0 0110.5 5.981zm10.012 4.495l.083.07.849.848a.6.6 0 01-.774.912l-.075-.063-.849-.849a.6.6 0 01.766-.918zM16.6 4.4c1.654 0 3 1.346 3 3 0 1.132-.63 2.118-1.558 2.63a5.44 5.44 0 00-1.344-1.24 6.765 6.765 0 00-2.628-2.996A2.998 2.998 0 0116.6 4.4zm6.25 2.4a.6.6 0 01.097 1.192L22.85 8h-1.2a.6.6 0 01-.097-1.192l.097-.008h1.2zm-1.406-4.244a.6.6 0 01.07.766l-.07.083-.849.849a.598.598 0 01-.848 0 .6.6 0 01-.07-.766l.07-.083.849-.849a.6.6 0 01.848 0zm-8.922-.069l.083.07.849.848a.6.6 0 01-.774.912l-.075-.063-.848-.849a.6.6 0 01.765-.918zM16.6.55a.6.6 0 01.592.503l.008.097v1.2a.6.6 0 01-1.192.097L16 2.35v-1.2a.6.6 0 01.6-.6z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$i; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-cloudy-sleet",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$h = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherCloudySnow {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M7.08 18.622l1.04.6-.681 1.178h1.36v1.2H7.44l.68 1.178-1.04.6L6.4 22.2l-.68 1.178-1.04-.6.681-1.178H4v-1.2h1.36l-.68-1.178 1.04-.6.68 1.178.68-1.178zm5.2-3.6l1.04.6-.681 1.178h1.36V18h-1.36l.68 1.178-1.04.6-.68-1.178-.68 1.178-1.04-.6L10.56 18H9.2v-1.2h1.36l-.68-1.178 1.04-.6.68 1.178.68-1.178zm-1.785-9.077a5.56 5.56 0 015.233 3.674 4.25 4.25 0 012.261 3.753 4.24 4.24 0 01-2.698 3.952l-.191.069v-1.438a1 1 0 00-.402-.8l-.099-.066-2.5-1.443a1 1 0 00-.88-.059l-.12.059-2.498 1.438a1 1 0 00-.494.75l-.007.117v1.651h-.586l-.614-.355a1.002 1.002 0 00-.882-.059l-.119.059-.61.352h-.861A3.858 3.858 0 01.789 13.74c0-1.4.755-2.683 1.952-3.365.102-1.822 1.608-3.273 3.443-3.273.27 0 .54.033.806.098a5.53 5.53 0 013.505-1.256zm9.251 4.601a.6.6 0 01.766-.069l.083.07.85.848a.601.601 0 01-.776.912l-.074-.063-.849-.849a.601.601 0 010-.849zM16.6 4.4c1.654 0 3 1.346 3 3 0 1.132-.63 2.118-1.558 2.63a5.45 5.45 0 00-1.344-1.24 6.769 6.769 0 00-2.628-2.996A3 3 0 0116.6 4.4zm6.25 2.4a.6.6 0 01.097 1.192L22.85 8h-1.2a.6.6 0 01-.097-1.192l.097-.008h1.2zM11.757 2.556a.6.6 0 01.765-.069l.083.07.85.848a.601.601 0 01-.776.912l-.074-.063-.848-.849a.6.6 0 010-.849zm8.839 0a.6.6 0 01.917.766l-.069.083-.849.849a.599.599 0 01-.848 0 .6.6 0 01-.07-.766l.07-.083.849-.849zM16.6.55a.6.6 0 01.592.502l.008.098v1.2a.6.6 0 01-1.192.097L16 2.35v-1.2a.6.6 0 01.6-.6z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M7.08 18.622l1.04.6-.68 1.178H8.8v1.2H7.44l.68 1.178-1.04.6L6.4 22.2l-.68 1.178-1.04-.6.68-1.178H4v-1.2h1.36l-.68-1.178 1.04-.6.68 1.178.68-1.178zm5.2-3.6l1.04.6-.68 1.178H14V18h-1.36l.68 1.178-1.04.6-.68-1.178-.68 1.178-1.04-.6.68-1.178H9.2v-1.2h1.36l-.68-1.178 1.04-.6.68 1.178.68-1.178zm-1.78-9.04a5.577 5.577 0 015.242 3.638A4.246 4.246 0 0118 13.364a4.238 4.238 0 01-2.607 3.905l-.193.075v-1.306a3.039 3.039 0 001.6-2.674 3.044 3.044 0 00-1.613-2.68l-.178-.088-.243-.11-.082-.253A4.381 4.381 0 0010.5 7.18a4.377 4.377 0 00-2.757.978l-.191.165-.262.238-.335-.115a2.286 2.286 0 00-.738-.125c-1.206 0-2.196.94-2.277 2.126l-.005.156.024.517-.373.166A2.677 2.677 0 002 13.727a2.676 2.676 0 002.504 2.668l.169.005H8v1.2H4.673A3.877 3.877 0 01.8 13.727c0-1.391.75-2.669 1.942-3.355a3.486 3.486 0 014.262-3.158A5.574 5.574 0 0110.5 5.981zm9.246 4.564a.6.6 0 01.766-.069l.083.07.849.848a.6.6 0 01-.774.912l-.075-.063-.849-.849a.6.6 0 010-.849zM16.6 4.4c1.654 0 3 1.346 3 3 0 1.132-.63 2.118-1.558 2.63a5.44 5.44 0 00-1.344-1.24 6.765 6.765 0 00-2.628-2.996A2.998 2.998 0 0116.6 4.4zm6.25 2.4a.6.6 0 01.097 1.192L22.85 8h-1.2a.6.6 0 01-.097-1.192l.097-.008h1.2zm-2.254-4.244a.6.6 0 01.917.766l-.069.083-.849.849a.598.598 0 01-.848 0 .6.6 0 01-.07-.766l.07-.083.849-.849zm-8.84 0a.6.6 0 01.766-.069l.083.07.849.848a.6.6 0 01-.774.912l-.075-.063-.848-.849a.6.6 0 010-.849zM16.6.55a.6.6 0 01.592.503l.008.097v1.2a.6.6 0 01-1.192.097L16 2.35v-1.2a.6.6 0 01.6-.6z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$h; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-cloudy-snow",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$g = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherCloudyThunderRain {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M10.999 19.171a.138.138 0 01.23.077v.046l-.47 3a1.201 1.201 0 01-1.372 1c-.954-.149-1.337-1.29-.713-1.985l.087-.088 2.238-2.05zM9.21 15.2l-2.562 3.6h2.487L4.09 22.878c-.128.103-.296-.029-.254-.166l.023-.046L5.663 20H3.751l2.662-4.8H9.21zm4.066-1.385a.12.12 0 01.197.062l.002.044-.522 3.334a1.301 1.301 0 01-1.487 1.085c-1.034-.162-1.448-1.403-.769-2.154l.091-.091 2.488-2.28zM10.507 5.95a5.56 5.56 0 015.233 3.674 4.25 4.25 0 012.261 3.753c0 2.195-1.668 4.005-3.795 4.215l.032-.137.52-3.333a1.421 1.421 0 00-2.24-1.365l-.117.096L11.26 13.9H5.647l-1.984 3.579A3.863 3.863 0 01.8 13.746c0-1.4.755-2.684 1.952-3.366.102-1.822 1.608-3.273 3.443-3.273.27 0 .54.033.806.098a5.53 5.53 0 013.505-1.255zm9.24 4.596a.6.6 0 01.765-.069l.083.07.85.848a.6.6 0 01-.775.912l-.074-.064-.849-.848a.6.6 0 010-.849zM16.601 4.4c1.654 0 3 1.345 3 3 0 1.132-.63 2.118-1.558 2.63a5.43 5.43 0 00-1.344-1.24 6.768 6.768 0 00-2.628-2.996 2.997 2.997 0 012.53-1.394zm6.25 2.4a.6.6 0 01.097 1.192L22.85 8h-1.2a.6.6 0 01-.098-1.192l.098-.008h1.2zM11.757 2.556a.6.6 0 01.765-.069l.084.07.849.848a.6.6 0 01-.775.912l-.074-.064-.849-.848a.6.6 0 010-.849zm8.84 0a.6.6 0 01.917.766l-.07.083-.848.848a.596.596 0 01-.849 0 .6.6 0 01-.07-.765l.07-.083.85-.849zM16.6.55a.6.6 0 01.592.503l.008.097v1.2a.6.6 0 01-1.193.097L16 2.35v-1.2a.6.6 0 01.6-.6z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M10.998 19.171a.138.138 0 01.23.077v.046l-.47 3a1.201 1.201 0 01-1.372 1c-.953-.149-1.336-1.29-.713-1.985l.087-.087 2.238-2.05zM9.21 15.2l-2.562 3.6h2.487l-5.047 4.078c-.127.103-.295-.029-.253-.166l.022-.046L5.663 20H3.75l2.661-4.8H9.21zm4.065-1.385a.12.12 0 01.198.062l.001.045-.522 3.333a1.301 1.301 0 01-1.354 1.099l-.132-.014-.126-.026c-.942-.238-1.295-1.408-.643-2.128l.09-.091 2.488-2.28zM10.5 5.981a5.577 5.577 0 015.242 3.639A4.246 4.246 0 0118 13.364a4.238 4.238 0 01-3.897 4.218l.035-.141.171-1.093a3.04 3.04 0 002.491-2.984 3.044 3.044 0 00-1.613-2.68l-.178-.088-.243-.11-.082-.253A4.381 4.381 0 0010.5 7.18a4.377 4.377 0 00-2.757.978l-.191.165-.262.238-.335-.115a2.286 2.286 0 00-.738-.125c-1.206 0-2.196.94-2.277 2.126l-.005.156.024.517-.373.166A2.677 2.677 0 002 13.727c0 1.319.96 2.417 2.218 2.633l.166.024-.614 1.106A3.877 3.877 0 01.8 13.727c0-1.391.75-2.669 1.942-3.355a3.486 3.486 0 014.262-3.158A5.574 5.574 0 0110.5 5.981zm9.246 4.565a.6.6 0 01.766-.069l.083.07.849.848a.6.6 0 01-.774.912l-.075-.063-.849-.849a.6.6 0 010-.849zM16.6 4.4c1.654 0 3 1.346 3 3 0 1.132-.63 2.118-1.558 2.63a5.44 5.44 0 00-1.344-1.24 6.765 6.765 0 00-2.628-2.996A2.998 2.998 0 0116.6 4.4zm6.25 2.4a.6.6 0 01.097 1.192L22.85 8h-1.2a.6.6 0 01-.097-1.192l.097-.008h1.2zm-2.254-4.244a.6.6 0 01.917.766l-.069.083-.849.849a.598.598 0 01-.848 0 .6.6 0 01-.07-.766l.07-.083.849-.849zm-8.84 0a.6.6 0 01.766-.069l.083.07.849.848a.6.6 0 01-.774.912l-.075-.063-.848-.849a.6.6 0 010-.849zM16.6.55a.6.6 0 01.592.503l.008.097v1.2a.6.6 0 01-1.192.097L16 2.35v-1.2a.6.6 0 01.6-.6z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$g; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-cloudy-thunder-rain",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$f = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherCloudyThunderSnow {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M8.81 15.2l-2.562 3.6h2.487L3.69 22.878c-.128.103-.296-.029-.253-.166l.022-.046L5.263 20H3.351l2.662-4.8H8.81zm3.471-.179l1.04.6-.681 1.179H14V18h-1.36l.68 1.178-1.039.6-.68-1.178-.68 1.178-1.04-.6.68-1.178h-1.36v-1.2h1.36l-.68-1.179 1.04-.6.68 1.179.68-1.179zM10.51 5.95a5.56 5.56 0 015.233 3.674 4.25 4.25 0 012.26 3.753 4.24 4.24 0 01-2.515 3.874l-.187.077v-1.486a1 1 0 00-.403-.802l-.1-.065-2.7-1.55a1 1 0 00-.877-.058l-.118.058-.828.475H5.247l-1.924 3.47a3.865 3.865 0 01-2.52-3.624c0-1.4.756-2.684 1.953-3.366.102-1.822 1.607-3.273 3.443-3.273.27 0 .54.033.805.098A5.53 5.53 0 0110.51 5.95zm9.237 4.596a.6.6 0 01.765-.069l.083.07.85.848a.6.6 0 01-.775.912l-.074-.064-.849-.848a.6.6 0 010-.849zM16.601 4.4c1.654 0 3 1.345 3 3 0 1.132-.63 2.118-1.558 2.63a5.43 5.43 0 00-1.344-1.24 6.768 6.768 0 00-2.628-2.996 2.997 2.997 0 012.53-1.394zm6.25 2.4a.6.6 0 01.097 1.192L22.85 8h-1.2a.6.6 0 01-.098-1.192l.098-.008h1.2zM11.757 2.556a.6.6 0 01.766-.069l.083.07.849.848a.6.6 0 01-.775.912l-.074-.064-.849-.848a.6.6 0 010-.849zm8.84 0a.6.6 0 01.917.766l-.07.083-.848.848a.596.596 0 01-.849 0 .6.6 0 01-.07-.765l.07-.083.85-.849zM16.6.55a.6.6 0 01.592.503l.008.097v1.2a.6.6 0 01-1.193.097L16 2.35v-1.2a.6.6 0 01.6-.6z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M8.81 15.2l-2.562 3.6h2.487l-5.047 4.078c-.127.103-.295-.029-.253-.166l.022-.046L5.263 20H3.35l2.661-4.8H8.81zm3.47-.178l1.04.6-.68 1.178H14V18h-1.36l.68 1.178-1.04.6-.68-1.178-.68 1.178-1.04-.6.68-1.178H9.2v-1.2h1.36l-.68-1.178 1.04-.6.68 1.178.68-1.178zm-1.78-9.04a5.577 5.577 0 015.242 3.638A4.246 4.246 0 0118 13.364a4.238 4.238 0 01-2.607 3.905l-.193.075v-1.306a3.039 3.039 0 001.6-2.674 3.044 3.044 0 00-1.613-2.68l-.178-.088-.243-.11-.082-.253A4.381 4.381 0 0010.5 7.18a4.377 4.377 0 00-2.757.978l-.191.165-.262.238-.335-.115a2.286 2.286 0 00-.738-.125c-1.206 0-2.196.94-2.277 2.126l-.005.156.024.517-.373.166A2.677 2.677 0 002 13.727c0 1.19.781 2.197 1.857 2.542l.164.047-.595 1.074A3.876 3.876 0 01.8 13.727c0-1.391.75-2.669 1.942-3.355a3.486 3.486 0 014.262-3.158A5.574 5.574 0 0110.5 5.981zm9.246 4.564a.6.6 0 01.766-.069l.083.07.849.848a.6.6 0 01-.774.912l-.075-.063-.849-.849a.6.6 0 010-.849zM16.6 4.4c1.654 0 3 1.346 3 3 0 1.132-.63 2.118-1.558 2.63a5.44 5.44 0 00-1.344-1.24 6.765 6.765 0 00-2.628-2.996A2.998 2.998 0 0116.6 4.4zm6.25 2.4a.6.6 0 01.097 1.192L22.85 8h-1.2a.6.6 0 01-.097-1.192l.097-.008h1.2zm-2.254-4.244a.6.6 0 01.917.766l-.069.083-.849.849a.598.598 0 01-.848 0 .6.6 0 01-.07-.766l.07-.083.849-.849zm-8.84 0a.6.6 0 01.766-.069l.083.07.849.848a.6.6 0 01-.774.912l-.075-.063-.848-.849a.6.6 0 010-.849zM16.6.55a.6.6 0 01.592.503l.008.097v1.2a.6.6 0 01-1.192.097L16 2.35v-1.2a.6.6 0 01.6-.6z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$f; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-cloudy-thunder-snow",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$e = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherHeavySleet {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M14.747 18.404a.174.174 0 01.289.103v.052l-.588 3.748a1.502 1.502 0 01-1.716 1.252c-1.199-.188-1.675-1.632-.876-2.498l.094-.093 2.797-2.564zM9.85 14.218l1.3.75-.886 1.532H12V18h-1.667l.816 1.413-1.299.75L9 18.69l-.85 1.473-1.3-.75L7.666 18H6v-1.5h1.735l-.885-1.532 1.3-.75L9 15.69l.85-1.472zm7.744-2.508a.15.15 0 01.249.083v.05l-.653 4.166a1.626 1.626 0 01-1.858 1.356c-1.3-.203-1.817-1.771-.946-2.708l.098-.098 3.11-2.85zM13.51.547a7.596 7.596 0 017.15 5.02 5.805 5.805 0 013.088 5.127c0 3.05-2.357 5.55-5.332 5.767l.031-.124.027-.127.652-4.167a1.45 1.45 0 00-2.29-1.391l-.12.098-3.11 2.85a2.9 2.9 0 00-.574.726l-.104.202L9.5 12.54a1 1 0 00-.88-.06l-.12.058-3.297 1.893a1.001 1.001 0 00-.495.75l-.007.117v1.116a5.275 5.275 0 01-4.45-5.216A5.299 5.299 0 012.915 6.6c.14-2.49 2.197-4.471 4.705-4.471.369 0 .737.045 1.1.133A7.558 7.558 0 0113.51.547z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M14.748 18.404a.173.173 0 01.288.103l-.001.051-.587 3.749a1.502 1.502 0 01-1.716 1.252c-1.199-.188-1.676-1.632-.876-2.498l.094-.093 2.798-2.564zM9.85 14.217l1.298.75-.884 1.533H12V18h-1.666l.816 1.413-1.3.75L9 18.69l-.85 1.473-1.3-.75L7.668 18H6v-1.5h1.736l-.885-1.533 1.298-.75L9 15.69l.85-1.473zm7.743-2.508a.15.15 0 01.248.084v.05l-.651 4.166a1.626 1.626 0 01-1.859 1.357c-1.3-.204-1.817-1.772-.946-2.71l.099-.097 3.109-2.85zM13.511.566a7.596 7.596 0 017.15 5.019 5.805 5.805 0 013.089 5.127c0 2.982-2.252 5.443-5.134 5.754l.03-.11.026-.114.21-1.335a4.285 4.285 0 003.368-4.195A4.3 4.3 0 0019.937 6.9l-.196-.096-.303-.138-.101-.317c-.816-2.562-3.157-4.284-5.825-4.284-1.42 0-2.79.501-3.887 1.415l-.216.188-.329.302-.421-.146a3.178 3.178 0 00-1.037-.176A3.206 3.206 0 004.918 5.14c-.465.728-.52 1.42-.506 1.912l.03.498-.466.209a3.791 3.791 0 00-2.226 3.456A3.784 3.784 0 004.312 14.8l.188.058V16.4a5.282 5.282 0 01-4.25-5.185 5.299 5.299 0 012.667-4.598c.14-2.49 2.197-4.472 4.705-4.472.369 0 .736.045 1.1.134a7.558 7.558 0 014.79-1.715z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$e; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-heavy-sleet",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$d = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherHeavySnow {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M8.35 17.807l1.299.75L8.816 20h1.683v1.5H8.781l.868 1.503-1.3.75-.85-1.473-.85 1.473-1.3-.75.869-1.503H4.499V20h1.684l-.833-1.443 1.299-.75.85 1.473.85-1.473zm6.5-4.5l1.298.75-.833 1.443H17V17h-1.72l.868 1.503-1.299.75L14 17.78l-.85 1.473-1.3-.75.868-1.503H11v-1.5h1.683l-.832-1.443 1.298-.75L14 14.78l.85-1.473zM13.51.547a7.596 7.596 0 017.15 5.02 5.805 5.805 0 013.088 5.127c0 3.015-2.302 5.49-5.229 5.757l-.22.016v-2.089a1 1 0 00-.402-.802l-.099-.065-3.302-1.903a1.001 1.001 0 00-.877-.06l-.119.058-3.298 1.889a.999.999 0 00-.496.75l-.007.117v2.11l-4.479-.004C2.455 16.32.25 14.017.25 11.198A5.299 5.299 0 012.916 6.6c.14-2.49 2.196-4.47 4.704-4.47.37 0 .737.045 1.1.133A7.558 7.558 0 0113.51.547z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M8.35 17.807l1.3.75L8.816 20H10.5v1.5H8.781l.868 1.503-1.298.75L7.5 22.28l-.85 1.473-1.3-.75.869-1.503H4.5V20h1.684l-.833-1.443 1.298-.75.851 1.474.85-1.474zm6.5-4.5l1.3.75-.833 1.443H17V17h-1.719l.868 1.503-1.299.75L14 17.78l-.85 1.473-1.3-.75.87-1.503H11v-1.5h1.684l-.833-1.443 1.298-.75L14 14.78l.85-1.473zM13.512.565a7.596 7.596 0 017.149 5.019 5.803 5.803 0 013.089 5.127c0 2.945-2.196 5.379-5.026 5.739l-.224.024v-1.507c2.108-.251 3.75-2.063 3.75-4.256a4.3 4.3 0 00-2.314-3.813l-.195-.095-.303-.138-.101-.317c-.816-2.563-3.157-4.284-5.825-4.284-1.42 0-2.79.5-3.888 1.415l-.216.188-.328.301-.422-.146a3.178 3.178 0 00-1.036-.176 3.21 3.21 0 00-2.806 1.665 3.382 3.382 0 00-.405 1.84l.031.4-.466.209a3.791 3.791 0 00-2.226 3.456c0 2.02 1.579 3.677 3.557 3.78L5.5 15h4v1.5h-4c-2.895 0-5.25-2.37-5.25-5.284a5.299 5.299 0 012.667-4.598c.14-2.49 2.197-4.472 4.705-4.472.369 0 .736.045 1.1.134a7.558 7.558 0 014.79-1.715z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$d; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-heavy-snow",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$c = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherMoonClear {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M15.969 17.442c-.649-.252-3.322-1.348-4.553-4.569-1.531-4.01.61-7.204 1.754-8.37l.031-.029a7.877 7.877 0 012.181-1.556l-.006-.001A9.404 9.404 0 004.32 8.968a9.368 9.368 0 00-.218 5.499 9.398 9.398 0 004.22 5.649 9.339 9.339 0 006.245 1.271 9.327 9.327 0 006.14-3.636 7.93 7.93 0 01-4.739-.31z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M15.969 17.442c-.649-.252-3.322-1.348-4.553-4.569-1.531-4.01.61-7.204 1.754-8.37l.031-.029a7.877 7.877 0 012.181-1.556l-.006-.001A9.404 9.404 0 004.32 8.968a9.368 9.368 0 00-.218 5.499 9.398 9.398 0 004.22 5.649 9.339 9.339 0 006.245 1.271 9.327 9.327 0 006.14-3.636 7.93 7.93 0 01-4.739-.31z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$c; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-moon-clear",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$b = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherMoonCloudyA {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M10.1 8.381a5.577 5.577 0 015.242 3.639 4.246 4.246 0 012.258 3.744 4.242 4.242 0 01-4.024 4.23l-.212.006h-9.09A3.877 3.877 0 01.4 16.127a3.88 3.88 0 011.941-3.355 3.486 3.486 0 014.262-3.158A5.575 5.575 0 0110.1 8.381zm8.077-5.476a5.383 5.383 0 012.621-.03 4.55 4.55 0 003.058 8.515 5.374 5.374 0 01-2.934 1.969 5.37 5.37 0 01-2.685.015 5.421 5.421 0 00-1.938-2.184 6.749 6.749 0 00-2.137-2.675 5.404 5.404 0 014.015-5.61z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M10.1 8.381a5.577 5.577 0 015.242 3.639 4.246 4.246 0 012.258 3.744 4.242 4.242 0 01-4.025 4.23l-.211.006H4.273A3.877 3.877 0 01.4 16.127c0-1.391.75-2.669 1.942-3.355a3.486 3.486 0 014.262-3.158A5.574 5.574 0 0110.1 8.381zm0 1.2a4.377 4.377 0 00-2.758.978l-.191.165-.262.238-.335-.115a2.286 2.286 0 00-.738-.125c-1.206 0-2.196.94-2.277 2.126l-.005.156.024.517-.373.166a2.677 2.677 0 00-1.585 2.44 2.676 2.676 0 002.504 2.668l.169.005h9.09a3.04 3.04 0 003.037-3.036 3.044 3.044 0 00-1.613-2.68l-.178-.088-.243-.11-.082-.253A4.381 4.381 0 0010.1 9.58zm8.076-6.675a5.38 5.38 0 012.622-.03 4.549 4.549 0 003.057 8.515 5.376 5.376 0 01-2.934 1.968 5.37 5.37 0 01-2.685.015 5.42 5.42 0 00-1.938-2.184 6.748 6.748 0 00-2.137-2.676 5.403 5.403 0 014.015-5.608z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$b; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-moon-cloudy-a",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$a = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherMoonCloudyB {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M11.41 7.252a6.077 6.077 0 015.72 4.015 4.644 4.644 0 012.47 4.102c0 2.483-1.95 4.515-4.39 4.626L15 20H5C2.684 20 .8 18.104.8 15.772c0-1.53.826-2.932 2.134-3.678.112-1.992 1.757-3.577 3.764-3.577.295 0 .59.036.88.107a6.044 6.044 0 013.832-1.372zm7.25-3.572a3.83 3.83 0 011.867-.022 3.24 3.24 0 002.177 6.064 3.832 3.832 0 01-3.649 1.483 5.804 5.804 0 00-.967-.769 7.32 7.32 0 00-2.294-2.904A3.847 3.847 0 0118.66 3.68z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M11.41 7.252a6.077 6.077 0 015.719 4.015A4.644 4.644 0 0119.6 15.37c0 2.483-1.95 4.515-4.39 4.626L15 20H5C2.684 20 .8 18.104.8 15.772c0-1.53.826-2.932 2.134-3.678.111-1.992 1.757-3.577 3.763-3.577.295 0 .59.036.88.107a6.047 6.047 0 013.832-1.372zm0 1.2a4.852 4.852 0 00-3.085 1.11l-.198.172-.263.24-.337-.116a2.542 2.542 0 00-.83-.14c-.94 0-1.764.512-2.212 1.275a2.696 2.696 0 00-.358 1.495l.027.352-.373.168A3.033 3.033 0 002 15.772c0 1.61 1.251 2.93 2.824 3.023L5 18.8h10c1.875 0 3.4-1.54 3.4-3.43a3.44 3.44 0 00-1.828-3.04l-.18-.087-.242-.11-.08-.255a4.883 4.883 0 00-4.66-3.426zm7.25-4.772a3.83 3.83 0 011.868-.022 3.239 3.239 0 002.177 6.064 3.829 3.829 0 01-3.65 1.483 5.807 5.807 0 00-.967-.769 7.317 7.317 0 00-2.294-2.904 3.847 3.847 0 012.867-3.852z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$a; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-moon-cloudy-b",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$9 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherMoonRain {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M8.966 18.196a.142.142 0 01.234.078v.047l-.479 3.064a1.226 1.226 0 01-1.402 1.022c-.974-.152-1.364-1.319-.728-2.027l.09-.09 2.285-2.094zm-1.25-4.16a.142.142 0 01.234.08v.046l-.529 3.387-.014.051a1.34 1.34 0 11-2.593-.66c.053-.17.141-.335.27-.482l.105-.106 2.527-2.316zm4.934-1.304a.142.142 0 01.234.079v.047l-.615 3.935a1.537 1.537 0 01-1.756 1.28c-1.226-.191-1.714-1.67-.896-2.555l.096-.095 2.937-2.691zm-2.543-6.769a5.56 5.56 0 015.233 3.674 4.25 4.25 0 012.26 3.753c0 2.265-1.775 4.121-3.998 4.231l-.21.006h-.132a3.03 3.03 0 00.161-.48l.034-.168.615-3.936a1.34 1.34 0 00-2.122-1.286l-.11.091L9.14 14.32a1.342 1.342 0 00-2.124-1.26l-.11.09-2.528 2.317c-.331.304-.577.69-.71 1.118-.099.318-.13.648-.1.973A3.859 3.859 0 01.4 13.759c0-1.4.755-2.683 1.952-3.365C2.455 8.572 3.96 7.12 5.796 7.12c.27 0 .54.033.805.098a5.53 5.53 0 013.506-1.256zm8.07-5.458a5.383 5.383 0 012.621-.03 4.548 4.548 0 003.057 8.515 5.373 5.373 0 01-2.933 1.969 5.37 5.37 0 01-2.685.015A5.421 5.421 0 0016.3 8.79a6.749 6.749 0 00-2.137-2.676A5.404 5.404 0 0118.177.505z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M8.965 18.196a.141.141 0 01.235.078v.047l-.48 3.063a1.227 1.227 0 01-1.401 1.023c-.974-.152-1.365-1.319-.728-2.027l.089-.09 2.285-2.094zm-1.25-4.16a.142.142 0 01.235.079v.047l-.53 3.386-.045.181a1.339 1.339 0 01-1.488.937c-.812-.127-1.251-.899-1.105-1.602l.032-.123.046-.127a1.32 1.32 0 01.224-.356l.104-.106 2.527-2.316zm4.934-1.304a.141.141 0 01.235.079v.047l-.616 3.935a1.536 1.536 0 01-1.755 1.28c-1.227-.191-1.715-1.669-.897-2.554l.096-.096 2.937-2.691zm-2.55-6.75a5.577 5.577 0 015.243 3.638 4.245 4.245 0 012.258 3.744 4.242 4.242 0 01-4.025 4.23l-.211.006h-.085a2.88 2.88 0 00.132-.407l.043-.215.092-.587a3.038 3.038 0 002.854-3.027 3.044 3.044 0 00-1.613-2.68l-.178-.088-.243-.11-.082-.253A4.381 4.381 0 0010.1 7.18a4.377 4.377 0 00-2.757.978l-.191.165-.262.238-.335-.115a2.286 2.286 0 00-.738-.125c-1.206 0-2.196.94-2.277 2.126l-.005.156.024.517-.373.166a2.677 2.677 0 00-1.585 2.44c0 1.296.927 2.379 2.152 2.621-.158.37-.22.776-.187 1.184A3.877 3.877 0 01.4 13.727c0-1.391.75-2.669 1.942-3.355a3.486 3.486 0 014.262-3.158A5.574 5.574 0 0110.1 5.981zM18.177.504a5.38 5.38 0 012.622-.03 4.548 4.548 0 003.057 8.515 5.376 5.376 0 01-2.934 1.969 5.37 5.37 0 01-2.685.015 5.42 5.42 0 00-1.938-2.184 6.748 6.748 0 00-2.137-2.676A5.403 5.403 0 0118.176.505z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$9; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-moon-rain",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$8 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherMoonSleet {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M11.199 19.171a.138.138 0 01.23.077v.046l-.47 3a1.201 1.201 0 01-1.372 1c-.954-.149-1.337-1.29-.713-1.985l.087-.088 2.238-2.05zm-3.72-3.348l1.039.6-.68 1.178h1.36v1.2h-1.36l.68 1.179-1.04.6-.68-1.179-.68 1.179-1.04-.6.68-1.179h-1.36v-1.2h1.36l-.68-1.178 1.04-.6.68 1.178.68-1.178zm5.997-2.008a.12.12 0 01.197.062l.002.044-.522 3.334a1.301 1.301 0 01-1.487 1.085c-1.034-.162-1.448-1.403-.769-2.154l.091-.091 2.488-2.28zm-3.37-7.865a5.56 5.56 0 015.234 3.674 4.25 4.25 0 012.26 3.753c0 2.013-1.403 3.7-3.276 4.128l.015-.065.521-3.333a1.32 1.32 0 00-2.083-1.269l-.108.089-2.491 2.283a2.35 2.35 0 00-.268.292l-.114.158-2.498-1.443a1 1 0 00-.88-.06l-.12.06-2.7 1.554a1 1 0 00-.493.749l-.007.118v.79A3.862 3.862 0 01.4 13.746c0-1.4.755-2.684 1.952-3.366.102-1.822 1.607-3.273 3.443-3.273.27 0 .54.033.805.098a5.53 5.53 0 013.506-1.255zM18.178.505a5.37 5.37 0 012.621-.03 4.548 4.548 0 003.057 8.515 5.377 5.377 0 01-2.933 1.969 5.37 5.37 0 01-2.685.015A5.424 5.424 0 0016.3 8.79a6.749 6.749 0 00-2.137-2.676A5.403 5.403 0 0118.177.505z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M11.198 19.171a.138.138 0 01.23.077v.046l-.47 3a1.201 1.201 0 01-1.372 1c-.953-.149-1.336-1.29-.713-1.985l.087-.087 2.238-2.05zm-3.718-3.35l1.04.6-.68 1.179H9.2v1.2H7.84l.68 1.178-1.04.6L6.8 19.4l-.68 1.178-1.04-.6.68-1.178H4.4v-1.2h1.36l-.68-1.178 1.04-.6L6.8 17l.68-1.178zm5.995-2.006a.12.12 0 01.198.062l.001.045-.522 3.333a1.301 1.301 0 01-1.354 1.099l-.132-.014-.126-.026c-.942-.238-1.295-1.408-.643-2.128l.09-.091 2.488-2.28zM10.1 5.981a5.577 5.577 0 015.242 3.639 4.245 4.245 0 012.258 3.744 4.24 4.24 0 01-3.273 4.12l.011-.043.2-1.278a3.04 3.04 0 001.862-2.8 3.044 3.044 0 00-1.613-2.68l-.178-.087-.243-.11-.082-.253A4.381 4.381 0 0010.1 7.18a4.377 4.377 0 00-2.757.978l-.191.165-.262.238-.335-.115a2.286 2.286 0 00-.738-.125c-1.206 0-2.196.94-2.277 2.126l-.005.156.024.517-.373.166a2.677 2.677 0 00-1.585 2.44c0 1.028.584 1.921 1.437 2.368l.163.079v1.272a3.877 3.877 0 01-2.8-3.719c0-1.391.75-2.669 1.942-3.355a3.486 3.486 0 014.262-3.158A5.574 5.574 0 0110.1 5.981zM18.176.505a5.38 5.38 0 012.622-.03 4.548 4.548 0 003.057 8.515 5.376 5.376 0 01-2.934 1.969 5.37 5.37 0 01-2.685.015 5.42 5.42 0 00-1.938-2.184 6.748 6.748 0 00-2.137-2.676A5.403 5.403 0 0118.176.505z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$8; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-moon-sleet",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$7 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherMoonSnow {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M6.681 18.621l1.04.6L7.04 20.4H8.4v1.2H7.04l.68 1.178-1.039.6-.68-1.178-.68 1.178-1.04-.6.68-1.178h-1.36v-1.2h1.36l-.68-1.179 1.04-.6L6 19.8l.68-1.179zm5.2-3.6l1.04.6-.681 1.179h1.36V18h-1.36l.68 1.178-1.039.6-.68-1.178-.68 1.178-1.04-.6.68-1.178h-1.36v-1.2h1.36l-.68-1.179 1.04-.6.68 1.179.68-1.179zM10.108 5.95a5.56 5.56 0 015.233 3.674 4.25 4.25 0 012.261 3.753 4.24 4.24 0 01-2.514 3.873l-.187.078v-1.482a1 1 0 00-.4-.8l-.1-.065-2.7-1.565a1 1 0 00-.882-.06l-.119.06-2.699 1.554a1 1 0 00-.493.748l-.007.118v1.757l-.996-.581a1 1 0 00-.889-.06l-.12.06-1.012.591H4.04a3.858 3.858 0 01-3.639-3.857c0-1.4.755-2.684 1.952-3.366.102-1.822 1.608-3.273 3.443-3.273.27 0 .54.033.806.098a5.53 5.53 0 013.505-1.255zm8.07-5.445a5.37 5.37 0 012.62-.03 4.548 4.548 0 003.057 8.515 5.377 5.377 0 01-2.933 1.969 5.37 5.37 0 01-2.685.015A5.424 5.424 0 0016.3 8.79a6.749 6.749 0 00-2.137-2.676A5.403 5.403 0 0118.177.505z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M6.68 18.622l1.04.6-.68 1.178H8.4v1.2H7.04l.68 1.178-1.04.6L6 22.2l-.68 1.178-1.04-.6.68-1.178H3.6v-1.2h1.36l-.68-1.178 1.04-.6L6 19.8l.68-1.178zm5.2-3.6l1.04.6-.68 1.178h1.36V18h-1.36l.68 1.178-1.04.6-.68-1.178-.68 1.178-1.04-.6.68-1.178H8.8v-1.2h1.36l-.68-1.178 1.04-.6.68 1.178.68-1.178zm-1.78-9.04a5.577 5.577 0 015.242 3.638 4.245 4.245 0 012.258 3.744 4.238 4.238 0 01-2.607 3.905l-.193.075v-1.306a3.039 3.039 0 001.6-2.674 3.044 3.044 0 00-1.613-2.68l-.178-.088-.243-.11-.082-.253A4.381 4.381 0 0010.1 7.18a4.377 4.377 0 00-2.757.978l-.191.165-.262.238-.335-.115a2.286 2.286 0 00-.738-.125c-1.206 0-2.196.94-2.277 2.126l-.005.156.024.517-.373.166a2.677 2.677 0 00-1.585 2.44 2.676 2.676 0 002.504 2.668l.169.005H7.6v1.2H4.273A3.877 3.877 0 01.4 13.727c0-1.391.75-2.669 1.942-3.355a3.486 3.486 0 014.262-3.158A5.574 5.574 0 0110.1 5.981zM18.176.504a5.38 5.38 0 012.622-.03 4.548 4.548 0 003.057 8.515 5.376 5.376 0 01-2.934 1.969 5.37 5.37 0 01-2.685.015 5.42 5.42 0 00-1.938-2.184 6.748 6.748 0 00-2.137-2.676A5.403 5.403 0 0118.176.505z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$7; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-moon-snow",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$6 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherMoonThunderRain {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M10.598 19.171a.138.138 0 01.23.077v.046l-.47 3a1.201 1.201 0 01-1.372 1c-.953-.149-1.336-1.291-.713-1.984l.087-.088 2.238-2.05zM8.81 15.2l-2.562 3.6h2.487l-5.047 4.078c-.127.103-.294-.029-.252-.166l.022-.046L5.263 20H3.351l2.661-4.8H8.81zm4.066-1.385a.12.12 0 01.197.062l.001.045-.521 3.333a1.3 1.3 0 01-1.487 1.085c-1.035-.161-1.449-1.403-.769-2.154l.09-.091 2.489-2.28zM10.22 5.962A5.577 5.577 0 0115.463 9.6a4.246 4.246 0 012.258 3.743 4.24 4.24 0 01-3.908 4.22l.024-.109.522-3.332a1.42 1.42 0 00-2.24-1.365l-.118.095L10.86 13.9H5.247l-1.952 3.52a3.878 3.878 0 01-2.774-3.712c0-1.392.75-2.669 1.942-3.355a3.486 3.486 0 014.261-3.158 5.575 5.575 0 013.496-1.233zM18.297.486a5.383 5.383 0 012.621-.03 4.55 4.55 0 003.058 8.515 5.374 5.374 0 01-2.934 1.969 5.37 5.37 0 01-2.685.015 5.421 5.421 0 00-1.938-2.184 6.749 6.749 0 00-2.137-2.676A5.404 5.404 0 0118.297.486z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M10.598 19.171a.138.138 0 01.23.077v.046l-.47 3a1.201 1.201 0 01-1.372 1c-.953-.149-1.336-1.29-.713-1.985l.087-.087 2.238-2.05zM8.81 15.2l-2.562 3.6h2.487l-5.047 4.078c-.127.103-.295-.029-.253-.166l.022-.046L5.263 20H3.35l2.661-4.8H8.81zm4.065-1.385a.12.12 0 01.198.062l.001.045-.522 3.333a1.301 1.301 0 01-1.354 1.099l-.132-.014-.126-.026c-.942-.238-1.295-1.408-.643-2.128l.09-.091 2.488-2.28zM10.1 5.981a5.577 5.577 0 015.242 3.639 4.245 4.245 0 012.258 3.744 4.239 4.239 0 01-3.897 4.218l.035-.141.171-1.093a3.04 3.04 0 002.491-2.984 3.044 3.044 0 00-1.613-2.68l-.178-.088-.243-.11-.082-.253A4.381 4.381 0 0010.1 7.18a4.377 4.377 0 00-2.757.978l-.191.165-.262.238-.335-.115a2.286 2.286 0 00-.738-.125c-1.206 0-2.196.94-2.277 2.126l-.005.156.024.517-.373.166a2.677 2.677 0 00-1.585 2.44c0 1.319.96 2.417 2.218 2.633l.166.024-.614 1.106A3.877 3.877 0 01.4 13.727c0-1.391.75-2.669 1.942-3.355a3.486 3.486 0 014.262-3.158A5.574 5.574 0 0110.1 5.981zM18.176.505a5.38 5.38 0 012.622-.03 4.548 4.548 0 003.057 8.515 5.376 5.376 0 01-2.934 1.969 5.37 5.37 0 01-2.685.015 5.42 5.42 0 00-1.938-2.184 6.748 6.748 0 00-2.137-2.676A5.403 5.403 0 0118.176.505z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$6; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-moon-thunder-rain",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$5 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherMoonThunderSnow {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M8.41 15.2l-2.562 3.6h2.487L3.29 22.878c-.128.103-.296-.029-.254-.166l.023-.046L4.863 20H2.951l2.662-4.8H8.41zm3.471-.178l1.04.6-.681 1.178h1.36V18h-1.36l.68 1.179-1.039.6-.68-1.179-.68 1.179-1.04-.6.68-1.179h-1.36v-1.2h1.36l-.68-1.178 1.04-.6.68 1.178.68-1.178zM10.107 5.98a5.56 5.56 0 015.233 3.674 4.25 4.25 0 012.26 3.753 4.239 4.239 0 01-2.606 3.913l-.193.075V15.9a.998.998 0 00-.401-.801l-.099-.065-2.6-1.504a1 1 0 00-.882-.059l-.12.06-.779.45L4.906 14l-1.902 3.431A3.864 3.864 0 01.4 13.777c0-1.4.755-2.683 1.952-3.365.102-1.822 1.607-3.273 3.443-3.273.27 0 .54.033.805.098a5.53 5.53 0 013.506-1.256zm8.07-5.476a5.377 5.377 0 012.621-.03 4.548 4.548 0 003.057 8.515 5.377 5.377 0 01-2.933 1.969 5.37 5.37 0 01-2.685.015A5.421 5.421 0 0016.3 8.79a6.749 6.749 0 00-2.137-2.676A5.404 5.404 0 0118.177.505z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M8.41 15.2l-2.562 3.6h2.487l-5.047 4.078c-.127.103-.295-.029-.253-.166l.022-.046L4.863 20H2.95l2.661-4.8H8.41zm3.47-.178l1.04.6-.68 1.178h1.36V18h-1.36l.68 1.178-1.04.6-.68-1.178-.68 1.178-1.04-.6.68-1.178H8.8v-1.2h1.36l-.68-1.178 1.04-.6.68 1.178.68-1.178zm-1.78-9.04a5.577 5.577 0 015.242 3.638 4.245 4.245 0 012.258 3.744 4.238 4.238 0 01-2.607 3.905l-.193.075v-1.306a3.039 3.039 0 001.6-2.674 3.044 3.044 0 00-1.613-2.68l-.178-.088-.243-.11-.082-.253A4.381 4.381 0 0010.1 7.18a4.377 4.377 0 00-2.757.978l-.191.165-.262.238-.335-.115a2.286 2.286 0 00-.738-.125c-1.206 0-2.196.94-2.277 2.126l-.005.156.024.517-.373.166a2.677 2.677 0 00-1.585 2.44c0 1.19.781 2.197 1.857 2.542l.164.047-.595 1.074A3.876 3.876 0 01.4 13.727c0-1.391.75-2.669 1.942-3.355a3.486 3.486 0 014.262-3.158A5.574 5.574 0 0110.1 5.981zM18.176.504a5.38 5.38 0 012.622-.03 4.548 4.548 0 003.057 8.515 5.376 5.376 0 01-2.934 1.969 5.37 5.37 0 01-2.685.015 5.42 5.42 0 00-1.938-2.184 6.748 6.748 0 00-2.137-2.676A5.403 5.403 0 0118.176.505z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$5; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-moon-thunder-snow",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherOvercast {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M15.288 11.384c1.133 0 2.226.375 3.12 1.066.213-.045.421-.067.628-.067a3.276 3.276 0 013.255 2.934A3.614 3.614 0 0124 18.386a3.618 3.618 0 01-3.422 3.609l-.192.005h-7.954A3.936 3.936 0 018.5 18.068c0-1.43.783-2.744 2.02-3.433a5.104 5.104 0 014.768-3.251zM11.851 1.26a6.788 6.788 0 016.389 4.485A5.188 5.188 0 0121 10.327c0 .391-.047.771-.13 1.138a4.576 4.576 0 00-2.133-.372 6.444 6.444 0 00-3.449-1.01 6.375 6.375 0 00-5.798 3.662 5.203 5.203 0 00-1.448 1.492l-.153.254-3.446-.004C1.972 15.355 0 13.297 0 10.777 0 9.07.923 7.501 2.384 6.67c.124-2.225 1.962-3.996 4.204-3.996.33 0 .658.04.983.12a6.755 6.755 0 014.28-1.533z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M15.288 11.384c1.133 0 2.226.375 3.12 1.066.213-.045.421-.067.628-.067a3.276 3.276 0 013.255 2.934A3.615 3.615 0 0124 18.386a3.618 3.618 0 01-3.422 3.609l-.192.005h-7.954A3.936 3.936 0 018.5 18.068c0-1.43.783-2.744 2.02-3.433a5.104 5.104 0 014.768-3.251zm0 1.5a3.61 3.61 0 00-3.383 2.329l-.066.185-.101.318-.304.136A2.436 2.436 0 0010 18.069a2.435 2.435 0 002.272 2.427l.16.005h7.954a2.116 2.116 0 002.114-2.114c0-.778-.43-1.49-1.11-1.858l-.149-.073-.47-.209.027-.472c.013-.35-.02-.674-.26-1.057a1.775 1.775 0 00-1.207-.81c-.383-.065-.676.012-.976.115l-.305.107-.327-.298a3.611 3.611 0 00-2.435-.947zm-3.45-11.583a6.816 6.816 0 016.405 4.44A5.191 5.191 0 0121 10.319c0 .325-.034.642-.091.95a4.662 4.662 0 00-1.46-.365c.03-.191.051-.386.051-.585a3.69 3.69 0 00-1.987-3.265l-.185-.09-.304-.137-.102-.317A5.322 5.322 0 0011.84 2.8c-1.233 0-2.423.43-3.38 1.215l-.2.174-.328.297-.418-.143a2.767 2.767 0 00-.894-.151 2.766 2.766 0 00-2.757 2.594l-.005.168.03.641-.466.208A3.244 3.244 0 001.5 10.761a3.243 3.243 0 003.055 3.234L4.74 14h4.1a5.454 5.454 0 00-1.051 1.262l-.136.238H4.739A4.744 4.744 0 010 10.761c0-1.699.914-3.259 2.367-4.1a4.267 4.267 0 014.252-3.967c.32 0 .64.037.955.11a6.815 6.815 0 014.265-1.502z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-overcast",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherRain {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M11.959 17.134a.177.177 0 01.294.105l-.001.053-.599 3.828A1.534 1.534 0 019.9 22.398c-1.224-.19-1.711-1.666-.895-2.55l.096-.095 2.857-2.619zm-1.563-5.199c.11-.1.277-.028.294.105v.053l-.662 4.233a1.676 1.676 0 01-1.917 1.397c-1.341-.21-1.874-1.827-.976-2.793l.102-.1 3.159-2.895zm6.168-1.63a.177.177 0 01.294.105l-.001.053-.77 4.919a1.92 1.92 0 01-2.194 1.6c-1.539-.24-2.148-2.1-1.11-3.205l.11-.108 3.67-3.364zm-3.05-9.74a7.596 7.596 0 017.149 5.019 5.805 5.805 0 013.089 5.127c0 3.118-2.46 5.668-5.53 5.785l-.22.004-.928-.001a3.41 3.41 0 00.25-.675l.048-.241.77-4.92a1.475 1.475 0 00-2.336-1.416l-.122.1-3.67 3.364-.124.12.084-.537a1.478 1.478 0 00-2.334-1.418l-.121.1-3.16 2.895a2.948 2.948 0 00-.958 2.421l.022.193h-.2c-2.765-.146-4.971-2.45-4.971-5.27a5.299 5.299 0 012.667-4.598c.14-2.489 2.196-4.471 4.704-4.471.37 0 .737.045 1.1.134a7.558 7.558 0 014.79-1.715z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M11.957 17.134a.177.177 0 01.294.105l-.001.053-.599 3.828a1.534 1.534 0 01-1.752 1.278c-1.225-.19-1.712-1.666-.896-2.55l.097-.095 2.857-2.619zm-1.563-5.199c.11-.1.277-.028.294.105v.053l-.663 4.233a1.676 1.676 0 01-1.916 1.397c-1.341-.21-1.874-1.827-.976-2.793l.102-.1 3.159-2.895zm6.167-1.63c.11-.1.277-.028.295.105l-.001.053-.77 4.919a1.92 1.92 0 01-2.194 1.6c-1.539-.24-2.148-2.1-1.11-3.205l.11-.108 3.67-3.364zm-3.05-9.74a7.596 7.596 0 017.15 5.019 5.805 5.805 0 013.089 5.127c0 3.118-2.46 5.668-5.53 5.785L18 16.5h-.695c.093-.207.167-.426.218-.655l.044-.232.096-.613H18c2.343 0 4.25-1.924 4.25-4.289A4.3 4.3 0 0019.936 6.9l-.195-.096-.303-.138-.101-.317c-.816-2.562-3.157-4.284-5.825-4.284A6.07 6.07 0 009.624 3.48l-.216.188-.328.302-.422-.146a3.178 3.178 0 00-1.036-.176A3.214 3.214 0 004.747 5.44c-.313.631-.345 1.15-.33 1.634l.025.476-.466.209a3.791 3.791 0 00-2.226 3.456c0 2.046 1.619 3.714 3.631 3.777a3.14 3.14 0 00-.16 1.492C2.456 16.34.25 14.035.25 11.215a5.299 5.299 0 012.667-4.598c.14-2.489 2.197-4.471 4.705-4.471.369 0 .736.045 1.1.134a7.558 7.558 0 014.79-1.715z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-rain",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherSunny {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 19.75a.75.75 0 01.743.648l.007.102v2.75a.75.75 0 01-1.493.102l-.007-.102V20.5a.75.75 0 01.75-.75zm-6.54-2.27a.75.75 0 011.133.977l-.072.084-1.946 1.944a.748.748 0 01-1.06 0 .75.75 0 01-.073-.976l.072-.085L5.46 17.48zm12.02 0a.75.75 0 01.976-.073l.085.073 1.945 1.944a.75.75 0 01-.968 1.14l-.093-.079-1.945-1.944a.75.75 0 010-1.061zM12 6.75a5.25 5.25 0 110 10.5 5.25 5.25 0 010-10.5zm-8.5 4.5a.75.75 0 01.102 1.493l-.102.007H.75a.75.75 0 01-.102-1.493l.102-.007H3.5zm19.75 0a.75.75 0 01.102 1.493l-.102.007H20.5a.75.75 0 01-.102-1.493l.102-.007h2.75zm-3.825-7.736a.75.75 0 011.134.977l-.073.085-1.945 1.944a.748.748 0 01-1.06 0 .75.75 0 01-.073-.977l.072-.084 1.945-1.944zm-15.91 0a.75.75 0 01.976-.072l.084.072L6.521 5.46a.75.75 0 01-.969 1.14l-.092-.08-1.946-1.944a.75.75 0 010-1.061zM12 0a.75.75 0 01.743.648l.007.102V3.5a.75.75 0 01-1.493.102L11.25 3.5V.75A.75.75 0 0112 0z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 19.75a.75.75 0 01.743.648l.007.102v2.75a.75.75 0 01-1.493.102l-.007-.102V20.5a.75.75 0 01.75-.75zm-6.54-2.27a.75.75 0 011.133.977l-.072.084-1.946 1.944a.748.748 0 01-1.06 0 .75.75 0 01-.073-.976l.072-.085L5.46 17.48zm12.02 0a.75.75 0 01.976-.073l.085.073 1.945 1.944a.75.75 0 01-.968 1.14l-.093-.079-1.945-1.944a.75.75 0 010-1.061zM12 6.75a5.25 5.25 0 110 10.5 5.25 5.25 0 010-10.5zm-8.5 4.5a.75.75 0 01.102 1.493l-.102.007H.75a.75.75 0 01-.102-1.493l.102-.007H3.5zm19.75 0a.75.75 0 01.102 1.493l-.102.007H20.5a.75.75 0 01-.102-1.493l.102-.007h2.75zm-3.825-7.736a.75.75 0 011.134.977l-.073.085-1.945 1.944a.748.748 0 01-1.06 0 .75.75 0 01-.073-.977l.072-.084 1.945-1.944zm-15.91 0a.75.75 0 01.976-.072l.084.072L6.521 5.46a.75.75 0 01-.969 1.14l-.092-.08-1.946-1.944a.75.75 0 010-1.061zM12 0a.75.75 0 01.743.648l.007.102V3.5a.75.75 0 01-1.493.102L11.25 3.5V.75A.75.75 0 0112 0z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-sunny",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1 = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherThunderRain {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M14.01 18.465a.173.173 0 01.287.102v.052l-.587 3.748a1.502 1.502 0 01-1.716 1.252c-1.199-.188-1.676-1.632-.876-2.498l.094-.093 2.797-2.563zM11.773 13.5L8.569 18h3.111l-6.308 5.097c-.161.13-.373-.04-.315-.213l.026-.052 2.26-3.337H4.95L8.277 13.5h3.497zm5.082-1.731a.15.15 0 01.248.083v.05l-.652 4.167a1.626 1.626 0 01-1.858 1.355c-1.3-.203-1.817-1.771-.946-2.708l.098-.098 3.11-2.85zM13.523.565a7.596 7.596 0 017.15 5.019 5.805 5.805 0 013.089 5.127c0 3.118-2.461 5.668-5.53 5.785l-.22.004h-.329l.03-.114.024-.116.652-4.166a1.45 1.45 0 00-2.29-1.392l-.12.098-1.518 1.39h-6.95L5.14 16.477a5.27 5.27 0 01-4.877-5.26A5.299 5.299 0 012.93 6.619c.14-2.49 2.196-4.472 4.704-4.472.37 0 .737.045 1.1.134a7.558 7.558 0 014.79-1.715z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M13.998 18.465a.173.173 0 01.288.102l-.001.052-.587 3.748a1.502 1.502 0 01-1.716 1.252c-1.199-.188-1.676-1.632-.876-2.498l.094-.093 2.798-2.563zM11.761 13.5L8.557 18h3.111L5.36 23.098c-.16.13-.373-.04-.315-.213l.027-.052 2.26-3.337H4.939L8.264 13.5h3.497zm5.082-1.731a.15.15 0 01.248.083v.05l-.651 4.167a1.626 1.626 0 01-1.859 1.355c-1.3-.203-1.817-1.771-.946-2.708l.099-.098 3.109-2.85zM13.511.565a7.596 7.596 0 017.15 5.019 5.805 5.805 0 013.089 5.128c0 3.118-2.46 5.667-5.53 5.784l-.22.005h-.127l.026-.1.023-.099.205-1.308c2.284-.069 4.123-1.961 4.123-4.282a4.3 4.3 0 00-2.314-3.813l-.195-.095-.303-.138-.101-.318c-.816-2.561-3.157-4.283-5.825-4.283-1.42 0-2.79.5-3.888 1.415l-.216.188-.328.301-.354-.122c-.34-.115-.66-.2-1.105-.2a3.22 3.22 0 00-3.034 2.176 3.259 3.259 0 00-.176 1.154l.014.307.017.267-.398.179a3.8 3.8 0 00-.807.471 3.798 3.798 0 00-1.487 3.014c0 2.022 1.579 3.678 3.557 3.78L5.5 15h.218l-.811 1.464C2.291 16.166.25 13.927.25 11.216a5.299 5.299 0 012.667-4.598c.14-2.49 2.197-4.472 4.705-4.472.369 0 .736.045 1.1.134a7.558 7.558 0 014.79-1.715z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-thunder-rain",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss = "scale-icon{--display:inline-flex;--transition:all var(--telekom-motion-duration-transition)\n    var(--telekom-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherThunderSnow {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    const focusable = this.focusable ? { tabindex: 0 } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden, focusable), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M11.262 13.5L8.057 18h3.112L4.86 23.098c-.16.13-.373-.04-.314-.213l.026-.052 2.26-3.337H4.44L7.766 13.5h3.496zm4.589-.223l1.299.75-.85 1.474H18v1.495h-1.703l.853 1.478-1.299.75-.85-1.474-.851 1.474-1.299-.75.853-1.479H12V15.5h1.701l-.85-1.473 1.299-.75.85 1.474.851-1.473zM13.514.566a7.596 7.596 0 017.15 5.019 5.805 5.805 0 013.089 5.127c0 2.66-1.792 4.9-4.223 5.576l-.23.059v-2.002a1 1 0 00-.404-.804l-.1-.064-3.303-1.887a1 1 0 00-.868-.06l-.118.057-1.007.566-.085.049H7l-2.343 4.221a5.275 5.275 0 01-4.404-5.207A5.299 5.299 0 012.92 6.618c.14-2.489 2.197-4.471 4.705-4.471.369 0 .736.045 1.1.134a7.558 7.558 0 014.79-1.715z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M11.262 13.5H7.765l-3.326 5.995h2.393l-2.26 3.338c-.128.189.111.408.288.265L11.168 18H8.057l3.205-4.5zm4.588-.223l1.3.75-.851 1.474H18v1.495h-1.704l.854 1.478-1.3.75L15 17.75l-.85 1.474-1.3-.75.854-1.479H12V15.5h1.701l-.85-1.473 1.298-.75.851 1.474.85-1.473zM13.512.566a7.596 7.596 0 017.149 5.019 5.804 5.804 0 013.089 5.127 5.789 5.789 0 01-4.023 5.515l-.227.067V14.72a4.292 4.292 0 002.75-4.008 4.3 4.3 0 00-2.314-3.813l-.195-.095-.303-.138-.101-.317c-.816-2.563-3.157-4.284-5.825-4.284-1.42 0-2.79.5-3.888 1.415l-.216.188-.328.301-.422-.146a3.178 3.178 0 00-1.036-.176 3.22 3.22 0 00-3.007 2.1 3.327 3.327 0 00-.2 1.37l.027.435-.466.209a3.791 3.791 0 00-2.226 3.456 3.775 3.775 0 003.283 3.75l.193.02-.78 1.407A5.285 5.285 0 01.25 11.215a5.299 5.299 0 012.667-4.598c.14-2.489 2.197-4.471 4.705-4.471.369 0 .736.045 1.1.134a7.558 7.558 0 014.79-1.715z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-thunder-snow",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

registerComponents([
  Accordion,
  ActionAdd,
  ActionAddCard,
  ActionArrange,
  ActionArrowDown,
  ActionArrowLeft,
  ActionArrowRight,
  ActionArrowUp,
  ActionAutoLogin,
  ActionBackspace,
  ActionBackward,
  ActionChangelog,
  ActionCheckmark,
  ActionCircleAdd,
  ActionCircleClose,
  ActionClose,
  ActionCompare,
  ActionCopyPaste,
  ActionCutPaste,
  ActionDisabledMicrophone,
  ActionDownload,
  ActionDownloadFromCloud,
  ActionDragAndDrop,
  ActionEdit,
  ActionExport,
  ActionFastForward,
  ActionFastForwardNb,
  ActionFavorite,
  ActionFilter,
  ActionFilter2,
  ActionForward,
  ActionFullScreen,
  ActionHidePassword,
  ActionImport,
  ActionInstall,
  ActionLaunch,
  ActionLightDarkMode,
  ActionLink,
  ActionLogout,
  ActionLoop,
  ActionMenu,
  ActionMicrophone,
  ActionMinimizeScreen,
  ActionMinus,
  ActionMinusCircle,
  ActionMore,
  ActionMove,
  ActionMute,
  ActionNotification,
  ActionPause,
  ActionPauseNb,
  ActionPin,
  ActionPlay,
  ActionPlayNb,
  ActionPopUpWindow,
  ActionPower,
  ActionPreviousNb,
  ActionPrint,
  ActionPublish,
  ActionRandom,
  ActionRecordNb,
  ActionRefresh,
  ActionRemove,
  ActionReply,
  ActionReplyAll,
  ActionReplyForward,
  ActionRestart,
  ActionSearch,
  ActionSend,
  ActionShare,
  ActionShoppingCart,
  ActionShowPassword,
  ActionSort,
  ActionSoundOn,
  ActionStar,
  ActionStreamOn,
  ActionSuccess,
  ActionThumbsDown,
  ActionThumbsUp,
  ActionTilesAdd,
  ActionUpload,
  ActionUploadToCloud,
  ActionVolumeDown,
  ActionVolumeUp,
  ActionZoomIn,
  ActionZoomOut,
  Alert,
  AlertAntivirusProtection,
  AlertCompliance,
  AlertCyberSecurity,
  AlertError,
  AlertHelp,
  AlertHighPriorityEmail,
  AlertImprintDataprivacy,
  AlertInformation,
  AlertLegal,
  AlertNetworkDisrupted,
  AlertPasswordBreaking,
  AlertSecurity,
  AlertTrafficDisruption,
  AlertUnknown,
  AlertWarning,
  AppFooter,
  AppNavigationUserMenu,
  Badge,
  Breadcrumb,
  Button,
  Callout,
  Card,
  Carousel,
  ChartStackCard,
  Checkbox,
  CheckboxGroup,
  Chip,
  Collapsible,
  CommunicationAvailable,
  CommunicationBlog,
  CommunicationCallIncoming,
  CommunicationCallOutgoing,
  CommunicationChat,
  CommunicationChatBadge,
  CommunicationEmail,
  CommunicationEndCall,
  CommunicationFeedback,
  CommunicationFlightMode,
  CommunicationHappyPerson,
  CommunicationInbox,
  CommunicationLandingMobileContactClient,
  CommunicationLoyaltyEarned,
  CommunicationLoyaltyLost,
  CommunicationMailOpened,
  CommunicationMessage,
  CommunicationMessageIncoming,
  CommunicationMessageOutgoing,
  CommunicationMmsIncoming,
  CommunicationMmsOutgoing,
  CommunicationMobilePhoneNumber,
  CommunicationNetworkSignal,
  CommunicationNewEmail,
  CommunicationOutbox,
  CommunicationPhoneNumber,
  CommunicationRecipient,
  CommunicationSaveEmailsToDrafts,
  CommunicationSms,
  CommunicationSpam,
  CommunicationVoiceMessage,
  Content2FaGoogleAuth,
  ContentAchievement,
  ContentAndroid,
  ContentApple,
  ContentApplications,
  ContentAvailableKeychain,
  ContentBank,
  ContentBiometric,
  ContentBirthday,
  ContentBookmark,
  ContentCalendar,
  ContentClipboard,
  ContentClock,
  ContentCloudSecurity,
  ContentCodeScanner,
  ContentColorSelection,
  ContentCountry,
  ContentCreditCard,
  ContentDataVisualisation,
  ContentDelivery,
  ContentDigitalBanking,
  ContentDigitalMedia,
  ContentDiscount,
  ContentESim,
  ContentEu,
  ContentFaceMask,
  ContentFeatures,
  ContentFlexibleTariffs,
  ContentFolder,
  ContentFood,
  ContentGenderDiverse,
  ContentGenderFemale,
  ContentGenderMale,
  ContentHalfRating,
  ContentHeart,
  ContentHeight,
  ContentHistory,
  ContentHourGlass,
  ContentIban,
  ContentId,
  ContentInStock,
  ContentInternational,
  ContentInternationalSms,
  ContentInterview,
  ContentKey,
  ContentLanguage,
  ContentLock,
  ContentLoyalty,
  ContentMediaFolder,
  ContentMoneyAt,
  ContentMusic,
  ContentNews,
  ContentOutOfStock,
  ContentPersonWalking,
  ContentPrepaidActivate,
  ContentPriceTag,
  ContentRatings,
  ContentRoute,
  ContentRss,
  ContentShop,
  ContentSignal,
  ContentSimCard,
  ContentSmile,
  ContentSortIndicatorDown,
  ContentSortIndicatorMiniDown,
  ContentSortIndicatorUp,
  ContentSortIndicatorUpMini,
  ContentStatusInactive,
  ContentStatusRecurring,
  ContentStopwatch,
  ContentSupportChat,
  ContentSustainable,
  ContentTariffs,
  ContentThreats,
  ContentTodoList,
  ContentTransport,
  ContentUnlock,
  ContentVoucher,
  ContentWaiting,
  ContentWallet,
  DataGrid,
  DatePicker,
  DeviceAddDevice,
  DeviceCamera,
  DeviceChangeCamera,
  DeviceComputer,
  DeviceDeviceController,
  DeviceDeviceEthernet,
  DeviceDeviceMesh,
  DeviceDevicePhone,
  DeviceDeviceRouter,
  DeviceDeviceTv,
  DeviceDeviceWatch,
  DeviceDongle,
  DeviceFax,
  DeviceFixedLineServices,
  DeviceGameController,
  DeviceMediaReceiver,
  DeviceMobileData,
  DeviceMobileDevicesCombination,
  DeviceMobileEquipment,
  DeviceMobilePhoneInsurance,
  DeviceMobileServices,
  DeviceNoCamera,
  DevicePhoneWithMobilePlan,
  DevicePhoneWithoutMobilePlan,
  DevicePhotoCamera,
  DeviceRemoteController,
  DeviceReplacementMobilephone,
  DeviceScreenRotate,
  DeviceServer,
  DeviceSmartSpeaker,
  DeviceTablet,
  DeviceTvAndMobile,
  DeviceTwitchingClosedState,
  DeviceTwitchingOpenState,
  Divider,
  Dropdown,
  DropdownSelect,
  DropdownSelectItem,
  DuetDatePicker,
  Grid,
  GridItem,
  Header,
  HelperText,
  HomeHome,
  HomeInternetAtHome,
  HomeIot,
  HomeLightBulb,
  HomeNetworkSecure,
  HomeNoWifi,
  HomePowerSocket,
  HomePreferredWifi,
  HomeReducedWifi,
  HomeSlowWifi,
  HomeSmarthome,
  HomeUnableToConnectToRouter,
  HomeWifi,
  HomeWifiConnected,
  HomeWifiConnectionError,
  HomeWifiManualLogin,
  HomeWifiNoWiredInternet,
  Icon,
  Input,
  Link,
  List,
  ListItem,
  LoadingSpinner,
  Logo$1,
  Logo,
  LogoSvg,
  MainNavigationMobile,
  MegaMenu,
  MenuFlyout,
  MenuFlyoutDivider,
  MenuFlyoutItem,
  MenuFlyoutList,
  Modal,
  NavIcon,
  NavMain,
  NavSegment,
  NavigationCircleTopUp,
  NavigationCollapseDown,
  NavigationCollapseUp,
  NavigationDoubleLeft,
  NavigationDoubleRight,
  NavigationExternalLink,
  NavigationInternalLink,
  NavigationLeft,
  NavigationLeftCondensed,
  NavigationLocation,
  NavigationMap,
  NavigationMyLocation,
  NavigationRight,
  NavigationRightCondensed,
  NavigationSectorMobile,
  NavigationStart,
  NavigationTopUp,
  Notification,
  NotificationBadge,
  NotificationBanner,
  NotificationMessage,
  NotificationToast,
  Pagination,
  ProcessOrderStatus,
  ProcessProcessing,
  ProcessSepaTransaction,
  ProgressBar,
  RadioButton,
  RadioButtonGroup,
  RatingStars,
  Segment,
  SegmentedButton,
  ServiceDevicesService,
  ServiceMaintanance,
  ServiceManual,
  ServiceOneTimePassword,
  ServiceServices,
  ServiceSettings,
  ServiceSupport,
  ServiceVpn,
  Shell$1,
  Shell,
  SidebarNav,
  SidebarNavCollapsible,
  SidebarNavItem,
  Slider,
  SsrSlotFix,
  Switch,
  TProduct2FaTelekomApp,
  TProductMagentaCloud,
  TProductMagentaTv,
  TProductMagentaone,
  TProductMeasureInternetSpeed,
  TProductSeamlessConnectivity,
  TProductTelekom1T1,
  TProductTelekomPlan,
  TProductTelekomShopB,
  TProductUsage,
  TProductVoice,
  TabHeader,
  TabNav,
  TabPanel,
  Table,
  Tag,
  TelekomFooter,
  TelekomFooterContent,
  TelekomFooterDataBackCompat,
  TelekomFooterExtendedNavigation,
  TelekomFooterExtendedNavigationColumn,
  TelekomHeader,
  TelekomHeaderDataBackCompat,
  TelekomMegaMenu,
  TelekomMegaMenuColumn,
  TelekomMobileFlyoutCanvas,
  TelekomMobileMenu,
  TelekomMobileMenuItem,
  TelekomNavItem$1,
  TelekomNavItem,
  TelekomNavList,
  TelekomProfileMenu,
  TextField,
  Textarea,
  Toast,
  ToggleButton,
  ToggleGroup,
  Tooltip,
  UserFileAdmin,
  UserFileAnalytics,
  UserFileAttachment,
  UserFileAudioFile,
  UserFileBilling,
  UserFileBoy,
  UserFileBussinesUsers,
  UserFileCommunities,
  UserFileContacts,
  UserFileContactsFromCloud,
  UserFileContracts,
  UserFileDraftFile,
  UserFileFamilies,
  UserFileFamily,
  UserFileFile,
  UserFileFileCollection,
  UserFileGirl,
  UserFileHandshake,
  UserFileHtmlFile,
  UserFileIdCard,
  UserFileImageFile,
  UserFileLogout,
  UserFileMan,
  UserFilePdfFile,
  UserFileSwitchUsers,
  UserFileUser,
  UserFileVideos,
  UserFileWoman,
  WeatherCloudy,
  WeatherCloudyRain,
  WeatherCloudySleet,
  WeatherCloudySnow,
  WeatherCloudyThunderRain,
  WeatherCloudyThunderSnow,
  WeatherHeavySleet,
  WeatherHeavySnow,
  WeatherMoonClear,
  WeatherMoonCloudyA,
  WeatherMoonCloudyB,
  WeatherMoonRain,
  WeatherMoonSleet,
  WeatherMoonSnow,
  WeatherMoonThunderRain,
  WeatherMoonThunderSnow,
  WeatherOvercast,
  WeatherRain,
  WeatherSunny,
  WeatherThunderRain,
  WeatherThunderSnow,
]);

exports.hydrateApp = hydrateApp;


  /*hydrateAppClosure end*/
  hydrateApp(window, $stencilHydrateOpts, $stencilHydrateResults, $stencilAfterHydrate, $stencilHydrateResolve);
  }

  hydrateAppClosure($stencilWindow);
}

function createWindowFromHtml(e, t) {
 let r = templateWindows.get(t);
 return null == r && (r = new MockWindow(e), templateWindows.set(t, r)), cloneWindow(r);
}

function normalizeHydrateOptions(e) {
 const t = Object.assign({
  serializeToHtml: !1,
  destroyWindow: !1,
  destroyDocument: !1
 }, e || {});
 return "boolean" != typeof t.clientHydrateAnnotations && (t.clientHydrateAnnotations = !0), 
 "boolean" != typeof t.constrainTimeouts && (t.constrainTimeouts = !0), "number" != typeof t.maxHydrateCount && (t.maxHydrateCount = 300), 
 "boolean" != typeof t.runtimeLogging && (t.runtimeLogging = !1), "number" != typeof t.timeout && (t.timeout = 15e3), 
 Array.isArray(t.excludeComponents) ? t.excludeComponents = t.excludeComponents.filter(filterValidTags).map(mapValidTags) : t.excludeComponents = [], 
 Array.isArray(t.staticComponents) ? t.staticComponents = t.staticComponents.filter(filterValidTags).map(mapValidTags) : t.staticComponents = [], 
 t;
}

function filterValidTags(e) {
 return "string" == typeof e && e.includes("-");
}

function mapValidTags(e) {
 return e.trim().toLowerCase();
}

function generateHydrateResults(e) {
 "string" != typeof e.url && (e.url = "https://hydrate.stenciljs.com/"), "string" != typeof e.buildId && (e.buildId = createHydrateBuildId());
 const t = {
  buildId: e.buildId,
  diagnostics: [],
  url: e.url,
  host: null,
  hostname: null,
  href: null,
  pathname: null,
  port: null,
  search: null,
  hash: null,
  html: null,
  httpStatus: null,
  hydratedCount: 0,
  anchors: [],
  components: [],
  imgs: [],
  scripts: [],
  staticData: [],
  styles: [],
  title: null
 };
 try {
  const r = new URL(e.url, "https://hydrate.stenciljs.com/");
  t.url = r.href, t.host = r.host, t.hostname = r.hostname, t.href = r.href, t.port = r.port, 
  t.pathname = r.pathname, t.search = r.search, t.hash = r.hash;
 } catch (e) {
  renderCatchError(t, e);
 }
 return t;
}

function renderBuildDiagnostic(e, t, r, s) {
 const n = {
  level: t,
  type: "build",
  header: r,
  messageText: s,
  relFilePath: null,
  absFilePath: null,
  lines: []
 };
 return e.pathname ? "/" !== e.pathname && (n.header += ": " + e.pathname) : e.url && (n.header += ": " + e.url), 
 e.diagnostics.push(n), n;
}

function renderBuildError(e, t) {
 return renderBuildDiagnostic(e, "error", "Hydrate Error", t);
}

function renderCatchError(e, t) {
 const r = renderBuildError(e, null);
 return null != t && (null != t.stack ? r.messageText = t.stack.toString() : null != t.message ? r.messageText = t.message.toString() : r.messageText = t.toString()), 
 r;
}

function runtimeLog(e, t, r) {
 global.console[t].apply(global.console, [ `[ ${e}  ${t} ] `, ...r ]);
}

function inspectElement(e, t, r) {
 const s = t.children;
 for (let t = 0, n = s.length; t < n; t++) {
  const n = s[t], o = n.nodeName.toLowerCase();
  if (o.includes("-")) {
   const t = e.components.find((e => e.tag === o));
   null != t && (t.count++, r > t.depth && (t.depth = r));
  } else switch (o) {
  case "a":
   const t = collectAttributes(n);
   t.href = n.href, "string" == typeof t.href && (e.anchors.some((e => e.href === t.href)) || e.anchors.push(t));
   break;

  case "img":
   const r = collectAttributes(n);
   r.src = n.src, "string" == typeof r.src && (e.imgs.some((e => e.src === r.src)) || e.imgs.push(r));
   break;

  case "link":
   const s = collectAttributes(n);
   s.href = n.href, "string" == typeof s.rel && "stylesheet" === s.rel.toLowerCase() && "string" == typeof s.href && (e.styles.some((e => e.link === s.href)) || (delete s.rel, 
   delete s.type, e.styles.push(s)));
   break;

  case "script":
   const o = collectAttributes(n);
   if (n.hasAttribute("src")) o.src = n.src, "string" == typeof o.src && (e.scripts.some((e => e.src === o.src)) || e.scripts.push(o)); else {
    const t = n.getAttribute("data-stencil-static");
    t && e.staticData.push({
     id: t,
     type: n.getAttribute("type"),
     content: n.textContent
    });
   }
  }
  inspectElement(e, n, ++r);
 }
}

function collectAttributes(e) {
 const t = {}, r = e.attributes;
 for (let e = 0, s = r.length; e < s; e++) {
  const s = r.item(e), n = s.nodeName.toLowerCase();
  if (SKIP_ATTRS.has(n)) continue;
  const o = s.nodeValue;
  "class" === n && "" === o || (t[n] = o);
 }
 return t;
}

function patchDomImplementation(e, t) {
 let r;
 if (null != e.defaultView ? (t.destroyWindow = !0, patchWindow(e.defaultView), r = e.defaultView) : (t.destroyWindow = !0, 
 t.destroyDocument = !1, r = new MockWindow(!1)), r.document !== e && (r.document = e), 
 e.defaultView !== r && (e.defaultView = r), "function" != typeof e.documentElement.constructor.prototype.getRootNode && (e.createElement("unknown-element").constructor.prototype.getRootNode = getRootNode), 
 "function" == typeof e.createEvent) {
  const t = e.createEvent("CustomEvent").constructor;
  r.CustomEvent !== t && (r.CustomEvent = t);
 }
 try {
  e.baseURI;
 } catch (t) {
  Object.defineProperty(e, "baseURI", {
   get() {
    const t = e.querySelector("base[href]");
    return t ? new URL(t.getAttribute("href"), r.location.href).href : r.location.href;
   }
  });
 }
 return r;
}

function getRootNode(e) {
 const t = null != e && !0 === e.composed;
 let r = this;
 for (;null != r.parentNode; ) r = r.parentNode, !0 === t && null == r.parentNode && null != r.host && (r = r.host);
 return r;
}

function renderToString(e, t) {
 const r = normalizeHydrateOptions(t);
 return r.serializeToHtml = !0, new Promise((t => {
  let s;
  const n = generateHydrateResults(r);
  if (hasError(n.diagnostics)) t(n); else if ("string" == typeof e) try {
   r.destroyWindow = !0, r.destroyDocument = !0, s = new MockWindow(e), render(s, r, n, t);
  } catch (e) {
   s && s.close && s.close(), s = null, renderCatchError(n, e), t(n);
  } else if (isValidDocument(e)) try {
   r.destroyDocument = !1, s = patchDomImplementation(e, r), render(s, r, n, t);
  } catch (e) {
   s && s.close && s.close(), s = null, renderCatchError(n, e), t(n);
  } else renderBuildError(n, 'Invalid html or document. Must be either a valid "html" string, or DOM "document".'), 
  t(n);
 }));
}

function hydrateDocument(e, t) {
 const r = normalizeHydrateOptions(t);
 return r.serializeToHtml = !1, new Promise((t => {
  let s;
  const n = generateHydrateResults(r);
  if (hasError(n.diagnostics)) t(n); else if ("string" == typeof e) try {
   r.destroyWindow = !0, r.destroyDocument = !0, s = new MockWindow(e), render(s, r, n, t);
  } catch (e) {
   s && s.close && s.close(), s = null, renderCatchError(n, e), t(n);
  } else if (isValidDocument(e)) try {
   r.destroyDocument = !1, s = patchDomImplementation(e, r), render(s, r, n, t);
  } catch (e) {
   s && s.close && s.close(), s = null, renderCatchError(n, e), t(n);
  } else renderBuildError(n, 'Invalid html or document. Must be either a valid "html" string, or DOM "document".'), 
  t(n);
 }));
}

function render(e, t, r, s) {
 if (process.__stencilErrors || (process.__stencilErrors = !0, process.on("unhandledRejection", (e => {
  console.log("unhandledRejection", e);
 }))), function n(e, t, r, s) {
  try {
   e.location.href = r.url;
  } catch (e) {
   renderCatchError(s, e);
  }
  if ("string" == typeof r.userAgent) try {
   e.navigator.userAgent = r.userAgent;
  } catch (e) {}
  if ("string" == typeof r.cookie) try {
   t.cookie = r.cookie;
  } catch (e) {}
  if ("string" == typeof r.referrer) try {
   t.referrer = r.referrer;
  } catch (e) {}
  if ("string" == typeof r.direction) try {
   t.documentElement.setAttribute("dir", r.direction);
  } catch (e) {}
  if ("string" == typeof r.language) try {
   t.documentElement.setAttribute("lang", r.language);
  } catch (e) {}
  if ("string" == typeof r.buildId) try {
   t.documentElement.setAttribute("data-stencil-build", r.buildId);
  } catch (e) {}
  try {
   e.customElements = null;
  } catch (e) {}
  return r.constrainTimeouts && constrainTimeouts(e), function n(e, t, r) {
   try {
    const s = e.location.pathname;
    e.console.error = (...e) => {
     const n = e.reduce(((e, t) => {
      if (t) {
       if (null != t.stack) return e + " " + String(t.stack);
       if (null != t.message) return e + " " + String(t.message);
      }
      return String(t);
     }), "").trim();
     "" !== n && (renderCatchError(r, n), t.runtimeLogging && runtimeLog(s, "error", [ n ]));
    }, e.console.debug = (...e) => {
     renderBuildDiagnostic(r, "debug", "Hydrate Debug", [ ...e ].join(", ")), t.runtimeLogging && runtimeLog(s, "debug", e);
    }, t.runtimeLogging && [ "log", "warn", "assert", "info", "trace" ].forEach((t => {
     e.console[t] = (...e) => {
      runtimeLog(s, t, e);
     };
    }));
   } catch (e) {
    renderCatchError(r, e);
   }
  }(e, r, s), e;
 }(e, e.document, t, r), "function" == typeof t.beforeHydrate) try {
  const n = t.beforeHydrate(e.document);
  isPromise(n) ? n.then((() => {
   hydrateFactory(e, t, r, afterHydrate, s);
  })) : hydrateFactory(e, t, r, afterHydrate, s);
 } catch (n) {
  renderCatchError(r, n), finalizeHydrate(e, e.document, t, r, s);
 } else hydrateFactory(e, t, r, afterHydrate, s);
}

function afterHydrate(e, t, r, s) {
 if ("function" == typeof t.afterHydrate) try {
  const n = t.afterHydrate(e.document);
  isPromise(n) ? n.then((() => {
   finalizeHydrate(e, e.document, t, r, s);
  })) : finalizeHydrate(e, e.document, t, r, s);
 } catch (n) {
  renderCatchError(r, n), finalizeHydrate(e, e.document, t, r, s);
 } else finalizeHydrate(e, e.document, t, r, s);
}

function finalizeHydrate(e, t, r, s, n) {
 try {
  if (inspectElement(s, t.documentElement, 0), !1 !== r.removeUnusedStyles) try {
   ((e, t) => {
    try {
     const r = e.head.querySelectorAll("style[data-styles]"), s = r.length;
     if (s > 0) {
      const n = (e => {
       const t = {
        attrs: new Set,
        classNames: new Set,
        ids: new Set,
        tags: new Set
       };
       return collectUsedSelectors(t, e), t;
      })(e.documentElement);
      for (let e = 0; e < s; e++) removeUnusedStyleText(n, t, r[e]);
     }
    } catch (e) {
     ((e, t, r) => {
      const s = {
       level: "error",
       type: "build",
       header: "Build Error",
       messageText: "build error",
       relFilePath: null,
       absFilePath: null,
       lines: []
      };
      null != t && (null != t.stack ? s.messageText = t.stack.toString() : null != t.message ? s.messageText = t.message.length ? t.message : "UNKNOWN ERROR" : s.messageText = t.toString()), 
      null == e || shouldIgnoreError(s.messageText) || e.push(s);
     })(t, e);
    }
   })(t, s.diagnostics);
  } catch (e) {
   renderCatchError(s, e);
  }
  if ("string" == typeof r.title) try {
   t.title = r.title;
  } catch (e) {
   renderCatchError(s, e);
  }
  s.title = t.title, r.removeScripts && removeScripts(t.documentElement);
  try {
   ((e, t) => {
    let r = e.head.querySelector('link[rel="canonical"]');
    "string" == typeof t ? (null == r && (r = e.createElement("link"), r.setAttribute("rel", "canonical"), 
    e.head.appendChild(r)), r.setAttribute("href", t)) : null != r && (r.getAttribute("href") || r.parentNode.removeChild(r));
   })(t, r.canonicalUrl);
  } catch (e) {
   renderCatchError(s, e);
  }
  try {
   (e => {
    const t = e.head;
    let r = t.querySelector("meta[charset]");
    null == r ? (r = e.createElement("meta"), r.setAttribute("charset", "utf-8")) : r.remove(), 
    t.insertBefore(r, t.firstChild);
   })(t);
  } catch (e) {}
  hasError(s.diagnostics) || (s.httpStatus = 200);
  try {
   const e = t.head.querySelector('meta[http-equiv="status"]');
   if (null != e) {
    const t = e.getAttribute("content");
    t && t.length > 0 && (s.httpStatus = parseInt(t, 10));
   }
  } catch (e) {}
  r.clientHydrateAnnotations && t.documentElement.classList.add("hydrated"), r.serializeToHtml && (s.html = serializeDocumentToString(t, r));
 } catch (e) {
  renderCatchError(s, e);
 }
 if (r.destroyWindow) try {
  r.destroyDocument || (e.document = null, t.defaultView = null), e.close && e.close();
 } catch (e) {
  renderCatchError(s, e);
 }
 n(s);
}

function serializeDocumentToString(e, t) {
 return serializeNodeToHtml(e, {
  approximateLineWidth: t.approximateLineWidth,
  outerHtml: !1,
  prettyHtml: t.prettyHtml,
  removeAttributeQuotes: t.removeAttributeQuotes,
  removeBooleanAttributeQuotes: t.removeBooleanAttributeQuotes,
  removeEmptyAttributes: t.removeEmptyAttributes,
  removeHtmlComments: t.removeHtmlComments,
  serializeShadowRoot: !1
 });
}

function isValidDocument(e) {
 return null != e && 9 === e.nodeType && null != e.documentElement && 1 === e.documentElement.nodeType && null != e.body && 1 === e.body.nodeType;
}

function removeScripts(e) {
 const t = e.children;
 for (let e = t.length - 1; e >= 0; e--) {
  const r = t[e];
  removeScripts(r), ("SCRIPT" === r.nodeName || "LINK" === r.nodeName && "modulepreload" === r.getAttribute("rel")) && r.remove();
 }
}

const templateWindows = new Map, createHydrateBuildId = () => {
 let e = "abcdefghijklmnopqrstuvwxyz", t = "";
 for (;t.length < 8; ) t += e[Math.floor(Math.random() * e.length)], 1 === t.length && (e += "0123456789");
 return t;
}, isPromise = e => !!e && ("object" == typeof e || "function" == typeof e) && "function" == typeof e.then, hasError = e => null != e && 0 !== e.length && e.some((e => "error" === e.level && "runtime" !== e.type)), shouldIgnoreError = e => e === TASK_CANCELED_MSG, TASK_CANCELED_MSG = "task canceled", SKIP_ATTRS = new Set([ "s-id", "c-id" ]), collectUsedSelectors = (e, t) => {
 if (null != t && 1 === t.nodeType) {
  const r = t.children, s = t.nodeName.toLowerCase();
  e.tags.add(s);
  const n = t.attributes;
  for (let r = 0, s = n.length; r < s; r++) {
   const s = n.item(r), o = s.name.toLowerCase();
   if (e.attrs.add(o), "class" === o) {
    const r = t.classList;
    for (let t = 0, s = r.length; t < s; t++) e.classNames.add(r.item(t));
   } else "id" === o && e.ids.add(s.value);
  }
  if (r) for (let t = 0, s = r.length; t < s; t++) collectUsedSelectors(e, r[t]);
 }
}, parseCss = (e, t) => {
 let r = 1, s = 1;
 const n = [], o = e => {
  const t = e.match(/\n/g);
  t && (r += t.length);
  const n = e.lastIndexOf("\n");
  s = ~n ? e.length - n : s + e.length;
 }, i = () => {
  const e = {
   line: r,
   column: s
  };
  return t => (t.position = new z(e), m(), t);
 }, a = o => {
  const i = e.split("\n"), a = {
   level: "error",
   type: "css",
   language: "css",
   header: "CSS Parse",
   messageText: o,
   absFilePath: t,
   lines: [ {
    lineIndex: r - 1,
    lineNumber: r,
    errorCharStart: s,
    text: e[r - 1]
   } ]
  };
  if (r > 1) {
   const t = {
    lineIndex: r - 1,
    lineNumber: r - 1,
    text: e[r - 2],
    errorCharStart: -1,
    errorLength: -1
   };
   a.lines.unshift(t);
  }
  if (r + 2 < i.length) {
   const e = {
    lineIndex: r,
    lineNumber: r + 1,
    text: i[r],
    errorCharStart: -1,
    errorLength: -1
   };
   a.lines.push(e);
  }
  return n.push(a), null;
 }, l = () => u(/^{\s*/), c = () => u(/^}/), u = t => {
  const r = t.exec(e);
  if (!r) return;
  const s = r[0];
  return o(s), e = e.slice(s.length), r;
 }, d = () => {
  let t;
  const r = [];
  for (m(), h(r); e.length && "}" !== e.charAt(0) && (t = w() || A()); ) !1 !== t && (r.push(t), 
  h(r));
  return r;
 }, m = () => u(/^\s*/), h = e => {
  let t;
  for (e = e || []; t = p(); ) !1 !== t && e.push(t);
  return e;
 }, p = () => {
  const t = i();
  if ("/" !== e.charAt(0) || "*" !== e.charAt(1)) return null;
  let r = 2;
  for (;"" !== e.charAt(r) && ("*" !== e.charAt(r) || "/" !== e.charAt(r + 1)); ) ++r;
  if (r += 2, "" === e.charAt(r - 1)) return a("End of comment missing");
  const n = e.slice(2, r - 2);
  return s += 2, o(n), e = e.slice(r), s += 2, t({
   type: 1,
   comment: n
  });
 }, f = () => {
  const e = u(/^([^{]+)/);
  return e ? trim(e[0]).replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*\/+/g, "").replace(/"(?:\\"|[^"])*"|'(?:\\'|[^'])*'/g, (function(e) {
   return e.replace(/,/g, "‌");
  })).split(/\s*(?![^(]*\)),\s*/).map((function(e) {
   return e.replace(/\u200C/g, ",");
  })) : null;
 }, g = () => {
  const e = i();
  let t = u(/^(\*?[-#\/\*\\\w]+(\[[0-9a-z_-]+\])?)\s*/);
  if (!t) return null;
  if (t = trim(t[0]), !u(/^:\s*/)) return a("property missing ':'");
  const r = u(/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^\)]*?\)|[^};])+)/), s = e({
   type: 4,
   property: t.replace(commentre, ""),
   value: r ? trim(r[0]).replace(commentre, "") : ""
  });
  return u(/^[;\s]*/), s;
 }, y = () => {
  const e = [];
  if (!l()) return a("missing '{'");
  let t;
  for (h(e); t = g(); ) !1 !== t && (e.push(t), h(e));
  return c() ? e : a("missing '}'");
 }, C = () => {
  let e;
  const t = [], r = i();
  for (;e = u(/^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/); ) t.push(e[1]), u(/^,\s*/);
  return t.length ? r({
   type: 9,
   values: t,
   declarations: y()
  }) : null;
 }, S = (e, t) => {
  const r = new RegExp("^@" + e + "\\s*([^;]+);");
  return () => {
   const s = i(), n = u(r);
   if (!n) return null;
   const o = {
    type: t
   };
   return o[e] = n[1].trim(), s(o);
  };
 }, E = S("import", 7), b = S("charset", 0), T = S("namespace", 11), w = () => "@" !== e[0] ? null : (() => {
  const e = i();
  let t = u(/^@([-\w]+)?keyframes\s*/);
  if (!t) return null;
  const r = t[1];
  if (t = u(/^([-\w]+)\s*/), !t) return a("@keyframes missing name");
  const s = t[1];
  if (!l()) return a("@keyframes missing '{'");
  let n, o = h();
  for (;n = C(); ) o.push(n), o = o.concat(h());
  return c() ? e({
   type: 8,
   name: s,
   vendor: r,
   keyframes: o
  }) : a("@keyframes missing '}'");
 })() || (() => {
  const e = i(), t = u(/^@media *([^{]+)/);
  if (!t) return null;
  const r = trim(t[1]);
  if (!l()) return a("@media missing '{'");
  const s = h().concat(d());
  return c() ? e({
   type: 10,
   media: r,
   rules: s
  }) : a("@media missing '}'");
 })() || (() => {
  const e = i(), t = u(/^@custom-media\s+(--[^\s]+)\s*([^{;]+);/);
  return t ? e({
   type: 2,
   name: trim(t[1]),
   media: trim(t[2])
  }) : null;
 })() || (() => {
  const e = i(), t = u(/^@supports *([^{]+)/);
  if (!t) return null;
  const r = trim(t[1]);
  if (!l()) return a("@supports missing '{'");
  const s = h().concat(d());
  return c() ? e({
   type: 15,
   supports: r,
   rules: s
  }) : a("@supports missing '}'");
 })() || E() || b() || T() || (() => {
  const e = i(), t = u(/^@([-\w]+)?document *([^{]+)/);
  if (!t) return null;
  const r = trim(t[1]), s = trim(t[2]);
  if (!l()) return a("@document missing '{'");
  const n = h().concat(d());
  return c() ? e({
   type: 3,
   document: s,
   vendor: r,
   rules: n
  }) : a("@document missing '}'");
 })() || (() => {
  const e = i();
  if (!u(/^@page */)) return null;
  const t = f() || [];
  if (!l()) return a("@page missing '{'");
  let r, s = h();
  for (;r = g(); ) s.push(r), s = s.concat(h());
  return c() ? e({
   type: 12,
   selectors: t,
   declarations: s
  }) : a("@page missing '}'");
 })() || (() => {
  const e = i();
  if (!u(/^@host\s*/)) return null;
  if (!l()) return a("@host missing '{'");
  const t = h().concat(d());
  return c() ? e({
   type: 6,
   rules: t
  }) : a("@host missing '}'");
 })() || (() => {
  const e = i();
  if (!u(/^@font-face\s*/)) return null;
  if (!l()) return a("@font-face missing '{'");
  let t, r = h();
  for (;t = g(); ) r.push(t), r = r.concat(h());
  return c() ? e({
   type: 5,
   declarations: r
  }) : a("@font-face missing '}'");
 })(), A = () => {
  const e = i(), t = f();
  return t ? (h(), e({
   type: 13,
   selectors: t,
   declarations: y()
  })) : a("selector missing");
 };
 class z {
  constructor(e) {
   this.start = e, this.end = {
    line: r,
    column: s
   }, this.source = t;
  }
 }
 return z.prototype.content = e, {
  diagnostics: n,
  ...addParent((() => {
   const e = d();
   return {
    type: 14,
    stylesheet: {
     source: t,
     rules: e
    }
   };
  })())
 };
}, trim = e => e ? e.trim() : "", addParent = (e, t) => {
 const r = e && "string" == typeof e.type, s = r ? e : t;
 for (const t in e) {
  const r = e[t];
  Array.isArray(r) ? r.forEach((function(e) {
   addParent(e, s);
  })) : r && "object" == typeof r && addParent(r, s);
 }
 return r && Object.defineProperty(e, "parent", {
  configurable: !0,
  writable: !0,
  enumerable: !1,
  value: t || null
 }), e;
}, commentre = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g, getCssSelectors = e => {
 SELECTORS.all.length = SELECTORS.tags.length = SELECTORS.classNames.length = SELECTORS.ids.length = SELECTORS.attrs.length = 0;
 const t = (e = e.replace(/\./g, " .").replace(/\#/g, " #").replace(/\[/g, " [").replace(/\>/g, " > ").replace(/\+/g, " + ").replace(/\~/g, " ~ ").replace(/\*/g, " * ").replace(/\:not\((.*?)\)/g, " ")).split(" ");
 for (let e = 0, r = t.length; e < r; e++) t[e] = t[e].split(":")[0], 0 !== t[e].length && ("." === t[e].charAt(0) ? SELECTORS.classNames.push(t[e].slice(1)) : "#" === t[e].charAt(0) ? SELECTORS.ids.push(t[e].slice(1)) : "[" === t[e].charAt(0) ? (t[e] = t[e].slice(1).split("=")[0].split("]")[0].trim(), 
 SELECTORS.attrs.push(t[e].toLowerCase())) : /[a-z]/g.test(t[e].charAt(0)) && SELECTORS.tags.push(t[e].toLowerCase()));
 return SELECTORS.classNames = SELECTORS.classNames.sort(((e, t) => e.length < t.length ? -1 : e.length > t.length ? 1 : 0)), 
 SELECTORS;
}, SELECTORS = {
 all: [],
 tags: [],
 classNames: [],
 ids: [],
 attrs: []
}, serializeCssVisitNode = (e, t, r, s) => {
 const n = t.type;
 return 4 === n ? serializeCssDeclaration(t, r, s) : 13 === n ? serializeCssRule(e, t) : 1 === n ? "!" === t.comment[0] ? `/*${t.comment}*/` : "" : 10 === n ? serializeCssMedia(e, t) : 8 === n ? serializeCssKeyframes(e, t) : 9 === n ? serializeCssKeyframe(e, t) : 5 === n ? serializeCssFontFace(e, t) : 15 === n ? serializeCssSupports(e, t) : 7 === n ? "@import " + t.import + ";" : 0 === n ? "@charset " + t.charset + ";" : 12 === n ? serializeCssPage(e, t) : 6 === n ? "@host{" + serializeCssMapVisit(e, t.rules) + "}" : 2 === n ? "@custom-media " + t.name + " " + t.media + ";" : 3 === n ? serializeCssDocument(e, t) : 11 === n ? "@namespace " + t.namespace + ";" : "";
}, serializeCssRule = (e, t) => {
 const r = t.declarations, s = e.usedSelectors, n = t.selectors.slice();
 if (null == r || 0 === r.length) return "";
 if (s) {
  let t, r, o = !0;
  for (t = n.length - 1; t >= 0; t--) {
   const i = getCssSelectors(n[t]);
   o = !0;
   let a = i.classNames.length;
   if (a > 0 && e.hasUsedClassNames) for (r = 0; r < a; r++) if (!s.classNames.has(i.classNames[r])) {
    o = !1;
    break;
   }
   if (o && e.hasUsedTags && (a = i.tags.length, a > 0)) for (r = 0; r < a; r++) if (!s.tags.has(i.tags[r])) {
    o = !1;
    break;
   }
   if (o && e.hasUsedAttrs && (a = i.attrs.length, a > 0)) for (r = 0; r < a; r++) if (!s.attrs.has(i.attrs[r])) {
    o = !1;
    break;
   }
   if (o && e.hasUsedIds && (a = i.ids.length, a > 0)) for (r = 0; r < a; r++) if (!s.ids.has(i.ids[r])) {
    o = !1;
    break;
   }
   o || n.splice(t, 1);
  }
 }
 if (0 === n.length) return "";
 const o = [];
 let i = "";
 for (const e of t.selectors) i = removeSelectorWhitespace(e), o.includes(i) || o.push(i);
 return `${o}{${serializeCssMapVisit(e, r)}}`;
}, serializeCssDeclaration = (e, t, r) => "" === e.value ? "" : r - 1 === t ? e.property + ":" + e.value : e.property + ":" + e.value + ";", serializeCssMedia = (e, t) => {
 const r = serializeCssMapVisit(e, t.rules);
 return "" === r ? "" : "@media " + removeMediaWhitespace(t.media) + "{" + r + "}";
}, serializeCssKeyframes = (e, t) => {
 const r = serializeCssMapVisit(e, t.keyframes);
 return "" === r ? "" : "@" + (t.vendor || "") + "keyframes " + t.name + "{" + r + "}";
}, serializeCssKeyframe = (e, t) => t.values.join(",") + "{" + serializeCssMapVisit(e, t.declarations) + "}", serializeCssFontFace = (e, t) => {
 const r = serializeCssMapVisit(e, t.declarations);
 return "" === r ? "" : "@font-face{" + r + "}";
}, serializeCssSupports = (e, t) => {
 const r = serializeCssMapVisit(e, t.rules);
 return "" === r ? "" : "@supports " + t.supports + "{" + r + "}";
}, serializeCssPage = (e, t) => "@page " + t.selectors.join(", ") + "{" + serializeCssMapVisit(e, t.declarations) + "}", serializeCssDocument = (e, t) => {
 const r = serializeCssMapVisit(e, t.rules), s = "@" + (t.vendor || "") + "document " + t.document;
 return "" === r ? "" : s + "{" + r + "}";
}, serializeCssMapVisit = (e, t) => {
 let r = "";
 if (t) for (let s = 0, n = t.length; s < n; s++) r += serializeCssVisitNode(e, t[s], s, n);
 return r;
}, removeSelectorWhitespace = e => {
 let t = "", r = "", s = !1;
 for (let n = 0, o = (e = e.trim()).length; n < o; n++) if (r = e[n], "[" === r && "\\" !== t[t.length - 1] ? s = !0 : "]" === r && "\\" !== t[t.length - 1] && (s = !1), 
 !s && CSS_WS_REG.test(r)) {
  if (CSS_NEXT_CHAR_REG.test(e[n + 1])) continue;
  if (CSS_PREV_CHAR_REG.test(t[t.length - 1])) continue;
  t += " ";
 } else t += r;
 return t;
}, removeMediaWhitespace = e => {
 let t = "", r = "";
 for (let s = 0, n = (e = e.trim()).length; s < n; s++) if (r = e[s], CSS_WS_REG.test(r)) {
  if (CSS_WS_REG.test(t[t.length - 1])) continue;
  t += " ";
 } else t += r;
 return t;
}, CSS_WS_REG = /\s/, CSS_NEXT_CHAR_REG = /[>\(\)\~\,\+\s]/, CSS_PREV_CHAR_REG = /[>\(\~\,\+]/, removeUnusedStyleText = (e, t, r) => {
 try {
  const s = parseCss(r.innerHTML);
  if (t.push(...s.diagnostics), hasError(t)) return;
  try {
   r.innerHTML = ((e, t) => {
    const r = t.usedSelectors || null, s = {
     usedSelectors: r || null,
     hasUsedAttrs: !!r && r.attrs.size > 0,
     hasUsedClassNames: !!r && r.classNames.size > 0,
     hasUsedIds: !!r && r.ids.size > 0,
     hasUsedTags: !!r && r.tags.size > 0
    }, n = e.rules;
    if (!n) return "";
    const o = n.length, i = [];
    for (let e = 0; e < o; e++) i.push(serializeCssVisitNode(s, n[e], e, o));
    return i.join("");
   })(s.stylesheet, {
    usedSelectors: e
   });
  } catch (e) {
   t.push({
    level: "warn",
    type: "css",
    header: "CSS Stringify",
    messageText: e
   });
  }
 } catch (e) {
  t.push({
   level: "warn",
   type: "css",
   header: "CSS Parse",
   messageText: e
  });
 }
};

exports.createWindowFromHtml = createWindowFromHtml;
exports.hydrateDocument = hydrateDocument;
exports.renderToString = renderToString;
exports.serializeDocumentToString = serializeDocumentToString;
